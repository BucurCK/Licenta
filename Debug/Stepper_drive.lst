
Stepper_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000574c  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000024  1ffe8800  0c00574c  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00007fc8  1ffe8824  0c005770  00010824  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000003c0  00000000  00000000  00010828  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007208  00000000  00000000  00010be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001057  00000000  00000000  00017df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020c7  00000000  00000000  00018e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d38  00000000  00000000  0001af10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001db3  00000000  00000000  0001bc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012d0  00000000  00000000  0001d9fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0001eccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000061c  00000000  00000000  0001ef7b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 29 07 00 08 99 02 00 08     ........).......
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 89 19 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 15 1b 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
    ldr r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
    cmp r4, r5
 800020c:	42ac      	cmp	r4, r5
    bge .L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
    ldr r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
    ldr r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
    ldr r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
    subs    r3, #4
 8000216:	3b04      	subs	r3, #4
    ittt    ge
 8000218:	bfa2      	ittt	ge
    ldrge   r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
    strge   r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
    bge .L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

    adds    r4, #12
 8000220:	340c      	adds	r4, #12
    b   .L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
    ldr r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
    ldr r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
    cmp r3, r4
 8000228:	42a3      	cmp	r3, r4
    bge .L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
    ldr r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
    ldr r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
    movs    r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
    subs    r2, #4
 8000232:	3a04      	subs	r2, #4
    itt ge
 8000234:	bfa4      	itt	ge
    strge   r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
    bge .L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

    adds    r3, #8
 800023a:	3308      	adds	r3, #8
    b   .L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00574c 	.word	0x0c00574c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000024 	.word	0x00000024
 8000254:	0c00574c 	.word	0x0c00574c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8824 	.word	0x1ffe8824
 8000264:	00007fc8 	.word	0x00007fc8
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	080002c5 	.word	0x080002c5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
    ldr r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
    ldr r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
    ldr r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
    b   .L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800532d 	.word	0x0800532d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08001b2d 	.word	0x08001b2d

08000298 <BusFault_Handler>:
    .align  1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e003      	b.n	80002b2 <delay+0x16>
  {
    __NOP();
 80002aa:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d3f7      	bcc.n	80002aa <delay+0xe>
  {
    __NOP();
  }
}
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002c4:	b598      	push	{r3, r4, r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <SystemInit+0x1c>)
 80002ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ce:	4614      	mov	r4, r2
 80002d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002d6:	f000 f805 	bl	80002e4 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002da:	f000 f83b 	bl	8000354 <SystemCoreClockSetup>
}
 80002de:	bd98      	pop	{r3, r4, r7, pc}
 80002e0:	2003ffc4 	.word	0x2003ffc4

080002e4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ea:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemCoreSetup+0x64>)
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <SystemCoreSetup+0x68>)
 80002f0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002f2:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002f6:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <SystemCoreSetup+0x6c>)
 8000316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800031a:	3314      	adds	r3, #20
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f023 030f 	bic.w	r3, r3, #15
 8000326:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <SystemCoreSetup+0x6c>)
 8000332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000336:	3314      	adds	r3, #20
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	08000000 	.word	0x08000000
 8000350:	58001000 	.word	0x58001000

08000354 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000358:	4ba4      	ldr	r3, [pc, #656]	; (80005ec <SystemCoreClockSetup+0x298>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d10c      	bne.n	800037e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000364:	4aa1      	ldr	r2, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000366:	4ba1      	ldr	r3, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000370:	bf00      	nop
 8000372:	4b9e      	ldr	r3, [pc, #632]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800037e:	4b9c      	ldr	r3, [pc, #624]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000386:	2b00      	cmp	r3, #0
 8000388:	d009      	beq.n	800039e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800038a:	4a99      	ldr	r2, [pc, #612]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038c:	4b98      	ldr	r3, [pc, #608]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000394:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000396:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800039a:	f7ff ff7f 	bl	800029c <delay>
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800039e:	4a95      	ldr	r2, [pc, #596]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a0:	4b94      	ldr	r3, [pc, #592]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ae:	f7ff ff75 	bl	800029c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003b2:	4a90      	ldr	r2, [pc, #576]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b4:	4b8f      	ldr	r3, [pc, #572]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003c2:	4b8d      	ldr	r3, [pc, #564]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d029      	beq.n	8000422 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003ce:	4a8a      	ldr	r2, [pc, #552]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d0:	4b89      	ldr	r3, [pc, #548]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003dc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003de:	f000 f993 	bl	8000708 <OSCHP_GetFrequency>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b85      	ldr	r3, [pc, #532]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 80003e6:	fba3 2302 	umull	r2, r3, r3, r2
 80003ea:	0d1b      	lsrs	r3, r3, #20
 80003ec:	3b01      	subs	r3, #1
 80003ee:	041b      	lsls	r3, r3, #16
 80003f0:	4981      	ldr	r1, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f2:	4a81      	ldr	r2, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80003fa:	4a7e      	ldr	r2, [pc, #504]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fc:	4b7d      	ldr	r3, [pc, #500]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000406:	4a7b      	ldr	r2, [pc, #492]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000408:	4b7a      	ldr	r3, [pc, #488]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000410:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000412:	bf00      	nop
 8000414:	4b77      	ldr	r3, [pc, #476]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800041c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000420:	d1f8      	bne.n	8000414 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000422:	4a74      	ldr	r2, [pc, #464]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000424:	4b73      	ldr	r3, [pc, #460]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800042e:	4a71      	ldr	r2, [pc, #452]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000430:	4b70      	ldr	r3, [pc, #448]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800043a:	4b6e      	ldr	r3, [pc, #440]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800043c:	4a70      	ldr	r2, [pc, #448]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800043e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_24MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000440:	4a6c      	ldr	r2, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000442:	4b6c      	ldr	r3, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800044a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800044c:	4a69      	ldr	r2, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800044e:	4b69      	ldr	r3, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000458:	4a66      	ldr	r2, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045a:	4b66      	ldr	r3, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000462:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000464:	bf00      	nop
 8000466:	4b63      	ldr	r3, [pc, #396]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f9      	beq.n	8000466 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock at 24MHz*/
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000472:	4a60      	ldr	r2, [pc, #384]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000474:	4b5f      	ldr	r3, [pc, #380]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800047e:	bf00      	nop
 8000480:	4b5c      	ldr	r3, [pc, #368]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d1f9      	bne.n	8000480 <SystemCoreClockSetup+0x12c>
  }

#endif /* ENABLE_PLL */

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->SYSCLKCR = __SYSCLKCR;
 800048c:	4b5d      	ldr	r3, [pc, #372]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800048e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000492:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = __PBCLKCR;
 8000494:	4b5b      	ldr	r3, [pc, #364]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 8000496:	2200      	movs	r2, #0
 8000498:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = __CPUCLKCR;
 800049a:	4b5a      	ldr	r3, [pc, #360]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = __CCUCLKCR;
 80004a0:	4b58      	ldr	r3, [pc, #352]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = __WDTCLKCR;
 80004a6:	4b57      	ldr	r3, [pc, #348]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = __EBUCLKCR;
 80004ac:	4b55      	ldr	r3, [pc, #340]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ae:	2203      	movs	r2, #3
 80004b0:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = __USBCLKCR;
 80004b2:	4b54      	ldr	r3, [pc, #336]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004b4:	4a54      	ldr	r2, [pc, #336]	; (8000608 <SystemCoreClockSetup+0x2b4>)
 80004b6:	619a      	str	r2, [r3, #24]
  SCU_CLK->ECATCLKCR = __ECATCLKCR;
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	639a      	str	r2, [r3, #56]	; 0x38
  SCU_CLK->EXTCLKCR = __EXTCLKCR;
 80004be:	4b51      	ldr	r3, [pc, #324]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004c0:	4a52      	ldr	r2, [pc, #328]	; (800060c <SystemCoreClockSetup+0x2b8>)
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004c4:	4a4b      	ldr	r2, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c6:	4b4b      	ldr	r3, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ce:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d0:	4b48      	ldr	r3, [pc, #288]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004d2:	4a4f      	ldr	r2, [pc, #316]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004d4:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_48MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_48MHZ);
 80004d6:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80004da:	f7ff fedf 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004de:	4b45      	ldr	r3, [pc, #276]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004e0:	4a4c      	ldr	r2, [pc, #304]	; (8000614 <SystemCoreClockSetup+0x2c0>)
 80004e2:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_72MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_72MHZ);
 80004e4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80004e8:	f7ff fed8 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004ec:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004ee:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <SystemCoreClockSetup+0x2c4>)
 80004f0:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_96MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_96MHZ);
 80004f2:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80004f6:	f7ff fed1 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004fa:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004fc:	4a47      	ldr	r2, [pc, #284]	; (800061c <SystemCoreClockSetup+0x2c8>)
 80004fe:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_120MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_120MHZ);
 8000500:	f241 7070 	movw	r0, #6000	; 0x1770
 8000504:	f7ff feca 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000508:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800050a:	4a45      	ldr	r2, [pc, #276]	; (8000620 <SystemCoreClockSetup+0x2cc>)
 800050c:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_144MHZ);
 800050e:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8000512:	f7ff fec3 	bl	800029c <delay>

#endif /* ENABLE_PLL */

#if ENABLE_USBPLL
  /* enable USB PLL first */
  SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000516:	4a37      	ldr	r2, [pc, #220]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000520:	f023 0302 	bic.w	r3, r3, #2
 8000524:	6153      	str	r3, [r2, #20]

  /* USB PLL uses as clock input the OSC_HP */
  /* check and if not already running enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000526:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d031      	beq.n	8000596 <SystemCoreClockSetup+0x242>
  {
    /* check if Main PLL is switched on for OSC WDG*/
    if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <SystemCoreClockSetup+0x2d0>)
 8000538:	4013      	ands	r3, r2
 800053a:	2b00      	cmp	r3, #0
 800053c:	d007      	beq.n	800054e <SystemCoreClockSetup+0x1fa>
    {
      /* enable PLL first */
      SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800053e:	4a2d      	ldr	r2, [pc, #180]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000548:	f023 0302 	bic.w	r3, r3, #2
 800054c:	6053      	str	r3, [r2, #4]
    }

    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800054e:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000558:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800055c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800055e:	f000 f8d3 	bl	8000708 <OSCHP_GetFrequency>
 8000562:	4602      	mov	r2, r0
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 8000566:	fba3 2302 	umull	r2, r3, r3, r2
 800056a:	0d1b      	lsrs	r3, r3, #20
 800056c:	3b01      	subs	r3, #1
 800056e:	041b      	lsls	r3, r3, #16
 8000570:	4921      	ldr	r1, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000572:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000574:	6852      	ldr	r2, [r2, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	604b      	str	r3, [r1, #4]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800057a:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000584:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000586:	bf00      	nop
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000590:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000594:	d1f8      	bne.n	8000588 <SystemCoreClockSetup+0x234>
    }
  }

  /* Setup USB PLL */
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b0:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <SystemCoreClockSetup+0x2d4>)
 80005b2:	615a      	str	r2, [r3, #20]
                        (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005be:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f023 0310 	bic.w	r3, r3, #16
 80005ca:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80005d8:	bf00      	nop
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005dc:	691b      	ldr	r3, [r3, #16]
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <SystemCoreClockSetup+0x286>
    /* wait for PLL Lock */
  }
#endif

  /* Enable selected clocks */
  SCU_CLK->CLKSET = __CLKSET;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	e01f      	b.n	800062c <SystemCoreClockSetup+0x2d8>
 80005ec:	50004200 	.word	0x50004200
 80005f0:	50004400 	.word	0x50004400
 80005f4:	50004710 	.word	0x50004710
 80005f8:	50004700 	.word	0x50004700
 80005fc:	6b5fca6b 	.word	0x6b5fca6b
 8000600:	010b2f00 	.word	0x010b2f00
 8000604:	50004600 	.word	0x50004600
 8000608:	00010005 	.word	0x00010005
 800060c:	01200003 	.word	0x01200003
 8000610:	01052f00 	.word	0x01052f00
 8000614:	01032f00 	.word	0x01032f00
 8000618:	01022f00 	.word	0x01022f00
 800061c:	01012f00 	.word	0x01012f00
 8000620:	01002f00 	.word	0x01002f00
 8000624:	00010002 	.word	0x00010002
 8000628:	02006300 	.word	0x02006300
 800062c:	605a      	str	r2, [r3, #4]
  PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif
#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800062e:	f000 f801 	bl	8000634 <SystemCoreClockUpdate>
}
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d03e      	beq.n	80006c4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e002      	b.n	800065e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000658:	f000 f856 	bl	8000708 <OSCHP_GetFrequency>
 800065c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	2b00      	cmp	r3, #0
 8000668:	d020      	beq.n	80006ac <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000672:	0e1b      	lsrs	r3, r3, #24
 8000674:	3301      	adds	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800068e:	0c1b      	lsrs	r3, r3, #16
 8000690:	3301      	adds	r3, #1
 8000692:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00d      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e001      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 80006c6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	3301      	adds	r3, #1
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <SystemCoreClockUpdate+0xd0>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	50004600 	.word	0x50004600
 80006fc:	50004710 	.word	0x50004710
 8000700:	016e3600 	.word	0x016e3600
 8000704:	2003ffc0 	.word	0x2003ffc0

08000708 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <OSCHP_GetFrequency+0x10>)
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	00b71b00 	.word	0x00b71b00

0800071c <_init>:
  }
}

/* Init */
void _init(void)
{}
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <ERU0_0_IRQHandler>:
#include "stdlib.h"
#include "transform.h"
#include "io.h"

/*Interrupt function for Eru0 used with ENCZ component of encoder -- NOT USED*/
void ERU0_0_IRQHandler(void) {}
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <encoder_init>:

/*
 * Initialize CCU40 and POSIF0
 */
void encoder_init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	/*
	 * Pin set up
	 */
	/*Digital Pad activated*/
	PORT14->PDISC &= ~(PORTS_PDISC_5_MSK);
 8000738:	4a68      	ldr	r2, [pc, #416]	; (80008dc <encoder_init+0x1a8>)
 800073a:	4b68      	ldr	r3, [pc, #416]	; (80008dc <encoder_init+0x1a8>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	f023 0320 	bic.w	r3, r3, #32
 8000742:	6613      	str	r3, [r2, #96]	; 0x60
	PORT14->PDISC &= ~(PORTS_PDISC_6_MSK);
 8000744:	4a65      	ldr	r2, [pc, #404]	; (80008dc <encoder_init+0x1a8>)
 8000746:	4b65      	ldr	r3, [pc, #404]	; (80008dc <encoder_init+0x1a8>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800074e:	6613      	str	r3, [r2, #96]	; 0x60
	PORT14->PDISC &= ~(PORTS_PDISC_7_MSK);
 8000750:	4a62      	ldr	r2, [pc, #392]	; (80008dc <encoder_init+0x1a8>)
 8000752:	4b62      	ldr	r3, [pc, #392]	; (80008dc <encoder_init+0x1a8>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800075a:	6613      	str	r3, [r2, #96]	; 0x60

	/*POSIF Pins*/
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC5_POS); // P14.5 ENCZ
 800075c:	4a5f      	ldr	r2, [pc, #380]	; (80008dc <encoder_init+0x1a8>)
 800075e:	4b5f      	ldr	r3, [pc, #380]	; (80008dc <encoder_init+0x1a8>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000766:	6153      	str	r3, [r2, #20]
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC6_POS); // P14.6	ENCB
 8000768:	4a5c      	ldr	r2, [pc, #368]	; (80008dc <encoder_init+0x1a8>)
 800076a:	4b5c      	ldr	r3, [pc, #368]	; (80008dc <encoder_init+0x1a8>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000772:	6153      	str	r3, [r2, #20]
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC7_POS); // P14.7	ENCA
 8000774:	4a59      	ldr	r2, [pc, #356]	; (80008dc <encoder_init+0x1a8>)
 8000776:	4b59      	ldr	r3, [pc, #356]	; (80008dc <encoder_init+0x1a8>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6153      	str	r3, [r2, #20]

	/*
	 * Configure CCU40
	 */
	/* Reset CCU40*/
	SCU_RESET->PRSET0 |= (SCU_PRESET0_CCU40RS_MSK);
 8000780:	4a57      	ldr	r2, [pc, #348]	; (80008e0 <encoder_init+0x1ac>)
 8000782:	4b57      	ldr	r3, [pc, #348]	; (80008e0 <encoder_init+0x1ac>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6113      	str	r3, [r2, #16]

	/* Clear reset of CCU40 */
	SCU_RESET->PRCLR0 |= (SCU_PRCLR0_CCU40RS_MSK);
 800078c:	4a54      	ldr	r2, [pc, #336]	; (80008e0 <encoder_init+0x1ac>)
 800078e:	4b54      	ldr	r3, [pc, #336]	; (80008e0 <encoder_init+0x1ac>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6153      	str	r3, [r2, #20]

	/* Enable CCU4 via clkset */
	SCU_CLK->CLKSET |= SCU_CLKSET_CCUCEN_MSK;
 8000798:	4a52      	ldr	r2, [pc, #328]	; (80008e4 <encoder_init+0x1b0>)
 800079a:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <encoder_init+0x1b0>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6053      	str	r3, [r2, #4]

	/* Enable prescaler */
	CCU40->GIDLC |= CCU4_GIDLC_SPRB_MSK;
 80007a4:	4a50      	ldr	r2, [pc, #320]	; (80008e8 <encoder_init+0x1b4>)
 80007a6:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <encoder_init+0x1b4>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ae:	60d3      	str	r3, [r2, #12]

	/*Set clock as Module Clock*/
	CCU40->GCTRL &= ~(CCU4_GCTRL_PCIS_MOD_CLK_MSK << CCU4_GCTRL_PCIS_POS);
 80007b0:	4a4d      	ldr	r2, [pc, #308]	; (80008e8 <encoder_init+0x1b4>)
 80007b2:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <encoder_init+0x1b4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007ba:	6013      	str	r3, [r2, #0]

	/*Set Counting Mode - Edge Aligned*/
	CCU40_CC40->TC &= ~(CCU4_TC_TCM_EDGE_MSK);
 80007bc:	4a4b      	ldr	r2, [pc, #300]	; (80008ec <encoder_init+0x1b8>)
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <encoder_init+0x1b8>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f023 0301 	bic.w	r3, r3, #1
 80007c6:	6153      	str	r3, [r2, #20]

	/*Period Value*/
	CCU40_CC40->PRS |= (CCU4_CC4_PRS_VALUE);
 80007c8:	4a48      	ldr	r2, [pc, #288]	; (80008ec <encoder_init+0x1b8>)
 80007ca:	4b48      	ldr	r3, [pc, #288]	; (80008ec <encoder_init+0x1b8>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80007d2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80007d6:	6353      	str	r3, [r2, #52]	; 0x34

	/*Shadow transfer for PR*/
	CCU40->GCSS |= (CCU4_GCSS_S0SE_MSK);
 80007d8:	4a43      	ldr	r2, [pc, #268]	; (80008e8 <encoder_init+0x1b4>)
 80007da:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <encoder_init+0x1b4>)
 80007dc:	691b      	ldr	r3, [r3, #16]
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6113      	str	r3, [r2, #16]

	/*
	 * Configure POSIF0
	 */
	/* Reset POSIF0*/
	SCU_RESET->PRSET0 |= (SCU_PRESET0_POSIF0RS_MSK);
 80007e4:	4a3e      	ldr	r2, [pc, #248]	; (80008e0 <encoder_init+0x1ac>)
 80007e6:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <encoder_init+0x1ac>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ee:	6113      	str	r3, [r2, #16]

	/* Clear reset of POSIF0*/
	SCU_RESET->PRCLR0 |= (SCU_PRCLR0_POSIF0RS_MSK);
 80007f0:	4a3b      	ldr	r2, [pc, #236]	; (80008e0 <encoder_init+0x1ac>)
 80007f2:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <encoder_init+0x1ac>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fa:	6153      	str	r3, [r2, #20]

	/*Quadrature Decoder Mode enabled*/
	POSIF0->PCONF |= POSIF_PCONF_FSEL_QUAD_MSK;
 80007fc:	4a3c      	ldr	r2, [pc, #240]	; (80008f0 <encoder_init+0x1bc>)
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <encoder_init+0x1bc>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6013      	str	r3, [r2, #0]

	/*Phase/Hal selector as INxB for the used pins*/
	POSIF0->PCONF |= (POSIF_IN_B_MSK << POSIF_PCONF_INSEL0_POS);
 8000808:	4a39      	ldr	r2, [pc, #228]	; (80008f0 <encoder_init+0x1bc>)
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <encoder_init+0x1bc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000812:	6013      	str	r3, [r2, #0]
	POSIF0->PCONF |= (POSIF_IN_B_MSK << POSIF_PCONF_INSEL1_POS);
 8000814:	4a36      	ldr	r2, [pc, #216]	; (80008f0 <encoder_init+0x1bc>)
 8000816:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <encoder_init+0x1bc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800081e:	6013      	str	r3, [r2, #0]
	POSIF0->PCONF |= (POSIF_IN_B_MSK << POSIF_PCONF_INSEL2_POS);
 8000820:	4a33      	ldr	r2, [pc, #204]	; (80008f0 <encoder_init+0x1bc>)
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <encoder_init+0x1bc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082a:	6013      	str	r3, [r2, #0]

	/*Low Pass filter configuration - 4 clock cycles*/
	POSIF0->PCONF |= (POSIF_LOW_PASS_4 << POSIF_PCONF_LPC_POS);
 800082c:	4a30      	ldr	r2, [pc, #192]	; (80008f0 <encoder_init+0x1bc>)
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <encoder_init+0x1bc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000836:	6013      	str	r3, [r2, #0]

	/*
	 * POSIF to CC40
	 */
	/*Input selector configuration*/
	CCU40_CC40->INS |= (CCU4_IN_E_MSK << CCU4_INS_EV0IS_POS); // Event 0 for Out0 on rising edge
 8000838:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <encoder_init+0x1b8>)
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <encoder_init+0x1b8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6013      	str	r3, [r2, #0]
	CCU40_CC40->INS |= (RISING_EDGE_ENC << CCU4_INS_EV0EM_POS);
 8000844:	4a29      	ldr	r2, [pc, #164]	; (80008ec <encoder_init+0x1b8>)
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <encoder_init+0x1b8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800084e:	6013      	str	r3, [r2, #0]
	CCU40_CC40->INS |= (CCU4_IN_F_MSK << CCU4_INS_EV1IS_POS); // Event 1 for Out1 on low level
 8000850:	4a26      	ldr	r2, [pc, #152]	; (80008ec <encoder_init+0x1b8>)
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <encoder_init+0x1b8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800085a:	6013      	str	r3, [r2, #0]
	//	CCU40_CC40->INS |= (RISING_EDGE_ENC << CCU4_INS_EV1EM_POS);
	CCU40_CC40->INS |= (0x1UL << CCU4_CC4_INS_EV1LM_Pos);
 800085c:	4a23      	ldr	r2, [pc, #140]	; (80008ec <encoder_init+0x1b8>)
 800085e:	4b23      	ldr	r3, [pc, #140]	; (80008ec <encoder_init+0x1b8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000866:	6013      	str	r3, [r2, #0]

	/*Connection Matrix Control*/
	CCU40_CC40->CMC |= (CCU4_EVENT_0_MSK << CCU4_CMC_CNTS_POS); // Event0 set up for Counting
 8000868:	4a20      	ldr	r2, [pc, #128]	; (80008ec <encoder_init+0x1b8>)
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <encoder_init+0x1b8>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6053      	str	r3, [r2, #4]
	CCU40_CC40->CMC |= (CCU4_EVENT_1_MSK << CCU4_CMC_UDS_POS);	// Event1 set up for Direction
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <encoder_init+0x1b8>)
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <encoder_init+0x1b8>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800087e:	6053      	str	r3, [r2, #4]
	/*
	 * Stop and Start POSIF/CC40
	 */
	/*Stop and reset the state machine of the quadrature decoder and the current status of the Hall sensor - POSIF*/
	POSIF0->PRUNC |= POSIF_PRUNC_CRB_MSK; // Stops POSIF
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <encoder_init+0x1bc>)
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <encoder_init+0x1bc>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	60d3      	str	r3, [r2, #12]
	POSIF0->PRUNC |= POSIF_PRUNC_CSM_MSK; // Resets POSIF
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <encoder_init+0x1bc>)
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <encoder_init+0x1bc>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	60d3      	str	r3, [r2, #12]

	/*Exit Idle CC40*/
	CCU40->GIDLC |= (CCU4_GIDLC_CS0I_MSK);
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <encoder_init+0x1b4>)
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <encoder_init+0x1b4>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	60d3      	str	r3, [r2, #12]

	/*Stop and clear timer*/
	CCU40_CC40->TCCLR |= (uint32_t)(CCU4_CC4_TCCLR_TRBC_Msk);
 80008a4:	4a11      	ldr	r2, [pc, #68]	; (80008ec <encoder_init+0x1b8>)
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <encoder_init+0x1b8>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6113      	str	r3, [r2, #16]
	CCU40_CC40->TCCLR |= (uint32_t)(CCU4_CC4_TCCLR_TCC_Msk);
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <encoder_init+0x1b8>)
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <encoder_init+0x1b8>)
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	6113      	str	r3, [r2, #16]

	/*Start CCU40*/
	CCU40_CC40->TCSET |= (CCU4_TCSET_TRBS_MSK);
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <encoder_init+0x1b8>)
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <encoder_init+0x1b8>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	60d3      	str	r3, [r2, #12]

	/*Start POSIF0*/
	POSIF0->PRUNS |= (POSIF_PRUNS_SRB_MSK);
 80008c8:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <encoder_init+0x1bc>)
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <encoder_init+0x1bc>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6093      	str	r3, [r2, #8]

	/*Saves the first value of the timer*/
	//	timer_value_old = CCU40_CC40->TIMER;
	//	timer_value_old_fast = CCU40_CC40->TIMER;
}
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	48028e00 	.word	0x48028e00
 80008e0:	50004400 	.word	0x50004400
 80008e4:	50004600 	.word	0x50004600
 80008e8:	4000c000 	.word	0x4000c000
 80008ec:	4000c100 	.word	0x4000c100
 80008f0:	40028000 	.word	0x40028000

080008f4 <current_filter>:
/*
 *	y = k*(x - y_last) + y_last
 *	First order signal filter
 */
void current_filter(float filter_input)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	filter_output = k * (filter_input - filter_output_old) + filter_output_old;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <current_filter+0x44>)
 80008fe:	edd3 7a00 	vldr	s15, [r3]
 8000902:	ed97 7a01 	vldr	s14, [r7, #4]
 8000906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <current_filter+0x48>)
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <current_filter+0x44>)
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <current_filter+0x4c>)
 8000920:	edc3 7a00 	vstr	s15, [r3]
	filter_output_old = filter_output;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <current_filter+0x4c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a03      	ldr	r2, [pc, #12]	; (8000938 <current_filter+0x44>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	1ffe8828 	.word	0x1ffe8828
 800093c:	1ffe8804 	.word	0x1ffe8804
 8000940:	1ffe8824 	.word	0x1ffe8824

08000944 <current_protection>:

/*
 *	Stops current output if above i_prot for TIME_TRIGGER_FAIL time
 */
void current_protection(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	current_filter((i_alpha * i_alpha) + (i_beta * i_beta));
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <current_protection+0xa0>)
 800094a:	ed93 7a00 	vldr	s14, [r3]
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <current_protection+0xa0>)
 8000950:	edd3 7a00 	vldr	s15, [r3]
 8000954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <current_protection+0xa4>)
 800095a:	edd3 6a00 	vldr	s13, [r3]
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <current_protection+0xa4>)
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800096c:	ee17 0a90 	vmov	r0, s15
 8000970:	f7ff ffc0 	bl	80008f4 <current_filter>
	if (filter_output > (i_prot * i_prot))
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <current_protection+0xa8>)
 8000976:	ed93 7a00 	vldr	s14, [r3]
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <current_protection+0xa8>)
 800097c:	edd3 7a00 	vldr	s15, [r3]
 8000980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <current_protection+0xac>)
 8000986:	edd3 7a00 	vldr	s15, [r3]
 800098a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800098e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000992:	d522      	bpl.n	80009da <current_protection+0x96>
	{
		counter_timer_prot++;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <current_protection+0xb0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <current_protection+0xb0>)
 800099c:	6013      	str	r3, [r2, #0]

		if (counter_timer_prot > TIME_TRIGGER_FAIL)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <current_protection+0xb0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009a6:	d91b      	bls.n	80009e0 <current_protection+0x9c>
		{
			drive_disabled();
 80009a8:	f003 f826 	bl	80039f8 <drive_disabled>
			drive_status |= DRIVE_STATUS_PROT_MSK; // set current_prot_flag
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <current_protection+0xb4>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80009b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <current_protection+0xb4>)
 80009bc:	801a      	strh	r2, [r3, #0]
			drive_status &= CLEAR_DRIVE_STATUS;	   // set STATUS bits to 0 -> go to state 0
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <current_protection+0xb4>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	f023 030f 	bic.w	r3, r3, #15
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <current_protection+0xb4>)
 80009ca:	801a      	strh	r2, [r3, #0]
			counter_timer_prot = 0;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <current_protection+0xb0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
			drive_command_old = 0; // reset old status of drive_command
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <current_protection+0xb8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	801a      	strh	r2, [r3, #0]
 80009d8:	e002      	b.n	80009e0 <current_protection+0x9c>
		}
	}
	else
	{
		counter_timer_prot = 0;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <current_protection+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
	}
}
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	1fff07cc 	.word	0x1fff07cc
 80009e8:	1fff07e4 	.word	0x1fff07e4
 80009ec:	1ffe8800 	.word	0x1ffe8800
 80009f0:	1ffe8824 	.word	0x1ffe8824
 80009f4:	1ffe882c 	.word	0x1ffe882c
 80009f8:	1fff0676 	.word	0x1fff0676
 80009fc:	1fff067a 	.word	0x1fff067a

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_EnableIRQ+0x34>)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	095b      	lsrs	r3, r3, #5
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	f002 021f 	and.w	r2, r2, #31
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0c      	blt.n	8000a64 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	4909      	ldr	r1, [pc, #36]	; (8000a70 <__NVIC_ClearPendingIRQ+0x38>)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	095b      	lsrs	r3, r3, #5
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	f002 021f 	and.w	r2, r2, #31
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	3360      	adds	r3, #96	; 0x60
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	4909      	ldr	r1, [pc, #36]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	0092      	lsls	r2, r2, #2
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
  }
}
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <adc_init>:

/*
	Initialize VADC unit
*/
void adc_init(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	/*Pin setup - P14.0 P14.3 P14.4*/
	PORT14->IOCR0 |= (INPUT_PULL_UP_MSK << PORT14_IOCR0_PC0_POS); // P14.0 - G0CH0				-A
 8000acc:	4ac8      	ldr	r2, [pc, #800]	; (8000df0 <adc_init+0x328>)
 8000ace:	4bc8      	ldr	r3, [pc, #800]	; (8000df0 <adc_init+0x328>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6113      	str	r3, [r2, #16]
	PORT14->IOCR0 |= (INPUT_PULL_UP_MSK << PORT14_IOCR0_PC3_POS); // P14.3 - G1CH3(ALIAS CH0)	-B
 8000ad8:	4ac5      	ldr	r2, [pc, #788]	; (8000df0 <adc_init+0x328>)
 8000ada:	4bc5      	ldr	r3, [pc, #788]	; (8000df0 <adc_init+0x328>)
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6113      	str	r3, [r2, #16]
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC4_POS); // P14.4 - G2CH0				-C
 8000ae4:	4ac2      	ldr	r2, [pc, #776]	; (8000df0 <adc_init+0x328>)
 8000ae6:	4bc2      	ldr	r3, [pc, #776]	; (8000df0 <adc_init+0x328>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6153      	str	r3, [r2, #20]

	/*Disable Gating - enables the clock for VADC */
	SCU_CLK->CGATCLR0 |= SCU_CGATCLR0_VADC_MSK;
 8000af0:	4ac0      	ldr	r2, [pc, #768]	; (8000df4 <adc_init+0x32c>)
 8000af2:	4bc0      	ldr	r3, [pc, #768]	; (8000df4 <adc_init+0x32c>)
 8000af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6493      	str	r3, [r2, #72]	; 0x48

	/*Clear reset*/
	//	SCU_RESET->PRSET0 |= SCU_PRCLR0_VADCRS_MSK
	SCU_RESET->PRCLR0 |= SCU_PRCLR0_VADCRS_MSK;
 8000afc:	4abe      	ldr	r2, [pc, #760]	; (8000df8 <adc_init+0x330>)
 8000afe:	4bbe      	ldr	r3, [pc, #760]	; (8000df8 <adc_init+0x330>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6153      	str	r3, [r2, #20]

	/*Enable Module Clock - write 0 to enable*/
	VADC->CLC &= ~VADC_CLC_DISR_MSK;
 8000b08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f023 0301 	bic.w	r3, r3, #1
 8000b16:	6013      	str	r3, [r2, #0]

	/*Set Frequency to 36MHz by dividing the F_ADC/4 -> 144/4=36 --- NEED TO ALSO WRITE INTO ENABLE BIT*/
	//	VADC->GLOBCFG = (uint32_t)((VADC_GLOBCGF_DIVA_4_MSK << VADC_GLOBCGF_DIVA_POS) | (VADC_GLOBCFG_DIVWC));

	/*Configure Conversion resolution - 12BITS  --- GLOBAL*/
	VADC->GLOBICLASS[0] &= ~(VADC_GLOBICLASS0_CMS_12_MSK << VADC_GLOBICLASS0_CMS_POS);
 8000b18:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	/*Configure Sample and hold time - 5clocks --- GLOBAL*/
	VADC->GLOBICLASS[0] |= (VADC_GLOBICLASS0_STCS_5_MSK << VADC_GLOBICLASS0_STCS_POS);
 8000b2c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b38:	f043 0305 	orr.w	r3, r3, #5
 8000b3c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	/*Power Up VADC G0/G1/G2 for calibration*/
	/*Enable all Analog Converters*/
	VADC_G0->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000b40:	4aae      	ldr	r2, [pc, #696]	; (8000dfc <adc_init+0x334>)
 8000b42:	4bae      	ldr	r3, [pc, #696]	; (8000dfc <adc_init+0x334>)
 8000b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b48:	f043 0303 	orr.w	r3, r3, #3
 8000b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G1->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000b50:	4aab      	ldr	r2, [pc, #684]	; (8000e00 <adc_init+0x338>)
 8000b52:	4bab      	ldr	r3, [pc, #684]	; (8000e00 <adc_init+0x338>)
 8000b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b58:	f043 0303 	orr.w	r3, r3, #3
 8000b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G2->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000b60:	4aa8      	ldr	r2, [pc, #672]	; (8000e04 <adc_init+0x33c>)
 8000b62:	4ba8      	ldr	r3, [pc, #672]	; (8000e04 <adc_init+0x33c>)
 8000b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b68:	f043 0303 	orr.w	r3, r3, #3
 8000b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*StartUp Calibration*/
	VADC->GLOBCFG |= ENABLE << VADC_GLOBCFG_SUCAL_POS;
 8000b70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*Wait for calibration to finish*/
	while ((VADC_G0->ARBCFG & VADC_ARBCFG_CAL_MSK) && (VADC_G1->ARBCFG & VADC_ARBCFG_CAL_MSK) && (VADC_G2->ARBCFG & VADC_ARBCFG_CAL_MSK))
 8000b84:	bf00      	nop
 8000b86:	4b9d      	ldr	r3, [pc, #628]	; (8000dfc <adc_init+0x334>)
 8000b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00d      	beq.n	8000bb0 <adc_init+0xe8>
 8000b94:	4b9a      	ldr	r3, [pc, #616]	; (8000e00 <adc_init+0x338>)
 8000b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d006      	beq.n	8000bb0 <adc_init+0xe8>
 8000ba2:	4b98      	ldr	r3, [pc, #608]	; (8000e04 <adc_init+0x33c>)
 8000ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1ea      	bne.n	8000b86 <adc_init+0xbe>

	/*Configure the conversion kernel*/

	/*Slave SetUp - G1/G2*/
	/*Disable arbitration*/
	VADC_G1->ARBPR &= ~(DISABLE << VADC_ARBPR_ASEN0_POS);
 8000bb0:	4a93      	ldr	r2, [pc, #588]	; (8000e00 <adc_init+0x338>)
 8000bb2:	4b93      	ldr	r3, [pc, #588]	; (8000e00 <adc_init+0x338>)
 8000bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR &= ~(DISABLE << VADC_ARBPR_ASEN0_POS);
 8000bc0:	4a90      	ldr	r2, [pc, #576]	; (8000e04 <adc_init+0x33c>)
 8000bc2:	4b90      	ldr	r3, [pc, #576]	; (8000e04 <adc_init+0x33c>)
 8000bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bcc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Set maximum priority */
	VADC_G1->ARBPR |= VADC_ARBPR_PRIO0_MAX_MSK;
 8000bd0:	4a8b      	ldr	r2, [pc, #556]	; (8000e00 <adc_init+0x338>)
 8000bd2:	4b8b      	ldr	r3, [pc, #556]	; (8000e00 <adc_init+0x338>)
 8000bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bd8:	f043 0303 	orr.w	r3, r3, #3
 8000bdc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= VADC_ARBPR_PRIO0_MAX_MSK;
 8000be0:	4a88      	ldr	r2, [pc, #544]	; (8000e04 <adc_init+0x33c>)
 8000be2:	4b88      	ldr	r3, [pc, #544]	; (8000e04 <adc_init+0x33c>)
 8000be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000be8:	f043 0303 	orr.w	r3, r3, #3
 8000bec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	//	/*External Trigger Input Selection - Trigger on Input J (CCU80.SR3)*/
	//	VADC_G1->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTSEL_J_MSK << VADC_QCTRL0_XTSEL_POS);
	//	VADC_G2->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTSEL_J_MSK << VADC_QCTRL0_XTSEL_POS);

	/*Enable interruption of other running conversions*/
	VADC_G1->ARBPR |= VADC_ARBPR_CSM0_MSK;
 8000bf0:	4a83      	ldr	r2, [pc, #524]	; (8000e00 <adc_init+0x338>)
 8000bf2:	4b83      	ldr	r3, [pc, #524]	; (8000e00 <adc_init+0x338>)
 8000bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= VADC_ARBPR_CSM0_MSK;
 8000c00:	4a80      	ldr	r2, [pc, #512]	; (8000e04 <adc_init+0x33c>)
 8000c02:	4b80      	ldr	r3, [pc, #512]	; (8000e04 <adc_init+0x33c>)
 8000c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Enable arbitration*/
	VADC_G1->ARBPR |= (ENABLE << VADC_ARBPR_ASEN0_POS);
 8000c10:	4a7b      	ldr	r2, [pc, #492]	; (8000e00 <adc_init+0x338>)
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <adc_init+0x338>)
 8000c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= (ENABLE << VADC_ARBPR_ASEN0_POS);
 8000c20:	4a78      	ldr	r2, [pc, #480]	; (8000e04 <adc_init+0x33c>)
 8000c22:	4b78      	ldr	r3, [pc, #480]	; (8000e04 <adc_init+0x33c>)
 8000c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Master SetUp - G0*/
	/*Disable arbitration*/
	VADC_G0->ARBPR &= ~(DISABLE << VADC_ARBPR_ASEN0_POS);
 8000c30:	4a72      	ldr	r2, [pc, #456]	; (8000dfc <adc_init+0x334>)
 8000c32:	4b72      	ldr	r3, [pc, #456]	; (8000dfc <adc_init+0x334>)
 8000c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Set maximum priority */
	VADC_G0->ARBPR |= VADC_ARBPR_PRIO0_MAX_MSK;
 8000c40:	4a6e      	ldr	r2, [pc, #440]	; (8000dfc <adc_init+0x334>)
 8000c42:	4b6e      	ldr	r3, [pc, #440]	; (8000dfc <adc_init+0x334>)
 8000c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c48:	f043 0303 	orr.w	r3, r3, #3
 8000c4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Enable writing in TMEN - Timer mode for equidistant sampling enabled*/
	VADC_G0->QCTRL0 |= (ENABLE << VADC_QCTRL0_TMWC_POS) | (ENABLE << VADC_QCTRL0_TMEN_POS);
 8000c50:	4a6a      	ldr	r2, [pc, #424]	; (8000dfc <adc_init+0x334>)
 8000c52:	4b6a      	ldr	r3, [pc, #424]	; (8000dfc <adc_init+0x334>)
 8000c54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c58:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 8000c5c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	/*Enable writing in XTMODE and XTSEL */
	/*Trigger Operating Mode - Trigger event upon any edge*/
	VADC_G0->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTMODE_ANY_MSK << VADC_QCTRL0_XTMODE_POS);
 8000c60:	4a66      	ldr	r2, [pc, #408]	; (8000dfc <adc_init+0x334>)
 8000c62:	4b66      	ldr	r3, [pc, #408]	; (8000dfc <adc_init+0x334>)
 8000c64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c68:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c6c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	/*External Trigger Input Selection - Trigger on Input J (CCU80.SR3)*/
	VADC_G0->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTSEL_J_MSK << VADC_QCTRL0_XTSEL_POS);
 8000c70:	4a62      	ldr	r2, [pc, #392]	; (8000dfc <adc_init+0x334>)
 8000c72:	4b62      	ldr	r3, [pc, #392]	; (8000dfc <adc_init+0x334>)
 8000c74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c78:	f443 4309 	orr.w	r3, r3, #35072	; 0x8900
 8000c7c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	/*Configure the Queue Mode*/
	/*Enable Gate - Conversion requests are issued if a valid conversion request is pending in the queue 0 register or in the backup register*/
	VADC_G0->QMR0 |= VADC_QMR0_ENGT_MSK;
 8000c80:	4a5e      	ldr	r2, [pc, #376]	; (8000dfc <adc_init+0x334>)
 8000c82:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <adc_init+0x334>)
 8000c84:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

	/*Enable External Trigger - The selected edge at the selected trigger input signal REQTR generates the trigger event*/
	VADC_G0->QMR0 |= VADC_QMR0_ENTR_MSK;
 8000c90:	4a5a      	ldr	r2, [pc, #360]	; (8000dfc <adc_init+0x334>)
 8000c92:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <adc_init+0x334>)
 8000c94:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

	/*Enable arbitration*/
	VADC_G0->ARBPR |= (ENABLE << VADC_ARBPR_ASEN0_POS);
 8000ca0:	4a56      	ldr	r2, [pc, #344]	; (8000dfc <adc_init+0x334>)
 8000ca2:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <adc_init+0x334>)
 8000ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Channel configuration*/
	/*Set Channel 0 as priority channel*/
	VADC_G0->CHASS |= VADC_CHASS_ASSCH0_MSK;
 8000cb0:	4a52      	ldr	r2, [pc, #328]	; (8000dfc <adc_init+0x334>)
 8000cb2:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <adc_init+0x334>)
 8000cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	VADC_G1->CHASS |= VADC_CHASS_ASSCH0_MSK;
 8000cc0:	4a4f      	ldr	r2, [pc, #316]	; (8000e00 <adc_init+0x338>)
 8000cc2:	4b4f      	ldr	r3, [pc, #316]	; (8000e00 <adc_init+0x338>)
 8000cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	VADC_G2->CHASS |= VADC_CHASS_ASSCH0_MSK;
 8000cd0:	4a4c      	ldr	r2, [pc, #304]	; (8000e04 <adc_init+0x33c>)
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <adc_init+0x33c>)
 8000cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/*Convert G1CH3 into CH0 with ALIAS*/
	VADC_G1->ALIAS |= 3U << VADC_ALIAS_ALIAS0_POS;
 8000ce0:	4a47      	ldr	r2, [pc, #284]	; (8000e00 <adc_init+0x338>)
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <adc_init+0x338>)
 8000ce4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ce8:	f043 0303 	orr.w	r3, r3, #3
 8000cec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	/*Channel Control - Request a synchronized conversion of this channel (only taken into account for a master)*/
	VADC_G0->CHCTR[0] |= VADC_CHCTR_SYNC_MSK;
 8000cf0:	4a42      	ldr	r2, [pc, #264]	; (8000dfc <adc_init+0x334>)
 8000cf2:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <adc_init+0x334>)
 8000cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Use GLOBAL class0 configuration*/
	VADC_G0->CHCTR[0] |= VADC_CHCTR_ICSEL_GLOBAL_0_MSK;
 8000d00:	4a3e      	ldr	r2, [pc, #248]	; (8000dfc <adc_init+0x334>)
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <adc_init+0x334>)
 8000d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Register used to store results 0-15*/
	VADC_G0->CHCTR[0] |= (1U << VADC_G_CHCTR_RESREG_Pos);
 8000d10:	4a3a      	ldr	r2, [pc, #232]	; (8000dfc <adc_init+0x334>)
 8000d12:	4b3a      	ldr	r3, [pc, #232]	; (8000dfc <adc_init+0x334>)
 8000d14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	VADC_G1->CHCTR[0] |= (1U << VADC_G_CHCTR_RESREG_Pos);
 8000d20:	4a37      	ldr	r2, [pc, #220]	; (8000e00 <adc_init+0x338>)
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <adc_init+0x338>)
 8000d24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	VADC_G2->CHCTR[0] |= (1U << VADC_G_CHCTR_RESREG_Pos);
 8000d30:	4a34      	ldr	r2, [pc, #208]	; (8000e04 <adc_init+0x33c>)
 8000d32:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <adc_init+0x33c>)
 8000d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/*----Channel to be converted									*/
	/*Enable Source Interrupt - (x << VADC_G_QINR0_REQCHNR_Pos)		*/
	/*External Trigger - VADC_QINR0_EXTR_MSK						*/
	/*Automatic refill - VADC_QINR0_RF_MSK							*/
	/*End of conversion trigger - VADC_QINR0_ENSI_MSK				*/
	VADC_G0->QINR0 |= (0U << VADC_G_QINR0_REQCHNR_Pos) | VADC_QINR0_RF_MSK | VADC_QINR0_EXTR_MSK | VADC_QINR0_ENSI_MSK;
 8000d40:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <adc_init+0x334>)
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <adc_init+0x334>)
 8000d44:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000d48:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000d4c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
	;

	/*Configure master and slave channels*/
	/*Power down the VADC */
	VADC_G0->ARBCFG &= ~VADC_ARBCFG_ANONC_MSK;
 8000d50:	4a2a      	ldr	r2, [pc, #168]	; (8000dfc <adc_init+0x334>)
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <adc_init+0x334>)
 8000d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d58:	f023 0303 	bic.w	r3, r3, #3
 8000d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G1->ARBCFG &= ~VADC_ARBCFG_ANONC_MSK;
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <adc_init+0x338>)
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <adc_init+0x338>)
 8000d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d68:	f023 0303 	bic.w	r3, r3, #3
 8000d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G2->ARBCFG &= ~VADC_ARBCFG_ANONC_MSK;
 8000d70:	4a24      	ldr	r2, [pc, #144]	; (8000e04 <adc_init+0x33c>)
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <adc_init+0x33c>)
 8000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d78:	f023 0303 	bic.w	r3, r3, #3
 8000d7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*G0 – master; G1, G2 – slaves */
	VADC_G1->SYNCTR |= VADC_SYNCTR_STSEL_CL1_MSK;
 8000d80:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <adc_init+0x338>)
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <adc_init+0x338>)
 8000d84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	VADC_G2->SYNCTR |= VADC_SYNCTR_STSEL_CL1_MSK;
 8000d90:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <adc_init+0x33c>)
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <adc_init+0x33c>)
 8000d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	/*Evaluate Ready Input Rx - EVALR1*/
	VADC_G0->SYNCTR |= VADC_SYNCTR_EVALR1_MSK;
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <adc_init+0x334>)
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <adc_init+0x334>)
 8000da4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	VADC_G1->SYNCTR |= VADC_SYNCTR_EVALR1_MSK;
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <adc_init+0x338>)
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <adc_init+0x338>)
 8000db4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	VADC_G2->SYNCTR |= VADC_SYNCTR_EVALR1_MSK;
 8000dc0:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <adc_init+0x33c>)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <adc_init+0x33c>)
 8000dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
 8000dcc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	/*Power on the VADC*/
	VADC_G0->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <adc_init+0x334>)
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <adc_init+0x334>)
 8000dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dd8:	f043 0303 	orr.w	r3, r3, #3
 8000ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*Result Register - Service Request Generation Enable*/
	VADC_G0->RCR[1] = VADC_GxRCRy_SRGEN_MSK;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <adc_init+0x334>)
 8000de2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000de6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284

	/*Routes the corresponding event trigger from RESULT group to G0_CH2*/
	VADC_G0->REVNP0 |= (VADC_REVNP0_REV0NP_L2G0_MSK << 4U);
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <adc_init+0x334>)
 8000dec:	e00c      	b.n	8000e08 <adc_init+0x340>
 8000dee:	bf00      	nop
 8000df0:	48028e00 	.word	0x48028e00
 8000df4:	50004600 	.word	0x50004600
 8000df8:	50004400 	.word	0x50004400
 8000dfc:	40004400 	.word	0x40004400
 8000e00:	40004800 	.word	0x40004800
 8000e04:	40004c00 	.word	0x40004c00
 8000e08:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <adc_init+0x418>)
 8000e0a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0

	/*AutoScan for V_mot & V_log*/

	/*Pin Set up*/
	PORT15->IOCR4 |= (INPUT_PULL_UP_MSK << PORT15_IOCR4_PC6_Pos);	 // P15.6 - G2CH6				-Vmot
 8000e16:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <adc_init+0x41c>)
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <adc_init+0x41c>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e20:	6153      	str	r3, [r2, #20]
	PORT14->IOCR12 |= (INPUT_PULL_UP_MSK << PORT14_IOCR12_PC14_Pos); // P14.14- G1CH6				-Vlog
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <adc_init+0x420>)
 8000e24:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <adc_init+0x420>)
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e2c:	61d3      	str	r3, [r2, #28]

	/*Channel Select*/
	VADC_G1->ASSEL |= (ENABLE << VADC_ASSEL_CHSEL6_POS);
 8000e2e:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <adc_init+0x424>)
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <adc_init+0x424>)
 8000e32:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	VADC_G2->ASSEL |= (ENABLE << VADC_ASSEL_CHSEL6_POS);
 8000e3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <adc_init+0x428>)
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <adc_init+0x428>)
 8000e42:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

	/*Define load event*/
	VADC_G1->ASMR |= VADC_ASMR_SCAN_MSK | VADC_ASMR_ENGT_MSK | VADC_ASMR_LDEV_MSK;
 8000e4e:	4a27      	ldr	r2, [pc, #156]	; (8000eec <adc_init+0x424>)
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <adc_init+0x424>)
 8000e52:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e56:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	VADC_G2->ASMR |= VADC_ASMR_SCAN_MSK | VADC_ASMR_ENGT_MSK | VADC_ASMR_LDEV_MSK;
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <adc_init+0x428>)
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <adc_init+0x428>)
 8000e66:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e6a:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

	/*Conversion configuration to use global 0 settings*/
	VADC_G1->CHCTR[6] |= VADC_CHCTR_ICSEL_GLOBAL_0_MSK;
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <adc_init+0x424>)
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <adc_init+0x424>)
 8000e7a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
	VADC_G2->CHCTR[6] |= VADC_CHCTR_ICSEL_GLOBAL_0_MSK;
 8000e86:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <adc_init+0x428>)
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <adc_init+0x428>)
 8000e8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

	/*Enable Arbitration*/
	VADC_G1->ARBPR |= (ENABLE << VADC_ARBPR_ASEN1_POS);
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <adc_init+0x424>)
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <adc_init+0x424>)
 8000e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= (ENABLE << VADC_ARBPR_ASEN1_POS);
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <adc_init+0x428>)
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <adc_init+0x428>)
 8000eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Registers to store results 0-15*/
	VADC_G1->CHCTR[6] |= (14U << VADC_G_CHCTR_RESREG_Pos);
 8000eb6:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <adc_init+0x424>)
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <adc_init+0x424>)
 8000eba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000ebe:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000ec2:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
	VADC_G2->CHCTR[6] |= (14U << VADC_G_CHCTR_RESREG_Pos);
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <adc_init+0x428>)
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <adc_init+0x428>)
 8000eca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000ece:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000ed2:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
}
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	48028f00 	.word	0x48028f00
 8000ee8:	48028e00 	.word	0x48028e00
 8000eec:	40004800 	.word	0x40004800
 8000ef0:	40004c00 	.word	0x40004c00

08000ef4 <interrupt_vadc_init>:

void interrupt_vadc_init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	/*  Reset CCU80 */
	SCU_RESET->PRSET0 |= SCU_RESET_PRSET0_CCU80RS_Msk;
 8000ef8:	4a3d      	ldr	r2, [pc, #244]	; (8000ff0 <interrupt_vadc_init+0xfc>)
 8000efa:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <interrupt_vadc_init+0xfc>)
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f02:	6113      	str	r3, [r2, #16]

	/* Clear reset of CCU80 */
	SCU_RESET->PRCLR0 |= SCU_RESET_PRCLR0_CCU80RS_Msk;
 8000f04:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <interrupt_vadc_init+0xfc>)
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <interrupt_vadc_init+0xfc>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0e:	6153      	str	r3, [r2, #20]

	/* Enable CCU8 via clkset */
	SCU_CLK->CLKSET |= SCU_CLK_CLKSET_CCUCEN_Msk;
 8000f10:	4a38      	ldr	r2, [pc, #224]	; (8000ff4 <interrupt_vadc_init+0x100>)
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <interrupt_vadc_init+0x100>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6053      	str	r3, [r2, #4]

	/* Enable prescaler */
	CCU80->GIDLC |= CCU8_GIDLC_SPRB_Msk;
 8000f1c:	4a36      	ldr	r2, [pc, #216]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	60d3      	str	r3, [r2, #12]

	/*Set timer to center aligned mode */
	CCU80_CC83->TC |= (uint32_t)(CCU8_CC8_TC_TCM_Msk);
 8000f28:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f2a:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6153      	str	r3, [r2, #20]

	/*SHADOW:Define the period value of Compare Channel 1 */
	CCU80_CC83->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_Value << CCU8_CC8_PR_PR_Pos);
 8000f34:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f36:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 8000f3e:	6353      	str	r3, [r2, #52]	; 0x34

	/*SHADOW:Define the compare value of Compare Channel 1 */
	CCU80_CC83->CR1S |= (uint32_t)(CCU80_CC83_CR_Value << CCU8_CC8_CR1_CR1_Pos);
 8000f40:	4a2e      	ldr	r2, [pc, #184]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f46:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 8000f4a:	63d3      	str	r3, [r2, #60]	; 0x3c

	/*Request shadow transfer  */
	CCU80->GCSS |= (CCU8_GCSS_S3SE_Msk);
 8000f4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f56:	6113      	str	r3, [r2, #16]

	/*Enable CC80*/
	CCU80->GIDLC |= (CCU8_GIDLC_CS3I_Msk);
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	60d3      	str	r3, [r2, #12]

	/*Clear the timer run bit(TRBC) and timer (TCC) */
	CCU80_CC83->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_Msk);
 8000f64:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6113      	str	r3, [r2, #16]
	CCU80_CC83->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_Msk);
 8000f70:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	6113      	str	r3, [r2, #16]

	/* Use IN_H for Event 0 on Rising edge
	 * Set start on EVENT 0 on Rising edge
	 */
	CCU80_CC83->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_Pos;
 8000f7c:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f043 0307 	orr.w	r3, r3, #7
 8000f86:	6013      	str	r3, [r2, #0]
	CCU80_CC83->INS |= ACTIVE_ON_RISING_EDGE << CCU8_CC8_INS_EV0EM_Pos;
 8000f88:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
	CCU80_CC83->CMC |= ENABLE << CCU8_CC8_CMC_STRTS_Pos;
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6053      	str	r3, [r2, #4]
	//	CCU80_CC83->INS  |=  15 << CCU8_CC8_INS_EV2IS_Pos;   		//which input is used -> input CC80.IN3P
	//	CCU80_CC83->INS  &=  ~CCU8_CC8_INS_EV2EM_Msk;	 			// clear event active on rising edge
	//	CCU80_CC83->INS  |=  ENABLE  << CCU8_CC8_INS_EV2EM_Pos;	 	// set event active on rising edge

	/*Enables the Channel 1 compare match while counting down interrupt*/
	CCU80_CC83->INTE |= ENABLE << CCU8_CC8_INTE_CMD1E_Pos;
 8000fa0:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

	/*The interrupt generated by compare match of channel 1 is forwarded to CC8ySR3*/
	CCU80_CC83->SRS |= CCU8_SRS_CM1SR_SR3_MSK << CCU8_SRS_CM1SR_POS;
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000fb8:	f043 030c 	orr.w	r3, r3, #12
 8000fbc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

	/*Enable the VADC G0 Line 2 interrupt*/
	NVIC_ClearPendingIRQ(VADC0_G0_2_IRQn);
 8000fc0:	2014      	movs	r0, #20
 8000fc2:	f7ff fd39 	bl	8000a38 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(VADC0_G0_2_IRQn);
 8000fc6:	2014      	movs	r0, #20
 8000fc8:	f7ff fd1a 	bl	8000a00 <__NVIC_EnableIRQ>

	/*Set priority level for VADC to 1(second highest)*/
	NVIC_SetPriority(VADC0_G0_2_IRQn, 1U);
 8000fcc:	2014      	movs	r0, #20
 8000fce:	2101      	movs	r1, #1
 8000fd0:	f7ff fd50 	bl	8000a74 <__NVIC_SetPriority>
	//	NVIC_EnableIRQ(VADC0_G2_2_IRQn);
	//
	//	/*Set priority level for VADC to 1(second highest)*/
	//	NVIC_SetPriority(VADC0_G2_2_IRQn, 10U);

	SCU_GENERAL->CCUCON |= SCU_GENERAL_CCUCON_GSC80_Msk;
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <interrupt_vadc_init+0x10c>)
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <interrupt_vadc_init+0x10c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	64d3      	str	r3, [r2, #76]	; 0x4c
	SCU_GENERAL->CCUCON &= ~SCU_GENERAL_CCUCON_GSC80_Msk;
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <interrupt_vadc_init+0x10c>)
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <interrupt_vadc_init+0x10c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	50004400 	.word	0x50004400
 8000ff4:	50004600 	.word	0x50004600
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020400 	.word	0x40020400
 8001000:	50004000 	.word	0x50004000

08001004 <read_currents>:
	Read currents from VADC
	abc RES[1] | u_mot u_log RES[14]
	'a' is too noisy => computed form 'bc'
*/
void read_currents(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	ia = (VADC_G0->RES[1] & 0xFFFF) * 16 - offset_ia; // 16 bit value -- Very noisy
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <read_currents+0x88>)
 800100a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800100e:	b29b      	uxth	r3, r3
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <read_currents+0x8c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	b29b      	uxth	r3, r3
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <read_currents+0x90>)
 8001022:	801a      	strh	r2, [r3, #0]
	ib = (VADC_G1->RES[1] & 0xFFFF) * 16 - offset_ib; // 16 bit value
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <read_currents+0x94>)
 8001026:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800102a:	b29b      	uxth	r3, r3
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <read_currents+0x98>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	b29b      	uxth	r3, r3
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <read_currents+0x9c>)
 800103e:	801a      	strh	r2, [r3, #0]
	ic = (VADC_G2->RES[1] & 0xFFFF) * 16 - offset_ic; // 16 bit value
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <read_currents+0xa0>)
 8001042:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001046:	b29b      	uxth	r3, r3
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <read_currents+0xa4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b29b      	uxth	r3, r3
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <read_currents+0xa8>)
 800105a:	801a      	strh	r2, [r3, #0]
	ia = -ib;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <read_currents+0x9c>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	425b      	negs	r3, r3
 8001064:	b29b      	uxth	r3, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <read_currents+0x90>)
 800106a:	801a      	strh	r2, [r3, #0]

	u_mot_dig = (VADC_G2->RES[14] & 0xFFFF); // 12 bit value
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <read_currents+0xa0>)
 800106e:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8001072:	b29b      	uxth	r3, r3
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <read_currents+0xac>)
 8001076:	6013      	str	r3, [r2, #0]
	u_log_dig = (VADC_G1->RES[14] & 0xFFFF); // 12 bit value
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <read_currents+0x94>)
 800107a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800107e:	b29b      	uxth	r3, r3
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <read_currents+0xb0>)
 8001082:	6013      	str	r3, [r2, #0]

}
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40004400 	.word	0x40004400
 8001090:	1fff06cc 	.word	0x1fff06cc
 8001094:	1fff06b0 	.word	0x1fff06b0
 8001098:	40004800 	.word	0x40004800
 800109c:	1fff069c 	.word	0x1fff069c
 80010a0:	1fff06a8 	.word	0x1fff06a8
 80010a4:	40004c00 	.word	0x40004c00
 80010a8:	1fff06a4 	.word	0x1fff06a4
 80010ac:	1fff06d0 	.word	0x1fff06d0
 80010b0:	1fff06c4 	.word	0x1fff06c4
 80010b4:	1fff06ac 	.word	0x1fff06ac

080010b8 <current_offset>:
/**
 * Compute current offset for every phase
 */
void current_offset(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	prot_status = OFF; //Turn Current protection OFF
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <current_offset+0xbc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
	offset_ia = 0;
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <current_offset+0xc0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
	offset_ib = 0;
 80010ca:	4b2c      	ldr	r3, [pc, #176]	; (800117c <current_offset+0xc4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
	offset_ic = 0;
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <current_offset+0xc8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 16; ++i)
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	e026      	b.n	800112a <current_offset+0x72>
	{
		delay_t(3);
 80010dc:	2003      	movs	r0, #3
 80010de:	f002 fcd3 	bl	8003a88 <delay_t>
		offset_ia += ((VADC_G0->RES[1] & 0xFFFF) * 16);
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <current_offset+0xcc>)
 80010e4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	4a22      	ldr	r2, [pc, #136]	; (8001178 <current_offset+0xc0>)
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <current_offset+0xc0>)
 80010f6:	601a      	str	r2, [r3, #0]
		offset_ib += ((VADC_G1->RES[1] & 0xFFFF) * 16);
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <current_offset+0xd0>)
 80010fa:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80010fe:	b29b      	uxth	r3, r3
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <current_offset+0xc4>)
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4413      	add	r3, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <current_offset+0xc4>)
 800110c:	601a      	str	r2, [r3, #0]
		offset_ic += ((VADC_G2->RES[1] & 0xFFFF) * 16);
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <current_offset+0xd4>)
 8001110:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001114:	b29b      	uxth	r3, r3
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4a19      	ldr	r2, [pc, #100]	; (8001180 <current_offset+0xc8>)
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	4413      	add	r3, r2
 800111e:	461a      	mov	r2, r3
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <current_offset+0xc8>)
 8001122:	601a      	str	r2, [r3, #0]
	prot_status = OFF; //Turn Current protection OFF
	offset_ia = 0;
	offset_ib = 0;
	offset_ic = 0;

	for (int i = 0; i < 16; ++i)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	ddd5      	ble.n	80010dc <current_offset+0x24>
		offset_ia += ((VADC_G0->RES[1] & 0xFFFF) * 16);
		offset_ib += ((VADC_G1->RES[1] & 0xFFFF) * 16);
		offset_ic += ((VADC_G2->RES[1] & 0xFFFF) * 16);
	}

	offset_ia = offset_ia / 16;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <current_offset+0xc0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	da00      	bge.n	800113a <current_offset+0x82>
 8001138:	330f      	adds	r3, #15
 800113a:	111b      	asrs	r3, r3, #4
 800113c:	461a      	mov	r2, r3
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <current_offset+0xc0>)
 8001140:	601a      	str	r2, [r3, #0]
	offset_ib = offset_ib / 16;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <current_offset+0xc4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da00      	bge.n	800114c <current_offset+0x94>
 800114a:	330f      	adds	r3, #15
 800114c:	111b      	asrs	r3, r3, #4
 800114e:	461a      	mov	r2, r3
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <current_offset+0xc4>)
 8001152:	601a      	str	r2, [r3, #0]
	offset_ic = offset_ic / 16;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <current_offset+0xc8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	da00      	bge.n	800115e <current_offset+0xa6>
 800115c:	330f      	adds	r3, #15
 800115e:	111b      	asrs	r3, r3, #4
 8001160:	461a      	mov	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <current_offset+0xc8>)
 8001164:	601a      	str	r2, [r3, #0]
	prot_status = ON; //Turn Current protection ON
 8001166:	4b03      	ldr	r3, [pc, #12]	; (8001174 <current_offset+0xbc>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
}
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	1ffe8808 	.word	0x1ffe8808
 8001178:	1fff06cc 	.word	0x1fff06cc
 800117c:	1fff069c 	.word	0x1fff069c
 8001180:	1fff06a4 	.word	0x1fff06a4
 8001184:	40004400 	.word	0x40004400
 8001188:	40004800 	.word	0x40004800
 800118c:	40004c00 	.word	0x40004c00

08001190 <compute_u_mot>:
 * For Micrium display
 * Compute 12bit value of u_mot into volts
 * u_mot_max = 100V
 */
void compute_u_mot(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	u_mot = u_mot_dig * 0.0245;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <compute_u_mot+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fdff 	bl	8004d9c <__aeabi_i2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	a308      	add	r3, pc, #32	; (adr r3, 80011c8 <compute_u_mot+0x38>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f003 fe5c 	bl	8004e68 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f004 f868 	bl	800528c <__aeabi_d2f>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <compute_u_mot+0x44>)
 80011c0:	601a      	str	r2, [r3, #0]
}
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	f3af 8000 	nop.w
 80011c8:	2b020c4a 	.word	0x2b020c4a
 80011cc:	3f991687 	.word	0x3f991687
 80011d0:	1fff06c4 	.word	0x1fff06c4
 80011d4:	1fff06c0 	.word	0x1fff06c0

080011d8 <compute_u_log>:
 * For Micrium display
 * Compute the 12bit value of u_log into volts
 * u_log_max = 50V
 */
void compute_u_log(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	u_log = u_log_dig * 0.01327;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <compute_u_log+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fddb 	bl	8004d9c <__aeabi_i2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	a308      	add	r3, pc, #32	; (adr r3, 8001210 <compute_u_log+0x38>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f003 fe38 	bl	8004e68 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f004 f844 	bl	800528c <__aeabi_d2f>
 8001204:	4602      	mov	r2, r0
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <compute_u_log+0x44>)
 8001208:	601a      	str	r2, [r3, #0]
}
 800120a:	bd80      	pop	{r7, pc}
 800120c:	f3af 8000 	nop.w
 8001210:	4024b33e 	.word	0x4024b33e
 8001214:	3f8b2d4d 	.word	0x3f8b2d4d
 8001218:	1fff06ac 	.word	0x1fff06ac
 800121c:	1fff06a0 	.word	0x1fff06a0

08001220 <compute_currents>:
/*
 * For Micrium read
 * I_pos = 40A | I_neg = -40A
 */
void compute_currents(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	ia_a = (float_t)(ia + 32768) / 65535.0 * 80.0 - 40.0;
 8001224:	4b64      	ldr	r3, [pc, #400]	; (80013b8 <compute_currents+0x198>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b21b      	sxth	r3, r3
 800122a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001236:	ee17 0a90 	vmov	r0, s15
 800123a:	f003 fdc1 	bl	8004dc0 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	a35a      	add	r3, pc, #360	; (adr r3, 80013b0 <compute_currents+0x190>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f003 ff36 	bl	80050bc <__aeabi_ddiv>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b57      	ldr	r3, [pc, #348]	; (80013bc <compute_currents+0x19c>)
 800125e:	f003 fe03 	bl	8004e68 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <compute_currents+0x1a0>)
 8001270:	f003 fc46 	bl	8004b00 <__aeabi_dsub>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f004 f806 	bl	800528c <__aeabi_d2f>
 8001280:	4602      	mov	r2, r0
 8001282:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <compute_currents+0x1a4>)
 8001284:	601a      	str	r2, [r3, #0]
	ib_a = (float_t)(ib + 32768) / 65535.0 * 80.0 - 40.0;
 8001286:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <compute_currents+0x1a8>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	b21b      	sxth	r3, r3
 800128c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001298:	ee17 0a90 	vmov	r0, s15
 800129c:	f003 fd90 	bl	8004dc0 <__aeabi_f2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	a341      	add	r3, pc, #260	; (adr r3, 80013b0 <compute_currents+0x190>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f003 ff05 	bl	80050bc <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <compute_currents+0x19c>)
 80012c0:	f003 fdd2 	bl	8004e68 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <compute_currents+0x1a0>)
 80012d2:	f003 fc15 	bl	8004b00 <__aeabi_dsub>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f003 ffd5 	bl	800528c <__aeabi_d2f>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b39      	ldr	r3, [pc, #228]	; (80013cc <compute_currents+0x1ac>)
 80012e6:	601a      	str	r2, [r3, #0]
	ic_a = (float_t)(ic + 32768) / 65535.0 * 80.0 - 40.0;
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <compute_currents+0x1b0>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	ee17 0a90 	vmov	r0, s15
 80012fe:	f003 fd5f 	bl	8004dc0 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	a329      	add	r3, pc, #164	; (adr r3, 80013b0 <compute_currents+0x190>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f003 fed4 	bl	80050bc <__aeabi_ddiv>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <compute_currents+0x19c>)
 8001322:	f003 fda1 	bl	8004e68 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <compute_currents+0x1a0>)
 8001334:	f003 fbe4 	bl	8004b00 <__aeabi_dsub>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f003 ffa4 	bl	800528c <__aeabi_d2f>
 8001344:	4602      	mov	r2, r0
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <compute_currents+0x1b4>)
 8001348:	601a      	str	r2, [r3, #0]
	iq_a = (float_t)(i_q + 32768) / 65535.0 * 80.0 - 40.0;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <compute_currents+0x1b8>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80013dc <compute_currents+0x1bc>
 8001354:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001358:	ee17 0a90 	vmov	r0, s15
 800135c:	f003 fd30 	bl	8004dc0 <__aeabi_f2d>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	a311      	add	r3, pc, #68	; (adr r3, 80013b0 <compute_currents+0x190>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f003 fea5 	bl	80050bc <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <compute_currents+0x19c>)
 8001380:	f003 fd72 	bl	8004e68 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <compute_currents+0x1a0>)
 8001392:	f003 fbb5 	bl	8004b00 <__aeabi_dsub>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f003 ff75 	bl	800528c <__aeabi_d2f>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <compute_currents+0x1c0>)
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40efffe0 	.word	0x40efffe0
 80013b8:	1fff06b0 	.word	0x1fff06b0
 80013bc:	40540000 	.word	0x40540000
 80013c0:	40440000 	.word	0x40440000
 80013c4:	1fff06bc 	.word	0x1fff06bc
 80013c8:	1fff06a8 	.word	0x1fff06a8
 80013cc:	1fff06c8 	.word	0x1fff06c8
 80013d0:	1fff06d0 	.word	0x1fff06d0
 80013d4:	1fff06b8 	.word	0x1fff06b8
 80013d8:	1fff07d0 	.word	0x1fff07d0
 80013dc:	47000000 	.word	0x47000000
 80013e0:	1fff06b4 	.word	0x1fff06b4
 80013e4:	f3af 8000 	nop.w

080013e8 <pwm_init>:

/*
	Initialize PWM unit
*/
void pwm_init(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

	/*
	 * CCU81 Set Up
	 */
	/*  Reset CCU81*/
	SCU_RESET->PRSET0 |= SCU_RESET_PRSET0_CCU81RS_Msk;
 80013ec:	4a98      	ldr	r2, [pc, #608]	; (8001650 <pwm_init+0x268>)
 80013ee:	4b98      	ldr	r3, [pc, #608]	; (8001650 <pwm_init+0x268>)
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f6:	6113      	str	r3, [r2, #16]

	/* Clear reset of CCU81 */
	SCU_RESET->PRCLR0 |= SCU_RESET_PRCLR0_CCU81RS_Msk;
 80013f8:	4a95      	ldr	r2, [pc, #596]	; (8001650 <pwm_init+0x268>)
 80013fa:	4b95      	ldr	r3, [pc, #596]	; (8001650 <pwm_init+0x268>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6153      	str	r3, [r2, #20]

	/* Enable CCU8 via clkset */
	SCU_CLK->CLKSET |= SCU_CLKSET_CCUCEN_MSK;
 8001404:	4a93      	ldr	r2, [pc, #588]	; (8001654 <pwm_init+0x26c>)
 8001406:	4b93      	ldr	r3, [pc, #588]	; (8001654 <pwm_init+0x26c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6053      	str	r3, [r2, #4]

	/* Enable prescaler */
	CCU81->GIDLC |= CCU8_GIDLC_SPRB_Msk;
 8001410:	4a91      	ldr	r2, [pc, #580]	; (8001658 <pwm_init+0x270>)
 8001412:	4b91      	ldr	r3, [pc, #580]	; (8001658 <pwm_init+0x270>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	60d3      	str	r3, [r2, #12]

	/*
	 * Counting Mode - center aligned(0->max->0)
	 */
	CCU80_CC80->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 800141c:	4a8f      	ldr	r2, [pc, #572]	; (800165c <pwm_init+0x274>)
 800141e:	4b8f      	ldr	r3, [pc, #572]	; (800165c <pwm_init+0x274>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6153      	str	r3, [r2, #20]
	CCU80_CC81->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 8001428:	4a8d      	ldr	r2, [pc, #564]	; (8001660 <pwm_init+0x278>)
 800142a:	4b8d      	ldr	r3, [pc, #564]	; (8001660 <pwm_init+0x278>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6153      	str	r3, [r2, #20]
	CCU80_CC82->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 8001434:	4a8b      	ldr	r2, [pc, #556]	; (8001664 <pwm_init+0x27c>)
 8001436:	4b8b      	ldr	r3, [pc, #556]	; (8001664 <pwm_init+0x27c>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6153      	str	r3, [r2, #20]
	CCU81_CC81->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 8001440:	4a89      	ldr	r2, [pc, #548]	; (8001668 <pwm_init+0x280>)
 8001442:	4b89      	ldr	r3, [pc, #548]	; (8001668 <pwm_init+0x280>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6153      	str	r3, [r2, #20]

	/*
	 * Period&Compare channel 1 values configuration
	 */
	CCU80_CC80->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);	// Shadow value to timer period PR
 800144c:	4a83      	ldr	r2, [pc, #524]	; (800165c <pwm_init+0x274>)
 800144e:	4b83      	ldr	r3, [pc, #524]	; (800165c <pwm_init+0x274>)
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001452:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 8001456:	6353      	str	r3, [r2, #52]	; 0x34
	CCU80_CC80->CR1S |= (uint32_t)(CCU8_CC8_CR1_CR1_VALUE); // Shadow value to compare channel 1
 8001458:	4a80      	ldr	r2, [pc, #512]	; (800165c <pwm_init+0x274>)
 800145a:	4b80      	ldr	r3, [pc, #512]	; (800165c <pwm_init+0x274>)
 800145c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145e:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 8001462:	63d3      	str	r3, [r2, #60]	; 0x3c

	CCU80_CC81->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);
 8001464:	4a7e      	ldr	r2, [pc, #504]	; (8001660 <pwm_init+0x278>)
 8001466:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <pwm_init+0x278>)
 8001468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146a:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 800146e:	6353      	str	r3, [r2, #52]	; 0x34
	CCU80_CC81->CR1S |= (uint32_t)(CCU8_CC8_CR1_CR1_VALUE);
 8001470:	4a7b      	ldr	r2, [pc, #492]	; (8001660 <pwm_init+0x278>)
 8001472:	4b7b      	ldr	r3, [pc, #492]	; (8001660 <pwm_init+0x278>)
 8001474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001476:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 800147a:	63d3      	str	r3, [r2, #60]	; 0x3c

	CCU80_CC82->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);
 800147c:	4a79      	ldr	r2, [pc, #484]	; (8001664 <pwm_init+0x27c>)
 800147e:	4b79      	ldr	r3, [pc, #484]	; (8001664 <pwm_init+0x27c>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001482:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 8001486:	6353      	str	r3, [r2, #52]	; 0x34
	CCU80_CC82->CR1S |= (uint32_t)(CCU8_CC8_CR1_CR1_VALUE);
 8001488:	4a76      	ldr	r2, [pc, #472]	; (8001664 <pwm_init+0x27c>)
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <pwm_init+0x27c>)
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 8001492:	63d3      	str	r3, [r2, #60]	; 0x3c

	CCU81_CC81->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);
 8001494:	4a74      	ldr	r2, [pc, #464]	; (8001668 <pwm_init+0x280>)
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <pwm_init+0x280>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 800149e:	6353      	str	r3, [r2, #52]	; 0x34
	CCU81_CC81->CR1S |= (uint32_t)(CCU8_CC8_CR1_CR1_VALUE);
 80014a0:	4a71      	ldr	r2, [pc, #452]	; (8001668 <pwm_init+0x280>)
 80014a2:	4b71      	ldr	r3, [pc, #452]	; (8001668 <pwm_init+0x280>)
 80014a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a6:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 80014aa:	63d3      	str	r3, [r2, #60]	; 0x3c

	/*
	 *  Shadow transfer enable for CCU80_80/81/82    Request shadow transfer
	 */
	CCU80->GCSS |= (CCU8_GCSS_S0SE_MSK | CCU8_GCSS_S1SE_MSK | CCU8_GCSS_S2SE_MSK);
 80014ac:	4a6f      	ldr	r2, [pc, #444]	; (800166c <pwm_init+0x284>)
 80014ae:	4b6f      	ldr	r3, [pc, #444]	; (800166c <pwm_init+0x284>)
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6113      	str	r3, [r2, #16]
	CCU81->GCSS |= (CCU8_GCSS_S1SE_MSK);
 80014bc:	4a66      	ldr	r2, [pc, #408]	; (8001658 <pwm_init+0x270>)
 80014be:	4b66      	ldr	r3, [pc, #408]	; (8001658 <pwm_init+0x270>)
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6113      	str	r3, [r2, #16]
	 * Configure timers
	 */
	/*
	 * Remove from IDLE 80-82
	 */
	CCU80->GIDLC |= (CCU8_GIDLC_CS0I_MSK | CCU8_GIDLC_CS1I_MSK | CCU8_GIDLC_CS2I_MSK);
 80014c8:	4a68      	ldr	r2, [pc, #416]	; (800166c <pwm_init+0x284>)
 80014ca:	4b68      	ldr	r3, [pc, #416]	; (800166c <pwm_init+0x284>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f043 0307 	orr.w	r3, r3, #7
 80014d2:	60d3      	str	r3, [r2, #12]
	CCU81->GIDLC |= (CCU8_GIDLC_CS1I_MSK);
 80014d4:	4a60      	ldr	r2, [pc, #384]	; (8001658 <pwm_init+0x270>)
 80014d6:	4b60      	ldr	r3, [pc, #384]	; (8001658 <pwm_init+0x270>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	60d3      	str	r3, [r2, #12]

	/*   Clear the timer run bit(TRBC) and timer (TCC) */
	CCU80_CC80->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 80014e0:	4a5e      	ldr	r2, [pc, #376]	; (800165c <pwm_init+0x274>)
 80014e2:	4b5e      	ldr	r3, [pc, #376]	; (800165c <pwm_init+0x274>)
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6113      	str	r3, [r2, #16]
	CCU80_CC80->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 80014ec:	4a5b      	ldr	r2, [pc, #364]	; (800165c <pwm_init+0x274>)
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <pwm_init+0x274>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	6113      	str	r3, [r2, #16]

	CCU80_CC81->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 80014f8:	4a59      	ldr	r2, [pc, #356]	; (8001660 <pwm_init+0x278>)
 80014fa:	4b59      	ldr	r3, [pc, #356]	; (8001660 <pwm_init+0x278>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6113      	str	r3, [r2, #16]
	CCU80_CC81->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 8001504:	4a56      	ldr	r2, [pc, #344]	; (8001660 <pwm_init+0x278>)
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <pwm_init+0x278>)
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	6113      	str	r3, [r2, #16]

	CCU80_CC82->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 8001510:	4a54      	ldr	r2, [pc, #336]	; (8001664 <pwm_init+0x27c>)
 8001512:	4b54      	ldr	r3, [pc, #336]	; (8001664 <pwm_init+0x27c>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6113      	str	r3, [r2, #16]
	CCU80_CC82->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 800151c:	4a51      	ldr	r2, [pc, #324]	; (8001664 <pwm_init+0x27c>)
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <pwm_init+0x27c>)
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	6113      	str	r3, [r2, #16]

	CCU81_CC81->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 8001528:	4a4f      	ldr	r2, [pc, #316]	; (8001668 <pwm_init+0x280>)
 800152a:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <pwm_init+0x280>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6113      	str	r3, [r2, #16]
	CCU81_CC81->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 8001534:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <pwm_init+0x280>)
 8001536:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <pwm_init+0x280>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	6113      	str	r3, [r2, #16]

	/*
	 * Deadband config - enable for channel 1 and ST1
	 */
	CCU80_CC80->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 8001540:	4a46      	ldr	r2, [pc, #280]	; (800165c <pwm_init+0x274>)
 8001542:	4b46      	ldr	r3, [pc, #280]	; (800165c <pwm_init+0x274>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f043 0305 	orr.w	r3, r3, #5
 800154a:	64d3      	str	r3, [r2, #76]	; 0x4c
	CCU80_CC81->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 800154c:	4a44      	ldr	r2, [pc, #272]	; (8001660 <pwm_init+0x278>)
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <pwm_init+0x278>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f043 0305 	orr.w	r3, r3, #5
 8001556:	64d3      	str	r3, [r2, #76]	; 0x4c
	CCU80_CC82->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 8001558:	4a42      	ldr	r2, [pc, #264]	; (8001664 <pwm_init+0x27c>)
 800155a:	4b42      	ldr	r3, [pc, #264]	; (8001664 <pwm_init+0x27c>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f043 0305 	orr.w	r3, r3, #5
 8001562:	64d3      	str	r3, [r2, #76]	; 0x4c
	CCU81_CC81->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 8001564:	4a40      	ldr	r2, [pc, #256]	; (8001668 <pwm_init+0x280>)
 8001566:	4b40      	ldr	r3, [pc, #256]	; (8001668 <pwm_init+0x280>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f043 0305 	orr.w	r3, r3, #5
 800156e:	64d3      	str	r3, [r2, #76]	; 0x4c


	/*
	 * Deadband value rising config - rising 50ns
	 */
	CCU80_CC80->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 8001570:	4a3a      	ldr	r2, [pc, #232]	; (800165c <pwm_init+0x274>)
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <pwm_init+0x274>)
 8001574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001576:	f043 030e 	orr.w	r3, r3, #14
 800157a:	6513      	str	r3, [r2, #80]	; 0x50
	CCU80_CC81->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 800157c:	4a38      	ldr	r2, [pc, #224]	; (8001660 <pwm_init+0x278>)
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <pwm_init+0x278>)
 8001580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001582:	f043 030e 	orr.w	r3, r3, #14
 8001586:	6513      	str	r3, [r2, #80]	; 0x50
	CCU80_CC82->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 8001588:	4a36      	ldr	r2, [pc, #216]	; (8001664 <pwm_init+0x27c>)
 800158a:	4b36      	ldr	r3, [pc, #216]	; (8001664 <pwm_init+0x27c>)
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158e:	f043 030e 	orr.w	r3, r3, #14
 8001592:	6513      	str	r3, [r2, #80]	; 0x50
	CCU81_CC81->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 8001594:	4a34      	ldr	r2, [pc, #208]	; (8001668 <pwm_init+0x280>)
 8001596:	4b34      	ldr	r3, [pc, #208]	; (8001668 <pwm_init+0x280>)
 8001598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159a:	f043 030e 	orr.w	r3, r3, #14
 800159e:	6513      	str	r3, [r2, #80]	; 0x50
	 * Input selector & matrix
	 * Use IN_H for Event 0 on Rising edge
	 * Set start on EVENT 0 on Rising edge
	 * Set stop on Event 1 on Falling edge
	 */
	CCU80_CC80->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS; // Set Event 0(system control) as rising edge
 80015a0:	4a2e      	ldr	r2, [pc, #184]	; (800165c <pwm_init+0x274>)
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <pwm_init+0x274>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f043 0307 	orr.w	r3, r3, #7
 80015aa:	6013      	str	r3, [r2, #0]
	CCU80_CC80->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 80015ac:	4a2b      	ldr	r2, [pc, #172]	; (800165c <pwm_init+0x274>)
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <pwm_init+0x274>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
	CCU80_CC80->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS; // Set Event 1(system control) as falling edge
 80015b8:	4a28      	ldr	r2, [pc, #160]	; (800165c <pwm_init+0x274>)
 80015ba:	4b28      	ldr	r3, [pc, #160]	; (800165c <pwm_init+0x274>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80015c2:	6013      	str	r3, [r2, #0]
	CCU80_CC80->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 80015c4:	4a25      	ldr	r2, [pc, #148]	; (800165c <pwm_init+0x274>)
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <pwm_init+0x274>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015ce:	6013      	str	r3, [r2, #0]

	CCU80_CC81->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS;
 80015d0:	4a23      	ldr	r2, [pc, #140]	; (8001660 <pwm_init+0x278>)
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <pwm_init+0x278>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f043 0307 	orr.w	r3, r3, #7
 80015da:	6013      	str	r3, [r2, #0]
	CCU80_CC81->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 80015dc:	4a20      	ldr	r2, [pc, #128]	; (8001660 <pwm_init+0x278>)
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <pwm_init+0x278>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
	CCU80_CC81->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS;
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <pwm_init+0x278>)
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <pwm_init+0x278>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80015f2:	6013      	str	r3, [r2, #0]
	CCU80_CC81->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <pwm_init+0x278>)
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <pwm_init+0x278>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015fe:	6013      	str	r3, [r2, #0]

	CCU80_CC82->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS;
 8001600:	4a18      	ldr	r2, [pc, #96]	; (8001664 <pwm_init+0x27c>)
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <pwm_init+0x27c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f043 0307 	orr.w	r3, r3, #7
 800160a:	6013      	str	r3, [r2, #0]
	CCU80_CC82->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 800160c:	4a15      	ldr	r2, [pc, #84]	; (8001664 <pwm_init+0x27c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <pwm_init+0x27c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
	CCU80_CC82->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS;
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <pwm_init+0x27c>)
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <pwm_init+0x27c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001622:	6013      	str	r3, [r2, #0]
	CCU80_CC82->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 8001624:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <pwm_init+0x27c>)
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <pwm_init+0x27c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800162e:	6013      	str	r3, [r2, #0]

	CCU81_CC81->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS;
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <pwm_init+0x280>)
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <pwm_init+0x280>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f043 0307 	orr.w	r3, r3, #7
 800163a:	6013      	str	r3, [r2, #0]
	CCU81_CC81->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <pwm_init+0x280>)
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <pwm_init+0x280>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
	CCU81_CC81->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS;
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <pwm_init+0x280>)
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <pwm_init+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	e00f      	b.n	8001670 <pwm_init+0x288>
 8001650:	50004400 	.word	0x50004400
 8001654:	50004600 	.word	0x50004600
 8001658:	40024000 	.word	0x40024000
 800165c:	40020100 	.word	0x40020100
 8001660:	40020200 	.word	0x40020200
 8001664:	40020300 	.word	0x40020300
 8001668:	40024200 	.word	0x40024200
 800166c:	40020000 	.word	0x40020000
 8001670:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001674:	6013      	str	r3, [r2, #0]
	CCU81_CC81->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 8001676:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <pwm_init+0x310>)
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <pwm_init+0x310>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001680:	6013      	str	r3, [r2, #0]

	CCU80_CC80->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS; // Set Event 0 for start
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <pwm_init+0x314>)
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <pwm_init+0x314>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6053      	str	r3, [r2, #4]
	CCU80_CC81->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS;
 800168e:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <pwm_init+0x318>)
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <pwm_init+0x318>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6053      	str	r3, [r2, #4]
	CCU80_CC82->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS;
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <pwm_init+0x31c>)
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <pwm_init+0x31c>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
	CCU81_CC81->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS;
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <pwm_init+0x310>)
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <pwm_init+0x310>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6053      	str	r3, [r2, #4]

	CCU80_CC80->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS; // Set Event 1 for end
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <pwm_init+0x314>)
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <pwm_init+0x314>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6053      	str	r3, [r2, #4]
	CCU80_CC81->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS;
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <pwm_init+0x318>)
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <pwm_init+0x318>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6053      	str	r3, [r2, #4]
	CCU80_CC82->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS;
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <pwm_init+0x31c>)
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <pwm_init+0x31c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6053      	str	r3, [r2, #4]
	CCU81_CC81->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS;
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <pwm_init+0x310>)
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <pwm_init+0x310>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6053      	str	r3, [r2, #4]

	/*
	 * Enable CCUCON Module
	 */
	SCU_GENERAL->CCUCON |= SCU_GENERAL_CCUCON_GSC80_GSC81_MSK;
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <pwm_init+0x320>)
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <pwm_init+0x320>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
	//	SCU_GENERAL->CCUCON &= ~SCU_GENERAL_CCUCON_GSC80_MSK; 		//Reset back to 0 if it needs to be re-enabled later
}
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40024200 	.word	0x40024200
 80016fc:	40020100 	.word	0x40020100
 8001700:	40020200 	.word	0x40020200
 8001704:	40020300 	.word	0x40020300
 8001708:	50004000 	.word	0x50004000

0800170c <pwm_update>:
/*
 * Update compare values for PWM
 * Input type: int16_t
 */
void pwm_update(int16_t uaref, int16_t ubref)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	80fb      	strh	r3, [r7, #6]
 8001718:	4613      	mov	r3, r2
 800171a:	80bb      	strh	r3, [r7, #4]
	/*
	 * Keeps the voltage values between max/min saturation
	 * Resulted PWM shouldn't be 0 or MAX
	 */
	if (uaref > sat_pwm)
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <pwm_update+0x160>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001724:	b21b      	sxth	r3, r3
 8001726:	429a      	cmp	r2, r3
 8001728:	dd03      	ble.n	8001732 <pwm_update+0x26>
	{
		uaref = sat_pwm;
 800172a:	4b50      	ldr	r3, [pc, #320]	; (800186c <pwm_update+0x160>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	80fb      	strh	r3, [r7, #6]
 8001730:	e00d      	b.n	800174e <pwm_update+0x42>
	}
	else if (uaref < -sat_pwm)
 8001732:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001736:	4b4d      	ldr	r3, [pc, #308]	; (800186c <pwm_update+0x160>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	b21b      	sxth	r3, r3
 800173c:	425b      	negs	r3, r3
 800173e:	429a      	cmp	r2, r3
 8001740:	da05      	bge.n	800174e <pwm_update+0x42>
	{
		uaref = -sat_pwm;
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <pwm_update+0x160>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	b29b      	uxth	r3, r3
 800174c:	80fb      	strh	r3, [r7, #6]
	}

	if (ubref > sat_pwm)
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <pwm_update+0x160>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001756:	b21b      	sxth	r3, r3
 8001758:	429a      	cmp	r2, r3
 800175a:	dd03      	ble.n	8001764 <pwm_update+0x58>
	{
		ubref = sat_pwm;
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <pwm_update+0x160>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	80bb      	strh	r3, [r7, #4]
 8001762:	e00d      	b.n	8001780 <pwm_update+0x74>
	}
	else if (ubref < -sat_pwm)
 8001764:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <pwm_update+0x160>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b21b      	sxth	r3, r3
 800176e:	425b      	negs	r3, r3
 8001770:	429a      	cmp	r2, r3
 8001772:	da05      	bge.n	8001780 <pwm_update+0x74>
	{
		ubref = -sat_pwm;
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <pwm_update+0x160>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	425b      	negs	r3, r3
 800177c:	b29b      	uxth	r3, r3
 800177e:	80bb      	strh	r3, [r7, #4]
	}


	// New compare value
	CCU80_CC80->CR1S = (pwm_value / 2 + pwm_value * uaref / 65535);	//A - A1
 8001780:	483b      	ldr	r0, [pc, #236]	; (8001870 <pwm_update+0x164>)
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <pwm_update+0x168>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	b21b      	sxth	r3, r3
 8001788:	0fda      	lsrs	r2, r3, #31
 800178a:	4413      	add	r3, r2
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b29b      	uxth	r3, r3
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b38      	ldr	r3, [pc, #224]	; (8001874 <pwm_update+0x168>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b21b      	sxth	r3, r3
 8001798:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <pwm_update+0x16c>)
 80017a2:	fb81 e103 	smull	lr, r1, r1, r3
 80017a6:	4419      	add	r1, r3
 80017a8:	13c9      	asrs	r1, r1, #15
 80017aa:	17db      	asrs	r3, r3, #31
 80017ac:	1acb      	subs	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	63c3      	str	r3, [r0, #60]	; 0x3c
	CCU80_CC81->CR1S = (pwm_value / 2 - pwm_value * uaref / 65535); //B - A2
 80017b2:	4832      	ldr	r0, [pc, #200]	; (800187c <pwm_update+0x170>)
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <pwm_update+0x168>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	0fda      	lsrs	r2, r3, #31
 80017bc:	4413      	add	r3, r2
 80017be:	105b      	asrs	r3, r3, #1
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <pwm_update+0x168>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4929      	ldr	r1, [pc, #164]	; (8001878 <pwm_update+0x16c>)
 80017d4:	fb81 e103 	smull	lr, r1, r1, r3
 80017d8:	4419      	add	r1, r3
 80017da:	13c9      	asrs	r1, r1, #15
 80017dc:	17db      	asrs	r3, r3, #31
 80017de:	1acb      	subs	r3, r1, r3
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	63c3      	str	r3, [r0, #60]	; 0x3c
	
	CCU80_CC82->CR1S = (pwm_value / 2 + pwm_value * ubref / 65535); //C - B1
 80017e4:	4826      	ldr	r0, [pc, #152]	; (8001880 <pwm_update+0x174>)
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <pwm_update+0x168>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	0fda      	lsrs	r2, r3, #31
 80017ee:	4413      	add	r3, r2
 80017f0:	105b      	asrs	r3, r3, #1
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <pwm_update+0x168>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	491c      	ldr	r1, [pc, #112]	; (8001878 <pwm_update+0x16c>)
 8001806:	fb81 e103 	smull	lr, r1, r1, r3
 800180a:	4419      	add	r1, r3
 800180c:	13c9      	asrs	r1, r1, #15
 800180e:	17db      	asrs	r3, r3, #31
 8001810:	1acb      	subs	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	63c3      	str	r3, [r0, #60]	; 0x3c
	CCU81_CC81->CR1S = (pwm_value / 2 - pwm_value * ubref / 65535); //D - B2
 8001816:	481b      	ldr	r0, [pc, #108]	; (8001884 <pwm_update+0x178>)
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <pwm_update+0x168>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b21b      	sxth	r3, r3
 800181e:	0fda      	lsrs	r2, r3, #31
 8001820:	4413      	add	r3, r2
 8001822:	105b      	asrs	r3, r3, #1
 8001824:	b29b      	uxth	r3, r3
 8001826:	b21a      	sxth	r2, r3
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <pwm_update+0x168>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b21b      	sxth	r3, r3
 800182e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4910      	ldr	r1, [pc, #64]	; (8001878 <pwm_update+0x16c>)
 8001838:	fb81 e103 	smull	lr, r1, r1, r3
 800183c:	4419      	add	r1, r3
 800183e:	13c9      	asrs	r1, r1, #15
 8001840:	17db      	asrs	r3, r3, #31
 8001842:	1acb      	subs	r3, r1, r3
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	63c3      	str	r3, [r0, #60]	; 0x3c

	// Shadow transfer enabled for new compare value
	CCU80->GCSS |= (CCU8_GCSS_S0SE_MSK | CCU8_GCSS_S1SE_MSK | CCU8_GCSS_S2SE_MSK);
 8001848:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <pwm_update+0x17c>)
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <pwm_update+0x17c>)
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6113      	str	r3, [r2, #16]
	CCU81->GCSS |= (CCU8_GCSS_S1SE_MSK);
 8001858:	4a0c      	ldr	r2, [pc, #48]	; (800188c <pwm_update+0x180>)
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <pwm_update+0x180>)
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	6113      	str	r3, [r2, #16]
}
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	1ffe880c 	.word	0x1ffe880c
 8001870:	40020100 	.word	0x40020100
 8001874:	1ffe880a 	.word	0x1ffe880a
 8001878:	80008001 	.word	0x80008001
 800187c:	40020200 	.word	0x40020200
 8001880:	40020300 	.word	0x40020300
 8001884:	40024200 	.word	0x40024200
 8001888:	40020000 	.word	0x40020000
 800188c:	40024000 	.word	0x40024000

08001890 <motion_on>:
/*
	Enable all PWM pins
*/
void motion_on(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	/*
	 * PWM pins configuration CCU80 - as alter function 3 - CCU80 OUTxy
	 */
	PORT5->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT5_PC11_POS); // A_HIGH 	- P5.11 - OUT00
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <motion_on+0x6c>)
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <motion_on+0x6c>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f043 4318 	orr.w	r3, r3, #2550136832	; 0x98000000
 800189e:	6193      	str	r3, [r2, #24]
	PORT5->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT5_PC8_POS);	 // A_LOW 	- P5.8  - OUT01
 80018a0:	4a16      	ldr	r2, [pc, #88]	; (80018fc <motion_on+0x6c>)
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <motion_on+0x6c>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80018aa:	6193      	str	r3, [r2, #24]

	PORT0->IOCR4 |= (GPIO_OUTPUT_ALTER_3 << PORT0_IOCR4_PC4_Pos); // B_HIGH 	- P5.10 - OUT10 P0.4 alternative
 80018ac:	4a14      	ldr	r2, [pc, #80]	; (8001900 <motion_on+0x70>)
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <motion_on+0x70>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80018b6:	6153      	str	r3, [r2, #20]
	PORT2->IOCR12 |= (GPIO_OUTPUT_ALTER_3 << PORT2_PC15_POS);	  // B_LOW 	- P2.15 - OUT11
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <motion_on+0x74>)
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <motion_on+0x74>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f043 4318 	orr.w	r3, r3, #2550136832	; 0x98000000
 80018c2:	61d3      	str	r3, [r2, #28]

	PORT5->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT5_PC9_POS);	  // C_HIGH 	- P5.9	- OUT20
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <motion_on+0x6c>)
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <motion_on+0x6c>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f443 4318 	orr.w	r3, r3, #38912	; 0x9800
 80018ce:	6193      	str	r3, [r2, #24]
	PORT2->IOCR12 |= (GPIO_OUTPUT_ALTER_3 << PORT2_PC14_POS); // C_LOW 	- P2.14	- OUT21
 80018d0:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <motion_on+0x74>)
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <motion_on+0x74>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f443 0318 	orr.w	r3, r3, #9961472	; 0x980000
 80018da:	61d3      	str	r3, [r2, #28]

	PORT1->IOCR12 |= (GPIO_OUTPUT_ALTER_3 << PORT1_IOCR12_PC14_Pos);	//D_HIGH	-P1.14	- OUT10 -CCU81
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <motion_on+0x78>)
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <motion_on+0x78>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f443 0318 	orr.w	r3, r3, #9961472	; 0x980000
 80018e6:	61d3      	str	r3, [r2, #28]
	PORT1->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT1_IOCR8_PC11_Pos);		//D_LOW		-P1.11	- OUT11 -CCU81
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <motion_on+0x78>)
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <motion_on+0x78>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f043 4318 	orr.w	r3, r3, #2550136832	; 0x98000000
 80018f2:	6193      	str	r3, [r2, #24]
}
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	48028500 	.word	0x48028500
 8001900:	48028000 	.word	0x48028000
 8001904:	48028200 	.word	0x48028200
 8001908:	48028100 	.word	0x48028100

0800190c <motion_off>:

/*
	Disable all PWM pins
*/
void motion_off(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	/*
	 * PWM pins configuration CCU80 - OFF
	 */
	PORT5->IOCR8 &= ~(DISABLE_OUTPUT << PORT5_PC11_POS); // A_HIGH 	- P5.11 - OUT00
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <motion_off+0x6c>)
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <motion_off+0x6c>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800191a:	6193      	str	r3, [r2, #24]
	PORT5->IOCR8 &= ~(DISABLE_OUTPUT << PORT5_PC8_POS);	 // A_LOW 	- P5.8  - OUT01
 800191c:	4a16      	ldr	r2, [pc, #88]	; (8001978 <motion_off+0x6c>)
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <motion_off+0x6c>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001926:	6193      	str	r3, [r2, #24]

	PORT0->IOCR4 &= ~(DISABLE_OUTPUT << PORT0_IOCR4_PC4_Pos); // B_HIGH 	- P5.10 - OUT10 P0.4 alternative
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <motion_off+0x70>)
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <motion_off+0x70>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001932:	6153      	str	r3, [r2, #20]
	PORT2->IOCR12 &= ~(DISABLE_OUTPUT << PORT2_PC15_POS);	  // B_LOW 	- P2.15 - OUT11
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <motion_off+0x74>)
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <motion_off+0x74>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800193e:	61d3      	str	r3, [r2, #28]

	PORT5->IOCR8 &= ~(DISABLE_OUTPUT << PORT5_PC9_POS);	  // C_HIGH 	- P5.9	- OUT20
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <motion_off+0x6c>)
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <motion_off+0x6c>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 800194a:	6193      	str	r3, [r2, #24]
	PORT2->IOCR12 &= ~(DISABLE_OUTPUT << PORT2_PC14_POS); // C_LOW 	- P2.14	- OUT21
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <motion_off+0x74>)
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <motion_off+0x74>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8001956:	61d3      	str	r3, [r2, #28]

	PORT1->IOCR12 &= ~(GPIO_OUTPUT_ALTER_3 << PORT1_IOCR12_PC14_Pos);	//D_HIGH	-P1.14	- OUT10 -CCU81
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <motion_off+0x78>)
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <motion_off+0x78>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f423 0318 	bic.w	r3, r3, #9961472	; 0x980000
 8001962:	61d3      	str	r3, [r2, #28]
	PORT1->IOCR8 &= ~(GPIO_OUTPUT_ALTER_3 << PORT1_IOCR8_PC11_Pos);		//D_LOW		-P1.11	- OUT11 -CCU81
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <motion_off+0x78>)
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <motion_off+0x78>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f023 4318 	bic.w	r3, r3, #2550136832	; 0x98000000
 800196e:	6193      	str	r3, [r2, #24]
}
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	48028500 	.word	0x48028500
 800197c:	48028000 	.word	0x48028000
 8001980:	48028200 	.word	0x48028200
 8001984:	48028100 	.word	0x48028100

08001988 <VADC0_G0_2_IRQHandler>:
//  float_t sin_increment_2_pi, cos_increment_2_pi;
//  float_t sin_plus_cos;
/********************************************************************/

void VADC0_G0_2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
	interrupt_counter_slow_loop++;
 800198e:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <VADC0_G0_2_IRQHandler+0x160>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b54      	ldr	r3, [pc, #336]	; (8001ae8 <VADC0_G0_2_IRQHandler+0x160>)
 8001998:	801a      	strh	r2, [r3, #0]
	interrupt_counter_fast_loop++;
 800199a:	4b54      	ldr	r3, [pc, #336]	; (8001aec <VADC0_G0_2_IRQHandler+0x164>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b52      	ldr	r3, [pc, #328]	; (8001aec <VADC0_G0_2_IRQHandler+0x164>)
 80019a4:	801a      	strh	r2, [r3, #0]
	interrupt_counter_timer++;
 80019a6:	4b52      	ldr	r3, [pc, #328]	; (8001af0 <VADC0_G0_2_IRQHandler+0x168>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a50      	ldr	r2, [pc, #320]	; (8001af0 <VADC0_G0_2_IRQHandler+0x168>)
 80019ae:	6013      	str	r3, [r2, #0]
	/*
	 * Fast compute "loop"
	 * Every 100us compute speed,mechanical/electrical position, field, dq_abc transformation
	 */
	if (TIME_100_us == interrupt_counter_fast_loop)
 80019b0:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <VADC0_G0_2_IRQHandler+0x164>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d16c      	bne.n	8001a92 <VADC0_G0_2_IRQHandler+0x10a>
	{

		// Read and compute into [SI] all currents
		read_currents();
 80019b8:	f7ff fb24 	bl	8001004 <read_currents>
		compute_currents();
 80019bc:	f7ff fc30 	bl	8001220 <compute_currents>
		compute_u_mot();
 80019c0:	f7ff fbe6 	bl	8001190 <compute_u_mot>
		compute_u_log();
 80019c4:	f7ff fc08 	bl	80011d8 <compute_u_log>

		// Compute all data for motor movement in Operation Enable
		if (motion_config)
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <VADC0_G0_2_IRQHandler+0x16c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d02f      	beq.n	8001a30 <VADC0_G0_2_IRQHandler+0xa8>
		{
			compute_fast_speed();
 80019d0:	f002 f94a 	bl	8003c68 <compute_fast_speed>
			compute_fast_mechanical_position();
 80019d4:	f002 f962 	bl	8003c9c <compute_fast_mechanical_position>
			compute_fast_electrical_position();
 80019d8:	f002 f972 	bl	8003cc0 <compute_fast_electrical_position>
			compute_fast_field();
 80019dc:	f002 f998 	bl	8003d10 <compute_fast_field>
			abc_dq();
 80019e0:	f002 f868 	bl	8003ab4 <abc_dq>

			// Add Fast Loop regulators
			if (loop_control & I_REF_LOOP_MSK)
 80019e4:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <VADC0_G0_2_IRQHandler+0x170>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <VADC0_G0_2_IRQHandler+0x70>
			{
				pi_regulator_i_d();
 80019f0:	f000 f9b0 	bl	8001d54 <pi_regulator_i_d>
				pi_regulator_i_q();
 80019f4:	f000 f900 	bl	8001bf8 <pi_regulator_i_q>
			}

			dq_abc();
 80019f8:	f002 f8b0 	bl	8003b5c <dq_abc>
			pwm_update(u_a_ref, u_b_ref);
 80019fc:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <VADC0_G0_2_IRQHandler+0x174>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a06:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <VADC0_G0_2_IRQHandler+0x178>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a18:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a1c:	88bb      	ldrh	r3, [r7, #4]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b212      	sxth	r2, r2
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff fe70 	bl	800170c <pwm_update>

			ProbeScope_Sampling(); // For Micrium Osciloscope
 8001a2c:	f000 fec2 	bl	80027b4 <ProbeScope_Sampling>
		}
		//***************************************************************
		if(test)
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <VADC0_G0_2_IRQHandler+0x17c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d023      	beq.n	8001a80 <VADC0_G0_2_IRQHandler+0xf8>
		{
			compute_fast_speed();
 8001a38:	f002 f916 	bl	8003c68 <compute_fast_speed>
			compute_fast_mechanical_position();
 8001a3c:	f002 f92e 	bl	8003c9c <compute_fast_mechanical_position>
			compute_fast_electrical_position();
 8001a40:	f002 f93e 	bl	8003cc0 <compute_fast_electrical_position>
			compute_fast_field();
 8001a44:	f002 f964 	bl	8003d10 <compute_fast_field>
//			{
//				pi_regulator_i_d();
//				pi_regulator_i_q();
//			}

			dq_abc();
 8001a48:	f002 f888 	bl	8003b5c <dq_abc>
			pwm_update(u_a_ref, u_b_ref);
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <VADC0_G0_2_IRQHandler+0x174>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a56:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a5a:	88bb      	ldrh	r3, [r7, #4]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <VADC0_G0_2_IRQHandler+0x178>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a68:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a6c:	88bb      	ldrh	r3, [r7, #4]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b212      	sxth	r2, r2
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff fe48 	bl	800170c <pwm_update>

			ProbeScope_Sampling(); // For Micrium Osciloscope
 8001a7c:	f000 fe9a 	bl	80027b4 <ProbeScope_Sampling>
		}
		//*****************************************************************

		if (prot_status)
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <VADC0_G0_2_IRQHandler+0x180>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <VADC0_G0_2_IRQHandler+0x104>
		{
			current_protection();
 8001a88:	f7fe ff5c 	bl	8000944 <current_protection>
		}

		interrupt_counter_fast_loop = 0;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <VADC0_G0_2_IRQHandler+0x164>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	801a      	strh	r2, [r3, #0]
	}
	/*
	 * Slow compute loop
	 * Every 1ms compute speed
	 */
	if (TIME_1_ms == interrupt_counter_slow_loop)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <VADC0_G0_2_IRQHandler+0x160>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	2b14      	cmp	r3, #20
 8001a98:	d123      	bne.n	8001ae2 <VADC0_G0_2_IRQHandler+0x15a>
	{
		if (motion_config)
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <VADC0_G0_2_IRQHandler+0x16c>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01c      	beq.n	8001adc <VADC0_G0_2_IRQHandler+0x154>
		{
			compute_speed(); // Compute motor speed and position
 8001aa2:	f000 f889 	bl	8001bb8 <compute_speed>

			// Reference Generator function and timer
			if (STATUS_0_DISABLED != ref_gen_status)
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <VADC0_G0_2_IRQHandler+0x184>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <VADC0_G0_2_IRQHandler+0x134>
			{
				interrupt_counter_ref_gen++;
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <VADC0_G0_2_IRQHandler+0x188>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <VADC0_G0_2_IRQHandler+0x188>)
 8001ab6:	6013      	str	r3, [r2, #0]
				reference_generator();
 8001ab8:	f001 fdce 	bl	8003658 <reference_generator>
			}

			// Slow loop regulators
			if (loop_control & POS_REF_LOOP_MSK)
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <VADC0_G0_2_IRQHandler+0x170>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <VADC0_G0_2_IRQHandler+0x144>
			{
				pid_regulator_pos();
 8001ac8:	f000 faa4 	bl	8002014 <pid_regulator_pos>
			}
			if (loop_control & SPD_REF_LOOP_MSK)
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <VADC0_G0_2_IRQHandler+0x170>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <VADC0_G0_2_IRQHandler+0x154>
			{
				pi_regulator_speed();
 8001ad8:	f000 f9ea 	bl	8001eb0 <pi_regulator_speed>
			}
		}

		interrupt_counter_slow_loop = 0;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <VADC0_G0_2_IRQHandler+0x160>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	801a      	strh	r2, [r3, #0]
	}
}
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	1ffe8830 	.word	0x1ffe8830
 8001aec:	1ffe8832 	.word	0x1ffe8832
 8001af0:	1ffe8834 	.word	0x1ffe8834
 8001af4:	1fff067d 	.word	0x1fff067d
 8001af8:	1fff067c 	.word	0x1fff067c
 8001afc:	1fff07d8 	.word	0x1fff07d8
 8001b00:	1fff07c8 	.word	0x1fff07c8
 8001b04:	1ffe8838 	.word	0x1ffe8838
 8001b08:	1ffe8808 	.word	0x1ffe8808
 8001b0c:	1fff0648 	.word	0x1fff0648
 8001b10:	1fff0644 	.word	0x1fff0644

08001b14 <CCU81_0_IRQHandler>:

/*
 * Interrupt with low priority every 0.2ms
 */
void CCU81_0_IRQHandler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	// interrupt_counter_timer++;
}
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <infinite_loop>:
#include "state_machine.h"
#include "current_protection.h"
#include "pi_regulator.h"

void infinite_loop(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	state_machine();
 8001b24:	f001 fe58 	bl	80037d8 <state_machine>
}
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop

08001b2c <main>:

int main(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	interrupt_vadc_init();	// Interrupts generated by the VADC - sets up the CCU80 - CC83
 8001b30:	f7ff f9e0 	bl	8000ef4 <interrupt_vadc_init>
	pwm_init();				// PWM & clock initialization - CC80/81/82
 8001b34:	f7ff fc58 	bl	80013e8 <pwm_init>
	encoder_init();			// Encoder initialization
 8001b38:	f7fe fdfc 	bl	8000734 <encoder_init>
	adc_init();				// VADC initialization
 8001b3c:	f7fe ffc4 	bl	8000ac8 <adc_init>
	ProbeScope_Init(10000); // Initialize Oscilloscope for Micrium - imported
 8001b40:	f242 7010 	movw	r0, #10000	; 0x2710
 8001b44:	f000 fd86 	bl	8002654 <ProbeScope_Init>
 8001b48:	b662      	cpsie	i
	//	encoder_interrupt_init();	// Interrupt generated by Encoder
	__enable_irq();			// built in interrupt enable function
	pi_init();
 8001b4a:	f000 fcf7 	bl	800253c <pi_init>


	while (1U)
	{
		/* Infinite loop */
		infinite_loop();
 8001b4e:	f7ff ffe7 	bl	8001b20 <infinite_loop>
	}
 8001b52:	e7fc      	b.n	8001b4e <main+0x22>

08001b54 <init_position>:
 * B High -> wait -> A High 0 -> wait
 * Reset: Theta | Position | Timers_old
 * Disable PWM output
 */
void init_position(void)	//TO DO:check if it still works
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	motion_on();			// Enable PWM pins
 8001b58:	f7ff fe9a 	bl	8001890 <motion_on>
	pwm_update(0, 1000); // Apply voltage on B Phase
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b62:	f7ff fdd3 	bl	800170c <pwm_update>
	delay_t(SECOND_1 / 2);	// Wait 0.5s
 8001b66:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b6a:	f001 ff8d 	bl	8003a88 <delay_t>

	pwm_update(1000, 0); // Apply voltage on A Phase
 8001b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b72:	2100      	movs	r1, #0
 8001b74:	f7ff fdca 	bl	800170c <pwm_update>
	delay_t(SECOND_1 / 2);	// Wait 0.5s
 8001b78:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b7c:	f001 ff84 	bl	8003a88 <delay_t>
//	motion_off();			// Disable PWM pin			NEED TO CHECK if it still works

	theta_fast = 0;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <init_position+0x50>)
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
	mechanical_position_fast = 0;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <init_position+0x54>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
	timer_value_old_fast = CCU40_CC40->TIMER;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <init_position+0x58>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <init_position+0x5c>)
 8001b96:	801a      	strh	r2, [r3, #0]
	timer_value_old_slow = CCU40_CC40->TIMER;
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <init_position+0x58>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <init_position+0x60>)
 8001ba0:	801a      	strh	r2, [r3, #0]
}
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	1fff0688 	.word	0x1fff0688
 8001ba8:	1fff0680 	.word	0x1fff0680
 8001bac:	4000c100 	.word	0x4000c100
 8001bb0:	1fff0696 	.word	0x1fff0696
 8001bb4:	1ffe8842 	.word	0x1ffe8842

08001bb8 <compute_speed>:
/*
 * Compute current speed
 * Slow loop
 */
void compute_speed(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	timer_value_slow = CCU40_CC40->TIMER;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <compute_speed+0x30>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <compute_speed+0x34>)
 8001bc4:	801a      	strh	r2, [r3, #0]
	motor_spd = timer_value_slow - timer_value_old_slow;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <compute_speed+0x34>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <compute_speed+0x38>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <compute_speed+0x3c>)
 8001bd4:	6013      	str	r3, [r2, #0]
	timer_value_old_slow = timer_value_slow;
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <compute_speed+0x34>)
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <compute_speed+0x38>)
 8001bdc:	801a      	strh	r2, [r3, #0]
}
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	4000c100 	.word	0x4000c100
 8001bec:	1ffe8840 	.word	0x1ffe8840
 8001bf0:	1ffe8842 	.word	0x1ffe8842
 8001bf4:	1ffe883c 	.word	0x1ffe883c

08001bf8 <pi_regulator_i_q>:
float_t err_old_pos;

float_t i_q_ref = 0, i_d_ref = 0, pos_ref = 0, spd_ref = 0, u_q_ref = 0, u_d_ref = 0;	//TEST

void pi_regulator_i_q(void) // i_q -> u_q_ref
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
	current_q.error = i_q_ref - i_q;
 8001bfc:	4b51      	ldr	r3, [pc, #324]	; (8001d44 <pi_regulator_i_q+0x14c>)
 8001bfe:	ed93 7a00 	vldr	s14, [r3]
 8001c02:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <pi_regulator_i_q+0x150>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0c:	4b4f      	ldr	r3, [pc, #316]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c0e:	edc3 7a03 	vstr	s15, [r3, #12]

	// Proportional part computation
	current_q.p_part = current_q.error * current_q.kp;
 8001c12:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c14:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c24:	edc3 7a04 	vstr	s15, [r3, #16]
	if (current_q.p_part > current_q.sat_out)
 8001c28:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c30:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	dd04      	ble.n	8001c48 <pi_regulator_i_q+0x50>
	{
		current_q.p_part = current_q.sat_out;
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a42      	ldr	r2, [pc, #264]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c44:	6113      	str	r3, [r2, #16]
 8001c46:	e014      	b.n	8001c72 <pi_regulator_i_q+0x7a>
	}
	else if (current_q.p_part < -current_q.sat_out)
 8001c48:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c4a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c50:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c54:	eef1 7a67 	vneg.f32	s15, s15
 8001c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	d507      	bpl.n	8001c72 <pi_regulator_i_q+0x7a>
	{
		current_q.p_part = -current_q.sat_out;
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c64:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c68:	eef1 7a67 	vneg.f32	s15, s15
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c6e:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Integral part computation
	current_q.i_part += current_q.error * current_q.ki;
 8001c72:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c74:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c7a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c7e:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c8e:	edc3 7a05 	vstr	s15, [r3, #20]
	if (current_q.i_part > current_q.sat_i_part)
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c94:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001c9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	dd04      	ble.n	8001cb2 <pi_regulator_i_q+0xba>
	{
		current_q.i_part = current_q.sat_i_part;
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001cae:	6153      	str	r3, [r2, #20]
 8001cb0:	e014      	b.n	8001cdc <pi_regulator_i_q+0xe4>
	}
	else if (current_q.i_part < -current_q.sat_i_part)
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001cb4:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001cba:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cbe:	eef1 7a67 	vneg.f32	s15, s15
 8001cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d507      	bpl.n	8001cdc <pi_regulator_i_q+0xe4>
	{
		current_q.i_part = -current_q.sat_i_part;
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001cce:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cd2:	eef1 7a67 	vneg.f32	s15, s15
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001cd8:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	// Output
	u_q_ref = current_q.p_part + current_q.i_part;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001cde:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001ce4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <pi_regulator_i_q+0x158>)
 8001cee:	edc3 7a00 	vstr	s15, [r3]

	if (u_q_ref > current_q.sat_out)
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001cf4:	ed93 7a07 	vldr	s14, [r3, #28]
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <pi_regulator_i_q+0x158>)
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d504      	bpl.n	8001d12 <pi_regulator_i_q+0x11a>
	{
		u_q_ref = current_q.sat_out;
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <pi_regulator_i_q+0x158>)
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e014      	b.n	8001d3c <pi_regulator_i_q+0x144>
	}
	else if (u_q_ref < -current_q.sat_out)
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001d14:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d18:	eeb1 7a67 	vneg.f32	s14, s15
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <pi_regulator_i_q+0x158>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	dd07      	ble.n	8001d3c <pi_regulator_i_q+0x144>
	{
		u_q_ref = -current_q.sat_out;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <pi_regulator_i_q+0x154>)
 8001d2e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d32:	eef1 7a67 	vneg.f32	s15, s15
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <pi_regulator_i_q+0x158>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	1ffe8844 	.word	0x1ffe8844
 8001d48:	1fff07d0 	.word	0x1fff07d0
 8001d4c:	1fff0768 	.word	0x1fff0768
 8001d50:	1ffe8854 	.word	0x1ffe8854

08001d54 <pi_regulator_i_d>:

void pi_regulator_i_d(void) // i_d -> u_d_ref
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
	current_d.error = i_d_ref - i_d;
 8001d58:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <pi_regulator_i_d+0x14c>)
 8001d5a:	ed93 7a00 	vldr	s14, [r3]
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <pi_regulator_i_d+0x150>)
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001d6a:	edc3 7a03 	vstr	s15, [r3, #12]

	// Proportional part computation
	current_d.p_part = current_d.error * current_d.kp;
 8001d6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001d70:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d74:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001d80:	edc3 7a04 	vstr	s15, [r3, #16]
	if (current_d.p_part > current_d.sat_out)
 8001d84:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001d86:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001d8c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	dd04      	ble.n	8001da4 <pi_regulator_i_d+0x50>
	{
		current_d.p_part = current_d.sat_out;
 8001d9a:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001da0:	6113      	str	r3, [r2, #16]
 8001da2:	e014      	b.n	8001dce <pi_regulator_i_d+0x7a>
	}
	else if (current_d.p_part < -current_d.sat_out)
 8001da4:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001da6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001daa:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001dac:	edd3 7a07 	vldr	s15, [r3, #28]
 8001db0:	eef1 7a67 	vneg.f32	s15, s15
 8001db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	d507      	bpl.n	8001dce <pi_regulator_i_d+0x7a>
	{
		current_d.p_part = -current_d.sat_out;
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001dc0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dc4:	eef1 7a67 	vneg.f32	s15, s15
 8001dc8:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001dca:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Integral part computation
	current_d.i_part += current_d.error * current_d.ki;
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001dd0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dd4:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001dd6:	edd3 6a03 	vldr	s13, [r3, #12]
 8001dda:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001ddc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001dea:	edc3 7a05 	vstr	s15, [r3, #20]
	if (current_d.i_part > current_d.sat_i_part)
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001df0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001df4:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001df6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	dd04      	ble.n	8001e0e <pi_regulator_i_d+0xba>
	{
		current_d.i_part = current_d.sat_i_part;
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e0a:	6153      	str	r3, [r2, #20]
 8001e0c:	e014      	b.n	8001e38 <pi_regulator_i_d+0xe4>
	}
	else if (current_d.i_part < -current_d.sat_i_part)
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e10:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e16:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e1a:	eef1 7a67 	vneg.f32	s15, s15
 8001e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	d507      	bpl.n	8001e38 <pi_regulator_i_d+0xe4>
	{
		current_d.i_part = -current_d.sat_i_part;
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e2a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e2e:	eef1 7a67 	vneg.f32	s15, s15
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e34:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	// Output
	u_d_ref = current_d.p_part + current_d.i_part;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e3a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e40:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <pi_regulator_i_d+0x158>)
 8001e4a:	edc3 7a00 	vstr	s15, [r3]

	if (u_d_ref > current_d.sat_out)
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e50:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <pi_regulator_i_d+0x158>)
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	d504      	bpl.n	8001e6e <pi_regulator_i_d+0x11a>
	{
		u_d_ref = current_d.sat_out;
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <pi_regulator_i_d+0x158>)
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e014      	b.n	8001e98 <pi_regulator_i_d+0x144>
	}
	else if (u_d_ref < -current_d.sat_out)
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e70:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e74:	eeb1 7a67 	vneg.f32	s14, s15
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <pi_regulator_i_d+0x158>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	dd07      	ble.n	8001e98 <pi_regulator_i_d+0x144>
	{
		u_d_ref = -current_d.sat_out;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <pi_regulator_i_d+0x154>)
 8001e8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e8e:	eef1 7a67 	vneg.f32	s15, s15
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <pi_regulator_i_d+0x158>)
 8001e94:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	1ffe8848 	.word	0x1ffe8848
 8001ea4:	1fff07d4 	.word	0x1fff07d4
 8001ea8:	1fff0720 	.word	0x1fff0720
 8001eac:	1ffe8858 	.word	0x1ffe8858

08001eb0 <pi_regulator_speed>:

void pi_regulator_speed(void) // motor_spd -> i_q_ref
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	speed.error = spd_ref - motor_spd;
 8001eb4:	4b53      	ldr	r3, [pc, #332]	; (8002004 <pi_regulator_speed+0x154>)
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	4b53      	ldr	r3, [pc, #332]	; (8002008 <pi_regulator_speed+0x158>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eca:	4b50      	ldr	r3, [pc, #320]	; (800200c <pi_regulator_speed+0x15c>)
 8001ecc:	edc3 7a03 	vstr	s15, [r3, #12]

	// Proportional part computation
	speed.p_part = speed.error * speed.kp;
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	; (800200c <pi_regulator_speed+0x15c>)
 8001ed2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	; (800200c <pi_regulator_speed+0x15c>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <pi_regulator_speed+0x15c>)
 8001ee2:	edc3 7a04 	vstr	s15, [r3, #16]
	if (speed.p_part > speed.sat_out)
 8001ee6:	4b49      	ldr	r3, [pc, #292]	; (800200c <pi_regulator_speed+0x15c>)
 8001ee8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001eec:	4b47      	ldr	r3, [pc, #284]	; (800200c <pi_regulator_speed+0x15c>)
 8001eee:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efa:	dd04      	ble.n	8001f06 <pi_regulator_speed+0x56>
	{
		speed.p_part = speed.sat_out;
 8001efc:	4b43      	ldr	r3, [pc, #268]	; (800200c <pi_regulator_speed+0x15c>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	4a42      	ldr	r2, [pc, #264]	; (800200c <pi_regulator_speed+0x15c>)
 8001f02:	6113      	str	r3, [r2, #16]
 8001f04:	e014      	b.n	8001f30 <pi_regulator_speed+0x80>
	}
	else if (speed.p_part < -speed.sat_out)
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <pi_regulator_speed+0x15c>)
 8001f08:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	; (800200c <pi_regulator_speed+0x15c>)
 8001f0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f12:	eef1 7a67 	vneg.f32	s15, s15
 8001f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	d507      	bpl.n	8001f30 <pi_regulator_speed+0x80>
	{
		speed.p_part = -speed.sat_out;
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <pi_regulator_speed+0x15c>)
 8001f22:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f26:	eef1 7a67 	vneg.f32	s15, s15
 8001f2a:	4b38      	ldr	r3, [pc, #224]	; (800200c <pi_regulator_speed+0x15c>)
 8001f2c:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Integral part computation
	speed.i_part += speed.error * speed.ki;
 8001f30:	4b36      	ldr	r3, [pc, #216]	; (800200c <pi_regulator_speed+0x15c>)
 8001f32:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f36:	4b35      	ldr	r3, [pc, #212]	; (800200c <pi_regulator_speed+0x15c>)
 8001f38:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f3c:	4b33      	ldr	r3, [pc, #204]	; (800200c <pi_regulator_speed+0x15c>)
 8001f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <pi_regulator_speed+0x15c>)
 8001f4c:	edc3 7a05 	vstr	s15, [r3, #20]
	if (speed.i_part > speed.sat_i_part)
 8001f50:	4b2e      	ldr	r3, [pc, #184]	; (800200c <pi_regulator_speed+0x15c>)
 8001f52:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f56:	4b2d      	ldr	r3, [pc, #180]	; (800200c <pi_regulator_speed+0x15c>)
 8001f58:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	dd04      	ble.n	8001f70 <pi_regulator_speed+0xc0>
	{
		speed.i_part = speed.sat_i_part;
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <pi_regulator_speed+0x15c>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a28      	ldr	r2, [pc, #160]	; (800200c <pi_regulator_speed+0x15c>)
 8001f6c:	6153      	str	r3, [r2, #20]
 8001f6e:	e014      	b.n	8001f9a <pi_regulator_speed+0xea>
	}
	else if (speed.i_part < -speed.sat_i_part)
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <pi_regulator_speed+0x15c>)
 8001f72:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <pi_regulator_speed+0x15c>)
 8001f78:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f7c:	eef1 7a67 	vneg.f32	s15, s15
 8001f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	d507      	bpl.n	8001f9a <pi_regulator_speed+0xea>
	{
		speed.i_part = -speed.sat_i_part;
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <pi_regulator_speed+0x15c>)
 8001f8c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f90:	eef1 7a67 	vneg.f32	s15, s15
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <pi_regulator_speed+0x15c>)
 8001f96:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	// Output
	i_q_ref = speed.p_part + speed.i_part;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <pi_regulator_speed+0x15c>)
 8001f9c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <pi_regulator_speed+0x15c>)
 8001fa2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <pi_regulator_speed+0x160>)
 8001fac:	edc3 7a00 	vstr	s15, [r3]

	if (i_q_ref > speed.sat_out)
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <pi_regulator_speed+0x15c>)
 8001fb2:	ed93 7a07 	vldr	s14, [r3, #28]
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <pi_regulator_speed+0x160>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	d504      	bpl.n	8001fd0 <pi_regulator_speed+0x120>
	{
		i_q_ref = speed.sat_out;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <pi_regulator_speed+0x15c>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a11      	ldr	r2, [pc, #68]	; (8002010 <pi_regulator_speed+0x160>)
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e014      	b.n	8001ffa <pi_regulator_speed+0x14a>
	}
	else if (i_q_ref < -speed.sat_out)
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <pi_regulator_speed+0x15c>)
 8001fd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fd6:	eeb1 7a67 	vneg.f32	s14, s15
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <pi_regulator_speed+0x160>)
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	dd07      	ble.n	8001ffa <pi_regulator_speed+0x14a>
	{
		i_q_ref = -speed.sat_out;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <pi_regulator_speed+0x15c>)
 8001fec:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ff0:	eef1 7a67 	vneg.f32	s15, s15
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <pi_regulator_speed+0x160>)
 8001ff6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	1ffe8850 	.word	0x1ffe8850
 8002008:	1ffe883c 	.word	0x1ffe883c
 800200c:	1fff0744 	.word	0x1fff0744
 8002010:	1ffe8844 	.word	0x1ffe8844

08002014 <pid_regulator_pos>:

void pid_regulator_pos(void) // mechanical_position_fast -> spd_ref
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
	int i = !(LOOP_SPD_ENABLE);
 800201a:	4bba      	ldr	r3, [pc, #744]	; (8002304 <pid_regulator_pos+0x2f0>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	607b      	str	r3, [r7, #4]

	position[i].error = pos_ref - mechanical_position_fast;
 800202e:	4bb6      	ldr	r3, [pc, #728]	; (8002308 <pid_regulator_pos+0x2f4>)
 8002030:	ed93 7a00 	vldr	s14, [r3]
 8002034:	4bb5      	ldr	r3, [pc, #724]	; (800230c <pid_regulator_pos+0x2f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002044:	49b2      	ldr	r1, [pc, #712]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3308      	adds	r3, #8
 8002054:	edc3 7a01 	vstr	s15, [r3, #4]

	// Proportional part computation
	position[i].p_part = position[i].error * position[i].kp;
 8002058:	49ad      	ldr	r1, [pc, #692]	; (8002310 <pid_regulator_pos+0x2fc>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3308      	adds	r3, #8
 8002068:	ed93 7a01 	vldr	s14, [r3, #4]
 800206c:	49a8      	ldr	r1, [pc, #672]	; (8002310 <pid_regulator_pos+0x2fc>)
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	49a3      	ldr	r1, [pc, #652]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3310      	adds	r3, #16
 8002092:	edc3 7a00 	vstr	s15, [r3]
	if (position[i].p_part > position[i].sat_out)
 8002096:	499e      	ldr	r1, [pc, #632]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3310      	adds	r3, #16
 80020a6:	ed93 7a00 	vldr	s14, [r3]
 80020aa:	4999      	ldr	r1, [pc, #612]	; (8002310 <pid_regulator_pos+0x2fc>)
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3318      	adds	r3, #24
 80020ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80020be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c6:	dd12      	ble.n	80020ee <pid_regulator_pos+0xda>
	{
		position[i].p_part = position[i].sat_out;
 80020c8:	4991      	ldr	r1, [pc, #580]	; (8002310 <pid_regulator_pos+0x2fc>)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	3318      	adds	r3, #24
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	488d      	ldr	r0, [pc, #564]	; (8002310 <pid_regulator_pos+0x2fc>)
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4403      	add	r3, r0
 80020e8:	3310      	adds	r3, #16
 80020ea:	6019      	str	r1, [r3, #0]
 80020ec:	e030      	b.n	8002150 <pid_regulator_pos+0x13c>
	}
	else if (position[i].p_part < -position[i].sat_out)
 80020ee:	4988      	ldr	r1, [pc, #544]	; (8002310 <pid_regulator_pos+0x2fc>)
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3310      	adds	r3, #16
 80020fe:	ed93 7a00 	vldr	s14, [r3]
 8002102:	4983      	ldr	r1, [pc, #524]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3318      	adds	r3, #24
 8002112:	edd3 7a01 	vldr	s15, [r3, #4]
 8002116:	eef1 7a67 	vneg.f32	s15, s15
 800211a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002122:	d515      	bpl.n	8002150 <pid_regulator_pos+0x13c>
	{
		position[i].p_part = -position[i].sat_out;
 8002124:	497a      	ldr	r1, [pc, #488]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3318      	adds	r3, #24
 8002134:	edd3 7a01 	vldr	s15, [r3, #4]
 8002138:	eef1 7a67 	vneg.f32	s15, s15
 800213c:	4974      	ldr	r1, [pc, #464]	; (8002310 <pid_regulator_pos+0x2fc>)
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3310      	adds	r3, #16
 800214c:	edc3 7a00 	vstr	s15, [r3]
	}

	// Integral part computation
	position[i].i_part += position[i].error * position[i].ki;
 8002150:	496f      	ldr	r1, [pc, #444]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3310      	adds	r3, #16
 8002160:	ed93 7a01 	vldr	s14, [r3, #4]
 8002164:	496a      	ldr	r1, [pc, #424]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3308      	adds	r3, #8
 8002174:	edd3 6a01 	vldr	s13, [r3, #4]
 8002178:	4965      	ldr	r1, [pc, #404]	; (8002310 <pid_regulator_pos+0x2fc>)
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	edd3 7a01 	vldr	s15, [r3, #4]
 800218a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	495f      	ldr	r1, [pc, #380]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3310      	adds	r3, #16
 80021a2:	edc3 7a01 	vstr	s15, [r3, #4]
	if (position[i].i_part > position[i].sat_i_part)
 80021a6:	495a      	ldr	r1, [pc, #360]	; (8002310 <pid_regulator_pos+0x2fc>)
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3310      	adds	r3, #16
 80021b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80021ba:	4955      	ldr	r1, [pc, #340]	; (8002310 <pid_regulator_pos+0x2fc>)
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	3320      	adds	r3, #32
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d6:	dd12      	ble.n	80021fe <pid_regulator_pos+0x1ea>
	{
		position[i].i_part = position[i].sat_i_part;
 80021d8:	494d      	ldr	r1, [pc, #308]	; (8002310 <pid_regulator_pos+0x2fc>)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3320      	adds	r3, #32
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	4849      	ldr	r0, [pc, #292]	; (8002310 <pid_regulator_pos+0x2fc>)
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4403      	add	r3, r0
 80021f8:	3310      	adds	r3, #16
 80021fa:	6059      	str	r1, [r3, #4]
 80021fc:	e030      	b.n	8002260 <pid_regulator_pos+0x24c>
	}
	else if (position[i].i_part < -position[i].sat_i_part)
 80021fe:	4944      	ldr	r1, [pc, #272]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	3310      	adds	r3, #16
 800220e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002212:	493f      	ldr	r1, [pc, #252]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3320      	adds	r3, #32
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	eef1 7a67 	vneg.f32	s15, s15
 800222a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	d515      	bpl.n	8002260 <pid_regulator_pos+0x24c>
	{
		position[i].i_part = -position[i].sat_i_part;
 8002234:	4936      	ldr	r1, [pc, #216]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	3320      	adds	r3, #32
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	eef1 7a67 	vneg.f32	s15, s15
 800224c:	4930      	ldr	r1, [pc, #192]	; (8002310 <pid_regulator_pos+0x2fc>)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	3310      	adds	r3, #16
 800225c:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	// Derived part computation	
	position[i].d_part = (position[i].error - err_old_pos) * position[i].kd;
 8002260:	492b      	ldr	r1, [pc, #172]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	3308      	adds	r3, #8
 8002270:	ed93 7a01 	vldr	s14, [r3, #4]
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <pid_regulator_pos+0x300>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800227e:	4924      	ldr	r1, [pc, #144]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	3308      	adds	r3, #8
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002296:	491e      	ldr	r1, [pc, #120]	; (8002310 <pid_regulator_pos+0x2fc>)
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3318      	adds	r3, #24
 80022a6:	edc3 7a00 	vstr	s15, [r3]
	if (position[i].d_part > position[i].sat_out)
 80022aa:	4919      	ldr	r1, [pc, #100]	; (8002310 <pid_regulator_pos+0x2fc>)
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3318      	adds	r3, #24
 80022ba:	ed93 7a00 	vldr	s14, [r3]
 80022be:	4914      	ldr	r1, [pc, #80]	; (8002310 <pid_regulator_pos+0x2fc>)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3318      	adds	r3, #24
 80022ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80022d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	dd1d      	ble.n	8002318 <pid_regulator_pos+0x304>
	{
		position[i].d_part = position[i].sat_out;
 80022dc:	490c      	ldr	r1, [pc, #48]	; (8002310 <pid_regulator_pos+0x2fc>)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3318      	adds	r3, #24
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	4808      	ldr	r0, [pc, #32]	; (8002310 <pid_regulator_pos+0x2fc>)
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4403      	add	r3, r0
 80022fc:	3318      	adds	r3, #24
 80022fe:	6019      	str	r1, [r3, #0]
 8002300:	e03b      	b.n	800237a <pid_regulator_pos+0x366>
 8002302:	bf00      	nop
 8002304:	1fff067a 	.word	0x1fff067a
 8002308:	1ffe884c 	.word	0x1ffe884c
 800230c:	1fff0680 	.word	0x1fff0680
 8002310:	1fff06d4 	.word	0x1fff06d4
 8002314:	1fff071c 	.word	0x1fff071c
	}
	else if (position[i].d_part < -position[i].sat_out)
 8002318:	4985      	ldr	r1, [pc, #532]	; (8002530 <pid_regulator_pos+0x51c>)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	3318      	adds	r3, #24
 8002328:	ed93 7a00 	vldr	s14, [r3]
 800232c:	4980      	ldr	r1, [pc, #512]	; (8002530 <pid_regulator_pos+0x51c>)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	3318      	adds	r3, #24
 800233c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002340:	eef1 7a67 	vneg.f32	s15, s15
 8002344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	d515      	bpl.n	800237a <pid_regulator_pos+0x366>
	{
		position[i].d_part = -position[i].sat_out;
 800234e:	4978      	ldr	r1, [pc, #480]	; (8002530 <pid_regulator_pos+0x51c>)
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3318      	adds	r3, #24
 800235e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002362:	eef1 7a67 	vneg.f32	s15, s15
 8002366:	4972      	ldr	r1, [pc, #456]	; (8002530 <pid_regulator_pos+0x51c>)
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3318      	adds	r3, #24
 8002376:	edc3 7a00 	vstr	s15, [r3]
	}

	// Output SPD or I
	switch (i)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <pid_regulator_pos+0x372>
 8002380:	2b01      	cmp	r3, #1
 8002382:	d068      	beq.n	8002456 <pid_regulator_pos+0x442>
			i_q_ref = -position[i].sat_out;
		}
		break;

	default:
		break;
 8002384:	e0cf      	b.n	8002526 <pid_regulator_pos+0x512>

	// Output SPD or I
	switch (i)
	{
	case (SPD_REF):
		spd_ref = position[i].p_part + position[i].i_part + position[i].d_part;
 8002386:	496a      	ldr	r1, [pc, #424]	; (8002530 <pid_regulator_pos+0x51c>)
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3310      	adds	r3, #16
 8002396:	ed93 7a00 	vldr	s14, [r3]
 800239a:	4965      	ldr	r1, [pc, #404]	; (8002530 <pid_regulator_pos+0x51c>)
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	3310      	adds	r3, #16
 80023aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80023ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b2:	495f      	ldr	r1, [pc, #380]	; (8002530 <pid_regulator_pos+0x51c>)
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3318      	adds	r3, #24
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <pid_regulator_pos+0x520>)
 80023cc:	edc3 7a00 	vstr	s15, [r3]

		if (spd_ref > position[i].sat_out)
 80023d0:	4957      	ldr	r1, [pc, #348]	; (8002530 <pid_regulator_pos+0x51c>)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3318      	adds	r3, #24
 80023e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <pid_regulator_pos+0x520>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f2:	d50b      	bpl.n	800240c <pid_regulator_pos+0x3f8>
		{
			spd_ref = position[i].sat_out;
 80023f4:	494e      	ldr	r1, [pc, #312]	; (8002530 <pid_regulator_pos+0x51c>)
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	3318      	adds	r3, #24
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <pid_regulator_pos+0x520>)
 8002408:	6013      	str	r3, [r2, #0]
		}
		else if (spd_ref < -position[i].sat_out)
		{
			spd_ref = -position[i].sat_out;
		}
		break;
 800240a:	e08c      	b.n	8002526 <pid_regulator_pos+0x512>

		if (spd_ref > position[i].sat_out)
		{
			spd_ref = position[i].sat_out;
		}
		else if (spd_ref < -position[i].sat_out)
 800240c:	4948      	ldr	r1, [pc, #288]	; (8002530 <pid_regulator_pos+0x51c>)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3318      	adds	r3, #24
 800241c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002420:	eeb1 7a67 	vneg.f32	s14, s15
 8002424:	4b43      	ldr	r3, [pc, #268]	; (8002534 <pid_regulator_pos+0x520>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	dc00      	bgt.n	8002436 <pid_regulator_pos+0x422>
		{
			spd_ref = -position[i].sat_out;
		}
		break;
 8002434:	e077      	b.n	8002526 <pid_regulator_pos+0x512>
		{
			spd_ref = position[i].sat_out;
		}
		else if (spd_ref < -position[i].sat_out)
		{
			spd_ref = -position[i].sat_out;
 8002436:	493e      	ldr	r1, [pc, #248]	; (8002530 <pid_regulator_pos+0x51c>)
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3318      	adds	r3, #24
 8002446:	edd3 7a01 	vldr	s15, [r3, #4]
 800244a:	eef1 7a67 	vneg.f32	s15, s15
 800244e:	4b39      	ldr	r3, [pc, #228]	; (8002534 <pid_regulator_pos+0x520>)
 8002450:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8002454:	e067      	b.n	8002526 <pid_regulator_pos+0x512>

	case (I_REF):
		i_q_ref = position[i].p_part + position[i].i_part + position[i].d_part;
 8002456:	4936      	ldr	r1, [pc, #216]	; (8002530 <pid_regulator_pos+0x51c>)
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3310      	adds	r3, #16
 8002466:	ed93 7a00 	vldr	s14, [r3]
 800246a:	4931      	ldr	r1, [pc, #196]	; (8002530 <pid_regulator_pos+0x51c>)
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3310      	adds	r3, #16
 800247a:	edd3 7a01 	vldr	s15, [r3, #4]
 800247e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002482:	492b      	ldr	r1, [pc, #172]	; (8002530 <pid_regulator_pos+0x51c>)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3318      	adds	r3, #24
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249a:	4b27      	ldr	r3, [pc, #156]	; (8002538 <pid_regulator_pos+0x524>)
 800249c:	edc3 7a00 	vstr	s15, [r3]

		if (i_q_ref > position[i].sat_out)
 80024a0:	4923      	ldr	r1, [pc, #140]	; (8002530 <pid_regulator_pos+0x51c>)
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3318      	adds	r3, #24
 80024b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80024b4:	4b20      	ldr	r3, [pc, #128]	; (8002538 <pid_regulator_pos+0x524>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	d50b      	bpl.n	80024dc <pid_regulator_pos+0x4c8>
		{
			i_q_ref = position[i].sat_out;
 80024c4:	491a      	ldr	r1, [pc, #104]	; (8002530 <pid_regulator_pos+0x51c>)
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3318      	adds	r3, #24
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <pid_regulator_pos+0x524>)
 80024d8:	6013      	str	r3, [r2, #0]
		}
		else if (i_q_ref < -position[i].sat_out)
		{
			i_q_ref = -position[i].sat_out;
		}
		break;
 80024da:	e023      	b.n	8002524 <pid_regulator_pos+0x510>

		if (i_q_ref > position[i].sat_out)
		{
			i_q_ref = position[i].sat_out;
		}
		else if (i_q_ref < -position[i].sat_out)
 80024dc:	4914      	ldr	r1, [pc, #80]	; (8002530 <pid_regulator_pos+0x51c>)
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3318      	adds	r3, #24
 80024ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80024f0:	eeb1 7a67 	vneg.f32	s14, s15
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <pid_regulator_pos+0x524>)
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	dc00      	bgt.n	8002506 <pid_regulator_pos+0x4f2>
		{
			i_q_ref = -position[i].sat_out;
		}
		break;
 8002504:	e00e      	b.n	8002524 <pid_regulator_pos+0x510>
		{
			i_q_ref = position[i].sat_out;
		}
		else if (i_q_ref < -position[i].sat_out)
		{
			i_q_ref = -position[i].sat_out;
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <pid_regulator_pos+0x51c>)
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	3318      	adds	r3, #24
 8002516:	edd3 7a01 	vldr	s15, [r3, #4]
 800251a:	eef1 7a67 	vneg.f32	s15, s15
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <pid_regulator_pos+0x524>)
 8002520:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8002524:	bf00      	nop

	default:
		break;
	}
}
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	1fff06d4 	.word	0x1fff06d4
 8002534:	1ffe8850 	.word	0x1ffe8850
 8002538:	1ffe8844 	.word	0x1ffe8844

0800253c <pi_init>:

void pi_init(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
	current_q.kp = 1;
 8002540:	4b3d      	ldr	r3, [pc, #244]	; (8002638 <pi_init+0xfc>)
 8002542:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002546:	601a      	str	r2, [r3, #0]
	current_q.ki = 0;
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <pi_init+0xfc>)
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
	current_q.kd = 0;
 8002550:	4b39      	ldr	r3, [pc, #228]	; (8002638 <pi_init+0xfc>)
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
	current_q.sat_out = 15000;
 8002558:	4b37      	ldr	r3, [pc, #220]	; (8002638 <pi_init+0xfc>)
 800255a:	4a38      	ldr	r2, [pc, #224]	; (800263c <pi_init+0x100>)
 800255c:	61da      	str	r2, [r3, #28]
	current_q.sat_i_part = current_q.sat_out / 10;
 800255e:	4b36      	ldr	r3, [pc, #216]	; (8002638 <pi_init+0xfc>)
 8002560:	edd3 7a07 	vldr	s15, [r3, #28]
 8002564:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8002568:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <pi_init+0xfc>)
 800256e:	edc3 7a08 	vstr	s15, [r3, #32]

	current_d.kp = current_q.kp;
 8002572:	4b31      	ldr	r3, [pc, #196]	; (8002638 <pi_init+0xfc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a32      	ldr	r2, [pc, #200]	; (8002640 <pi_init+0x104>)
 8002578:	6013      	str	r3, [r2, #0]
	current_d.ki = current_q.ki;
 800257a:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <pi_init+0xfc>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a30      	ldr	r2, [pc, #192]	; (8002640 <pi_init+0x104>)
 8002580:	6053      	str	r3, [r2, #4]
	current_d.kd = current_q.kd;
 8002582:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <pi_init+0xfc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4a2e      	ldr	r2, [pc, #184]	; (8002640 <pi_init+0x104>)
 8002588:	6093      	str	r3, [r2, #8]
	current_d.sat_out = current_q.sat_out;
 800258a:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <pi_init+0xfc>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a2c      	ldr	r2, [pc, #176]	; (8002640 <pi_init+0x104>)
 8002590:	61d3      	str	r3, [r2, #28]
	current_d.sat_i_part = current_q.sat_i_part;
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <pi_init+0xfc>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <pi_init+0x104>)
 8002598:	6213      	str	r3, [r2, #32]

	speed.kp = 0;
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <pi_init+0x108>)
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
	speed.ki = 0;
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <pi_init+0x108>)
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	605a      	str	r2, [r3, #4]
	speed.kd = 0;
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <pi_init+0x108>)
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
	speed.sat_out = 5000;
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <pi_init+0x108>)
 80025b4:	4a24      	ldr	r2, [pc, #144]	; (8002648 <pi_init+0x10c>)
 80025b6:	61da      	str	r2, [r3, #28]
	speed.sat_i_part = speed.sat_out / 10;
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <pi_init+0x108>)
 80025ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80025be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 80025c2:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <pi_init+0x108>)
 80025c8:	edc3 7a08 	vstr	s15, [r3, #32]

	position[0].kp = 0;
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <pi_init+0x110>)
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
	position[0].ki = 0;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <pi_init+0x110>)
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
	position[0].kd = 0;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <pi_init+0x110>)
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
	position[0].sat_out = 50;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <pi_init+0x110>)
 80025e6:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <pi_init+0x114>)
 80025e8:	61da      	str	r2, [r3, #28]
	position[0].sat_i_part = position[0].sat_out / 10;
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <pi_init+0x110>)
 80025ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80025f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 80025f4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <pi_init+0x110>)
 80025fa:	edc3 7a08 	vstr	s15, [r3, #32]

	position[1].kp = 0;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <pi_init+0x110>)
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
	position[1].ki = 0;
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <pi_init+0x110>)
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
	position[1].kd = 0;
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <pi_init+0x110>)
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
	position[1].sat_out = 5000;
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <pi_init+0x110>)
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <pi_init+0x10c>)
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
	position[1].sat_i_part = position[1].sat_out / 10;
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <pi_init+0x110>)
 800261e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002622:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8002626:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <pi_init+0x110>)
 800262c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

}
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	1fff0768 	.word	0x1fff0768
 800263c:	466a6000 	.word	0x466a6000
 8002640:	1fff0720 	.word	0x1fff0720
 8002644:	1fff0744 	.word	0x1fff0744
 8002648:	459c4000 	.word	0x459c4000
 800264c:	1fff06d4 	.word	0x1fff06d4
 8002650:	42480000 	.word	0x42480000

08002654 <ProbeScope_Init>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Init (uint32_t  sampling_clk_hz)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    static  CPU_INT32U  temp = 0;


    ProbeScope_Ch1.En             = 0;
 800265c:	4b37      	ldr	r3, [pc, #220]	; (800273c <ProbeScope_Init+0xe8>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
#if PROBE_SCOPE_MAX_CH >= 2       
    ProbeScope_Ch2.En             = 0;
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <ProbeScope_Init+0xec>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 3       
    ProbeScope_Ch3.En             = 0;
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <ProbeScope_Init+0xf0>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 4       
    ProbeScope_Ch4.En             = 0;
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <ProbeScope_Init+0xf4>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 5       
    ProbeScope_Ch5.En             = 0;
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <ProbeScope_Init+0xf8>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 6       
    ProbeScope_Ch6.En             = 0;
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <ProbeScope_Init+0xfc>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 7       
    ProbeScope_Ch7.En             = 0;
 8002680:	4b34      	ldr	r3, [pc, #208]	; (8002754 <ProbeScope_Init+0x100>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 8       
    ProbeScope_Ch8.En             = 0;
 8002686:	4b34      	ldr	r3, [pc, #208]	; (8002758 <ProbeScope_Init+0x104>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
#endif

    ProbeScope_Mode               = PROBE_SCOPE_MODE_OFF;
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <ProbeScope_Init+0x108>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
    ProbeScope_State              = PROBE_SCOPE_STATE_START;
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <ProbeScope_Init+0x10c>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
    ProbeScope_TrigChSel          = PROBE_SCOPE_CH1;                         // Default trigger channel
 8002698:	4b32      	ldr	r3, [pc, #200]	; (8002764 <ProbeScope_Init+0x110>)
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
    ProbeScope_SampleIxPrev       = 0;
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <ProbeScope_Init+0x114>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
    ProbeScope_SampleIxCur        = 0;
 80026a4:	4b31      	ldr	r3, [pc, #196]	; (800276c <ProbeScope_Init+0x118>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigFlag           = 0;
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <ProbeScope_Init+0x11c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigDispPos        = 0;
 80026b0:	4b30      	ldr	r3, [pc, #192]	; (8002774 <ProbeScope_Init+0x120>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOff        = 0;
 80026b6:	4b30      	ldr	r3, [pc, #192]	; (8002778 <ProbeScope_Init+0x124>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOffCtr     = 0;
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <ProbeScope_Init+0x128>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
    ProbeScope_DataRdyFlag        = 0;
 80026c2:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <ProbeScope_Init+0x12c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <ProbeScope_Init+0x120>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2d      	ldr	r2, [pc, #180]	; (8002784 <ProbeScope_Init+0x130>)
 80026ce:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES;
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <ProbeScope_Init+0x134>)
 80026d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d6:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigSlope          = PROBE_SCOPE_TRIG_POS;                    // We assume a positive going signal by default
 80026d8:	4b2c      	ldr	r3, [pc, #176]	; (800278c <ProbeScope_Init+0x138>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
    temp                          = ProbeScopeDbg_MaxSamples;
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <ProbeScope_Init+0x13c>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <ProbeScope_Init+0x140>)
 80026e8:	601a      	str	r2, [r3, #0]
    temp                         += ProbeScopeDbg_MaxCh;
 80026ea:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <ProbeScope_Init+0x144>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b28      	ldr	r3, [pc, #160]	; (8002794 <ProbeScope_Init+0x140>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a26      	ldr	r2, [pc, #152]	; (8002794 <ProbeScope_Init+0x140>)
 80026fa:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_16BitEn;
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <ProbeScope_Init+0x148>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <ProbeScope_Init+0x140>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4413      	add	r3, r2
 8002706:	4a23      	ldr	r2, [pc, #140]	; (8002794 <ProbeScope_Init+0x140>)
 8002708:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_32BitEn;
 800270a:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <ProbeScope_Init+0x14c>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <ProbeScope_Init+0x140>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <ProbeScope_Init+0x140>)
 8002716:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplingClkDiv     =    1;
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <ProbeScope_Init+0x150>)
 800271a:	2201      	movs	r2, #1
 800271c:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkDivCtr  =    0;
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <ProbeScope_Init+0x154>)
 8002720:	2200      	movs	r2, #0
 8002722:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkHz      = sampling_clk_hz;
 8002724:	4a21      	ldr	r2, [pc, #132]	; (80027ac <ProbeScope_Init+0x158>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
    ProbeScope_InitFlag           =    1;
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <ProbeScope_Init+0x15c>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
}
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	1ffe885c 	.word	0x1ffe885c
 8002740:	1ffe9814 	.word	0x1ffe9814
 8002744:	1ffea7cc 	.word	0x1ffea7cc
 8002748:	1ffeb784 	.word	0x1ffeb784
 800274c:	1ffec73c 	.word	0x1ffec73c
 8002750:	1ffed6f4 	.word	0x1ffed6f4
 8002754:	1ffee6ac 	.word	0x1ffee6ac
 8002758:	1ffef664 	.word	0x1ffef664
 800275c:	1fff061c 	.word	0x1fff061c
 8002760:	1fff063c 	.word	0x1fff063c
 8002764:	1fff061d 	.word	0x1fff061d
 8002768:	1fff0628 	.word	0x1fff0628
 800276c:	1fff062c 	.word	0x1fff062c
 8002770:	1fff078c 	.word	0x1fff078c
 8002774:	1fff0798 	.word	0x1fff0798
 8002778:	1fff079c 	.word	0x1fff079c
 800277c:	1fff0620 	.word	0x1fff0620
 8002780:	1fff07a4 	.word	0x1fff07a4
 8002784:	1fff0630 	.word	0x1fff0630
 8002788:	1fff0634 	.word	0x1fff0634
 800278c:	1fff0624 	.word	0x1fff0624
 8002790:	1ffe880e 	.word	0x1ffe880e
 8002794:	1fff0640 	.word	0x1fff0640
 8002798:	1ffe8810 	.word	0x1ffe8810
 800279c:	1ffe8814 	.word	0x1ffe8814
 80027a0:	1ffe8818 	.word	0x1ffe8818
 80027a4:	1fff0638 	.word	0x1fff0638
 80027a8:	1fff063a 	.word	0x1fff063a
 80027ac:	1fff0790 	.word	0x1fff0790
 80027b0:	1fff07a0 	.word	0x1fff07a0

080027b4 <ProbeScope_Sampling>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Sampling (void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
    switch (ProbeScope_Mode) {
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <ProbeScope_Sampling+0x40>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d817      	bhi.n	80027f0 <ProbeScope_Sampling+0x3c>
 80027c0:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <ProbeScope_Sampling+0x14>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	080027d9 	.word	0x080027d9
 80027cc:	080027df 	.word	0x080027df
 80027d0:	080027e5 	.word	0x080027e5
 80027d4:	080027eb 	.word	0x080027eb
        case PROBE_SCOPE_MODE_OFF:
             ProbeScope_ModeOff();
 80027d8:	f000 f80e 	bl	80027f8 <ProbeScope_ModeOff>
             break;
 80027dc:	e008      	b.n	80027f0 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_SINGLE:
             ProbeScope_ModeTrig();
 80027de:	f000 f85d 	bl	800289c <ProbeScope_ModeTrig>
             break;
 80027e2:	e005      	b.n	80027f0 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_CONTINUOUS:
             ProbeScope_ModeContinuous();
 80027e4:	f000 f81c 	bl	8002820 <ProbeScope_ModeContinuous>
             break;
 80027e8:	e002      	b.n	80027f0 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_TRIG:
             ProbeScope_ModeTrig(); 
 80027ea:	f000 f857 	bl	800289c <ProbeScope_ModeTrig>
             break;
 80027ee:	bf00      	nop
    }
}
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	1fff061c 	.word	0x1fff061c

080027f8 <ProbeScope_ModeOff>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeOff (void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                // Force Triggered mode state to START
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <ProbeScope_ModeOff+0x20>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    if (ProbeScope_SamplingClkDiv == 0) {
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <ProbeScope_ModeOff+0x24>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <ProbeScope_ModeOff+0x18>
        ProbeScope_SamplingClkDiv =  1;
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <ProbeScope_ModeOff+0x24>)
 800280c:	2201      	movs	r2, #1
 800280e:	801a      	strh	r2, [r3, #0]
    }
}
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	1fff063c 	.word	0x1fff063c
 800281c:	1fff0638 	.word	0x1fff0638

08002820 <ProbeScope_ModeContinuous>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeContinuous (void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
    if (ProbeScope_DataRdyFlag == 0) {                                          // Read one buffer's worth of data
 8002824:	4b17      	ldr	r3, [pc, #92]	; (8002884 <ProbeScope_ModeContinuous+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d126      	bne.n	800287a <ProbeScope_ModeContinuous+0x5a>
        ProbeScope_TrigFlag = 0;
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <ProbeScope_ModeContinuous+0x68>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
        if (ProbeScope_SamplingClkDivCtr > 1) {
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <ProbeScope_ModeContinuous+0x6c>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d906      	bls.n	8002848 <ProbeScope_ModeContinuous+0x28>
            ProbeScope_SamplingClkDivCtr--;
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <ProbeScope_ModeContinuous+0x6c>)
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <ProbeScope_ModeContinuous+0x6c>)
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	e018      	b.n	800287a <ProbeScope_ModeContinuous+0x5a>
        } else {
            if (ProbeScope_SamplingClkDiv == 0) {                               // Make sure clock divider is not 0
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <ProbeScope_ModeContinuous+0x70>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <ProbeScope_ModeContinuous+0x36>
                ProbeScope_SamplingClkDiv =  1;
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <ProbeScope_ModeContinuous+0x70>)
 8002852:	2201      	movs	r2, #1
 8002854:	801a      	strh	r2, [r3, #0]
            }
            ProbeScope_SamplingClkDivCtr  = ProbeScope_SamplingClkDiv;
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <ProbeScope_ModeContinuous+0x70>)
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <ProbeScope_ModeContinuous+0x6c>)
 800285c:	801a      	strh	r2, [r3, #0]
            ProbeScope_SampleChAll();                                           // Get the first sample to create a 'previous' value for triggering
 800285e:	f000 f8e5 	bl	8002a2c <ProbeScope_SampleChAll>
            ProbeScope_SamplePosNext();                                         // Position to next sample
 8002862:	f000 fa0b 	bl	8002c7c <ProbeScope_SamplePosNext>
            if (ProbeScope_SampleIxCur == 0) {                                  // Read one buffer's worth of data
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <ProbeScope_ModeContinuous+0x74>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d105      	bne.n	800287a <ProbeScope_ModeContinuous+0x5a>
                ProbeScope_DataRdyFlag = 1;   
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <ProbeScope_ModeContinuous+0x64>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]
                ProbeScope_TrigFlag    = 1;
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <ProbeScope_ModeContinuous+0x68>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]
            }
        }
    }
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                 // Force Triggered mode state to START
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <ProbeScope_ModeContinuous+0x78>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
}
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	1fff07a4 	.word	0x1fff07a4
 8002888:	1fff078c 	.word	0x1fff078c
 800288c:	1fff063a 	.word	0x1fff063a
 8002890:	1fff0638 	.word	0x1fff0638
 8002894:	1fff062c 	.word	0x1fff062c
 8002898:	1fff063c 	.word	0x1fff063c

0800289c <ProbeScope_ModeTrig>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeTrig (void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
    if (ProbeScope_SamplingClkDivCtr > 1) {
 80028a0:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <ProbeScope_ModeTrig+0x15c>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d906      	bls.n	80028b6 <ProbeScope_ModeTrig+0x1a>
        ProbeScope_SamplingClkDivCtr--;
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <ProbeScope_ModeTrig+0x15c>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	4b51      	ldr	r3, [pc, #324]	; (80029f8 <ProbeScope_ModeTrig+0x15c>)
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	e09e      	b.n	80029f4 <ProbeScope_ModeTrig+0x158>
    } else { 
        if (ProbeScope_SamplingClkDiv == 0) {                                        // Make sure clock divider is not 0
 80028b6:	4b51      	ldr	r3, [pc, #324]	; (80029fc <ProbeScope_ModeTrig+0x160>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <ProbeScope_ModeTrig+0x28>
            ProbeScope_SamplingClkDiv =  1;
 80028be:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <ProbeScope_ModeTrig+0x160>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	801a      	strh	r2, [r3, #0]
        }
        ProbeScope_SamplingClkDivCtr = ProbeScope_SamplingClkDiv;
 80028c4:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <ProbeScope_ModeTrig+0x160>)
 80028c6:	881a      	ldrh	r2, [r3, #0]
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <ProbeScope_ModeTrig+0x15c>)
 80028ca:	801a      	strh	r2, [r3, #0]
        switch (ProbeScope_State) {
 80028cc:	4b4c      	ldr	r3, [pc, #304]	; (8002a00 <ProbeScope_ModeTrig+0x164>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	f200 808b 	bhi.w	80029ec <ProbeScope_ModeTrig+0x150>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <ProbeScope_ModeTrig+0x40>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	080028ed 	.word	0x080028ed
 80028e0:	08002929 	.word	0x08002929
 80028e4:	08002969 	.word	0x08002969
 80028e8:	080029b1 	.word	0x080029b1
            case PROBE_SCOPE_STATE_START:
                 ProbeScope_DataRdyFlag        = 0;
 80028ec:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <ProbeScope_ModeTrig+0x168>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigFlag           = 0;
 80028f2:	4b45      	ldr	r3, [pc, #276]	; (8002a08 <ProbeScope_ModeTrig+0x16c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxPrev       = 0;
 80028f8:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <ProbeScope_ModeTrig+0x170>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxCur        = 0;
 80028fe:	4b44      	ldr	r3, [pc, #272]	; (8002a10 <ProbeScope_ModeTrig+0x174>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigHoldOffCtr     = 0;
 8002904:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <ProbeScope_ModeTrig+0x178>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPostTrigCtr = 0;
 800290a:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <ProbeScope_ModeTrig+0x17c>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;            // Minimum number of samples pre-trigger
 8002910:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <ProbeScope_ModeTrig+0x180>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a42      	ldr	r2, [pc, #264]	; (8002a20 <ProbeScope_ModeTrig+0x184>)
 8002916:	6013      	str	r3, [r2, #0]
                 ProbeScope_SampleChAll();                                          // Get the first sample to create a 'previous' value for triggering
 8002918:	f000 f888 	bl	8002a2c <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 800291c:	f000 f9ae 	bl	8002c7c <ProbeScope_SamplePosNext>
                 ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 8002920:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <ProbeScope_ModeTrig+0x164>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
                 break;
 8002926:	e065      	b.n	80029f4 <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 8002928:	f000 f880 	bl	8002a2c <ProbeScope_SampleChAll>
                 if (ProbeScope_SamplesPreTrigCtr > 0) {                            // We need a minimum number of samples before the trigger
 800292c:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <ProbeScope_ModeTrig+0x184>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <ProbeScope_ModeTrig+0xa4>
                     ProbeScope_SamplesPreTrigCtr--;                               
 8002934:	4b3a      	ldr	r3, [pc, #232]	; (8002a20 <ProbeScope_ModeTrig+0x184>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3b01      	subs	r3, #1
 800293a:	4a39      	ldr	r2, [pc, #228]	; (8002a20 <ProbeScope_ModeTrig+0x184>)
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e001      	b.n	8002944 <ProbeScope_ModeTrig+0xa8>
                 } else {
                     ProbeScope_IsTrig();                                           // See if we detected the trigger
 8002940:	f000 f9b8 	bl	8002cb4 <ProbeScope_IsTrig>
                 }
                 ProbeScope_SamplePosNext();
 8002944:	f000 f99a 	bl	8002c7c <ProbeScope_SamplePosNext>
                 if (ProbeScope_TrigFlag == 1) {                                    // Remaining number of samples to collect before data available
 8002948:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <ProbeScope_ModeTrig+0x16c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d10a      	bne.n	8002966 <ProbeScope_ModeTrig+0xca>
                     ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES - ProbeScope_TrigDispPos - 2;  
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <ProbeScope_ModeTrig+0x180>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8002958:	3302      	adds	r3, #2
 800295a:	4a2f      	ldr	r2, [pc, #188]	; (8002a18 <ProbeScope_ModeTrig+0x17c>)
 800295c:	6013      	str	r3, [r2, #0]
                     ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_POST_TRIG;
 800295e:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <ProbeScope_ModeTrig+0x164>)
 8002960:	2202      	movs	r2, #2
 8002962:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8002964:	e046      	b.n	80029f4 <ProbeScope_ModeTrig+0x158>
 8002966:	e045      	b.n	80029f4 <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_POST_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 8002968:	f000 f860 	bl	8002a2c <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 800296c:	f000 f986 	bl	8002c7c <ProbeScope_SamplePosNext>
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <ProbeScope_ModeTrig+0x17c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <ProbeScope_ModeTrig+0xe8>
                     ProbeScope_SamplesPostTrigCtr--;
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <ProbeScope_ModeTrig+0x17c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3b01      	subs	r3, #1
 800297e:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <ProbeScope_ModeTrig+0x17c>)
 8002980:	6013      	str	r3, [r2, #0]
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
                 }                                                                  
                 break;                                                             
 8002982:	e037      	b.n	80029f4 <ProbeScope_ModeTrig+0x158>
                 ProbeScope_SampleChAll();                                          // Get the next sample
                 ProbeScope_SamplePosNext();
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
                     ProbeScope_SamplesPostTrigCtr--;
                 } else {
                     if (ProbeScope_Mode == PROBE_SCOPE_MODE_SINGLE) {
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <ProbeScope_ModeTrig+0x188>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d106      	bne.n	800299a <ProbeScope_ModeTrig+0xfe>
                         ProbeScope_Mode           = PROBE_SCOPE_MODE_OFF;
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <ProbeScope_ModeTrig+0x188>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_START;
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <ProbeScope_ModeTrig+0x164>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e006      	b.n	80029a8 <ProbeScope_ModeTrig+0x10c>
                     } else {
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
 800299a:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <ProbeScope_ModeTrig+0x18c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <ProbeScope_ModeTrig+0x178>)
 80029a0:	6013      	str	r3, [r2, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <ProbeScope_ModeTrig+0x164>)
 80029a4:	2203      	movs	r2, #3
 80029a6:	701a      	strb	r2, [r3, #0]
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <ProbeScope_ModeTrig+0x168>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
                 }                                                                  
                 break;                                                             
 80029ae:	e021      	b.n	80029f4 <ProbeScope_ModeTrig+0x158>
                                                                                    
            case PROBE_SCOPE_STATE_DATA_RDY:                                        
                 if (ProbeScope_TrigHoldOffCtr > 0) {                               // Hold-off before beeing able to re-trigger
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <ProbeScope_ModeTrig+0x178>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <ProbeScope_ModeTrig+0x128>
                     ProbeScope_TrigHoldOffCtr--;                                   
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <ProbeScope_ModeTrig+0x178>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3b01      	subs	r3, #1
 80029be:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <ProbeScope_ModeTrig+0x178>)
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e012      	b.n	80029ea <ProbeScope_ModeTrig+0x14e>
                 } else {                                                           
                     if (ProbeScope_DataRdyFlag == 0) {                             // Give Probe time to collect and display the waveform(s)
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <ProbeScope_ModeTrig+0x168>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10e      	bne.n	80029ea <ProbeScope_ModeTrig+0x14e>
                         ProbeScope_TrigFlag          = 0;
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <ProbeScope_ModeTrig+0x16c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
                         ProbeScope_SamplesPreTrigCtr = ProbeScope_TrigDispPos;     // Minimum number of samples pre-trigger
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <ProbeScope_ModeTrig+0x180>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <ProbeScope_ModeTrig+0x184>)
 80029d8:	6013      	str	r3, [r2, #0]
                         ProbeScope_State             = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <ProbeScope_ModeTrig+0x164>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
                         ProbeScope_SampleChAll();                                  // Get the first sample to create a 'previous' value for triggering
 80029e0:	f000 f824 	bl	8002a2c <ProbeScope_SampleChAll>
                         ProbeScope_SamplePosNext();
 80029e4:	f000 f94a 	bl	8002c7c <ProbeScope_SamplePosNext>
                     }
                 }
                 break;
 80029e8:	e004      	b.n	80029f4 <ProbeScope_ModeTrig+0x158>
 80029ea:	e003      	b.n	80029f4 <ProbeScope_ModeTrig+0x158>
                 
            default:
                 ProbeScope_State = PROBE_SCOPE_STATE_START;
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <ProbeScope_ModeTrig+0x164>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
                 break;
 80029f2:	bf00      	nop
        }
    }
}
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	1fff063a 	.word	0x1fff063a
 80029fc:	1fff0638 	.word	0x1fff0638
 8002a00:	1fff063c 	.word	0x1fff063c
 8002a04:	1fff07a4 	.word	0x1fff07a4
 8002a08:	1fff078c 	.word	0x1fff078c
 8002a0c:	1fff0628 	.word	0x1fff0628
 8002a10:	1fff062c 	.word	0x1fff062c
 8002a14:	1fff0620 	.word	0x1fff0620
 8002a18:	1fff0634 	.word	0x1fff0634
 8002a1c:	1fff0798 	.word	0x1fff0798
 8002a20:	1fff0630 	.word	0x1fff0630
 8002a24:	1fff061c 	.word	0x1fff061c
 8002a28:	1fff079c 	.word	0x1fff079c

08002a2c <ProbeScope_SampleChAll>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleChAll (void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
    ProbeScope_SampleCh(&ProbeScope_Ch1);
 8002a30:	480c      	ldr	r0, [pc, #48]	; (8002a64 <ProbeScope_SampleChAll+0x38>)
 8002a32:	f000 f827 	bl	8002a84 <ProbeScope_SampleCh>

#if PROBE_SCOPE_MAX_CH >= 2
    ProbeScope_SampleCh(&ProbeScope_Ch2);
 8002a36:	480c      	ldr	r0, [pc, #48]	; (8002a68 <ProbeScope_SampleChAll+0x3c>)
 8002a38:	f000 f824 	bl	8002a84 <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 3                     
    ProbeScope_SampleCh(&ProbeScope_Ch3);
 8002a3c:	480b      	ldr	r0, [pc, #44]	; (8002a6c <ProbeScope_SampleChAll+0x40>)
 8002a3e:	f000 f821 	bl	8002a84 <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 4                     
    ProbeScope_SampleCh(&ProbeScope_Ch4);
 8002a42:	480b      	ldr	r0, [pc, #44]	; (8002a70 <ProbeScope_SampleChAll+0x44>)
 8002a44:	f000 f81e 	bl	8002a84 <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 5
    ProbeScope_SampleCh(&ProbeScope_Ch5);
 8002a48:	480a      	ldr	r0, [pc, #40]	; (8002a74 <ProbeScope_SampleChAll+0x48>)
 8002a4a:	f000 f81b 	bl	8002a84 <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 6                     
    ProbeScope_SampleCh(&ProbeScope_Ch6);
 8002a4e:	480a      	ldr	r0, [pc, #40]	; (8002a78 <ProbeScope_SampleChAll+0x4c>)
 8002a50:	f000 f818 	bl	8002a84 <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 7                     
    ProbeScope_SampleCh(&ProbeScope_Ch7);
 8002a54:	4809      	ldr	r0, [pc, #36]	; (8002a7c <ProbeScope_SampleChAll+0x50>)
 8002a56:	f000 f815 	bl	8002a84 <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 8                     
    ProbeScope_SampleCh(&ProbeScope_Ch8);
 8002a5a:	4809      	ldr	r0, [pc, #36]	; (8002a80 <ProbeScope_SampleChAll+0x54>)
 8002a5c:	f000 f812 	bl	8002a84 <ProbeScope_SampleCh>
#endif                     
}
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	1ffe885c 	.word	0x1ffe885c
 8002a68:	1ffe9814 	.word	0x1ffe9814
 8002a6c:	1ffea7cc 	.word	0x1ffea7cc
 8002a70:	1ffeb784 	.word	0x1ffeb784
 8002a74:	1ffec73c 	.word	0x1ffec73c
 8002a78:	1ffed6f4 	.word	0x1ffed6f4
 8002a7c:	1ffee6ac 	.word	0x1ffee6ac
 8002a80:	1ffef664 	.word	0x1ffef664

08002a84 <ProbeScope_SampleCh>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleCh (PROBE_SCOPE_CH  *p_ch)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
    PROBE_SCOPE_CH_SAMPLE   msk;                                    // Mask used to select desired bit when in bit mode.
    PROBE_SCOPE_CH_SAMPLE  *p_sample;                               // Pointer to where the sample will be stored


    if (p_ch->En == 1) {
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f040 80eb 	bne.w	8002c6c <ProbeScope_SampleCh+0x1e8>
        p_sample = &p_ch->Samples[ProbeScope_SampleIxCur];          // Point to current position in sampling buffer
 8002a96:	4b78      	ldr	r3, [pc, #480]	; (8002c78 <ProbeScope_SampleCh+0x1f4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3306      	adds	r3, #6
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
        switch (p_ch->DataType) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	791b      	ldrb	r3, [r3, #4]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	f200 80df 	bhi.w	8002c6c <ProbeScope_SampleCh+0x1e8>
 8002aae:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <ProbeScope_SampleCh+0x30>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002ad1 	.word	0x08002ad1
 8002ab8:	08002b15 	.word	0x08002b15
 8002abc:	08002b59 	.word	0x08002b59
 8002ac0:	08002b9d 	.word	0x08002b9d
 8002ac4:	08002be1 	.word	0x08002be1
 8002ac8:	08002c21 	.word	0x08002c21
 8002acc:	08002c61 	.word	0x08002c61
            case PROBE_SCOPE_INT08U:
                 if (p_ch->BitEn == 0) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <ProbeScope_SampleCh+0x60>
                     p_sample->Val08U     = *(CPU_INT08U *)p_ch->DataAddr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e016      	b.n	8002b12 <ProbeScope_SampleCh+0x8e>
                 } else {
                     msk.Val08U           =  (CPU_INT08U)1 << p_ch->BitSel;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7b1b      	ldrb	r3, [r3, #12]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2301      	movs	r3, #1
 8002aec:	4093      	lsls	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08U *)p_ch->DataAddr & msk.Val08U) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	7a3b      	ldrb	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <ProbeScope_SampleCh+0x86>
                         p_sample->Val08U = 1;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e003      	b.n	8002b12 <ProbeScope_SampleCh+0x8e>
                     } else {
                         p_sample->Val08U = 0;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 8002b10:	e0ac      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
 8002b12:	e0ab      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT08S:
                 if (p_ch->BitEn == 0) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <ProbeScope_SampleCh+0xa4>
                     p_sample->Val08S     = *(CPU_INT08S *)p_ch->DataAddr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e016      	b.n	8002b56 <ProbeScope_SampleCh+0xd2>
                 } else {
                     msk.Val08S           =  (CPU_INT08S)1 << p_ch->BitSel;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7b1b      	ldrb	r3, [r3, #12]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4093      	lsls	r3, r2
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08S *)p_ch->DataAddr & msk.Val08S) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	781a      	ldrb	r2, [r3, #0]
 8002b3c:	7a3b      	ldrb	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <ProbeScope_SampleCh+0xca>
                         p_sample->Val08S = 1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e003      	b.n	8002b56 <ProbeScope_SampleCh+0xd2>
                     } else {
                         p_sample->Val08S = 0;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 8002b54:	e08a      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
 8002b56:	e089      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
                                  
#if PROBE_SCOPE_16_BIT_EN > 0                                   
            case PROBE_SCOPE_INT16U:
                 if (p_ch->BitEn == 0) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <ProbeScope_SampleCh+0xe8>
                     p_sample->Val16U     = *(CPU_INT16U *)p_ch->DataAddr;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	881a      	ldrh	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e016      	b.n	8002b9a <ProbeScope_SampleCh+0x116>
                 } else {
                     msk.Val16U           =  (CPU_INT16U)1 << p_ch->BitSel;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7b1b      	ldrb	r3, [r3, #12]
 8002b70:	461a      	mov	r2, r3
 8002b72:	2301      	movs	r3, #1
 8002b74:	4093      	lsls	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16U *)p_ch->DataAddr & msk.Val16U) {
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	893b      	ldrh	r3, [r7, #8]
 8002b82:	4013      	ands	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <ProbeScope_SampleCh+0x10e>
                         p_sample->Val16U = 1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	e003      	b.n	8002b9a <ProbeScope_SampleCh+0x116>
                     } else {
                         p_sample->Val16U = 0;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8002b98:	e068      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
 8002b9a:	e067      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT16S:
                 if (p_ch->BitEn == 0) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <ProbeScope_SampleCh+0x12c>
                     p_sample->Val16S     = *(CPU_INT16S *)p_ch->DataAddr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	881a      	ldrh	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	801a      	strh	r2, [r3, #0]
 8002bae:	e016      	b.n	8002bde <ProbeScope_SampleCh+0x15a>
                 } else {
                     msk.Val16S           =  (CPU_INT16S)1 << p_ch->BitSel;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7b1b      	ldrb	r3, [r3, #12]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16S *)p_ch->DataAddr & msk.Val16S) {
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	893b      	ldrh	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <ProbeScope_SampleCh+0x152>
                         p_sample->Val16S = 1;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	801a      	strh	r2, [r3, #0]
 8002bd4:	e003      	b.n	8002bde <ProbeScope_SampleCh+0x15a>
                     } else {
                         p_sample->Val16S = 0;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8002bdc:	e046      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
 8002bde:	e045      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
            case PROBE_SCOPE_INT32U:
                 if (p_ch->BitEn == 0) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <ProbeScope_SampleCh+0x170>
                     p_sample->Val32U     = *(CPU_INT32U *)p_ch->DataAddr;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e014      	b.n	8002c1e <ProbeScope_SampleCh+0x19a>
                 } else {
                     msk.Val32U           =  (CPU_INT32U)1 << p_ch->BitSel;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7b1b      	ldrb	r3, [r3, #12]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4093      	lsls	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32U *)p_ch->DataAddr & msk.Val32U) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <ProbeScope_SampleCh+0x192>
                         p_sample->Val32U = 1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e003      	b.n	8002c1e <ProbeScope_SampleCh+0x19a>
                     } else {
                         p_sample->Val32U = 0;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8002c1c:	e026      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
 8002c1e:	e025      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT32S:
                 if (p_ch->BitEn == 0) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <ProbeScope_SampleCh+0x1b0>
                     p_sample->Val32S     = *(CPU_INT32S *)p_ch->DataAddr;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e014      	b.n	8002c5e <ProbeScope_SampleCh+0x1da>
                 } else {
                     msk.Val32S           =  (CPU_INT32S)1 << p_ch->BitSel;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7b1b      	ldrb	r3, [r3, #12]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	4093      	lsls	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32S *)p_ch->DataAddr & msk.Val32S) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <ProbeScope_SampleCh+0x1d2>
                         p_sample->Val32S = 1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e003      	b.n	8002c5e <ProbeScope_SampleCh+0x1da>
                     } else {
                         p_sample->Val32S = 0;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8002c5c:	e006      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
 8002c5e:	e005      	b.n	8002c6c <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_FP32:
                 p_sample->ValFP32  = *(CPU_FP32   *)p_ch->DataAddr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	601a      	str	r2, [r3, #0]
                 break;
 8002c6a:	bf00      	nop
#endif
        }                          
    }
}
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	1fff062c 	.word	0x1fff062c

08002c7c <ProbeScope_SamplePosNext>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SamplePosNext (void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
    ProbeScope_SampleIxPrev = ProbeScope_SampleIxCur;              // Update the position of the previous sample
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <ProbeScope_SamplePosNext+0x30>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <ProbeScope_SamplePosNext+0x34>)
 8002c86:	6013      	str	r3, [r2, #0]
    ProbeScope_SampleIxCur++;                                      // Position to where next sample will be placed
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <ProbeScope_SamplePosNext+0x30>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	4a07      	ldr	r2, [pc, #28]	; (8002cac <ProbeScope_SamplePosNext+0x30>)
 8002c90:	6013      	str	r3, [r2, #0]
    if (ProbeScope_SampleIxCur >= PROBE_SCOPE_MAX_SAMPLES) {       // See if we need to wrap around
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <ProbeScope_SamplePosNext+0x30>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c9a:	d302      	bcc.n	8002ca2 <ProbeScope_SamplePosNext+0x26>
        ProbeScope_SampleIxCur = 0;                                // yes
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <ProbeScope_SamplePosNext+0x30>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
    }
}
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	1fff062c 	.word	0x1fff062c
 8002cb0:	1fff0628 	.word	0x1fff0628

08002cb4 <ProbeScope_IsTrig>:
*              Sets ProbeScope_TrigFlag to 0 when no trigger is detected
************************************************************************************************************************
*/

static  void  ProbeScope_IsTrig (void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
    PROBE_SCOPE_CH          *p_ch;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_prev;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_cur;
    

    switch (ProbeScope_TrigChSel) {
 8002cba:	4b90      	ldr	r3, [pc, #576]	; (8002efc <ProbeScope_IsTrig+0x248>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	2b07      	cmp	r3, #7
 8002cc2:	d82b      	bhi.n	8002d1c <ProbeScope_IsTrig+0x68>
 8002cc4:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <ProbeScope_IsTrig+0x18>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002ced 	.word	0x08002ced
 8002cd0:	08002cf3 	.word	0x08002cf3
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	08002cff 	.word	0x08002cff
 8002cdc:	08002d05 	.word	0x08002d05
 8002ce0:	08002d0b 	.word	0x08002d0b
 8002ce4:	08002d11 	.word	0x08002d11
 8002ce8:	08002d17 	.word	0x08002d17
        case PROBE_SCOPE_CH1:
             p_ch = &ProbeScope_Ch1;
 8002cec:	4b84      	ldr	r3, [pc, #528]	; (8002f00 <ProbeScope_IsTrig+0x24c>)
 8002cee:	60fb      	str	r3, [r7, #12]
             break;
 8002cf0:	e01a      	b.n	8002d28 <ProbeScope_IsTrig+0x74>
             
#if PROBE_SCOPE_MAX_CH >= 2
        case PROBE_SCOPE_CH2:
             p_ch = &ProbeScope_Ch2;
 8002cf2:	4b84      	ldr	r3, [pc, #528]	; (8002f04 <ProbeScope_IsTrig+0x250>)
 8002cf4:	60fb      	str	r3, [r7, #12]
             break;
 8002cf6:	e017      	b.n	8002d28 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 3
        case PROBE_SCOPE_CH3:
             p_ch = &ProbeScope_Ch3;
 8002cf8:	4b83      	ldr	r3, [pc, #524]	; (8002f08 <ProbeScope_IsTrig+0x254>)
 8002cfa:	60fb      	str	r3, [r7, #12]
             break;
 8002cfc:	e014      	b.n	8002d28 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 4
        case PROBE_SCOPE_CH4:
             p_ch = &ProbeScope_Ch4;
 8002cfe:	4b83      	ldr	r3, [pc, #524]	; (8002f0c <ProbeScope_IsTrig+0x258>)
 8002d00:	60fb      	str	r3, [r7, #12]
             break;
 8002d02:	e011      	b.n	8002d28 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 5
        case PROBE_SCOPE_CH5:
             p_ch = &ProbeScope_Ch5;
 8002d04:	4b82      	ldr	r3, [pc, #520]	; (8002f10 <ProbeScope_IsTrig+0x25c>)
 8002d06:	60fb      	str	r3, [r7, #12]
             break;
 8002d08:	e00e      	b.n	8002d28 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 6
        case PROBE_SCOPE_CH6:
             p_ch = &ProbeScope_Ch6;
 8002d0a:	4b82      	ldr	r3, [pc, #520]	; (8002f14 <ProbeScope_IsTrig+0x260>)
 8002d0c:	60fb      	str	r3, [r7, #12]
             break;
 8002d0e:	e00b      	b.n	8002d28 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 7
        case PROBE_SCOPE_CH7:
             p_ch = &ProbeScope_Ch7;
 8002d10:	4b81      	ldr	r3, [pc, #516]	; (8002f18 <ProbeScope_IsTrig+0x264>)
 8002d12:	60fb      	str	r3, [r7, #12]
             break;
 8002d14:	e008      	b.n	8002d28 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 8
        case PROBE_SCOPE_CH8:
             p_ch = &ProbeScope_Ch8;
 8002d16:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <ProbeScope_IsTrig+0x268>)
 8002d18:	60fb      	str	r3, [r7, #12]
             break;
 8002d1a:	e005      	b.n	8002d28 <ProbeScope_IsTrig+0x74>
#endif
             
        default:
             p_ch                 = &ProbeScope_Ch1;
 8002d1c:	4b78      	ldr	r3, [pc, #480]	; (8002f00 <ProbeScope_IsTrig+0x24c>)
 8002d1e:	60fb      	str	r3, [r7, #12]
             ProbeScope_TrigChSel = PROBE_SCOPE_CH1;
 8002d20:	4b76      	ldr	r3, [pc, #472]	; (8002efc <ProbeScope_IsTrig+0x248>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
             break;
 8002d26:	bf00      	nop
    }         
    ProbeScope_TrigFlag = 0;
 8002d28:	4b7d      	ldr	r3, [pc, #500]	; (8002f20 <ProbeScope_IsTrig+0x26c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
    if (p_ch->En == 1) {
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	f040 8308 	bne.w	8003348 <ProbeScope_IsTrig+0x694>
        p_sample_prev = &p_ch->Samples[ProbeScope_SampleIxPrev];          // Point to previous position in sampling buffer
 8002d38:	4b7a      	ldr	r3, [pc, #488]	; (8002f24 <ProbeScope_IsTrig+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3306      	adds	r3, #6
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	60bb      	str	r3, [r7, #8]
        p_sample_cur  = &p_ch->Samples[ProbeScope_SampleIxCur];           // Point to current  position in sampling buffer
 8002d46:	4b78      	ldr	r3, [pc, #480]	; (8002f28 <ProbeScope_IsTrig+0x274>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3306      	adds	r3, #6
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	607b      	str	r3, [r7, #4]
        if (ProbeScope_TrigSlope == PROBE_SCOPE_TRIG_POS) {
 8002d54:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <ProbeScope_IsTrig+0x278>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	f040 8187 	bne.w	800306c <ProbeScope_IsTrig+0x3b8>
            switch (p_ch->DataType) {
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	791b      	ldrb	r3, [r3, #4]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	f200 82f0 	bhi.w	8003348 <ProbeScope_IsTrig+0x694>
 8002d68:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <ProbeScope_IsTrig+0xbc>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d8d 	.word	0x08002d8d
 8002d74:	08002deb 	.word	0x08002deb
 8002d78:	08002e55 	.word	0x08002e55
 8002d7c:	08002eb3 	.word	0x08002eb3
 8002d80:	08002f57 	.word	0x08002f57
 8002d84:	08002fb5 	.word	0x08002fb5
 8002d88:	08003013 	.word	0x08003013
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d119      	bne.n	8002dc8 <ProbeScope_IsTrig+0x114>
                         if (p_sample_prev->Val08U < p_sample_cur->Val08U) {
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d223      	bcs.n	8002de8 <ProbeScope_IsTrig+0x134>
                             if (p_sample_prev->Val08U <= p_ch->TrigLevel.Val08U) {
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	7d1b      	ldrb	r3, [r3, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d81d      	bhi.n	8002de8 <ProbeScope_IsTrig+0x134>
                                 if (p_sample_cur->Val08U >= p_ch->TrigLevel.Val08U) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	7d1b      	ldrb	r3, [r3, #20]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d317      	bcc.n	8002de8 <ProbeScope_IsTrig+0x134>
                                     ProbeScope_TrigFlag = 1;
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <ProbeScope_IsTrig+0x26c>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002dbe:	4b5a      	ldr	r3, [pc, #360]	; (8002f28 <ProbeScope_IsTrig+0x274>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5b      	ldr	r2, [pc, #364]	; (8002f30 <ProbeScope_IsTrig+0x27c>)
 8002dc4:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002dc6:	e150      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U == 0) {
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <ProbeScope_IsTrig+0x134>
                             if (p_sample_cur->Val08U != 0) { 
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <ProbeScope_IsTrig+0x134>
                                 ProbeScope_TrigFlag = 1;
 8002dd8:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <ProbeScope_IsTrig+0x26c>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002dde:	4b52      	ldr	r3, [pc, #328]	; (8002f28 <ProbeScope_IsTrig+0x274>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a53      	ldr	r2, [pc, #332]	; (8002f30 <ProbeScope_IsTrig+0x27c>)
 8002de4:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002de6:	e140      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
 8002de8:	e13f      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d11f      	bne.n	8002e32 <ProbeScope_IsTrig+0x17e>
                         if (p_sample_prev->Val08S < p_sample_cur->Val08S) {
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b252      	sxtb	r2, r2
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	da27      	bge.n	8002e52 <ProbeScope_IsTrig+0x19e>
                             if (p_sample_prev->Val08S <= p_ch->TrigLevel.Val08S) {
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	7d1b      	ldrb	r3, [r3, #20]
 8002e0a:	b252      	sxtb	r2, r2
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	dc1f      	bgt.n	8002e52 <ProbeScope_IsTrig+0x19e>
                                 if (p_sample_cur->Val08S >= p_ch->TrigLevel.Val08S) {
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	7d1b      	ldrb	r3, [r3, #20]
 8002e1a:	b252      	sxtb	r2, r2
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	db17      	blt.n	8002e52 <ProbeScope_IsTrig+0x19e>
                                     ProbeScope_TrigFlag = 1;
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <ProbeScope_IsTrig+0x26c>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002e28:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <ProbeScope_IsTrig+0x274>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a40      	ldr	r2, [pc, #256]	; (8002f30 <ProbeScope_IsTrig+0x27c>)
 8002e2e:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002e30:	e11b      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S == 0) {
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <ProbeScope_IsTrig+0x19e>
                             if (p_sample_cur->Val08S != 0) { 
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <ProbeScope_IsTrig+0x19e>
                                 ProbeScope_TrigFlag = 1;
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <ProbeScope_IsTrig+0x26c>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002e48:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <ProbeScope_IsTrig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <ProbeScope_IsTrig+0x27c>)
 8002e4e:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002e50:	e10b      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
 8002e52:	e10a      	b.n	800306a <ProbeScope_IsTrig+0x3b6>

#if PROBE_SCOPE_16_BIT_EN > 0                                    
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d119      	bne.n	8002e90 <ProbeScope_IsTrig+0x1dc>
                         if (p_sample_prev->Val16U < p_sample_cur->Val16U) {
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	881a      	ldrh	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d223      	bcs.n	8002eb0 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_prev->Val16U <= p_ch->TrigLevel.Val16U) {
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	881a      	ldrh	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8a9b      	ldrh	r3, [r3, #20]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d81d      	bhi.n	8002eb0 <ProbeScope_IsTrig+0x1fc>
                                 if (p_sample_cur->Val16U >= p_ch->TrigLevel.Val16U) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8a9b      	ldrh	r3, [r3, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d317      	bcc.n	8002eb0 <ProbeScope_IsTrig+0x1fc>
                                     ProbeScope_TrigFlag = 1;
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <ProbeScope_IsTrig+0x26c>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002e86:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <ProbeScope_IsTrig+0x274>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <ProbeScope_IsTrig+0x27c>)
 8002e8c:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002e8e:	e0ec      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U == 0) {
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_cur->Val16U != 0) { 
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <ProbeScope_IsTrig+0x1fc>
                                 ProbeScope_TrigFlag = 1;
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <ProbeScope_IsTrig+0x26c>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <ProbeScope_IsTrig+0x274>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <ProbeScope_IsTrig+0x27c>)
 8002eac:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002eae:	e0dc      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
 8002eb0:	e0db      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d13c      	bne.n	8002f34 <ProbeScope_IsTrig+0x280>
                         if (p_sample_prev->Val16S < p_sample_cur->Val16S) {
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	881a      	ldrh	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b212      	sxth	r2, r2
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	da44      	bge.n	8002f54 <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_prev->Val16S <= p_ch->TrigLevel.Val16S) {
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8a9b      	ldrh	r3, [r3, #20]
 8002ed2:	b212      	sxth	r2, r2
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	dc3c      	bgt.n	8002f54 <ProbeScope_IsTrig+0x2a0>
                                 if (p_sample_cur->Val16S >= p_ch->TrigLevel.Val16S) {
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	881a      	ldrh	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8a9b      	ldrh	r3, [r3, #20]
 8002ee2:	b212      	sxth	r2, r2
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	db34      	blt.n	8002f54 <ProbeScope_IsTrig+0x2a0>
                                     ProbeScope_TrigFlag = 1;
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <ProbeScope_IsTrig+0x26c>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <ProbeScope_IsTrig+0x274>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <ProbeScope_IsTrig+0x27c>)
 8002ef6:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002ef8:	e0b7      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
 8002efa:	bf00      	nop
 8002efc:	1fff061d 	.word	0x1fff061d
 8002f00:	1ffe885c 	.word	0x1ffe885c
 8002f04:	1ffe9814 	.word	0x1ffe9814
 8002f08:	1ffea7cc 	.word	0x1ffea7cc
 8002f0c:	1ffeb784 	.word	0x1ffeb784
 8002f10:	1ffec73c 	.word	0x1ffec73c
 8002f14:	1ffed6f4 	.word	0x1ffed6f4
 8002f18:	1ffee6ac 	.word	0x1ffee6ac
 8002f1c:	1ffef664 	.word	0x1ffef664
 8002f20:	1fff078c 	.word	0x1fff078c
 8002f24:	1fff0628 	.word	0x1fff0628
 8002f28:	1fff062c 	.word	0x1fff062c
 8002f2c:	1fff0624 	.word	0x1fff0624
 8002f30:	1fff0794 	.word	0x1fff0794
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S == 0) {
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10b      	bne.n	8002f54 <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_cur->Val16S != 0) { 
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <ProbeScope_IsTrig+0x2a0>
                                 ProbeScope_TrigFlag = 1;
 8002f44:	4b86      	ldr	r3, [pc, #536]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002f4a:	4b86      	ldr	r3, [pc, #536]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a86      	ldr	r2, [pc, #536]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 8002f50:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002f52:	e08a      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
 8002f54:	e089      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d119      	bne.n	8002f92 <ProbeScope_IsTrig+0x2de>
                         if (p_sample_prev->Val32U < p_sample_cur->Val32U) {
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d223      	bcs.n	8002fb2 <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_prev->Val32U <= p_ch->TrigLevel.Val32U) {
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d81d      	bhi.n	8002fb2 <ProbeScope_IsTrig+0x2fe>
                                 if (p_sample_cur->Val32U >= p_ch->TrigLevel.Val32U) {
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d317      	bcc.n	8002fb2 <ProbeScope_IsTrig+0x2fe>
                                     ProbeScope_TrigFlag = 1;
 8002f82:	4b77      	ldr	r3, [pc, #476]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002f88:	4b76      	ldr	r3, [pc, #472]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a76      	ldr	r2, [pc, #472]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 8002f8e:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002f90:	e06b      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U == 0) {
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_cur->Val32U != 0) {
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <ProbeScope_IsTrig+0x2fe>
                                 ProbeScope_TrigFlag = 1;
 8002fa2:	4b6f      	ldr	r3, [pc, #444]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002fa8:	4b6e      	ldr	r3, [pc, #440]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 8002fae:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002fb0:	e05b      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
 8002fb2:	e05a      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d119      	bne.n	8002ff0 <ProbeScope_IsTrig+0x33c>
                         if (p_sample_prev->Val32S < p_sample_cur->Val32S) {
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	da23      	bge.n	8003010 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_prev->Val32S <= p_ch->TrigLevel.Val32S) {
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	dc1d      	bgt.n	8003010 <ProbeScope_IsTrig+0x35c>
                                 if (p_sample_cur->Val32S >= p_ch->TrigLevel.Val32S) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	db17      	blt.n	8003010 <ProbeScope_IsTrig+0x35c>
                                     ProbeScope_TrigFlag = 1;
 8002fe0:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5f      	ldr	r2, [pc, #380]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 8002fec:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002fee:	e03c      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S == 0) {
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_cur->Val32S != 0) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <ProbeScope_IsTrig+0x35c>
                                 ProbeScope_TrigFlag = 1;
 8003000:	4b57      	ldr	r3, [pc, #348]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003006:	4b57      	ldr	r3, [pc, #348]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a57      	ldr	r2, [pc, #348]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 800300c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800300e:	e02c      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
 8003010:	e02b      	b.n	800306a <ProbeScope_IsTrig+0x3b6>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	ed93 7a00 	vldr	s14, [r3]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	edd3 7a00 	vldr	s15, [r3]
 800301e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d400      	bmi.n	800302a <ProbeScope_IsTrig+0x376>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003028:	e01e      	b.n	8003068 <ProbeScope_IsTrig+0x3b4>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	ed93 7a00 	vldr	s14, [r3]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	edd3 7a05 	vldr	s15, [r3, #20]
 8003036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	d900      	bls.n	8003042 <ProbeScope_IsTrig+0x38e>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003040:	e012      	b.n	8003068 <ProbeScope_IsTrig+0x3b4>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	edd3 7a05 	vldr	s15, [r3, #20]
 800304e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	da00      	bge.n	800305a <ProbeScope_IsTrig+0x3a6>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003058:	e006      	b.n	8003068 <ProbeScope_IsTrig+0x3b4>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 800305a:	4b41      	ldr	r3, [pc, #260]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a40      	ldr	r2, [pc, #256]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 8003066:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003068:	bf00      	nop
 800306a:	e16d      	b.n	8003348 <ProbeScope_IsTrig+0x694>
#endif
            }
        } else {
            switch (p_ch->DataType) {
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	2b06      	cmp	r3, #6
 8003072:	f200 8169 	bhi.w	8003348 <ProbeScope_IsTrig+0x694>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <ProbeScope_IsTrig+0x3c8>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	08003099 	.word	0x08003099
 8003080:	080030f7 	.word	0x080030f7
 8003084:	0800316d 	.word	0x0800316d
 8003088:	080031cb 	.word	0x080031cb
 800308c:	08003235 	.word	0x08003235
 8003090:	08003293 	.word	0x08003293
 8003094:	080032f1 	.word	0x080032f1
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d119      	bne.n	80030d4 <ProbeScope_IsTrig+0x420>
                         if (p_sample_prev->Val08U > p_sample_cur->Val08U) {
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d923      	bls.n	80030f4 <ProbeScope_IsTrig+0x440>
                             if (p_sample_prev->Val08U >= p_ch->TrigLevel.Val08U) {
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	7d1b      	ldrb	r3, [r3, #20]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d31d      	bcc.n	80030f4 <ProbeScope_IsTrig+0x440>
                                 if (p_sample_cur->Val08U <= p_ch->TrigLevel.Val08U) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	7d1b      	ldrb	r3, [r3, #20]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d817      	bhi.n	80030f4 <ProbeScope_IsTrig+0x440>
                                     ProbeScope_TrigFlag = 1;
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80030ca:	4b26      	ldr	r3, [pc, #152]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a26      	ldr	r2, [pc, #152]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 80030d0:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80030d2:	e139      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U != 0) {
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <ProbeScope_IsTrig+0x440>
                             if (p_sample_cur->Val08U == 0) {
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <ProbeScope_IsTrig+0x440>
                                 ProbeScope_TrigFlag = 1;
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 80030f0:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80030f2:	e129      	b.n	8003348 <ProbeScope_IsTrig+0x694>
 80030f4:	e128      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11f      	bne.n	800313e <ProbeScope_IsTrig+0x48a>
                         if (p_sample_prev->Val08S > p_sample_cur->Val08S) {
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b252      	sxtb	r2, r2
 8003108:	b25b      	sxtb	r3, r3
 800310a:	429a      	cmp	r2, r3
 800310c:	dd27      	ble.n	800315e <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_prev->Val08S >= p_ch->TrigLevel.Val08S) {
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	7d1b      	ldrb	r3, [r3, #20]
 8003116:	b252      	sxtb	r2, r2
 8003118:	b25b      	sxtb	r3, r3
 800311a:	429a      	cmp	r2, r3
 800311c:	db1f      	blt.n	800315e <ProbeScope_IsTrig+0x4aa>
                                 if (p_sample_cur->Val08S <= p_ch->TrigLevel.Val08S) {
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	781a      	ldrb	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	7d1b      	ldrb	r3, [r3, #20]
 8003126:	b252      	sxtb	r2, r2
 8003128:	b25b      	sxtb	r3, r3
 800312a:	429a      	cmp	r2, r3
 800312c:	dc17      	bgt.n	800315e <ProbeScope_IsTrig+0x4aa>
                                     ProbeScope_TrigFlag = 1;
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 800313a:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800313c:	e104      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S != 0) {
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_cur->Val08S == 0) {
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d107      	bne.n	800315e <ProbeScope_IsTrig+0x4aa>
                                 ProbeScope_TrigFlag = 1;
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <ProbeScope_IsTrig+0x4ac>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <ProbeScope_IsTrig+0x4b0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <ProbeScope_IsTrig+0x4b4>)
 800315a:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800315c:	e0f4      	b.n	8003348 <ProbeScope_IsTrig+0x694>
 800315e:	e0f3      	b.n	8003348 <ProbeScope_IsTrig+0x694>
 8003160:	1fff078c 	.word	0x1fff078c
 8003164:	1fff062c 	.word	0x1fff062c
 8003168:	1fff0794 	.word	0x1fff0794
                                    
#if PROBE_SCOPE_16_BIT_EN > 0                                   
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d119      	bne.n	80031a8 <ProbeScope_IsTrig+0x4f4>
                         if (p_sample_prev->Val16U > p_sample_cur->Val16U) {
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d923      	bls.n	80031c8 <ProbeScope_IsTrig+0x514>
                             if (p_sample_prev->Val16U >= p_ch->TrigLevel.Val16U) {
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	881a      	ldrh	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8a9b      	ldrh	r3, [r3, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d31d      	bcc.n	80031c8 <ProbeScope_IsTrig+0x514>
                                 if (p_sample_cur->Val16U <= p_ch->TrigLevel.Val16U) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	881a      	ldrh	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8a9b      	ldrh	r3, [r3, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	d817      	bhi.n	80031c8 <ProbeScope_IsTrig+0x514>
                                     ProbeScope_TrigFlag = 1;
 8003198:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <ProbeScope_IsTrig+0x6a0>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800319e:	4b6e      	ldr	r3, [pc, #440]	; (8003358 <ProbeScope_IsTrig+0x6a4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6e      	ldr	r2, [pc, #440]	; (800335c <ProbeScope_IsTrig+0x6a8>)
 80031a4:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80031a6:	e0cf      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U != 0) {
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <ProbeScope_IsTrig+0x514>
                             if (p_sample_cur->Val16U == 0) {
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d107      	bne.n	80031c8 <ProbeScope_IsTrig+0x514>
                                 ProbeScope_TrigFlag = 1;
 80031b8:	4b66      	ldr	r3, [pc, #408]	; (8003354 <ProbeScope_IsTrig+0x6a0>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80031be:	4b66      	ldr	r3, [pc, #408]	; (8003358 <ProbeScope_IsTrig+0x6a4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a66      	ldr	r2, [pc, #408]	; (800335c <ProbeScope_IsTrig+0x6a8>)
 80031c4:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80031c6:	e0bf      	b.n	8003348 <ProbeScope_IsTrig+0x694>
 80031c8:	e0be      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11f      	bne.n	8003212 <ProbeScope_IsTrig+0x55e>
                         if (p_sample_prev->Val16S > p_sample_cur->Val16S) {
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	881a      	ldrh	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b212      	sxth	r2, r2
 80031dc:	b21b      	sxth	r3, r3
 80031de:	429a      	cmp	r2, r3
 80031e0:	dd27      	ble.n	8003232 <ProbeScope_IsTrig+0x57e>
                             if (p_sample_prev->Val16S >= p_ch->TrigLevel.Val16S) {
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8a9b      	ldrh	r3, [r3, #20]
 80031ea:	b212      	sxth	r2, r2
 80031ec:	b21b      	sxth	r3, r3
 80031ee:	429a      	cmp	r2, r3
 80031f0:	db1f      	blt.n	8003232 <ProbeScope_IsTrig+0x57e>
                                 if (p_sample_cur->Val16S <= p_ch->TrigLevel.Val16S) {
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8a9b      	ldrh	r3, [r3, #20]
 80031fa:	b212      	sxth	r2, r2
 80031fc:	b21b      	sxth	r3, r3
 80031fe:	429a      	cmp	r2, r3
 8003200:	dc17      	bgt.n	8003232 <ProbeScope_IsTrig+0x57e>
                                     ProbeScope_TrigFlag = 1;
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <ProbeScope_IsTrig+0x6a0>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <ProbeScope_IsTrig+0x6a4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a53      	ldr	r2, [pc, #332]	; (800335c <ProbeScope_IsTrig+0x6a8>)
 800320e:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003210:	e09a      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S != 0) {
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <ProbeScope_IsTrig+0x57e>
                             if (p_sample_cur->Val16S == 0) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d107      	bne.n	8003232 <ProbeScope_IsTrig+0x57e>
                                 ProbeScope_TrigFlag = 1;
 8003222:	4b4c      	ldr	r3, [pc, #304]	; (8003354 <ProbeScope_IsTrig+0x6a0>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003228:	4b4b      	ldr	r3, [pc, #300]	; (8003358 <ProbeScope_IsTrig+0x6a4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4b      	ldr	r2, [pc, #300]	; (800335c <ProbeScope_IsTrig+0x6a8>)
 800322e:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003230:	e08a      	b.n	8003348 <ProbeScope_IsTrig+0x694>
 8003232:	e089      	b.n	8003348 <ProbeScope_IsTrig+0x694>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                                                     
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d119      	bne.n	8003270 <ProbeScope_IsTrig+0x5bc>
                         if (p_sample_prev->Val32U > p_sample_cur->Val32U) {                  
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d923      	bls.n	8003290 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_prev->Val32U >= p_ch->TrigLevel.Val32U) {
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d31d      	bcc.n	8003290 <ProbeScope_IsTrig+0x5dc>
                                 if (p_sample_cur->Val32U <= p_ch->TrigLevel.Val32U) {
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	d817      	bhi.n	8003290 <ProbeScope_IsTrig+0x5dc>
                                     ProbeScope_TrigFlag = 1;
 8003260:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <ProbeScope_IsTrig+0x6a0>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003266:	4b3c      	ldr	r3, [pc, #240]	; (8003358 <ProbeScope_IsTrig+0x6a4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a3c      	ldr	r2, [pc, #240]	; (800335c <ProbeScope_IsTrig+0x6a8>)
 800326c:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800326e:	e06b      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U != 0) {
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00b      	beq.n	8003290 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_cur->Val32U == 0) {
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <ProbeScope_IsTrig+0x5dc>
                                 ProbeScope_TrigFlag = 1;
 8003280:	4b34      	ldr	r3, [pc, #208]	; (8003354 <ProbeScope_IsTrig+0x6a0>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003286:	4b34      	ldr	r3, [pc, #208]	; (8003358 <ProbeScope_IsTrig+0x6a4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a34      	ldr	r2, [pc, #208]	; (800335c <ProbeScope_IsTrig+0x6a8>)
 800328c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800328e:	e05b      	b.n	8003348 <ProbeScope_IsTrig+0x694>
 8003290:	e05a      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d119      	bne.n	80032ce <ProbeScope_IsTrig+0x61a>
                         if (p_sample_prev->Val32S > p_sample_cur->Val32S) {
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	dd23      	ble.n	80032ee <ProbeScope_IsTrig+0x63a>
                             if (p_sample_prev->Val32S >= p_ch->TrigLevel.Val32S) {
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	db1d      	blt.n	80032ee <ProbeScope_IsTrig+0x63a>
                                 if (p_sample_cur->Val32S <= p_ch->TrigLevel.Val32S) {
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	dc17      	bgt.n	80032ee <ProbeScope_IsTrig+0x63a>
                                     ProbeScope_TrigFlag = 1;
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <ProbeScope_IsTrig+0x6a0>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <ProbeScope_IsTrig+0x6a4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a24      	ldr	r2, [pc, #144]	; (800335c <ProbeScope_IsTrig+0x6a8>)
 80032ca:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80032cc:	e03c      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S != 0) {
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <ProbeScope_IsTrig+0x63a>
                             if (p_sample_cur->Val32S == 0) {
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <ProbeScope_IsTrig+0x63a>
                                 ProbeScope_TrigFlag = 1;
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <ProbeScope_IsTrig+0x6a0>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80032e4:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <ProbeScope_IsTrig+0x6a4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1c      	ldr	r2, [pc, #112]	; (800335c <ProbeScope_IsTrig+0x6a8>)
 80032ea:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80032ec:	e02c      	b.n	8003348 <ProbeScope_IsTrig+0x694>
 80032ee:	e02b      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	ed93 7a00 	vldr	s14, [r3]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	edd3 7a00 	vldr	s15, [r3]
 80032fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003304:	dc00      	bgt.n	8003308 <ProbeScope_IsTrig+0x654>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003306:	e01f      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	ed93 7a00 	vldr	s14, [r3]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	edd3 7a05 	vldr	s15, [r3, #20]
 8003314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	da00      	bge.n	8003320 <ProbeScope_IsTrig+0x66c>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800331e:	e013      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	ed93 7a00 	vldr	s14, [r3]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	edd3 7a05 	vldr	s15, [r3, #20]
 800332c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003334:	d900      	bls.n	8003338 <ProbeScope_IsTrig+0x684>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003336:	e007      	b.n	8003348 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <ProbeScope_IsTrig+0x6a0>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <ProbeScope_IsTrig+0x6a4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a06      	ldr	r2, [pc, #24]	; (800335c <ProbeScope_IsTrig+0x6a8>)
 8003344:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003346:	bf00      	nop
#endif                     
            }                          
        }
    }
}
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	1fff078c 	.word	0x1fff078c
 8003358:	1fff062c 	.word	0x1fff062c
 800335c:	1fff0794 	.word	0x1fff0794

08003360 <reference_generator_compute>:
float_t reference_old = 0;

ref_type ref_type_select = 0;

void reference_generator_compute(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
	// Compute human data inputs into machine outputs
	switch (ref_type_select)
 8003364:	4ba5      	ldr	r3, [pc, #660]	; (80035fc <reference_generator_compute+0x29c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b03      	cmp	r3, #3
 800336a:	f200 810f 	bhi.w	800358c <reference_generator_compute+0x22c>
 800336e:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <reference_generator_compute+0x14>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	08003385 	.word	0x08003385
 8003378:	08003409 	.word	0x08003409
 800337c:	0800348d 	.word	0x0800348d
 8003380:	08003509 	.word	0x08003509
	{
	case (REF_POS):
		high_level = rotation_input * ROTATION_IU;
 8003384:	4b9e      	ldr	r3, [pc, #632]	; (8003600 <reference_generator_compute+0x2a0>)
 8003386:	edd3 7a00 	vldr	s15, [r3]
 800338a:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003604 <reference_generator_compute+0x2a4>
 800338e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003396:	ee17 2a90 	vmov	r2, s15
 800339a:	4b9b      	ldr	r3, [pc, #620]	; (8003608 <reference_generator_compute+0x2a8>)
 800339c:	601a      	str	r2, [r3, #0]
		high_level_time = time_high_input_s * SECOND;
 800339e:	4b9b      	ldr	r3, [pc, #620]	; (800360c <reference_generator_compute+0x2ac>)
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003610 <reference_generator_compute+0x2b0>
 80033a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b0:	ee17 2a90 	vmov	r2, s15
 80033b4:	4b97      	ldr	r3, [pc, #604]	; (8003614 <reference_generator_compute+0x2b4>)
 80033b6:	601a      	str	r2, [r3, #0]
		low_level_time = time_low_input_s * SECOND;
 80033b8:	4b97      	ldr	r3, [pc, #604]	; (8003618 <reference_generator_compute+0x2b8>)
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003610 <reference_generator_compute+0x2b0>
 80033c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ca:	ee17 2a90 	vmov	r2, s15
 80033ce:	4b93      	ldr	r3, [pc, #588]	; (800361c <reference_generator_compute+0x2bc>)
 80033d0:	601a      	str	r2, [r3, #0]
		rise_time = time_rise_input_s * SECOND;
 80033d2:	4b93      	ldr	r3, [pc, #588]	; (8003620 <reference_generator_compute+0x2c0>)
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003610 <reference_generator_compute+0x2b0>
 80033dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e4:	ee17 2a90 	vmov	r2, s15
 80033e8:	4b8e      	ldr	r3, [pc, #568]	; (8003624 <reference_generator_compute+0x2c4>)
 80033ea:	601a      	str	r2, [r3, #0]
		fall_time = time_fall_input_s * SECOND;
 80033ec:	4b8e      	ldr	r3, [pc, #568]	; (8003628 <reference_generator_compute+0x2c8>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003610 <reference_generator_compute+0x2b0>
 80033f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033fe:	ee17 2a90 	vmov	r2, s15
 8003402:	4b8a      	ldr	r3, [pc, #552]	; (800362c <reference_generator_compute+0x2cc>)
 8003404:	601a      	str	r2, [r3, #0]
		break;
 8003406:	e0c2      	b.n	800358e <reference_generator_compute+0x22e>
	case (REF_SPD):
		rise_time = time_rise_input_s * SECOND;
 8003408:	4b85      	ldr	r3, [pc, #532]	; (8003620 <reference_generator_compute+0x2c0>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003610 <reference_generator_compute+0x2b0>
 8003412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800341a:	ee17 2a90 	vmov	r2, s15
 800341e:	4b81      	ldr	r3, [pc, #516]	; (8003624 <reference_generator_compute+0x2c4>)
 8003420:	601a      	str	r2, [r3, #0]
		fall_time = time_high_input_s * SECOND;
 8003422:	4b7a      	ldr	r3, [pc, #488]	; (800360c <reference_generator_compute+0x2ac>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003610 <reference_generator_compute+0x2b0>
 800342c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003434:	ee17 2a90 	vmov	r2, s15
 8003438:	4b7c      	ldr	r3, [pc, #496]	; (800362c <reference_generator_compute+0x2cc>)
 800343a:	601a      	str	r2, [r3, #0]
		high_level = rpm_input / (MINUTE / ROTATION_IU);
 800343c:	4b7c      	ldr	r3, [pc, #496]	; (8003630 <reference_generator_compute+0x2d0>)
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x3e
 8003446:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800344a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800344e:	ee17 2a90 	vmov	r2, s15
 8003452:	4b6d      	ldr	r3, [pc, #436]	; (8003608 <reference_generator_compute+0x2a8>)
 8003454:	601a      	str	r2, [r3, #0]
		high_level_time = time_high_input_s * SECOND;
 8003456:	4b6d      	ldr	r3, [pc, #436]	; (800360c <reference_generator_compute+0x2ac>)
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8003610 <reference_generator_compute+0x2b0>
 8003460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003468:	ee17 2a90 	vmov	r2, s15
 800346c:	4b69      	ldr	r3, [pc, #420]	; (8003614 <reference_generator_compute+0x2b4>)
 800346e:	601a      	str	r2, [r3, #0]
		low_level_time = time_low_input_s * SECOND;
 8003470:	4b69      	ldr	r3, [pc, #420]	; (8003618 <reference_generator_compute+0x2b8>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003610 <reference_generator_compute+0x2b0>
 800347a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800347e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003482:	ee17 2a90 	vmov	r2, s15
 8003486:	4b65      	ldr	r3, [pc, #404]	; (800361c <reference_generator_compute+0x2bc>)
 8003488:	601a      	str	r2, [r3, #0]
		break;
 800348a:	e080      	b.n	800358e <reference_generator_compute+0x22e>
	case (REF_I):
		high_level = current_input;
 800348c:	4b69      	ldr	r3, [pc, #420]	; (8003634 <reference_generator_compute+0x2d4>)
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003496:	ee17 2a90 	vmov	r2, s15
 800349a:	4b5b      	ldr	r3, [pc, #364]	; (8003608 <reference_generator_compute+0x2a8>)
 800349c:	601a      	str	r2, [r3, #0]
		high_level_time = time_high_input_s * SECOND;
 800349e:	4b5b      	ldr	r3, [pc, #364]	; (800360c <reference_generator_compute+0x2ac>)
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003610 <reference_generator_compute+0x2b0>
 80034a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034b0:	ee17 2a90 	vmov	r2, s15
 80034b4:	4b57      	ldr	r3, [pc, #348]	; (8003614 <reference_generator_compute+0x2b4>)
 80034b6:	601a      	str	r2, [r3, #0]
		low_level_time = time_low_input_s * SECOND;
 80034b8:	4b57      	ldr	r3, [pc, #348]	; (8003618 <reference_generator_compute+0x2b8>)
 80034ba:	edd3 7a00 	vldr	s15, [r3]
 80034be:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003610 <reference_generator_compute+0x2b0>
 80034c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ca:	ee17 2a90 	vmov	r2, s15
 80034ce:	4b53      	ldr	r3, [pc, #332]	; (800361c <reference_generator_compute+0x2bc>)
 80034d0:	601a      	str	r2, [r3, #0]
		rise_time = time_rise_input_s * SECOND;
 80034d2:	4b53      	ldr	r3, [pc, #332]	; (8003620 <reference_generator_compute+0x2c0>)
 80034d4:	edd3 7a00 	vldr	s15, [r3]
 80034d8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003610 <reference_generator_compute+0x2b0>
 80034dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e4:	ee17 2a90 	vmov	r2, s15
 80034e8:	4b4e      	ldr	r3, [pc, #312]	; (8003624 <reference_generator_compute+0x2c4>)
 80034ea:	601a      	str	r2, [r3, #0]
		fall_time = time_fall_input_s * SECOND;
 80034ec:	4b4e      	ldr	r3, [pc, #312]	; (8003628 <reference_generator_compute+0x2c8>)
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003610 <reference_generator_compute+0x2b0>
 80034f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034fe:	ee17 2a90 	vmov	r2, s15
 8003502:	4b4a      	ldr	r3, [pc, #296]	; (800362c <reference_generator_compute+0x2cc>)
 8003504:	601a      	str	r2, [r3, #0]
		break;
 8003506:	e042      	b.n	800358e <reference_generator_compute+0x22e>
	case (REF_U):
		high_level = voltage_input;
 8003508:	4b4b      	ldr	r3, [pc, #300]	; (8003638 <reference_generator_compute+0x2d8>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003512:	ee17 2a90 	vmov	r2, s15
 8003516:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <reference_generator_compute+0x2a8>)
 8003518:	601a      	str	r2, [r3, #0]
		high_level_time = time_high_input_s * SECOND;
 800351a:	4b3c      	ldr	r3, [pc, #240]	; (800360c <reference_generator_compute+0x2ac>)
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003610 <reference_generator_compute+0x2b0>
 8003524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800352c:	ee17 2a90 	vmov	r2, s15
 8003530:	4b38      	ldr	r3, [pc, #224]	; (8003614 <reference_generator_compute+0x2b4>)
 8003532:	601a      	str	r2, [r3, #0]
		low_level_time = time_low_input_s * SECOND;
 8003534:	4b38      	ldr	r3, [pc, #224]	; (8003618 <reference_generator_compute+0x2b8>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003610 <reference_generator_compute+0x2b0>
 800353e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003546:	ee17 2a90 	vmov	r2, s15
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <reference_generator_compute+0x2bc>)
 800354c:	601a      	str	r2, [r3, #0]
		rise_time = time_rise_input_s * SECOND;
 800354e:	4b34      	ldr	r3, [pc, #208]	; (8003620 <reference_generator_compute+0x2c0>)
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003610 <reference_generator_compute+0x2b0>
 8003558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800355c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003560:	ee17 2a90 	vmov	r2, s15
 8003564:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <reference_generator_compute+0x2c4>)
 8003566:	601a      	str	r2, [r3, #0]
		fall_time = time_fall_input_s * SECOND;
 8003568:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <reference_generator_compute+0x2c8>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003610 <reference_generator_compute+0x2b0>
 8003572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800357a:	ee17 2a90 	vmov	r2, s15
 800357e:	4b2b      	ldr	r3, [pc, #172]	; (800362c <reference_generator_compute+0x2cc>)
 8003580:	601a      	str	r2, [r3, #0]
		u_q_ref = reference;
 8003582:	4b2e      	ldr	r3, [pc, #184]	; (800363c <reference_generator_compute+0x2dc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2e      	ldr	r2, [pc, #184]	; (8003640 <reference_generator_compute+0x2e0>)
 8003588:	6013      	str	r3, [r2, #0]
		break;
 800358a:	e000      	b.n	800358e <reference_generator_compute+0x22e>
	default:
		break;
 800358c:	bf00      	nop
	}

	rise_increment = (float_t)high_level / rise_time;
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <reference_generator_compute+0x2a8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <reference_generator_compute+0x2c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <reference_generator_compute+0x2e4>)
 80035ac:	edc3 7a00 	vstr	s15, [r3]
	fall_decrement = (float_t)high_level / fall_time;
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <reference_generator_compute+0x2a8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <reference_generator_compute+0x2cc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80035cc:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <reference_generator_compute+0x2e8>)
 80035ce:	edc3 7a00 	vstr	s15, [r3]
	reference = 0;
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <reference_generator_compute+0x2dc>)
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
	reference_old = 0;
 80035da:	4b1c      	ldr	r3, [pc, #112]	; (800364c <reference_generator_compute+0x2ec>)
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e2:	b672      	cpsid	i

	__disable_irq();
	interrupt_counter_ref_gen = 0;
 80035e4:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <reference_generator_compute+0x2f0>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80035ea:	b662      	cpsie	i
	__enable_irq();
	ref_gen_status = STATUS_1_RISE;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <reference_generator_compute+0x2f4>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
}
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	1fff0674 	.word	0x1fff0674
 8003600:	1fff0668 	.word	0x1fff0668
 8003604:	44fa0000 	.word	0x44fa0000
 8003608:	1fff07bc 	.word	0x1fff07bc
 800360c:	1fff0654 	.word	0x1fff0654
 8003610:	447a0000 	.word	0x447a0000
 8003614:	1fff07ac 	.word	0x1fff07ac
 8003618:	1fff0658 	.word	0x1fff0658
 800361c:	1fff07b8 	.word	0x1fff07b8
 8003620:	1fff064c 	.word	0x1fff064c
 8003624:	1fff07b4 	.word	0x1fff07b4
 8003628:	1fff0650 	.word	0x1fff0650
 800362c:	1fff07c4 	.word	0x1fff07c4
 8003630:	1fff0664 	.word	0x1fff0664
 8003634:	1fff065c 	.word	0x1fff065c
 8003638:	1fff0660 	.word	0x1fff0660
 800363c:	1fff066c 	.word	0x1fff066c
 8003640:	1ffe8854 	.word	0x1ffe8854
 8003644:	1fff07a8 	.word	0x1fff07a8
 8003648:	1fff07c0 	.word	0x1fff07c0
 800364c:	1fff0670 	.word	0x1fff0670
 8003650:	1fff0644 	.word	0x1fff0644
 8003654:	1fff0648 	.word	0x1fff0648

08003658 <reference_generator>:

void reference_generator(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	switch (ref_gen_status)
 800365c:	4b4f      	ldr	r3, [pc, #316]	; (800379c <reference_generator+0x144>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	2b03      	cmp	r3, #3
 8003664:	d870      	bhi.n	8003748 <reference_generator+0xf0>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <reference_generator+0x14>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	0800367d 	.word	0x0800367d
 8003670:	080036af 	.word	0x080036af
 8003674:	080036cd 	.word	0x080036cd
 8003678:	080036ff 	.word	0x080036ff
	{
	case (STATUS_1_RISE):
		if (interrupt_counter_ref_gen >= rise_time)
 800367c:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <reference_generator+0x148>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <reference_generator+0x14c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d805      	bhi.n	8003696 <reference_generator+0x3e>
		{
			ref_gen_status = STATUS_2_HIGH_LEVEL;
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <reference_generator+0x144>)
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 8003690:	4b44      	ldr	r3, [pc, #272]	; (80037a4 <reference_generator+0x14c>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
		}
		reference += rise_increment;
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <reference_generator+0x150>)
 8003698:	ed93 7a00 	vldr	s14, [r3]
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <reference_generator+0x154>)
 800369e:	edd3 7a00 	vldr	s15, [r3]
 80036a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a6:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <reference_generator+0x150>)
 80036a8:	edc3 7a00 	vstr	s15, [r3]

		break;
 80036ac:	e04d      	b.n	800374a <reference_generator+0xf2>

	case (STATUS_2_HIGH_LEVEL):
		if (interrupt_counter_ref_gen >= high_level_time)
 80036ae:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <reference_generator+0x158>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <reference_generator+0x14c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d806      	bhi.n	80036ca <reference_generator+0x72>
		{
			ref_gen_status = STATUS_3_FALL;
 80036bc:	4b37      	ldr	r3, [pc, #220]	; (800379c <reference_generator+0x144>)
 80036be:	2203      	movs	r2, #3
 80036c0:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 80036c2:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <reference_generator+0x14c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
		}
		break;
 80036c8:	e03f      	b.n	800374a <reference_generator+0xf2>
 80036ca:	e03e      	b.n	800374a <reference_generator+0xf2>

	case (STATUS_3_FALL):
	{
		if (interrupt_counter_ref_gen >= fall_time)
 80036cc:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <reference_generator+0x15c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <reference_generator+0x14c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d805      	bhi.n	80036e6 <reference_generator+0x8e>
		{
			ref_gen_status = STATUS_4_LOW_LEVEL;
 80036da:	4b30      	ldr	r3, [pc, #192]	; (800379c <reference_generator+0x144>)
 80036dc:	2204      	movs	r2, #4
 80036de:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 80036e0:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <reference_generator+0x14c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
		}
		reference -= fall_decrement;
 80036e6:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <reference_generator+0x150>)
 80036e8:	ed93 7a00 	vldr	s14, [r3]
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <reference_generator+0x160>)
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f6:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <reference_generator+0x150>)
 80036f8:	edc3 7a00 	vstr	s15, [r3]
	}
	break;
 80036fc:	e025      	b.n	800374a <reference_generator+0xf2>

	case (STATUS_4_LOW_LEVEL):
		if ((interrupt_counter_ref_gen >= low_level_time) && (repeat_motion == 0))
 80036fe:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <reference_generator+0x164>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <reference_generator+0x14c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d80a      	bhi.n	8003722 <reference_generator+0xca>
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <reference_generator+0x168>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <reference_generator+0xca>
		{
			ref_gen_status = STATUS_0_DISABLED;
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <reference_generator+0x144>)
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <reference_generator+0x14c>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e011      	b.n	8003746 <reference_generator+0xee>
		}
		else if ((interrupt_counter_ref_gen >= low_level_time) && (repeat_motion == 1))
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <reference_generator+0x164>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <reference_generator+0x14c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d80a      	bhi.n	8003746 <reference_generator+0xee>
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <reference_generator+0x168>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d106      	bne.n	8003746 <reference_generator+0xee>
		{
			ref_gen_status = STATUS_1_RISE;
 8003738:	4b18      	ldr	r3, [pc, #96]	; (800379c <reference_generator+0x144>)
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 800373e:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <reference_generator+0x14c>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
		}
		break;
 8003744:	e001      	b.n	800374a <reference_generator+0xf2>
 8003746:	e000      	b.n	800374a <reference_generator+0xf2>

	default:
		break;
 8003748:	bf00      	nop
	}

	switch (ref_type_select)
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <reference_generator+0x16c>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d81e      	bhi.n	8003790 <reference_generator+0x138>
 8003752:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <reference_generator+0x100>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	08003769 	.word	0x08003769
 800375c:	08003773 	.word	0x08003773
 8003760:	0800377d 	.word	0x0800377d
 8003764:	08003787 	.word	0x08003787
	{
	case (REF_POS):
		pos_ref = reference;
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <reference_generator+0x150>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <reference_generator+0x170>)
 800376e:	6013      	str	r3, [r2, #0]
		break;
 8003770:	e00f      	b.n	8003792 <reference_generator+0x13a>
	case (REF_SPD):
		spd_ref = reference;
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <reference_generator+0x150>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <reference_generator+0x174>)
 8003778:	6013      	str	r3, [r2, #0]
		break;
 800377a:	e00a      	b.n	8003792 <reference_generator+0x13a>
	case (REF_I):
		i_q_ref = reference;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <reference_generator+0x150>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <reference_generator+0x178>)
 8003782:	6013      	str	r3, [r2, #0]
		break;
 8003784:	e005      	b.n	8003792 <reference_generator+0x13a>
	case (REF_U):
		u_q_ref = reference;
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <reference_generator+0x150>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <reference_generator+0x17c>)
 800378c:	6013      	str	r3, [r2, #0]
		break;
 800378e:	e000      	b.n	8003792 <reference_generator+0x13a>
	default:
		break;
 8003790:	bf00      	nop
	}
}
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	1fff0648 	.word	0x1fff0648
 80037a0:	1fff07b4 	.word	0x1fff07b4
 80037a4:	1fff0644 	.word	0x1fff0644
 80037a8:	1fff066c 	.word	0x1fff066c
 80037ac:	1fff07a8 	.word	0x1fff07a8
 80037b0:	1fff07ac 	.word	0x1fff07ac
 80037b4:	1fff07c4 	.word	0x1fff07c4
 80037b8:	1fff07c0 	.word	0x1fff07c0
 80037bc:	1fff07b8 	.word	0x1fff07b8
 80037c0:	1ffe881c 	.word	0x1ffe881c
 80037c4:	1fff0674 	.word	0x1fff0674
 80037c8:	1ffe884c 	.word	0x1ffe884c
 80037cc:	1ffe8850 	.word	0x1ffe8850
 80037d0:	1ffe8844 	.word	0x1ffe8844
 80037d4:	1ffe8854 	.word	0x1ffe8854

080037d8 <state_machine>:
/*
	Simple State Machine
	DRIVE_DISABLED | DRIVE_ON | OPERATION_ENABLED
*/
void state_machine(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
	switch (DRIVE_STATUS_MSK)
 80037dc:	4b81      	ldr	r3, [pc, #516]	; (80039e4 <state_machine+0x20c>)
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d026      	beq.n	8003836 <state_machine+0x5e>
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d302      	bcc.n	80037f2 <state_machine+0x1a>
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d061      	beq.n	80038b4 <state_machine+0xdc>
			drive_command_old = drive_command;
		}
	}
	break;
	default:
		break;
 80037f0:	e0f6      	b.n	80039e0 <state_machine+0x208>
{
	switch (DRIVE_STATUS_MSK)
	{
	case (STATE_0_DRIVE_DISABLED):
		// Transition 0->1
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_0_DRIVE_DISABLED) && (DRIVE_COMMAND_STATE_MSK == STATE_1_DRIVE_ON))
 80037f2:	4b7d      	ldr	r3, [pc, #500]	; (80039e8 <state_machine+0x210>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11a      	bne.n	8003834 <state_machine+0x5c>
 80037fe:	4b7b      	ldr	r3, [pc, #492]	; (80039ec <state_machine+0x214>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	2b01      	cmp	r3, #1
 8003808:	d114      	bne.n	8003834 <state_machine+0x5c>
		{
			drive_on();
 800380a:	f000 f909 	bl	8003a20 <drive_on>
			drive_status &= DRIVE_STATUS_CLEAR;
 800380e:	4b75      	ldr	r3, [pc, #468]	; (80039e4 <state_machine+0x20c>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	f023 030f 	bic.w	r3, r3, #15
 8003816:	b29a      	uxth	r2, r3
 8003818:	4b72      	ldr	r3, [pc, #456]	; (80039e4 <state_machine+0x20c>)
 800381a:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_1_DRIVE_ON;
 800381c:	4b71      	ldr	r3, [pc, #452]	; (80039e4 <state_machine+0x20c>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b6f      	ldr	r3, [pc, #444]	; (80039e4 <state_machine+0x20c>)
 8003828:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 800382a:	4b70      	ldr	r3, [pc, #448]	; (80039ec <state_machine+0x214>)
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	4b6e      	ldr	r3, [pc, #440]	; (80039e8 <state_machine+0x210>)
 8003830:	801a      	strh	r2, [r3, #0]
		}
		break;
 8003832:	e0d5      	b.n	80039e0 <state_machine+0x208>
 8003834:	e0d4      	b.n	80039e0 <state_machine+0x208>

	case (STATE_1_DRIVE_ON):
		// Transition 1->2
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_1_DRIVE_ON) && (DRIVE_COMMAND_STATE_MSK == STATE_2_OPERATION_ENABLED))
 8003836:	4b6c      	ldr	r3, [pc, #432]	; (80039e8 <state_machine+0x210>)
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	2b01      	cmp	r3, #1
 8003840:	d119      	bne.n	8003876 <state_machine+0x9e>
 8003842:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <state_machine+0x214>)
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	2b02      	cmp	r3, #2
 800384c:	d113      	bne.n	8003876 <state_machine+0x9e>
		{
			operation_enabled();
 800384e:	f000 f905 	bl	8003a5c <operation_enabled>
			drive_status &= DRIVE_STATUS_CLEAR;
 8003852:	4b64      	ldr	r3, [pc, #400]	; (80039e4 <state_machine+0x20c>)
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	f023 030f 	bic.w	r3, r3, #15
 800385a:	b29a      	uxth	r2, r3
 800385c:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <state_machine+0x20c>)
 800385e:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_2_OPERATION_ENABLED;
 8003860:	4b60      	ldr	r3, [pc, #384]	; (80039e4 <state_machine+0x20c>)
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	b29a      	uxth	r2, r3
 800386a:	4b5e      	ldr	r3, [pc, #376]	; (80039e4 <state_machine+0x20c>)
 800386c:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <state_machine+0x214>)
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <state_machine+0x210>)
 8003874:	801a      	strh	r2, [r3, #0]
		}
		// Transition 1->0
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_1_DRIVE_ON) && (DRIVE_COMMAND_STATE_MSK == STATE_0_DRIVE_DISABLED))
 8003876:	4b5c      	ldr	r3, [pc, #368]	; (80039e8 <state_machine+0x210>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	2b01      	cmp	r3, #1
 8003880:	d117      	bne.n	80038b2 <state_machine+0xda>
 8003882:	4b5a      	ldr	r3, [pc, #360]	; (80039ec <state_machine+0x214>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	2b00      	cmp	r3, #0
 800388c:	d111      	bne.n	80038b2 <state_machine+0xda>
		{
			drive_disabled();
 800388e:	f000 f8b3 	bl	80039f8 <drive_disabled>
			drive_status &= DRIVE_STATUS_CLEAR;
 8003892:	4b54      	ldr	r3, [pc, #336]	; (80039e4 <state_machine+0x20c>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	f023 030f 	bic.w	r3, r3, #15
 800389a:	b29a      	uxth	r2, r3
 800389c:	4b51      	ldr	r3, [pc, #324]	; (80039e4 <state_machine+0x20c>)
 800389e:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_0_DRIVE_DISABLED;
 80038a0:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <state_machine+0x20c>)
 80038a2:	881a      	ldrh	r2, [r3, #0]
 80038a4:	4b4f      	ldr	r3, [pc, #316]	; (80039e4 <state_machine+0x20c>)
 80038a6:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <state_machine+0x214>)
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	4b4e      	ldr	r3, [pc, #312]	; (80039e8 <state_machine+0x210>)
 80038ae:	801a      	strh	r2, [r3, #0]
		}
		break;
 80038b0:	e096      	b.n	80039e0 <state_machine+0x208>
 80038b2:	e095      	b.n	80039e0 <state_machine+0x208>

	case (STATE_2_OPERATION_ENABLED):
	{
		// Transition 2->1
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_2_OPERATION_ENABLED) && (DRIVE_COMMAND_STATE_MSK == STATE_1_DRIVE_ON))
 80038b4:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <state_machine+0x210>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d119      	bne.n	80038f4 <state_machine+0x11c>
 80038c0:	4b4a      	ldr	r3, [pc, #296]	; (80039ec <state_machine+0x214>)
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d113      	bne.n	80038f4 <state_machine+0x11c>
		{
			drive_on();
 80038cc:	f000 f8a8 	bl	8003a20 <drive_on>
			drive_status &= DRIVE_STATUS_CLEAR;
 80038d0:	4b44      	ldr	r3, [pc, #272]	; (80039e4 <state_machine+0x20c>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f023 030f 	bic.w	r3, r3, #15
 80038d8:	b29a      	uxth	r2, r3
 80038da:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <state_machine+0x20c>)
 80038dc:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_1_DRIVE_ON;
 80038de:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <state_machine+0x20c>)
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <state_machine+0x20c>)
 80038ea:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 80038ec:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <state_machine+0x214>)
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <state_machine+0x210>)
 80038f2:	801a      	strh	r2, [r3, #0]
		}
		// Transition 2->0
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_2_OPERATION_ENABLED) && (DRIVE_COMMAND_STATE_MSK == STATE_0_DRIVE_DISABLED))
 80038f4:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <state_machine+0x210>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d116      	bne.n	800392e <state_machine+0x156>
 8003900:	4b3a      	ldr	r3, [pc, #232]	; (80039ec <state_machine+0x214>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	2b00      	cmp	r3, #0
 800390a:	d110      	bne.n	800392e <state_machine+0x156>
		{
			drive_disabled();
 800390c:	f000 f874 	bl	80039f8 <drive_disabled>
			drive_status &= DRIVE_STATUS_CLEAR;
 8003910:	4b34      	ldr	r3, [pc, #208]	; (80039e4 <state_machine+0x20c>)
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	f023 030f 	bic.w	r3, r3, #15
 8003918:	b29a      	uxth	r2, r3
 800391a:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <state_machine+0x20c>)
 800391c:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_0_DRIVE_DISABLED;
 800391e:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <state_machine+0x20c>)
 8003920:	881a      	ldrh	r2, [r3, #0]
 8003922:	4b30      	ldr	r3, [pc, #192]	; (80039e4 <state_machine+0x20c>)
 8003924:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <state_machine+0x214>)
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <state_machine+0x210>)
 800392c:	801a      	strh	r2, [r3, #0]
		}
		// Check for update transition and OPERATION_ENABLED still active
		if ((!(DRIVE_COMMAND_UPDATE_OLD_MSK & UPDATE_MSK) && (DRIVE_COMMAND_UPDATE_MSK & UPDATE_MSK)) && (DRIVE_COMMAND_STATE_MSK == STATE_2_OPERATION_ENABLED))
 800392e:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <state_machine+0x210>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d151      	bne.n	80039de <state_machine+0x206>
 800393a:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <state_machine+0x214>)
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d04b      	beq.n	80039de <state_machine+0x206>
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <state_machine+0x214>)
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	2b02      	cmp	r3, #2
 8003950:	d145      	bne.n	80039de <state_machine+0x206>
		{
			loop_control = LOOP_CONTROL_OFF;			// reset all loops
 8003952:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <state_machine+0x218>)
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
			loop_control |= DRIVE_COMMAND_REF_MSK >> 8; // save selected loops
 8003958:	4b24      	ldr	r3, [pc, #144]	; (80039ec <state_machine+0x214>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003960:	121b      	asrs	r3, r3, #8
 8003962:	b2da      	uxtb	r2, r3
 8003964:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <state_machine+0x218>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	4313      	orrs	r3, r2
 800396c:	b2db      	uxtb	r3, r3
 800396e:	b2da      	uxtb	r2, r3
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <state_machine+0x218>)
 8003972:	701a      	strb	r2, [r3, #0]

			// Check for reference generator output (Priority list: POS > SPD > I > U)
			if (DRIVE_COMMAND_REF_MSK & REF_POS_MSK)
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <state_machine+0x214>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <state_machine+0x1b0>
			{
				// POS REF
				ref_type_select = REF_POS;
 8003980:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <state_machine+0x21c>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e023      	b.n	80039d0 <state_machine+0x1f8>
			}
			else if (DRIVE_COMMAND_REF_MSK & REF_SPD_MSK)
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <state_machine+0x214>)
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <state_machine+0x1c4>
			{
				// SPD REF
				ref_type_select = REF_SPD;
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <state_machine+0x21c>)
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e019      	b.n	80039d0 <state_machine+0x1f8>
			}
			else if (DRIVE_COMMAND_REF_MSK & REF_I_MSK)
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <state_machine+0x214>)
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d010      	beq.n	80039ca <state_machine+0x1f2>
			{
				// I REFF
				ref_type_select = REF_I;
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <state_machine+0x21c>)
 80039aa:	2202      	movs	r2, #2
 80039ac:	701a      	strb	r2, [r3, #0]
				if (DRIVE_COMMAND_TEST_MSK & TUNE_TEST)
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <state_machine+0x214>)
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	b21b      	sxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da0a      	bge.n	80039d0 <state_machine+0x1f8>
				{
					loop_control |= TUNE_REF_LOOP_MSK;
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <state_machine+0x218>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <state_machine+0x218>)
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e002      	b.n	80039d0 <state_machine+0x1f8>
				}
			}
			else
			{
				// U REF
				ref_type_select = REF_U;
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <state_machine+0x21c>)
 80039cc:	2203      	movs	r2, #3
 80039ce:	701a      	strb	r2, [r3, #0]
			}
			compute_motion();
 80039d0:	f000 f850 	bl	8003a74 <compute_motion>
			drive_command_old = drive_command;
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <state_machine+0x214>)
 80039d6:	881a      	ldrh	r2, [r3, #0]
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <state_machine+0x210>)
 80039da:	801a      	strh	r2, [r3, #0]
		}
	}
	break;
 80039dc:	e7ff      	b.n	80039de <state_machine+0x206>
 80039de:	bf00      	nop
	default:
		break;
	}
}
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	1fff0676 	.word	0x1fff0676
 80039e8:	1fff067a 	.word	0x1fff067a
 80039ec:	1fff0678 	.word	0x1fff0678
 80039f0:	1fff067c 	.word	0x1fff067c
 80039f4:	1fff0674 	.word	0x1fff0674

080039f8 <drive_disabled>:
/*
	PWM output disabled
	CONTROL_LOOPS | REF_GEN | MOTION = OFF
*/
void drive_disabled(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
	motion_off();
 80039fc:	f7fd ff86 	bl	800190c <motion_off>
	loop_control = LOOP_CONTROL_OFF;
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <drive_disabled+0x1c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
	ref_gen_status = STATUS_0_DISABLED;
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <drive_disabled+0x20>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
	motion_config = OFF;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <drive_disabled+0x24>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
}
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	1fff067c 	.word	0x1fff067c
 8003a18:	1fff0648 	.word	0x1fff0648
 8003a1c:	1fff067d 	.word	0x1fff067d

08003a20 <drive_on>:
/*
	Initilize position | PWM(50%) | PWM output enabled | Current offset computed
	CONTROL_LOOPS | REF_GEN | MOTION | = OFF
*/
void drive_on(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	motion_off();
 8003a24:	f7fd ff72 	bl	800190c <motion_off>
	loop_control = LOOP_CONTROL_OFF;
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <drive_on+0x30>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
	ref_gen_status = STATUS_0_DISABLED;
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <drive_on+0x34>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
	motion_config = OFF;
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <drive_on+0x38>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]

	pwm_update(0, 0); // PWM(50%)
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	f7fd fe65 	bl	800170c <pwm_update>
	motion_on();
 8003a42:	f7fd ff25 	bl	8001890 <motion_on>
	current_offset();
 8003a46:	f7fd fb37 	bl	80010b8 <current_offset>
	init_position();		//NEED TO CHECK if it still works !!!!
 8003a4a:	f7fe f883 	bl	8001b54 <init_position>
}
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	1fff067c 	.word	0x1fff067c
 8003a54:	1fff0648 	.word	0x1fff0648
 8003a58:	1fff067d 	.word	0x1fff067d

08003a5c <operation_enabled>:
/*
	CONTROL_LOOPS = OFF
	Wait for motion commands to start movement computation
*/
void operation_enabled(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
	loop_control = LOOP_CONTROL_OFF;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <operation_enabled+0x14>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
}
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	1fff067c 	.word	0x1fff067c

08003a74 <compute_motion>:

/*
	During OPERATION_ENABLE start computation function
*/
void compute_motion(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
	reference_generator_compute();
 8003a78:	f7ff fc72 	bl	8003360 <reference_generator_compute>
	motion_config = ON;
 8003a7c:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <compute_motion+0x10>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
}
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	1fff067d 	.word	0x1fff067d

08003a88 <delay_t>:

/*
 * Wait for time*50us
 */
void delay_t(uint32_t time)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a90:	b672      	cpsid	i
	__disable_irq();
	interrupt_counter_timer = 0;
 8003a92:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <delay_t+0x28>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003a98:	b662      	cpsie	i
	__enable_irq();
	while (interrupt_counter_timer < time)
 8003a9a:	bf00      	nop
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <delay_t+0x28>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d3fa      	bcc.n	8003a9c <delay_t+0x14>
	{
		// NO_ACTION
	};
}
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	1ffe8834 	.word	0x1ffe8834

08003ab4 <abc_dq>:

/*
 * Convert three-phase electrical signals from time-domain to dq0-reference frame
 */
void abc_dq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
	// The Clarke Transformation
	i_alpha = ia;
 8003ab8:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <abc_dq+0x88>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b21b      	sxth	r3, r3
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <abc_dq+0x8c>)
 8003ac8:	edc3 7a00 	vstr	s15, [r3]
//	i_beta = F_1_SQRT_3 * (float_t)(ia + (float_t)(2 * ib));
	i_beta = ic;
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <abc_dq+0x90>)
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b21b      	sxth	r3, r3
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <abc_dq+0x94>)
 8003adc:	edc3 7a00 	vstr	s15, [r3]

	// The Park Transformation
	i_d = i_alpha * cos_theta_fast + i_beta * sin_theta_fast;
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <abc_dq+0x8c>)
 8003ae2:	ed93 7a00 	vldr	s14, [r3]
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <abc_dq+0x98>)
 8003ae8:	edd3 7a00 	vldr	s15, [r3]
 8003aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <abc_dq+0x94>)
 8003af2:	edd3 6a00 	vldr	s13, [r3]
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <abc_dq+0x9c>)
 8003af8:	edd3 7a00 	vldr	s15, [r3]
 8003afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b04:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <abc_dq+0xa0>)
 8003b06:	edc3 7a00 	vstr	s15, [r3]
	i_q = i_beta * cos_theta_fast - i_alpha * sin_theta_fast;
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <abc_dq+0x94>)
 8003b0c:	ed93 7a00 	vldr	s14, [r3]
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <abc_dq+0x98>)
 8003b12:	edd3 7a00 	vldr	s15, [r3]
 8003b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <abc_dq+0x8c>)
 8003b1c:	edd3 6a00 	vldr	s13, [r3]
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <abc_dq+0x9c>)
 8003b22:	edd3 7a00 	vldr	s15, [r3]
 8003b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <abc_dq+0xa4>)
 8003b30:	edc3 7a00 	vstr	s15, [r3]
}
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	1fff06b0 	.word	0x1fff06b0
 8003b40:	1fff07cc 	.word	0x1fff07cc
 8003b44:	1fff06d0 	.word	0x1fff06d0
 8003b48:	1fff07e4 	.word	0x1fff07e4
 8003b4c:	1fff0690 	.word	0x1fff0690
 8003b50:	1fff068c 	.word	0x1fff068c
 8003b54:	1fff07d4 	.word	0x1fff07d4
 8003b58:	1fff07d0 	.word	0x1fff07d0

08003b5c <dq_abc>:

/*
 * Convert two-phase balanced sinusoidal signals to three-phase electrical signals
 */
void dq_abc(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0

	// The Inverse Park Transformation
	u_alpha = u_d_ref * cos_theta_fast - u_q_ref * sin_theta_fast;
 8003b60:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <dq_abc+0xe0>)
 8003b62:	ed93 7a00 	vldr	s14, [r3]
 8003b66:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <dq_abc+0xe4>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b70:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <dq_abc+0xe8>)
 8003b72:	edd3 6a00 	vldr	s13, [r3]
 8003b76:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <dq_abc+0xec>)
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <dq_abc+0xf0>)
 8003b86:	edc3 7a00 	vstr	s15, [r3]
	u_beta = u_q_ref * cos_theta_fast + u_d_ref * sin_theta_fast;
 8003b8a:	4b2e      	ldr	r3, [pc, #184]	; (8003c44 <dq_abc+0xe8>)
 8003b8c:	ed93 7a00 	vldr	s14, [r3]
 8003b90:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <dq_abc+0xe4>)
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b9a:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <dq_abc+0xe0>)
 8003b9c:	edd3 6a00 	vldr	s13, [r3]
 8003ba0:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <dq_abc+0xec>)
 8003ba2:	edd3 7a00 	vldr	s15, [r3]
 8003ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bae:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <dq_abc+0xf4>)
 8003bb0:	edc3 7a00 	vstr	s15, [r3]

	// The Inverse Clarke Transformation
	u_a_ref = u_alpha;
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <dq_abc+0xf0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <dq_abc+0xf8>)
 8003bba:	6013      	str	r3, [r2, #0]
	u_b_ref = u_beta;
 8003bbc:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <dq_abc+0xf4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a25      	ldr	r2, [pc, #148]	; (8003c58 <dq_abc+0xfc>)
 8003bc2:	6013      	str	r3, [r2, #0]

	/*
	 * Keeps the values in range of int16_t
	 * Later on the Float values will be casted into Int
	 */
	if (u_a_ref > MAX_UINT_16)
 8003bc4:	4b23      	ldr	r3, [pc, #140]	; (8003c54 <dq_abc+0xf8>)
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003c5c <dq_abc+0x100>
 8003bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd6:	dd03      	ble.n	8003be0 <dq_abc+0x84>
	{
		u_a_ref = MAX_UINT_16;
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <dq_abc+0xf8>)
 8003bda:	4a21      	ldr	r2, [pc, #132]	; (8003c60 <dq_abc+0x104>)
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e00d      	b.n	8003bfc <dq_abc+0xa0>
	}
	else if (u_a_ref < MIN_UINT_16)
 8003be0:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <dq_abc+0xf8>)
 8003be2:	edd3 7a00 	vldr	s15, [r3]
 8003be6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003c64 <dq_abc+0x108>
 8003bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf2:	d503      	bpl.n	8003bfc <dq_abc+0xa0>
	{
		u_a_ref = MIN_UINT_16;
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <dq_abc+0xf8>)
 8003bf6:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 8003bfa:	601a      	str	r2, [r3, #0]
	}

	if (u_b_ref > MAX_UINT_16)
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <dq_abc+0xfc>)
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003c5c <dq_abc+0x100>
 8003c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0e:	dd03      	ble.n	8003c18 <dq_abc+0xbc>
	{
		u_b_ref = MAX_UINT_16;
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <dq_abc+0xfc>)
 8003c12:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <dq_abc+0x104>)
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e00d      	b.n	8003c34 <dq_abc+0xd8>
	}
	else if (u_b_ref < MIN_UINT_16)
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <dq_abc+0xfc>)
 8003c1a:	edd3 7a00 	vldr	s15, [r3]
 8003c1e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003c64 <dq_abc+0x108>
 8003c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2a:	d503      	bpl.n	8003c34 <dq_abc+0xd8>
	{
		u_a_ref = MIN_UINT_16;
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <dq_abc+0xf8>)
 8003c2e:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 8003c32:	601a      	str	r2, [r3, #0]
//	}
//	else if (u_c_ref < MIN_UINT_16)
//	{
//		u_c_ref = MIN_UINT_16;
//	}
}
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	1ffe8858 	.word	0x1ffe8858
 8003c40:	1fff0690 	.word	0x1fff0690
 8003c44:	1ffe8854 	.word	0x1ffe8854
 8003c48:	1fff068c 	.word	0x1fff068c
 8003c4c:	1fff07e0 	.word	0x1fff07e0
 8003c50:	1fff07dc 	.word	0x1fff07dc
 8003c54:	1fff07d8 	.word	0x1fff07d8
 8003c58:	1fff07c8 	.word	0x1fff07c8
 8003c5c:	46fffe00 	.word	0x46fffe00
 8003c60:	46fffe00 	.word	0x46fffe00
 8003c64:	c7000000 	.word	0xc7000000

08003c68 <compute_fast_speed>:

/*
 * Compute the speed based on the encoder increments, read from CCU40 Timer
 */
void compute_fast_speed(void)			//SPEED = 1 for testing
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
	timer_value_fast = CCU40_CC40->TIMER;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <compute_fast_speed+0x24>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <compute_fast_speed+0x28>)
 8003c74:	801a      	strh	r2, [r3, #0]
//	speed_value_fast = timer_value_fast - timer_value_old_fast;
	speed_value_fast = 1;
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <compute_fast_speed+0x2c>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	801a      	strh	r2, [r3, #0]
	timer_value_old_fast = timer_value_fast;
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <compute_fast_speed+0x28>)
 8003c7e:	881a      	ldrh	r2, [r3, #0]
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <compute_fast_speed+0x30>)
 8003c82:	801a      	strh	r2, [r3, #0]
}
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	4000c100 	.word	0x4000c100
 8003c90:	1fff0694 	.word	0x1fff0694
 8003c94:	1fff0698 	.word	0x1fff0698
 8003c98:	1fff0696 	.word	0x1fff0696

08003c9c <compute_fast_mechanical_position>:
/*
 * Compute the mechanical position based on the speed value
 */
void compute_fast_mechanical_position(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
	mechanical_position_fast += speed_value_fast;
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <compute_fast_mechanical_position+0x1c>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b21a      	sxth	r2, r3
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <compute_fast_mechanical_position+0x20>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	4a03      	ldr	r2, [pc, #12]	; (8003cbc <compute_fast_mechanical_position+0x20>)
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	1fff0698 	.word	0x1fff0698
 8003cbc:	1fff0680 	.word	0x1fff0680

08003cc0 <compute_fast_electrical_position>:

/*
 * Compute the module of the electrical position based on the mechanical position
 */
void compute_fast_electrical_position(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
	electrical_resolution = encoder_resolution / pp;
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <compute_fast_electrical_position+0x3c>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b21a      	sxth	r2, r3
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <compute_fast_electrical_position+0x40>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	b25b      	sxtb	r3, r3
 8003cd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <compute_fast_electrical_position+0x44>)
 8003cd8:	801a      	strh	r2, [r3, #0]
	electrical_position_modulo_fast = mechanical_position_fast % electrical_resolution;
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <compute_fast_electrical_position+0x48>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <compute_fast_electrical_position+0x44>)
 8003ce0:	8812      	ldrh	r2, [r2, #0]
 8003ce2:	b212      	sxth	r2, r2
 8003ce4:	fb93 f1f2 	sdiv	r1, r3, r2
 8003ce8:	fb02 f201 	mul.w	r2, r2, r1
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <compute_fast_electrical_position+0x4c>)
 8003cf0:	6013      	str	r3, [r2, #0]
}
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	1ffe881e 	.word	0x1ffe881e
 8003d00:	1ffe8820 	.word	0x1ffe8820
 8003d04:	1fff069a 	.word	0x1fff069a
 8003d08:	1fff0680 	.word	0x1fff0680
 8003d0c:	1fff0684 	.word	0x1fff0684

08003d10 <compute_fast_field>:
/*
 * Compute the electrical angle based on the electrical position
 * Compute the sin&cos of theta
 */
void compute_fast_field(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
	theta_fast = electrical_position_modulo_fast * (2 * Pi) / electrical_resolution;
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <compute_fast_field+0x54>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d20:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003d68 <compute_fast_field+0x58>
 8003d24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <compute_fast_field+0x5c>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b21b      	sxth	r3, r3
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d36:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <compute_fast_field+0x60>)
 8003d3c:	edc3 7a00 	vstr	s15, [r3]
	if (loop_control & TUNE_REF_LOOP_MSK)
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <compute_fast_field+0x64>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	b25b      	sxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	da03      	bge.n	8003d54 <compute_fast_field+0x44>
	{
		theta_fast = 0;
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <compute_fast_field+0x60>)
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
	}
	sincosf(theta_fast, &sin_theta_fast, &cos_theta_fast);
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <compute_fast_field+0x60>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	4907      	ldr	r1, [pc, #28]	; (8003d78 <compute_fast_field+0x68>)
 8003d5c:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <compute_fast_field+0x6c>)
 8003d5e:	f000 f80f 	bl	8003d80 <sincosf>
}
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	1fff0684 	.word	0x1fff0684
 8003d68:	40c90fd0 	.word	0x40c90fd0
 8003d6c:	1fff069a 	.word	0x1fff069a
 8003d70:	1fff0688 	.word	0x1fff0688
 8003d74:	1fff067c 	.word	0x1fff067c
 8003d78:	1fff068c 	.word	0x1fff068c
 8003d7c:	1fff0690 	.word	0x1fff0690

08003d80 <sincosf>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	460e      	mov	r6, r1
 8003d84:	4614      	mov	r4, r2
 8003d86:	4605      	mov	r5, r0
 8003d88:	f000 f84c 	bl	8003e24 <sinf>
 8003d8c:	6030      	str	r0, [r6, #0]
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f802 	bl	8003d98 <cosf>
 8003d94:	6020      	str	r0, [r4, #0]
 8003d96:	bd70      	pop	{r4, r5, r6, pc}

08003d98 <cosf>:
 8003d98:	b500      	push	{lr}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	4a20      	ldr	r2, [pc, #128]	; (8003e20 <cosf+0x88>)
 8003d9e:	9001      	str	r0, [sp, #4]
 8003da0:	9b01      	ldr	r3, [sp, #4]
 8003da2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003da6:	4293      	cmp	r3, r2
 8003da8:	dd1d      	ble.n	8003de6 <cosf+0x4e>
 8003daa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003dae:	db08      	blt.n	8003dc2 <cosf+0x2a>
 8003db0:	eddd 7a01 	vldr	s15, [sp, #4]
 8003db4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003db8:	ee17 0a90 	vmov	r0, s15
 8003dbc:	b005      	add	sp, #20
 8003dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dc2:	a902      	add	r1, sp, #8
 8003dc4:	f000 f87c 	bl	8003ec0 <__ieee754_rem_pio2f>
 8003dc8:	f000 0203 	and.w	r2, r0, #3
 8003dcc:	2a01      	cmp	r2, #1
 8003dce:	9802      	ldr	r0, [sp, #8]
 8003dd0:	9903      	ldr	r1, [sp, #12]
 8003dd2:	d019      	beq.n	8003e08 <cosf+0x70>
 8003dd4:	2a02      	cmp	r2, #2
 8003dd6:	d010      	beq.n	8003dfa <cosf+0x62>
 8003dd8:	b1ea      	cbz	r2, 8003e16 <cosf+0x7e>
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f000 fd5a 	bl	8004894 <__kernel_sinf>
 8003de0:	ee07 0a90 	vmov	s15, r0
 8003de4:	e7e8      	b.n	8003db8 <cosf+0x20>
 8003de6:	2100      	movs	r1, #0
 8003de8:	f000 f9b6 	bl	8004158 <__kernel_cosf>
 8003dec:	ee07 0a90 	vmov	s15, r0
 8003df0:	ee17 0a90 	vmov	r0, s15
 8003df4:	b005      	add	sp, #20
 8003df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dfa:	f000 f9ad 	bl	8004158 <__kernel_cosf>
 8003dfe:	ee07 0a90 	vmov	s15, r0
 8003e02:	eef1 7a67 	vneg.f32	s15, s15
 8003e06:	e7d7      	b.n	8003db8 <cosf+0x20>
 8003e08:	f000 fd44 	bl	8004894 <__kernel_sinf>
 8003e0c:	ee07 0a90 	vmov	s15, r0
 8003e10:	eef1 7a67 	vneg.f32	s15, s15
 8003e14:	e7d0      	b.n	8003db8 <cosf+0x20>
 8003e16:	f000 f99f 	bl	8004158 <__kernel_cosf>
 8003e1a:	ee07 0a90 	vmov	s15, r0
 8003e1e:	e7cb      	b.n	8003db8 <cosf+0x20>
 8003e20:	3f490fd8 	.word	0x3f490fd8

08003e24 <sinf>:
 8003e24:	b500      	push	{lr}
 8003e26:	b085      	sub	sp, #20
 8003e28:	4a24      	ldr	r2, [pc, #144]	; (8003ebc <sinf+0x98>)
 8003e2a:	9001      	str	r0, [sp, #4]
 8003e2c:	9b01      	ldr	r3, [sp, #4]
 8003e2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e32:	4293      	cmp	r3, r2
 8003e34:	dd1e      	ble.n	8003e74 <sinf+0x50>
 8003e36:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003e3a:	db08      	blt.n	8003e4e <sinf+0x2a>
 8003e3c:	eddd 7a01 	vldr	s15, [sp, #4]
 8003e40:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003e44:	ee17 0a90 	vmov	r0, s15
 8003e48:	b005      	add	sp, #20
 8003e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e4e:	a902      	add	r1, sp, #8
 8003e50:	f000 f836 	bl	8003ec0 <__ieee754_rem_pio2f>
 8003e54:	f000 0003 	and.w	r0, r0, #3
 8003e58:	2801      	cmp	r0, #1
 8003e5a:	d020      	beq.n	8003e9e <sinf+0x7a>
 8003e5c:	2802      	cmp	r0, #2
 8003e5e:	d014      	beq.n	8003e8a <sinf+0x66>
 8003e60:	b320      	cbz	r0, 8003eac <sinf+0x88>
 8003e62:	9802      	ldr	r0, [sp, #8]
 8003e64:	9903      	ldr	r1, [sp, #12]
 8003e66:	f000 f977 	bl	8004158 <__kernel_cosf>
 8003e6a:	ee07 0a90 	vmov	s15, r0
 8003e6e:	eef1 7a67 	vneg.f32	s15, s15
 8003e72:	e7e7      	b.n	8003e44 <sinf+0x20>
 8003e74:	2100      	movs	r1, #0
 8003e76:	2200      	movs	r2, #0
 8003e78:	f000 fd0c 	bl	8004894 <__kernel_sinf>
 8003e7c:	ee07 0a90 	vmov	s15, r0
 8003e80:	ee17 0a90 	vmov	r0, s15
 8003e84:	b005      	add	sp, #20
 8003e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e8a:	9802      	ldr	r0, [sp, #8]
 8003e8c:	9903      	ldr	r1, [sp, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f000 fd00 	bl	8004894 <__kernel_sinf>
 8003e94:	ee07 0a90 	vmov	s15, r0
 8003e98:	eef1 7a67 	vneg.f32	s15, s15
 8003e9c:	e7d2      	b.n	8003e44 <sinf+0x20>
 8003e9e:	9802      	ldr	r0, [sp, #8]
 8003ea0:	9903      	ldr	r1, [sp, #12]
 8003ea2:	f000 f959 	bl	8004158 <__kernel_cosf>
 8003ea6:	ee07 0a90 	vmov	s15, r0
 8003eaa:	e7cb      	b.n	8003e44 <sinf+0x20>
 8003eac:	9802      	ldr	r0, [sp, #8]
 8003eae:	9903      	ldr	r1, [sp, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f000 fcef 	bl	8004894 <__kernel_sinf>
 8003eb6:	ee07 0a90 	vmov	s15, r0
 8003eba:	e7c3      	b.n	8003e44 <sinf+0x20>
 8003ebc:	3f490fd8 	.word	0x3f490fd8

08003ec0 <__ieee754_rem_pio2f>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4a97      	ldr	r2, [pc, #604]	; (8004120 <__ieee754_rem_pio2f+0x260>)
 8003ec4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003ec8:	4294      	cmp	r4, r2
 8003eca:	b086      	sub	sp, #24
 8003ecc:	4606      	mov	r6, r0
 8003ece:	460d      	mov	r5, r1
 8003ed0:	dd68      	ble.n	8003fa4 <__ieee754_rem_pio2f+0xe4>
 8003ed2:	4a94      	ldr	r2, [pc, #592]	; (8004124 <__ieee754_rem_pio2f+0x264>)
 8003ed4:	4294      	cmp	r4, r2
 8003ed6:	dc1c      	bgt.n	8003f12 <__ieee754_rem_pio2f+0x52>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	eddf 7a93 	vldr	s15, [pc, #588]	; 8004128 <__ieee754_rem_pio2f+0x268>
 8003ede:	4a93      	ldr	r2, [pc, #588]	; (800412c <__ieee754_rem_pio2f+0x26c>)
 8003ee0:	f024 040f 	bic.w	r4, r4, #15
 8003ee4:	ee07 0a10 	vmov	s14, r0
 8003ee8:	f340 80e2 	ble.w	80040b0 <__ieee754_rem_pio2f+0x1f0>
 8003eec:	4294      	cmp	r4, r2
 8003eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef2:	d067      	beq.n	8003fc4 <__ieee754_rem_pio2f+0x104>
 8003ef4:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8004130 <__ieee754_rem_pio2f+0x270>
 8003ef8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003efc:	2001      	movs	r0, #1
 8003efe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f02:	edc1 6a00 	vstr	s13, [r1]
 8003f06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f0a:	edc1 7a01 	vstr	s15, [r1, #4]
 8003f0e:	b006      	add	sp, #24
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	4a88      	ldr	r2, [pc, #544]	; (8004134 <__ieee754_rem_pio2f+0x274>)
 8003f14:	4294      	cmp	r4, r2
 8003f16:	dd67      	ble.n	8003fe8 <__ieee754_rem_pio2f+0x128>
 8003f18:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003f1c:	da48      	bge.n	8003fb0 <__ieee754_rem_pio2f+0xf0>
 8003f1e:	15e2      	asrs	r2, r4, #23
 8003f20:	3a86      	subs	r2, #134	; 0x86
 8003f22:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003f26:	ee07 3a10 	vmov	s14, r3
 8003f2a:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8003f2e:	eddf 7a82 	vldr	s15, [pc, #520]	; 8004138 <__ieee754_rem_pio2f+0x278>
 8003f32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003f36:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003f3a:	edcd 6a03 	vstr	s13, [sp, #12]
 8003f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f42:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8003f46:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003f4a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003f4e:	edcd 6a04 	vstr	s13, [sp, #16]
 8003f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	edcd 7a05 	vstr	s15, [sp, #20]
 8003f62:	f040 80b8 	bne.w	80040d6 <__ieee754_rem_pio2f+0x216>
 8003f66:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	bf14      	ite	ne
 8003f70:	2302      	movne	r3, #2
 8003f72:	2301      	moveq	r3, #1
 8003f74:	4971      	ldr	r1, [pc, #452]	; (800413c <__ieee754_rem_pio2f+0x27c>)
 8003f76:	2002      	movs	r0, #2
 8003f78:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003f7c:	a803      	add	r0, sp, #12
 8003f7e:	4629      	mov	r1, r5
 8003f80:	f000 f974 	bl	800426c <__kernel_rem_pio2f>
 8003f84:	2e00      	cmp	r6, #0
 8003f86:	da11      	bge.n	8003fac <__ieee754_rem_pio2f+0xec>
 8003f88:	ed95 7a00 	vldr	s14, [r5]
 8003f8c:	edd5 7a01 	vldr	s15, [r5, #4]
 8003f90:	eeb1 7a47 	vneg.f32	s14, s14
 8003f94:	eef1 7a67 	vneg.f32	s15, s15
 8003f98:	4240      	negs	r0, r0
 8003f9a:	ed85 7a00 	vstr	s14, [r5]
 8003f9e:	edc5 7a01 	vstr	s15, [r5, #4]
 8003fa2:	e003      	b.n	8003fac <__ieee754_rem_pio2f+0xec>
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	6028      	str	r0, [r5, #0]
 8003fa8:	604a      	str	r2, [r1, #4]
 8003faa:	2000      	movs	r0, #0
 8003fac:	b006      	add	sp, #24
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	ee07 0a90 	vmov	s15, r0
 8003fb4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003fb8:	2000      	movs	r0, #0
 8003fba:	edc1 7a01 	vstr	s15, [r1, #4]
 8003fbe:	edc1 7a00 	vstr	s15, [r1]
 8003fc2:	e7f3      	b.n	8003fac <__ieee754_rem_pio2f+0xec>
 8003fc4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004140 <__ieee754_rem_pio2f+0x280>
 8003fc8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004144 <__ieee754_rem_pio2f+0x284>
 8003fcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003fd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003fda:	edc1 6a00 	vstr	s13, [r1]
 8003fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fe2:	edc1 7a01 	vstr	s15, [r1, #4]
 8003fe6:	e7e1      	b.n	8003fac <__ieee754_rem_pio2f+0xec>
 8003fe8:	f000 fca2 	bl	8004930 <fabsf>
 8003fec:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8004148 <__ieee754_rem_pio2f+0x288>
 8003ff0:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 8004128 <__ieee754_rem_pio2f+0x268>
 8003ff4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004130 <__ieee754_rem_pio2f+0x270>
 8003ff8:	ee07 0a10 	vmov	s14, r0
 8003ffc:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8004000:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004008:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800400c:	ee17 0a90 	vmov	r0, s15
 8004010:	eef1 5a46 	vneg.f32	s11, s12
 8004014:	eef0 7a47 	vmov.f32	s15, s14
 8004018:	281f      	cmp	r0, #31
 800401a:	eee5 7a85 	vfma.f32	s15, s11, s10
 800401e:	ee26 7a26 	vmul.f32	s14, s12, s13
 8004022:	dc1d      	bgt.n	8004060 <__ieee754_rem_pio2f+0x1a0>
 8004024:	4a49      	ldr	r2, [pc, #292]	; (800414c <__ieee754_rem_pio2f+0x28c>)
 8004026:	1e41      	subs	r1, r0, #1
 8004028:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 800402c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004030:	4293      	cmp	r3, r2
 8004032:	d015      	beq.n	8004060 <__ieee754_rem_pio2f+0x1a0>
 8004034:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004038:	edc5 6a00 	vstr	s13, [r5]
 800403c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004040:	2e00      	cmp	r6, #0
 8004042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004046:	edc5 7a01 	vstr	s15, [r5, #4]
 800404a:	daaf      	bge.n	8003fac <__ieee754_rem_pio2f+0xec>
 800404c:	eef1 6a66 	vneg.f32	s13, s13
 8004050:	eef1 7a67 	vneg.f32	s15, s15
 8004054:	edc5 6a00 	vstr	s13, [r5]
 8004058:	edc5 7a01 	vstr	s15, [r5, #4]
 800405c:	4240      	negs	r0, r0
 800405e:	e7a5      	b.n	8003fac <__ieee754_rem_pio2f+0xec>
 8004060:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004064:	15e4      	asrs	r4, r4, #23
 8004066:	ee16 3a90 	vmov	r3, s13
 800406a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800406e:	1ae3      	subs	r3, r4, r3
 8004070:	2b08      	cmp	r3, #8
 8004072:	dde1      	ble.n	8004038 <__ieee754_rem_pio2f+0x178>
 8004074:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004140 <__ieee754_rem_pio2f+0x280>
 8004078:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004144 <__ieee754_rem_pio2f+0x284>
 800407c:	eeb0 5a67 	vmov.f32	s10, s15
 8004080:	eea5 5a87 	vfma.f32	s10, s11, s14
 8004084:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004088:	eee5 7a87 	vfma.f32	s15, s11, s14
 800408c:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8004090:	ee75 6a67 	vsub.f32	s13, s10, s15
 8004094:	eeb0 7a67 	vmov.f32	s14, s15
 8004098:	ee16 3a90 	vmov	r3, s13
 800409c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80040a0:	1ae4      	subs	r4, r4, r3
 80040a2:	2c19      	cmp	r4, #25
 80040a4:	dc2c      	bgt.n	8004100 <__ieee754_rem_pio2f+0x240>
 80040a6:	edc5 6a00 	vstr	s13, [r5]
 80040aa:	eef0 7a45 	vmov.f32	s15, s10
 80040ae:	e7c5      	b.n	800403c <__ieee754_rem_pio2f+0x17c>
 80040b0:	4294      	cmp	r4, r2
 80040b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b6:	d010      	beq.n	80040da <__ieee754_rem_pio2f+0x21a>
 80040b8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004130 <__ieee754_rem_pio2f+0x270>
 80040bc:	ee77 6a87 	vadd.f32	s13, s15, s14
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80040c8:	edc1 6a00 	vstr	s13, [r1]
 80040cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040d0:	edc1 7a01 	vstr	s15, [r1, #4]
 80040d4:	e76a      	b.n	8003fac <__ieee754_rem_pio2f+0xec>
 80040d6:	2303      	movs	r3, #3
 80040d8:	e74c      	b.n	8003f74 <__ieee754_rem_pio2f+0xb4>
 80040da:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004140 <__ieee754_rem_pio2f+0x280>
 80040de:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004144 <__ieee754_rem_pio2f+0x284>
 80040e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80040ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80040f2:	edc1 6a00 	vstr	s13, [r1]
 80040f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040fa:	edc1 7a01 	vstr	s15, [r1, #4]
 80040fe:	e755      	b.n	8003fac <__ieee754_rem_pio2f+0xec>
 8004100:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004150 <__ieee754_rem_pio2f+0x290>
 8004104:	eddf 4a13 	vldr	s9, [pc, #76]	; 8004154 <__ieee754_rem_pio2f+0x294>
 8004108:	eef0 7a45 	vmov.f32	s15, s10
 800410c:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8004110:	ee35 7a67 	vsub.f32	s14, s10, s15
 8004114:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004118:	ee96 7a24 	vfnms.f32	s14, s12, s9
 800411c:	e78a      	b.n	8004034 <__ieee754_rem_pio2f+0x174>
 800411e:	bf00      	nop
 8004120:	3f490fd8 	.word	0x3f490fd8
 8004124:	4016cbe3 	.word	0x4016cbe3
 8004128:	3fc90f80 	.word	0x3fc90f80
 800412c:	3fc90fd0 	.word	0x3fc90fd0
 8004130:	37354443 	.word	0x37354443
 8004134:	43490f80 	.word	0x43490f80
 8004138:	43800000 	.word	0x43800000
 800413c:	080053fc 	.word	0x080053fc
 8004140:	37354400 	.word	0x37354400
 8004144:	2e85a308 	.word	0x2e85a308
 8004148:	3f22f984 	.word	0x3f22f984
 800414c:	0800537c 	.word	0x0800537c
 8004150:	2e85a300 	.word	0x2e85a300
 8004154:	248d3132 	.word	0x248d3132

08004158 <__kernel_cosf>:
 8004158:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800415c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004160:	ee06 0a10 	vmov	s12, r0
 8004164:	ee06 1a90 	vmov	s13, r1
 8004168:	da2e      	bge.n	80041c8 <__kernel_cosf+0x70>
 800416a:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 800416e:	ee17 3a90 	vmov	r3, s15
 8004172:	2b00      	cmp	r3, #0
 8004174:	d064      	beq.n	8004240 <__kernel_cosf+0xe8>
 8004176:	ee26 7a06 	vmul.f32	s14, s12, s12
 800417a:	eddf 3a34 	vldr	s7, [pc, #208]	; 800424c <__kernel_cosf+0xf4>
 800417e:	ed9f 4a34 	vldr	s8, [pc, #208]	; 8004250 <__kernel_cosf+0xf8>
 8004182:	eddf 4a34 	vldr	s9, [pc, #208]	; 8004254 <__kernel_cosf+0xfc>
 8004186:	ed9f 5a34 	vldr	s10, [pc, #208]	; 8004258 <__kernel_cosf+0x100>
 800418a:	eddf 7a34 	vldr	s15, [pc, #208]	; 800425c <__kernel_cosf+0x104>
 800418e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004260 <__kernel_cosf+0x108>
 8004192:	eea7 4a23 	vfma.f32	s8, s14, s7
 8004196:	eee4 4a07 	vfma.f32	s9, s8, s14
 800419a:	eea4 5a87 	vfma.f32	s10, s9, s14
 800419e:	eee5 7a07 	vfma.f32	s15, s10, s14
 80041a2:	eee7 5a87 	vfma.f32	s11, s15, s14
 80041a6:	ee65 5a87 	vmul.f32	s11, s11, s14
 80041aa:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 80041ae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 80041b2:	eee7 6a25 	vfma.f32	s13, s14, s11
 80041b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80041ba:	eed7 6a06 	vfnms.f32	s13, s14, s12
 80041be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80041c2:	ee17 0a90 	vmov	r0, s15
 80041c6:	4770      	bx	lr
 80041c8:	ee26 7a06 	vmul.f32	s14, s12, s12
 80041cc:	eddf 3a1f 	vldr	s7, [pc, #124]	; 800424c <__kernel_cosf+0xf4>
 80041d0:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 8004250 <__kernel_cosf+0xf8>
 80041d4:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8004254 <__kernel_cosf+0xfc>
 80041d8:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8004258 <__kernel_cosf+0x100>
 80041dc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800425c <__kernel_cosf+0x104>
 80041e0:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8004260 <__kernel_cosf+0x108>
 80041e4:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <__kernel_cosf+0x10c>)
 80041e6:	eea7 4a23 	vfma.f32	s8, s14, s7
 80041ea:	4293      	cmp	r3, r2
 80041ec:	eee4 4a07 	vfma.f32	s9, s8, s14
 80041f0:	eea4 5a87 	vfma.f32	s10, s9, s14
 80041f4:	eee5 7a07 	vfma.f32	s15, s10, s14
 80041f8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80041fc:	ee65 5a87 	vmul.f32	s11, s11, s14
 8004200:	ddd3      	ble.n	80041aa <__kernel_cosf+0x52>
 8004202:	4a19      	ldr	r2, [pc, #100]	; (8004268 <__kernel_cosf+0x110>)
 8004204:	4293      	cmp	r3, r2
 8004206:	dc16      	bgt.n	8004236 <__kernel_cosf+0xde>
 8004208:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eeb7 5a00 	vmov.f32	s10, #112	; 0x70
 8004214:	ee35 5a67 	vsub.f32	s10, s10, s15
 8004218:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800421c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8004220:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004224:	eed7 7a06 	vfnms.f32	s15, s14, s12
 8004228:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800422c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004230:	ee17 0a90 	vmov	r0, s15
 8004234:	4770      	bx	lr
 8004236:	eeb6 5a07 	vmov.f32	s10, #103	; 0x67
 800423a:	eef5 7a02 	vmov.f32	s15, #82	; 0x52
 800423e:	e7eb      	b.n	8004218 <__kernel_cosf+0xc0>
 8004240:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004244:	ee17 0a90 	vmov	r0, s15
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	ad47d74e 	.word	0xad47d74e
 8004250:	310f74f6 	.word	0x310f74f6
 8004254:	b493f27c 	.word	0xb493f27c
 8004258:	37d00d01 	.word	0x37d00d01
 800425c:	bab60b61 	.word	0xbab60b61
 8004260:	3d2aaaab 	.word	0x3d2aaaab
 8004264:	3e999999 	.word	0x3e999999
 8004268:	3f480000 	.word	0x3f480000

0800426c <__kernel_rem_pio2f>:
 800426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004270:	ed2d 8b04 	vpush	{d8-d9}
 8004274:	b0d7      	sub	sp, #348	; 0x15c
 8004276:	1e5e      	subs	r6, r3, #1
 8004278:	4ca5      	ldr	r4, [pc, #660]	; (8004510 <__kernel_rem_pio2f+0x2a4>)
 800427a:	9d64      	ldr	r5, [sp, #400]	; 0x190
 800427c:	9302      	str	r3, [sp, #8]
 800427e:	1ed3      	subs	r3, r2, #3
 8004280:	bf48      	it	mi
 8004282:	1d13      	addmi	r3, r2, #4
 8004284:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8004288:	9101      	str	r1, [sp, #4]
 800428a:	10db      	asrs	r3, r3, #3
 800428c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004290:	ea6f 0a03 	mvn.w	sl, r3
 8004294:	1971      	adds	r1, r6, r5
 8004296:	9303      	str	r3, [sp, #12]
 8004298:	4681      	mov	r9, r0
 800429a:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 800429e:	eba3 0306 	sub.w	r3, r3, r6
 80042a2:	d414      	bmi.n	80042ce <__kernel_rem_pio2f+0x62>
 80042a4:	4419      	add	r1, r3
 80042a6:	9865      	ldr	r0, [sp, #404]	; 0x194
 80042a8:	3101      	adds	r1, #1
 80042aa:	aa1a      	add	r2, sp, #104	; 0x68
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bfaa      	itet	ge
 80042b0:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 80042b4:	eddf 7a97 	vldrlt	s15, [pc, #604]	; 8004514 <__kernel_rem_pio2f+0x2a8>
 80042b8:	ee07 4a90 	vmovge	s15, r4
 80042bc:	f103 0301 	add.w	r3, r3, #1
 80042c0:	bfa8      	it	ge
 80042c2:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 80042c6:	428b      	cmp	r3, r1
 80042c8:	ece2 7a01 	vstmia	r2!, {s15}
 80042cc:	d1ee      	bne.n	80042ac <__kernel_rem_pio2f+0x40>
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	db1a      	blt.n	8004308 <__kernel_rem_pio2f+0x9c>
 80042d2:	9b02      	ldr	r3, [sp, #8]
 80042d4:	a91a      	add	r1, sp, #104	; 0x68
 80042d6:	1c6c      	adds	r4, r5, #1
 80042d8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80042dc:	a842      	add	r0, sp, #264	; 0x108
 80042de:	009f      	lsls	r7, r3, #2
 80042e0:	2e00      	cmp	r6, #0
 80042e2:	f2c0 81ce 	blt.w	8004682 <__kernel_rem_pio2f+0x416>
 80042e6:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8004514 <__kernel_rem_pio2f+0x2a8>
 80042ea:	464a      	mov	r2, r9
 80042ec:	19cb      	adds	r3, r1, r7
 80042ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80042f2:	ecf2 6a01 	vldmia	r2!, {s13}
 80042f6:	4299      	cmp	r1, r3
 80042f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80042fc:	d1f7      	bne.n	80042ee <__kernel_rem_pio2f+0x82>
 80042fe:	3104      	adds	r1, #4
 8004300:	42a1      	cmp	r1, r4
 8004302:	ece0 7a01 	vstmia	r0!, {s15}
 8004306:	d1eb      	bne.n	80042e0 <__kernel_rem_pio2f+0x74>
 8004308:	9a02      	ldr	r2, [sp, #8]
 800430a:	eddf 8a84 	vldr	s17, [pc, #528]	; 800451c <__kernel_rem_pio2f+0x2b0>
 800430e:	ed9f 8a82 	vldr	s16, [pc, #520]	; 8004518 <__kernel_rem_pio2f+0x2ac>
 8004312:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8004316:	3b01      	subs	r3, #1
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	ebc2 7882 	rsb	r8, r2, r2, lsl #30
 800431e:	aa06      	add	r2, sp, #24
 8004320:	1d1f      	adds	r7, r3, #4
 8004322:	4413      	add	r3, r2
 8004324:	4417      	add	r7, r2
 8004326:	9304      	str	r3, [sp, #16]
 8004328:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800432c:	462c      	mov	r4, r5
 800432e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004332:	ab56      	add	r3, sp, #344	; 0x158
 8004334:	445b      	add	r3, fp
 8004336:	2c00      	cmp	r4, #0
 8004338:	ed53 6a14 	vldr	s13, [r3, #-80]	; 0xffffffb0
 800433c:	dd19      	ble.n	8004372 <__kernel_rem_pio2f+0x106>
 800433e:	a942      	add	r1, sp, #264	; 0x108
 8004340:	eb01 030b 	add.w	r3, r1, fp
 8004344:	aa05      	add	r2, sp, #20
 8004346:	ee66 7aa8 	vmul.f32	s15, s13, s17
 800434a:	eeb0 7a66 	vmov.f32	s14, s13
 800434e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004352:	ed33 6a01 	vldmdb	r3!, {s12}
 8004356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800435a:	428b      	cmp	r3, r1
 800435c:	eea7 7ac8 	vfms.f32	s14, s15, s16
 8004360:	ee77 6a86 	vadd.f32	s13, s15, s12
 8004364:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004368:	ee17 0a10 	vmov	r0, s14
 800436c:	f842 0f04 	str.w	r0, [r2, #4]!
 8004370:	d1e9      	bne.n	8004346 <__kernel_rem_pio2f+0xda>
 8004372:	ee16 0a90 	vmov	r0, s13
 8004376:	4651      	mov	r1, sl
 8004378:	f000 fb38 	bl	80049ec <scalbnf>
 800437c:	ee09 0a10 	vmov	s18, r0
 8004380:	eef4 7a00 	vmov.f32	s15, #64	; 0x40
 8004384:	ee69 7a27 	vmul.f32	s15, s18, s15
 8004388:	ee17 0a90 	vmov	r0, s15
 800438c:	f000 fad4 	bl	8004938 <floorf>
 8004390:	ee07 0a10 	vmov	s14, r0
 8004394:	eef2 7a00 	vmov.f32	s15, #32
 8004398:	eea7 9a67 	vfms.f32	s18, s14, s15
 800439c:	f1ba 0f00 	cmp.w	sl, #0
 80043a0:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 80043a4:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80043a8:	ee39 9a67 	vsub.f32	s18, s18, s15
 80043ac:	f340 814d 	ble.w	800464a <__kernel_rem_pio2f+0x3de>
 80043b0:	1e61      	subs	r1, r4, #1
 80043b2:	aa06      	add	r2, sp, #24
 80043b4:	f1ca 0308 	rsb	r3, sl, #8
 80043b8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80043bc:	fa40 f203 	asr.w	r2, r0, r3
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	f10d 0e18 	add.w	lr, sp, #24
 80043c8:	1ac3      	subs	r3, r0, r3
 80043ca:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 80043ce:	ee19 1a90 	vmov	r1, s19
 80043d2:	4411      	add	r1, r2
 80043d4:	f1ca 0007 	rsb	r0, sl, #7
 80043d8:	ee09 1a90 	vmov	s19, r1
 80043dc:	fa43 fc00 	asr.w	ip, r3, r0
 80043e0:	f1bc 0f00 	cmp.w	ip, #0
 80043e4:	dd37      	ble.n	8004456 <__kernel_rem_pio2f+0x1ea>
 80043e6:	ee19 3a90 	vmov	r3, s19
 80043ea:	2c00      	cmp	r4, #0
 80043ec:	f103 0301 	add.w	r3, r3, #1
 80043f0:	ee09 3a90 	vmov	s19, r3
 80043f4:	f340 81de 	ble.w	80047b4 <__kernel_rem_pio2f+0x548>
 80043f8:	2200      	movs	r2, #0
 80043fa:	4610      	mov	r0, r2
 80043fc:	a905      	add	r1, sp, #20
 80043fe:	e008      	b.n	8004412 <__kernel_rem_pio2f+0x1a6>
 8004400:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8004404:	b113      	cbz	r3, 800440c <__kernel_rem_pio2f+0x1a0>
 8004406:	f8c1 e000 	str.w	lr, [r1]
 800440a:	2001      	movs	r0, #1
 800440c:	3201      	adds	r2, #1
 800440e:	4294      	cmp	r4, r2
 8004410:	dd0b      	ble.n	800442a <__kernel_rem_pio2f+0x1be>
 8004412:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8004416:	2800      	cmp	r0, #0
 8004418:	d0f2      	beq.n	8004400 <__kernel_rem_pio2f+0x194>
 800441a:	3201      	adds	r2, #1
 800441c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004420:	4294      	cmp	r4, r2
 8004422:	600b      	str	r3, [r1, #0]
 8004424:	f04f 0001 	mov.w	r0, #1
 8004428:	dcf3      	bgt.n	8004412 <__kernel_rem_pio2f+0x1a6>
 800442a:	f1ba 0f00 	cmp.w	sl, #0
 800442e:	dd0f      	ble.n	8004450 <__kernel_rem_pio2f+0x1e4>
 8004430:	f1ba 0f01 	cmp.w	sl, #1
 8004434:	f000 8111 	beq.w	800465a <__kernel_rem_pio2f+0x3ee>
 8004438:	f1ba 0f02 	cmp.w	sl, #2
 800443c:	d108      	bne.n	8004450 <__kernel_rem_pio2f+0x1e4>
 800443e:	1e62      	subs	r2, r4, #1
 8004440:	ab06      	add	r3, sp, #24
 8004442:	a906      	add	r1, sp, #24
 8004444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004450:	f1bc 0f02 	cmp.w	ip, #2
 8004454:	d064      	beq.n	8004520 <__kernel_rem_pio2f+0x2b4>
 8004456:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445e:	d177      	bne.n	8004550 <__kernel_rem_pio2f+0x2e4>
 8004460:	1e63      	subs	r3, r4, #1
 8004462:	429d      	cmp	r5, r3
 8004464:	dc0b      	bgt.n	800447e <__kernel_rem_pio2f+0x212>
 8004466:	aa06      	add	r2, sp, #24
 8004468:	4493      	add	fp, r2
 800446a:	2200      	movs	r2, #0
 800446c:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8004470:	45bb      	cmp	fp, r7
 8004472:	ea42 0201 	orr.w	r2, r2, r1
 8004476:	d1f9      	bne.n	800446c <__kernel_rem_pio2f+0x200>
 8004478:	2a00      	cmp	r2, #0
 800447a:	f040 8185 	bne.w	8004788 <__kernel_rem_pio2f+0x51c>
 800447e:	1e6b      	subs	r3, r5, #1
 8004480:	aa06      	add	r2, sp, #24
 8004482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 8191 	bne.w	80047ae <__kernel_rem_pio2f+0x542>
 800448c:	9b04      	ldr	r3, [sp, #16]
 800448e:	f04f 0c01 	mov.w	ip, #1
 8004492:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004496:	f10c 0c01 	add.w	ip, ip, #1
 800449a:	2a00      	cmp	r2, #0
 800449c:	d0f9      	beq.n	8004492 <__kernel_rem_pio2f+0x226>
 800449e:	44a4      	add	ip, r4
 80044a0:	1c63      	adds	r3, r4, #1
 80044a2:	4563      	cmp	r3, ip
 80044a4:	dc31      	bgt.n	800450a <__kernel_rem_pio2f+0x29e>
 80044a6:	9a03      	ldr	r2, [sp, #12]
 80044a8:	eb03 0e02 	add.w	lr, r3, r2
 80044ac:	9a02      	ldr	r2, [sp, #8]
 80044ae:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80044b2:	18a0      	adds	r0, r4, r2
 80044b4:	eb0c 0b02 	add.w	fp, ip, r2
 80044b8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80044ba:	f10e 3eff 	add.w	lr, lr, #4294967295
 80044be:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80044c2:	aa1a      	add	r2, sp, #104	; 0x68
 80044c4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80044c8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80044cc:	aa42      	add	r2, sp, #264	; 0x108
 80044ce:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 80044d2:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044de:	2e00      	cmp	r6, #0
 80044e0:	ece0 7a01 	vstmia	r0!, {s15}
 80044e4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004514 <__kernel_rem_pio2f+0x2a8>
 80044e8:	db0b      	blt.n	8004502 <__kernel_rem_pio2f+0x296>
 80044ea:	464a      	mov	r2, r9
 80044ec:	eb00 0108 	add.w	r1, r0, r8
 80044f0:	4603      	mov	r3, r0
 80044f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80044f6:	ecf2 6a01 	vldmia	r2!, {s13}
 80044fa:	428b      	cmp	r3, r1
 80044fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004500:	d1f7      	bne.n	80044f2 <__kernel_rem_pio2f+0x286>
 8004502:	4558      	cmp	r0, fp
 8004504:	ece4 7a01 	vstmia	r4!, {s15}
 8004508:	d1e3      	bne.n	80044d2 <__kernel_rem_pio2f+0x266>
 800450a:	4664      	mov	r4, ip
 800450c:	e70f      	b.n	800432e <__kernel_rem_pio2f+0xc2>
 800450e:	bf00      	nop
 8004510:	08005714 	.word	0x08005714
 8004514:	00000000 	.word	0x00000000
 8004518:	43800000 	.word	0x43800000
 800451c:	3b800000 	.word	0x3b800000
 8004520:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004524:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8004528:	2800      	cmp	r0, #0
 800452a:	d094      	beq.n	8004456 <__kernel_rem_pio2f+0x1ea>
 800452c:	ee17 0a90 	vmov	r0, s15
 8004530:	4651      	mov	r1, sl
 8004532:	f8cd c014 	str.w	ip, [sp, #20]
 8004536:	f000 fa59 	bl	80049ec <scalbnf>
 800453a:	ee07 0a90 	vmov	s15, r0
 800453e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8004542:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004546:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454e:	d087      	beq.n	8004460 <__kernel_rem_pio2f+0x1f4>
 8004550:	ee19 0a10 	vmov	r0, s18
 8004554:	f1ca 0100 	rsb	r1, sl, #0
 8004558:	f8cd c008 	str.w	ip, [sp, #8]
 800455c:	f000 fa46 	bl	80049ec <scalbnf>
 8004560:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 8004518 <__kernel_rem_pio2f+0x2ac>
 8004564:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004568:	ee07 0a10 	vmov	s14, r0
 800456c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004574:	f2c0 8181 	blt.w	800487a <__kernel_rem_pio2f+0x60e>
 8004578:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 800451c <__kernel_rem_pio2f+0x2b0>
 800457c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004580:	a906      	add	r1, sp, #24
 8004582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004586:	1c63      	adds	r3, r4, #1
 8004588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458c:	f10a 0a08 	add.w	sl, sl, #8
 8004590:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8004594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004598:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800459c:	ee17 2a10 	vmov	r2, s14
 80045a0:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80045a4:	ee17 2a90 	vmov	r2, s15
 80045a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80045ac:	4651      	mov	r1, sl
 80045ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80045b2:	9303      	str	r3, [sp, #12]
 80045b4:	f8cd c008 	str.w	ip, [sp, #8]
 80045b8:	f000 fa18 	bl	80049ec <scalbnf>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	f8dd c008 	ldr.w	ip, [sp, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	ee07 0a10 	vmov	s14, r0
 80045c8:	f2c0 80c2 	blt.w	8004750 <__kernel_rem_pio2f+0x4e4>
 80045cc:	1c5f      	adds	r7, r3, #1
 80045ce:	00ba      	lsls	r2, r7, #2
 80045d0:	a842      	add	r0, sp, #264	; 0x108
 80045d2:	a906      	add	r1, sp, #24
 80045d4:	ed5f 6a2f 	vldr	s13, [pc, #-188]	; 800451c <__kernel_rem_pio2f+0x2b0>
 80045d8:	4411      	add	r1, r2
 80045da:	1886      	adds	r6, r0, r2
 80045dc:	ed71 7a01 	vldmdb	r1!, {s15}
 80045e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80045ec:	ed66 7a01 	vstmdb	r6!, {s15}
 80045f0:	4286      	cmp	r6, r0
 80045f2:	d1f3      	bne.n	80045dc <__kernel_rem_pio2f+0x370>
 80045f4:	3a04      	subs	r2, #4
 80045f6:	4416      	add	r6, r2
 80045f8:	2400      	movs	r4, #0
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	f2c0 80a5 	blt.w	800474a <__kernel_rem_pio2f+0x4de>
 8004600:	2c00      	cmp	r4, #0
 8004602:	f2c0 80a2 	blt.w	800474a <__kernel_rem_pio2f+0x4de>
 8004606:	48a1      	ldr	r0, [pc, #644]	; (800488c <__kernel_rem_pio2f+0x620>)
 8004608:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8004890 <__kernel_rem_pio2f+0x624>
 800460c:	4631      	mov	r1, r6
 800460e:	2200      	movs	r2, #0
 8004610:	e001      	b.n	8004616 <__kernel_rem_pio2f+0x3aa>
 8004612:	42a2      	cmp	r2, r4
 8004614:	dc08      	bgt.n	8004628 <__kernel_rem_pio2f+0x3bc>
 8004616:	ecf0 6a01 	vldmia	r0!, {s13}
 800461a:	ecb1 7a01 	vldmia	r1!, {s14}
 800461e:	3201      	adds	r2, #1
 8004620:	4295      	cmp	r5, r2
 8004622:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004626:	daf4      	bge.n	8004612 <__kernel_rem_pio2f+0x3a6>
 8004628:	aa56      	add	r2, sp, #344	; 0x158
 800462a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800462e:	3401      	adds	r4, #1
 8004630:	42bc      	cmp	r4, r7
 8004632:	f1a6 0604 	sub.w	r6, r6, #4
 8004636:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800463a:	d1de      	bne.n	80045fa <__kernel_rem_pio2f+0x38e>
 800463c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800463e:	2a03      	cmp	r2, #3
 8004640:	d865      	bhi.n	800470e <__kernel_rem_pio2f+0x4a2>
 8004642:	e8df f002 	tbb	[pc, r2]
 8004646:	3a6d      	.short	0x3a6d
 8004648:	b93a      	.short	0xb93a
 800464a:	d110      	bne.n	800466e <__kernel_rem_pio2f+0x402>
 800464c:	1e63      	subs	r3, r4, #1
 800464e:	aa06      	add	r2, sp, #24
 8004650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004654:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8004658:	e6c2      	b.n	80043e0 <__kernel_rem_pio2f+0x174>
 800465a:	1e62      	subs	r2, r4, #1
 800465c:	ab06      	add	r3, sp, #24
 800465e:	a906      	add	r1, sp, #24
 8004660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004668:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800466c:	e6f0      	b.n	8004450 <__kernel_rem_pio2f+0x1e4>
 800466e:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8004672:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8004676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467a:	da0b      	bge.n	8004694 <__kernel_rem_pio2f+0x428>
 800467c:	f04f 0c00 	mov.w	ip, #0
 8004680:	e6e9      	b.n	8004456 <__kernel_rem_pio2f+0x1ea>
 8004682:	eddf 7a83 	vldr	s15, [pc, #524]	; 8004890 <__kernel_rem_pio2f+0x624>
 8004686:	3104      	adds	r1, #4
 8004688:	42a1      	cmp	r1, r4
 800468a:	ece0 7a01 	vstmia	r0!, {s15}
 800468e:	f47f ae27 	bne.w	80042e0 <__kernel_rem_pio2f+0x74>
 8004692:	e639      	b.n	8004308 <__kernel_rem_pio2f+0x9c>
 8004694:	ee19 3a90 	vmov	r3, s19
 8004698:	2c00      	cmp	r4, #0
 800469a:	f103 0301 	add.w	r3, r3, #1
 800469e:	ee09 3a90 	vmov	s19, r3
 80046a2:	bfc8      	it	gt
 80046a4:	f04f 0c02 	movgt.w	ip, #2
 80046a8:	f73f aea6 	bgt.w	80043f8 <__kernel_rem_pio2f+0x18c>
 80046ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80046b0:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80046b4:	f04f 0c02 	mov.w	ip, #2
 80046b8:	e6cd      	b.n	8004456 <__kernel_rem_pio2f+0x1ea>
 80046ba:	aa2e      	add	r2, sp, #184	; 0xb8
 80046bc:	eddf 7a74 	vldr	s15, [pc, #464]	; 8004890 <__kernel_rem_pio2f+0x624>
 80046c0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80046c4:	ed37 7a01 	vldmdb	r7!, {s14}
 80046c8:	4297      	cmp	r7, r2
 80046ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ce:	d1f9      	bne.n	80046c4 <__kernel_rem_pio2f+0x458>
 80046d0:	f1bc 0f00 	cmp.w	ip, #0
 80046d4:	d048      	beq.n	8004768 <__kernel_rem_pio2f+0x4fc>
 80046d6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80046da:	9a01      	ldr	r2, [sp, #4]
 80046dc:	eeb1 7a67 	vneg.f32	s14, s15
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80046e6:	ed82 7a00 	vstr	s14, [r2]
 80046ea:	dd0b      	ble.n	8004704 <__kernel_rem_pio2f+0x498>
 80046ec:	a92f      	add	r1, sp, #188	; 0xbc
 80046ee:	2201      	movs	r2, #1
 80046f0:	ecb1 7a01 	vldmia	r1!, {s14}
 80046f4:	3201      	adds	r2, #1
 80046f6:	4293      	cmp	r3, r2
 80046f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046fc:	daf8      	bge.n	80046f0 <__kernel_rem_pio2f+0x484>
 80046fe:	f1bc 0f00 	cmp.w	ip, #0
 8004702:	d001      	beq.n	8004708 <__kernel_rem_pio2f+0x49c>
 8004704:	eef1 7a67 	vneg.f32	s15, s15
 8004708:	9b01      	ldr	r3, [sp, #4]
 800470a:	edc3 7a01 	vstr	s15, [r3, #4]
 800470e:	ee19 3a90 	vmov	r3, s19
 8004712:	f003 0007 	and.w	r0, r3, #7
 8004716:	b057      	add	sp, #348	; 0x15c
 8004718:	ecbd 8b04 	vpop	{d8-d9}
 800471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004720:	aa2e      	add	r2, sp, #184	; 0xb8
 8004722:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004890 <__kernel_rem_pio2f+0x624>
 8004726:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800472a:	ed37 7a01 	vldmdb	r7!, {s14}
 800472e:	3b01      	subs	r3, #1
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004736:	d1f8      	bne.n	800472a <__kernel_rem_pio2f+0x4be>
 8004738:	f1bc 0f00 	cmp.w	ip, #0
 800473c:	d001      	beq.n	8004742 <__kernel_rem_pio2f+0x4d6>
 800473e:	eef1 7a67 	vneg.f32	s15, s15
 8004742:	9b01      	ldr	r3, [sp, #4]
 8004744:	edc3 7a00 	vstr	s15, [r3]
 8004748:	e7e1      	b.n	800470e <__kernel_rem_pio2f+0x4a2>
 800474a:	eddf 7a51 	vldr	s15, [pc, #324]	; 8004890 <__kernel_rem_pio2f+0x624>
 800474e:	e76b      	b.n	8004628 <__kernel_rem_pio2f+0x3bc>
 8004750:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004752:	2a03      	cmp	r2, #3
 8004754:	d8db      	bhi.n	800470e <__kernel_rem_pio2f+0x4a2>
 8004756:	e8df f002 	tbb	[pc, r2]
 800475a:	0214      	.short	0x0214
 800475c:	8302      	.short	0x8302
 800475e:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8004890 <__kernel_rem_pio2f+0x624>
 8004762:	f1bc 0f00 	cmp.w	ip, #0
 8004766:	d1b6      	bne.n	80046d6 <__kernel_rem_pio2f+0x46a>
 8004768:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 800476c:	9a01      	ldr	r2, [sp, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	edc2 7a00 	vstr	s15, [r2]
 8004774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004778:	dcb8      	bgt.n	80046ec <__kernel_rem_pio2f+0x480>
 800477a:	9b01      	ldr	r3, [sp, #4]
 800477c:	edc3 7a01 	vstr	s15, [r3, #4]
 8004780:	e7c5      	b.n	800470e <__kernel_rem_pio2f+0x4a2>
 8004782:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004890 <__kernel_rem_pio2f+0x624>
 8004786:	e7d7      	b.n	8004738 <__kernel_rem_pio2f+0x4cc>
 8004788:	aa06      	add	r2, sp, #24
 800478a:	f1aa 0a08 	sub.w	sl, sl, #8
 800478e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004792:	2a00      	cmp	r2, #0
 8004794:	f47f af0a 	bne.w	80045ac <__kernel_rem_pio2f+0x340>
 8004798:	aa06      	add	r2, sp, #24
 800479a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800479e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80047a2:	3b01      	subs	r3, #1
 80047a4:	f1aa 0a08 	sub.w	sl, sl, #8
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d0f8      	beq.n	800479e <__kernel_rem_pio2f+0x532>
 80047ac:	e6fe      	b.n	80045ac <__kernel_rem_pio2f+0x340>
 80047ae:	f04f 0c01 	mov.w	ip, #1
 80047b2:	e674      	b.n	800449e <__kernel_rem_pio2f+0x232>
 80047b4:	2000      	movs	r0, #0
 80047b6:	e638      	b.n	800442a <__kernel_rem_pio2f+0x1be>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	dd51      	ble.n	8004860 <__kernel_rem_pio2f+0x5f4>
 80047bc:	009a      	lsls	r2, r3, #2
 80047be:	a956      	add	r1, sp, #344	; 0x158
 80047c0:	4411      	add	r1, r2
 80047c2:	ac2e      	add	r4, sp, #184	; 0xb8
 80047c4:	1d10      	adds	r0, r2, #4
 80047c6:	ed11 7a28 	vldr	s14, [r1, #-160]	; 0xffffff60
 80047ca:	4420      	add	r0, r4
 80047cc:	18a1      	adds	r1, r4, r2
 80047ce:	ed71 7a01 	vldmdb	r1!, {s15}
 80047d2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80047d6:	42a1      	cmp	r1, r4
 80047d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80047dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e0:	eeb0 7a66 	vmov.f32	s14, s13
 80047e4:	ed60 7a01 	vstmdb	r0!, {s15}
 80047e8:	edc1 6a00 	vstr	s13, [r1]
 80047ec:	d1ef      	bne.n	80047ce <__kernel_rem_pio2f+0x562>
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	dd36      	ble.n	8004860 <__kernel_rem_pio2f+0x5f4>
 80047f2:	1d13      	adds	r3, r2, #4
 80047f4:	a856      	add	r0, sp, #344	; 0x158
 80047f6:	4410      	add	r0, r2
 80047f8:	440b      	add	r3, r1
 80047fa:	ed10 7a28 	vldr	s14, [r0, #-160]	; 0xffffff60
 80047fe:	440a      	add	r2, r1
 8004800:	a82f      	add	r0, sp, #188	; 0xbc
 8004802:	4619      	mov	r1, r3
 8004804:	ed72 7a01 	vldmdb	r2!, {s15}
 8004808:	ee77 6a87 	vadd.f32	s13, s15, s14
 800480c:	4282      	cmp	r2, r0
 800480e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004812:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004816:	eeb0 7a66 	vmov.f32	s14, s13
 800481a:	ed61 7a01 	vstmdb	r1!, {s15}
 800481e:	edc2 6a00 	vstr	s13, [r2]
 8004822:	d1ef      	bne.n	8004804 <__kernel_rem_pio2f+0x598>
 8004824:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8004890 <__kernel_rem_pio2f+0x624>
 8004828:	aa30      	add	r2, sp, #192	; 0xc0
 800482a:	ed33 7a01 	vldmdb	r3!, {s14}
 800482e:	4293      	cmp	r3, r2
 8004830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004834:	d1f9      	bne.n	800482a <__kernel_rem_pio2f+0x5be>
 8004836:	f1bc 0f00 	cmp.w	ip, #0
 800483a:	d016      	beq.n	800486a <__kernel_rem_pio2f+0x5fe>
 800483c:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8004840:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8004844:	9a01      	ldr	r2, [sp, #4]
 8004846:	eef1 7a67 	vneg.f32	s15, s15
 800484a:	eef1 6a66 	vneg.f32	s13, s13
 800484e:	eeb1 7a47 	vneg.f32	s14, s14
 8004852:	edc2 7a02 	vstr	s15, [r2, #8]
 8004856:	edc2 6a00 	vstr	s13, [r2]
 800485a:	ed82 7a01 	vstr	s14, [r2, #4]
 800485e:	e756      	b.n	800470e <__kernel_rem_pio2f+0x4a2>
 8004860:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004890 <__kernel_rem_pio2f+0x624>
 8004864:	f1bc 0f00 	cmp.w	ip, #0
 8004868:	d1e8      	bne.n	800483c <__kernel_rem_pio2f+0x5d0>
 800486a:	9801      	ldr	r0, [sp, #4]
 800486c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800486e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8004870:	edc0 7a02 	vstr	s15, [r0, #8]
 8004874:	6002      	str	r2, [r0, #0]
 8004876:	6043      	str	r3, [r0, #4]
 8004878:	e749      	b.n	800470e <__kernel_rem_pio2f+0x4a2>
 800487a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800487e:	a906      	add	r1, sp, #24
 8004880:	ee17 2a10 	vmov	r2, s14
 8004884:	4623      	mov	r3, r4
 8004886:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800488a:	e68f      	b.n	80045ac <__kernel_rem_pio2f+0x340>
 800488c:	08005720 	.word	0x08005720
 8004890:	00000000 	.word	0x00000000

08004894 <__kernel_sinf>:
 8004894:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004898:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800489c:	ee07 0a90 	vmov	s15, r0
 80048a0:	ee06 1a10 	vmov	s12, r1
 80048a4:	da04      	bge.n	80048b0 <__kernel_sinf+0x1c>
 80048a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80048aa:	ee17 3a10 	vmov	r3, s14
 80048ae:	b323      	cbz	r3, 80048fa <__kernel_sinf+0x66>
 80048b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80048b4:	ed9f 4a17 	vldr	s8, [pc, #92]	; 8004914 <__kernel_sinf+0x80>
 80048b8:	eddf 4a17 	vldr	s9, [pc, #92]	; 8004918 <__kernel_sinf+0x84>
 80048bc:	ed9f 5a17 	vldr	s10, [pc, #92]	; 800491c <__kernel_sinf+0x88>
 80048c0:	eddf 5a17 	vldr	s11, [pc, #92]	; 8004920 <__kernel_sinf+0x8c>
 80048c4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004924 <__kernel_sinf+0x90>
 80048c8:	eee7 4a04 	vfma.f32	s9, s14, s8
 80048cc:	ee27 4a27 	vmul.f32	s8, s14, s15
 80048d0:	eea4 5a87 	vfma.f32	s10, s9, s14
 80048d4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80048d8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80048dc:	b182      	cbz	r2, 8004900 <__kernel_sinf+0x6c>
 80048de:	ee66 6ac4 	vnmul.f32	s13, s13, s8
 80048e2:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 80048e6:	eee6 6a25 	vfma.f32	s13, s12, s11
 80048ea:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8004928 <__kernel_sinf+0x94>
 80048ee:	ee96 6a87 	vfnms.f32	s12, s13, s14
 80048f2:	eea4 6a25 	vfma.f32	s12, s8, s11
 80048f6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80048fa:	ee17 0a90 	vmov	r0, s15
 80048fe:	4770      	bx	lr
 8004900:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 800492c <__kernel_sinf+0x98>
 8004904:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004908:	eee6 7a04 	vfma.f32	s15, s12, s8
 800490c:	ee17 0a90 	vmov	r0, s15
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2f2ec9d3 	.word	0x2f2ec9d3
 8004918:	b2d72f34 	.word	0xb2d72f34
 800491c:	3638ef1b 	.word	0x3638ef1b
 8004920:	b9500d01 	.word	0xb9500d01
 8004924:	3c088889 	.word	0x3c088889
 8004928:	3e2aaaab 	.word	0x3e2aaaab
 800492c:	be2aaaab 	.word	0xbe2aaaab

08004930 <fabsf>:
 8004930:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop

08004938 <floorf>:
 8004938:	b410      	push	{r4}
 800493a:	b083      	sub	sp, #12
 800493c:	9001      	str	r0, [sp, #4]
 800493e:	9a01      	ldr	r2, [sp, #4]
 8004940:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004944:	0dcb      	lsrs	r3, r1, #23
 8004946:	3b7f      	subs	r3, #127	; 0x7f
 8004948:	2b16      	cmp	r3, #22
 800494a:	dc19      	bgt.n	8004980 <floorf+0x48>
 800494c:	2b00      	cmp	r3, #0
 800494e:	4614      	mov	r4, r2
 8004950:	db28      	blt.n	80049a4 <floorf+0x6c>
 8004952:	4824      	ldr	r0, [pc, #144]	; (80049e4 <floorf+0xac>)
 8004954:	4118      	asrs	r0, r3
 8004956:	4210      	tst	r0, r2
 8004958:	d015      	beq.n	8004986 <floorf+0x4e>
 800495a:	eddf 7a23 	vldr	s15, [pc, #140]	; 80049e8 <floorf+0xb0>
 800495e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496e:	dd28      	ble.n	80049c2 <floorf+0x8a>
 8004970:	2a00      	cmp	r2, #0
 8004972:	db29      	blt.n	80049c8 <floorf+0x90>
 8004974:	ea24 0000 	bic.w	r0, r4, r0
 8004978:	b003      	add	sp, #12
 800497a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004984:	d204      	bcs.n	8004990 <floorf+0x58>
 8004986:	9801      	ldr	r0, [sp, #4]
 8004988:	b003      	add	sp, #12
 800498a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	eddd 7a01 	vldr	s15, [sp, #4]
 8004994:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004998:	ee17 0a90 	vmov	r0, s15
 800499c:	b003      	add	sp, #12
 800499e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80049e8 <floorf+0xb0>
 80049a8:	ee07 0a10 	vmov	s14, r0
 80049ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b8:	dde5      	ble.n	8004986 <floorf+0x4e>
 80049ba:	2a00      	cmp	r2, #0
 80049bc:	db0a      	blt.n	80049d4 <floorf+0x9c>
 80049be:	2000      	movs	r0, #0
 80049c0:	e7e2      	b.n	8004988 <floorf+0x50>
 80049c2:	ee17 0a10 	vmov	r0, s14
 80049c6:	e7df      	b.n	8004988 <floorf+0x50>
 80049c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80049cc:	fa42 f303 	asr.w	r3, r2, r3
 80049d0:	441c      	add	r4, r3
 80049d2:	e7cf      	b.n	8004974 <floorf+0x3c>
 80049d4:	2900      	cmp	r1, #0
 80049d6:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 80049da:	bf18      	it	ne
 80049dc:	ee17 0a90 	vmovne	r0, s15
 80049e0:	e7d2      	b.n	8004988 <floorf+0x50>
 80049e2:	bf00      	nop
 80049e4:	007fffff 	.word	0x007fffff
 80049e8:	7149f2ca 	.word	0x7149f2ca

080049ec <scalbnf>:
 80049ec:	b500      	push	{lr}
 80049ee:	ed2d 8b02 	vpush	{d8}
 80049f2:	b083      	sub	sp, #12
 80049f4:	9001      	str	r0, [sp, #4]
 80049f6:	9b01      	ldr	r3, [sp, #4]
 80049f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80049fc:	d023      	beq.n	8004a46 <scalbnf+0x5a>
 80049fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004a02:	d215      	bcs.n	8004a30 <scalbnf+0x44>
 8004a04:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004a08:	d326      	bcc.n	8004a58 <scalbnf+0x6c>
 8004a0a:	0dd2      	lsrs	r2, r2, #23
 8004a0c:	440a      	add	r2, r1
 8004a0e:	2afe      	cmp	r2, #254	; 0xfe
 8004a10:	dc3c      	bgt.n	8004a8c <scalbnf+0xa0>
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	dd30      	ble.n	8004a78 <scalbnf+0x8c>
 8004a16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a1a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	ee17 0a90 	vmov	r0, s15
 8004a26:	b003      	add	sp, #12
 8004a28:	ecbd 8b02 	vpop	{d8}
 8004a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a30:	ee07 0a90 	vmov	s15, r0
 8004a34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a38:	ee17 0a90 	vmov	r0, s15
 8004a3c:	b003      	add	sp, #12
 8004a3e:	ecbd 8b02 	vpop	{d8}
 8004a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a46:	eddd 7a01 	vldr	s15, [sp, #4]
 8004a4a:	ee17 0a90 	vmov	r0, s15
 8004a4e:	b003      	add	sp, #12
 8004a50:	ecbd 8b02 	vpop	{d8}
 8004a54:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a58:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004a5c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004ad8 <scalbnf+0xec>
 8004a60:	4b1e      	ldr	r3, [pc, #120]	; (8004adc <scalbnf+0xf0>)
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	4299      	cmp	r1, r3
 8004a68:	edcd 7a01 	vstr	s15, [sp, #4]
 8004a6c:	db20      	blt.n	8004ab0 <scalbnf+0xc4>
 8004a6e:	9b01      	ldr	r3, [sp, #4]
 8004a70:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004a74:	3a19      	subs	r2, #25
 8004a76:	e7c9      	b.n	8004a0c <scalbnf+0x20>
 8004a78:	f112 0f16 	cmn.w	r2, #22
 8004a7c:	da1f      	bge.n	8004abe <scalbnf+0xd2>
 8004a7e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004a82:	4299      	cmp	r1, r3
 8004a84:	dc02      	bgt.n	8004a8c <scalbnf+0xa0>
 8004a86:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8004ae0 <scalbnf+0xf4>
 8004a8a:	e001      	b.n	8004a90 <scalbnf+0xa4>
 8004a8c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8004ae4 <scalbnf+0xf8>
 8004a90:	9901      	ldr	r1, [sp, #4]
 8004a92:	ee18 0a10 	vmov	r0, s16
 8004a96:	f000 f829 	bl	8004aec <copysignf>
 8004a9a:	ee07 0a90 	vmov	s15, r0
 8004a9e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004aa2:	ee17 0a90 	vmov	r0, s15
 8004aa6:	b003      	add	sp, #12
 8004aa8:	ecbd 8b02 	vpop	{d8}
 8004aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ab0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004ae0 <scalbnf+0xf4>
 8004ab4:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abc:	e7bc      	b.n	8004a38 <scalbnf+0x4c>
 8004abe:	3219      	adds	r2, #25
 8004ac0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ac4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004ac8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004ae8 <scalbnf+0xfc>
 8004acc:	ee07 3a90 	vmov	s15, r3
 8004ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ad4:	e7b0      	b.n	8004a38 <scalbnf+0x4c>
 8004ad6:	bf00      	nop
 8004ad8:	4c000000 	.word	0x4c000000
 8004adc:	ffff3cb0 	.word	0xffff3cb0
 8004ae0:	0da24260 	.word	0x0da24260
 8004ae4:	7149f2ca 	.word	0x7149f2ca
 8004ae8:	33000000 	.word	0x33000000

08004aec <copysignf>:
 8004aec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004af0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004af4:	4308      	orrs	r0, r1
 8004af6:	4770      	bx	lr

08004af8 <__aeabi_drsub>:
 8004af8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004afc:	e002      	b.n	8004b04 <__adddf3>
 8004afe:	bf00      	nop

08004b00 <__aeabi_dsub>:
 8004b00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004b04 <__adddf3>:
 8004b04:	b530      	push	{r4, r5, lr}
 8004b06:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004b0a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004b0e:	ea94 0f05 	teq	r4, r5
 8004b12:	bf08      	it	eq
 8004b14:	ea90 0f02 	teqeq	r0, r2
 8004b18:	bf1f      	itttt	ne
 8004b1a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004b1e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004b22:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004b26:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004b2a:	f000 80e2 	beq.w	8004cf2 <__adddf3+0x1ee>
 8004b2e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004b32:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004b36:	bfb8      	it	lt
 8004b38:	426d      	neglt	r5, r5
 8004b3a:	dd0c      	ble.n	8004b56 <__adddf3+0x52>
 8004b3c:	442c      	add	r4, r5
 8004b3e:	ea80 0202 	eor.w	r2, r0, r2
 8004b42:	ea81 0303 	eor.w	r3, r1, r3
 8004b46:	ea82 0000 	eor.w	r0, r2, r0
 8004b4a:	ea83 0101 	eor.w	r1, r3, r1
 8004b4e:	ea80 0202 	eor.w	r2, r0, r2
 8004b52:	ea81 0303 	eor.w	r3, r1, r3
 8004b56:	2d36      	cmp	r5, #54	; 0x36
 8004b58:	bf88      	it	hi
 8004b5a:	bd30      	pophi	{r4, r5, pc}
 8004b5c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004b60:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004b64:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004b68:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004b6c:	d002      	beq.n	8004b74 <__adddf3+0x70>
 8004b6e:	4240      	negs	r0, r0
 8004b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004b74:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004b78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004b7c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004b80:	d002      	beq.n	8004b88 <__adddf3+0x84>
 8004b82:	4252      	negs	r2, r2
 8004b84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004b88:	ea94 0f05 	teq	r4, r5
 8004b8c:	f000 80a7 	beq.w	8004cde <__adddf3+0x1da>
 8004b90:	f1a4 0401 	sub.w	r4, r4, #1
 8004b94:	f1d5 0e20 	rsbs	lr, r5, #32
 8004b98:	db0d      	blt.n	8004bb6 <__adddf3+0xb2>
 8004b9a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004b9e:	fa22 f205 	lsr.w	r2, r2, r5
 8004ba2:	1880      	adds	r0, r0, r2
 8004ba4:	f141 0100 	adc.w	r1, r1, #0
 8004ba8:	fa03 f20e 	lsl.w	r2, r3, lr
 8004bac:	1880      	adds	r0, r0, r2
 8004bae:	fa43 f305 	asr.w	r3, r3, r5
 8004bb2:	4159      	adcs	r1, r3
 8004bb4:	e00e      	b.n	8004bd4 <__adddf3+0xd0>
 8004bb6:	f1a5 0520 	sub.w	r5, r5, #32
 8004bba:	f10e 0e20 	add.w	lr, lr, #32
 8004bbe:	2a01      	cmp	r2, #1
 8004bc0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004bc4:	bf28      	it	cs
 8004bc6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004bca:	fa43 f305 	asr.w	r3, r3, r5
 8004bce:	18c0      	adds	r0, r0, r3
 8004bd0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004bd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004bd8:	d507      	bpl.n	8004bea <__adddf3+0xe6>
 8004bda:	f04f 0e00 	mov.w	lr, #0
 8004bde:	f1dc 0c00 	rsbs	ip, ip, #0
 8004be2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004be6:	eb6e 0101 	sbc.w	r1, lr, r1
 8004bea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004bee:	d31b      	bcc.n	8004c28 <__adddf3+0x124>
 8004bf0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004bf4:	d30c      	bcc.n	8004c10 <__adddf3+0x10c>
 8004bf6:	0849      	lsrs	r1, r1, #1
 8004bf8:	ea5f 0030 	movs.w	r0, r0, rrx
 8004bfc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004c00:	f104 0401 	add.w	r4, r4, #1
 8004c04:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004c08:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004c0c:	f080 809a 	bcs.w	8004d44 <__adddf3+0x240>
 8004c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004c14:	bf08      	it	eq
 8004c16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004c1a:	f150 0000 	adcs.w	r0, r0, #0
 8004c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004c22:	ea41 0105 	orr.w	r1, r1, r5
 8004c26:	bd30      	pop	{r4, r5, pc}
 8004c28:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004c2c:	4140      	adcs	r0, r0
 8004c2e:	eb41 0101 	adc.w	r1, r1, r1
 8004c32:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004c36:	f1a4 0401 	sub.w	r4, r4, #1
 8004c3a:	d1e9      	bne.n	8004c10 <__adddf3+0x10c>
 8004c3c:	f091 0f00 	teq	r1, #0
 8004c40:	bf04      	itt	eq
 8004c42:	4601      	moveq	r1, r0
 8004c44:	2000      	moveq	r0, #0
 8004c46:	fab1 f381 	clz	r3, r1
 8004c4a:	bf08      	it	eq
 8004c4c:	3320      	addeq	r3, #32
 8004c4e:	f1a3 030b 	sub.w	r3, r3, #11
 8004c52:	f1b3 0220 	subs.w	r2, r3, #32
 8004c56:	da0c      	bge.n	8004c72 <__adddf3+0x16e>
 8004c58:	320c      	adds	r2, #12
 8004c5a:	dd08      	ble.n	8004c6e <__adddf3+0x16a>
 8004c5c:	f102 0c14 	add.w	ip, r2, #20
 8004c60:	f1c2 020c 	rsb	r2, r2, #12
 8004c64:	fa01 f00c 	lsl.w	r0, r1, ip
 8004c68:	fa21 f102 	lsr.w	r1, r1, r2
 8004c6c:	e00c      	b.n	8004c88 <__adddf3+0x184>
 8004c6e:	f102 0214 	add.w	r2, r2, #20
 8004c72:	bfd8      	it	le
 8004c74:	f1c2 0c20 	rsble	ip, r2, #32
 8004c78:	fa01 f102 	lsl.w	r1, r1, r2
 8004c7c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004c80:	bfdc      	itt	le
 8004c82:	ea41 010c 	orrle.w	r1, r1, ip
 8004c86:	4090      	lslle	r0, r2
 8004c88:	1ae4      	subs	r4, r4, r3
 8004c8a:	bfa2      	ittt	ge
 8004c8c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004c90:	4329      	orrge	r1, r5
 8004c92:	bd30      	popge	{r4, r5, pc}
 8004c94:	ea6f 0404 	mvn.w	r4, r4
 8004c98:	3c1f      	subs	r4, #31
 8004c9a:	da1c      	bge.n	8004cd6 <__adddf3+0x1d2>
 8004c9c:	340c      	adds	r4, #12
 8004c9e:	dc0e      	bgt.n	8004cbe <__adddf3+0x1ba>
 8004ca0:	f104 0414 	add.w	r4, r4, #20
 8004ca4:	f1c4 0220 	rsb	r2, r4, #32
 8004ca8:	fa20 f004 	lsr.w	r0, r0, r4
 8004cac:	fa01 f302 	lsl.w	r3, r1, r2
 8004cb0:	ea40 0003 	orr.w	r0, r0, r3
 8004cb4:	fa21 f304 	lsr.w	r3, r1, r4
 8004cb8:	ea45 0103 	orr.w	r1, r5, r3
 8004cbc:	bd30      	pop	{r4, r5, pc}
 8004cbe:	f1c4 040c 	rsb	r4, r4, #12
 8004cc2:	f1c4 0220 	rsb	r2, r4, #32
 8004cc6:	fa20 f002 	lsr.w	r0, r0, r2
 8004cca:	fa01 f304 	lsl.w	r3, r1, r4
 8004cce:	ea40 0003 	orr.w	r0, r0, r3
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	bd30      	pop	{r4, r5, pc}
 8004cd6:	fa21 f004 	lsr.w	r0, r1, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	bd30      	pop	{r4, r5, pc}
 8004cde:	f094 0f00 	teq	r4, #0
 8004ce2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004ce6:	bf06      	itte	eq
 8004ce8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004cec:	3401      	addeq	r4, #1
 8004cee:	3d01      	subne	r5, #1
 8004cf0:	e74e      	b.n	8004b90 <__adddf3+0x8c>
 8004cf2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004cf6:	bf18      	it	ne
 8004cf8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004cfc:	d029      	beq.n	8004d52 <__adddf3+0x24e>
 8004cfe:	ea94 0f05 	teq	r4, r5
 8004d02:	bf08      	it	eq
 8004d04:	ea90 0f02 	teqeq	r0, r2
 8004d08:	d005      	beq.n	8004d16 <__adddf3+0x212>
 8004d0a:	ea54 0c00 	orrs.w	ip, r4, r0
 8004d0e:	bf04      	itt	eq
 8004d10:	4619      	moveq	r1, r3
 8004d12:	4610      	moveq	r0, r2
 8004d14:	bd30      	pop	{r4, r5, pc}
 8004d16:	ea91 0f03 	teq	r1, r3
 8004d1a:	bf1e      	ittt	ne
 8004d1c:	2100      	movne	r1, #0
 8004d1e:	2000      	movne	r0, #0
 8004d20:	bd30      	popne	{r4, r5, pc}
 8004d22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004d26:	d105      	bne.n	8004d34 <__adddf3+0x230>
 8004d28:	0040      	lsls	r0, r0, #1
 8004d2a:	4149      	adcs	r1, r1
 8004d2c:	bf28      	it	cs
 8004d2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004d32:	bd30      	pop	{r4, r5, pc}
 8004d34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004d38:	bf3c      	itt	cc
 8004d3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004d3e:	bd30      	popcc	{r4, r5, pc}
 8004d40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004d44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004d48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d4c:	f04f 0000 	mov.w	r0, #0
 8004d50:	bd30      	pop	{r4, r5, pc}
 8004d52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004d56:	bf1a      	itte	ne
 8004d58:	4619      	movne	r1, r3
 8004d5a:	4610      	movne	r0, r2
 8004d5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004d60:	bf1c      	itt	ne
 8004d62:	460b      	movne	r3, r1
 8004d64:	4602      	movne	r2, r0
 8004d66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004d6a:	bf06      	itte	eq
 8004d6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004d70:	ea91 0f03 	teqeq	r1, r3
 8004d74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004d78:	bd30      	pop	{r4, r5, pc}
 8004d7a:	bf00      	nop

08004d7c <__aeabi_ui2d>:
 8004d7c:	f090 0f00 	teq	r0, #0
 8004d80:	bf04      	itt	eq
 8004d82:	2100      	moveq	r1, #0
 8004d84:	4770      	bxeq	lr
 8004d86:	b530      	push	{r4, r5, lr}
 8004d88:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004d8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004d90:	f04f 0500 	mov.w	r5, #0
 8004d94:	f04f 0100 	mov.w	r1, #0
 8004d98:	e750      	b.n	8004c3c <__adddf3+0x138>
 8004d9a:	bf00      	nop

08004d9c <__aeabi_i2d>:
 8004d9c:	f090 0f00 	teq	r0, #0
 8004da0:	bf04      	itt	eq
 8004da2:	2100      	moveq	r1, #0
 8004da4:	4770      	bxeq	lr
 8004da6:	b530      	push	{r4, r5, lr}
 8004da8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004dac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004db0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004db4:	bf48      	it	mi
 8004db6:	4240      	negmi	r0, r0
 8004db8:	f04f 0100 	mov.w	r1, #0
 8004dbc:	e73e      	b.n	8004c3c <__adddf3+0x138>
 8004dbe:	bf00      	nop

08004dc0 <__aeabi_f2d>:
 8004dc0:	0042      	lsls	r2, r0, #1
 8004dc2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004dc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8004dca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004dce:	bf1f      	itttt	ne
 8004dd0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004dd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004dd8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004ddc:	4770      	bxne	lr
 8004dde:	f092 0f00 	teq	r2, #0
 8004de2:	bf14      	ite	ne
 8004de4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004de8:	4770      	bxeq	lr
 8004dea:	b530      	push	{r4, r5, lr}
 8004dec:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004df0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004df4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004df8:	e720      	b.n	8004c3c <__adddf3+0x138>
 8004dfa:	bf00      	nop

08004dfc <__aeabi_ul2d>:
 8004dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8004e00:	bf08      	it	eq
 8004e02:	4770      	bxeq	lr
 8004e04:	b530      	push	{r4, r5, lr}
 8004e06:	f04f 0500 	mov.w	r5, #0
 8004e0a:	e00a      	b.n	8004e22 <__aeabi_l2d+0x16>

08004e0c <__aeabi_l2d>:
 8004e0c:	ea50 0201 	orrs.w	r2, r0, r1
 8004e10:	bf08      	it	eq
 8004e12:	4770      	bxeq	lr
 8004e14:	b530      	push	{r4, r5, lr}
 8004e16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004e1a:	d502      	bpl.n	8004e22 <__aeabi_l2d+0x16>
 8004e1c:	4240      	negs	r0, r0
 8004e1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004e22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004e26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004e2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004e2e:	f43f aedc 	beq.w	8004bea <__adddf3+0xe6>
 8004e32:	f04f 0203 	mov.w	r2, #3
 8004e36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004e3a:	bf18      	it	ne
 8004e3c:	3203      	addne	r2, #3
 8004e3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004e42:	bf18      	it	ne
 8004e44:	3203      	addne	r2, #3
 8004e46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004e4a:	f1c2 0320 	rsb	r3, r2, #32
 8004e4e:	fa00 fc03 	lsl.w	ip, r0, r3
 8004e52:	fa20 f002 	lsr.w	r0, r0, r2
 8004e56:	fa01 fe03 	lsl.w	lr, r1, r3
 8004e5a:	ea40 000e 	orr.w	r0, r0, lr
 8004e5e:	fa21 f102 	lsr.w	r1, r1, r2
 8004e62:	4414      	add	r4, r2
 8004e64:	e6c1      	b.n	8004bea <__adddf3+0xe6>
 8004e66:	bf00      	nop

08004e68 <__aeabi_dmul>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004e6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004e72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004e76:	bf1d      	ittte	ne
 8004e78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004e7c:	ea94 0f0c 	teqne	r4, ip
 8004e80:	ea95 0f0c 	teqne	r5, ip
 8004e84:	f000 f8de 	bleq	8005044 <__aeabi_dmul+0x1dc>
 8004e88:	442c      	add	r4, r5
 8004e8a:	ea81 0603 	eor.w	r6, r1, r3
 8004e8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004e92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004e96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004e9a:	bf18      	it	ne
 8004e9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004ea0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea8:	d038      	beq.n	8004f1c <__aeabi_dmul+0xb4>
 8004eaa:	fba0 ce02 	umull	ip, lr, r0, r2
 8004eae:	f04f 0500 	mov.w	r5, #0
 8004eb2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004eb6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004eba:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004ebe:	f04f 0600 	mov.w	r6, #0
 8004ec2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004ec6:	f09c 0f00 	teq	ip, #0
 8004eca:	bf18      	it	ne
 8004ecc:	f04e 0e01 	orrne.w	lr, lr, #1
 8004ed0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004ed4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004ed8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004edc:	d204      	bcs.n	8004ee8 <__aeabi_dmul+0x80>
 8004ede:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004ee2:	416d      	adcs	r5, r5
 8004ee4:	eb46 0606 	adc.w	r6, r6, r6
 8004ee8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004eec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004ef0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004ef4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004ef8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004efc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004f00:	bf88      	it	hi
 8004f02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004f06:	d81e      	bhi.n	8004f46 <__aeabi_dmul+0xde>
 8004f08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004f0c:	bf08      	it	eq
 8004f0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004f12:	f150 0000 	adcs.w	r0, r0, #0
 8004f16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004f20:	ea46 0101 	orr.w	r1, r6, r1
 8004f24:	ea40 0002 	orr.w	r0, r0, r2
 8004f28:	ea81 0103 	eor.w	r1, r1, r3
 8004f2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004f30:	bfc2      	ittt	gt
 8004f32:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004f36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004f3a:	bd70      	popgt	{r4, r5, r6, pc}
 8004f3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f40:	f04f 0e00 	mov.w	lr, #0
 8004f44:	3c01      	subs	r4, #1
 8004f46:	f300 80ab 	bgt.w	80050a0 <__aeabi_dmul+0x238>
 8004f4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004f4e:	bfde      	ittt	le
 8004f50:	2000      	movle	r0, #0
 8004f52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004f56:	bd70      	pople	{r4, r5, r6, pc}
 8004f58:	f1c4 0400 	rsb	r4, r4, #0
 8004f5c:	3c20      	subs	r4, #32
 8004f5e:	da35      	bge.n	8004fcc <__aeabi_dmul+0x164>
 8004f60:	340c      	adds	r4, #12
 8004f62:	dc1b      	bgt.n	8004f9c <__aeabi_dmul+0x134>
 8004f64:	f104 0414 	add.w	r4, r4, #20
 8004f68:	f1c4 0520 	rsb	r5, r4, #32
 8004f6c:	fa00 f305 	lsl.w	r3, r0, r5
 8004f70:	fa20 f004 	lsr.w	r0, r0, r4
 8004f74:	fa01 f205 	lsl.w	r2, r1, r5
 8004f78:	ea40 0002 	orr.w	r0, r0, r2
 8004f7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004f80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004f84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004f88:	fa21 f604 	lsr.w	r6, r1, r4
 8004f8c:	eb42 0106 	adc.w	r1, r2, r6
 8004f90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004f94:	bf08      	it	eq
 8004f96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	f1c4 040c 	rsb	r4, r4, #12
 8004fa0:	f1c4 0520 	rsb	r5, r4, #32
 8004fa4:	fa00 f304 	lsl.w	r3, r0, r4
 8004fa8:	fa20 f005 	lsr.w	r0, r0, r5
 8004fac:	fa01 f204 	lsl.w	r2, r1, r4
 8004fb0:	ea40 0002 	orr.w	r0, r0, r2
 8004fb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004fb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004fbc:	f141 0100 	adc.w	r1, r1, #0
 8004fc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004fc4:	bf08      	it	eq
 8004fc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f1c4 0520 	rsb	r5, r4, #32
 8004fd0:	fa00 f205 	lsl.w	r2, r0, r5
 8004fd4:	ea4e 0e02 	orr.w	lr, lr, r2
 8004fd8:	fa20 f304 	lsr.w	r3, r0, r4
 8004fdc:	fa01 f205 	lsl.w	r2, r1, r5
 8004fe0:	ea43 0302 	orr.w	r3, r3, r2
 8004fe4:	fa21 f004 	lsr.w	r0, r1, r4
 8004fe8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004fec:	fa21 f204 	lsr.w	r2, r1, r4
 8004ff0:	ea20 0002 	bic.w	r0, r0, r2
 8004ff4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004ff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004ffc:	bf08      	it	eq
 8004ffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f094 0f00 	teq	r4, #0
 8005008:	d10f      	bne.n	800502a <__aeabi_dmul+0x1c2>
 800500a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800500e:	0040      	lsls	r0, r0, #1
 8005010:	eb41 0101 	adc.w	r1, r1, r1
 8005014:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005018:	bf08      	it	eq
 800501a:	3c01      	subeq	r4, #1
 800501c:	d0f7      	beq.n	800500e <__aeabi_dmul+0x1a6>
 800501e:	ea41 0106 	orr.w	r1, r1, r6
 8005022:	f095 0f00 	teq	r5, #0
 8005026:	bf18      	it	ne
 8005028:	4770      	bxne	lr
 800502a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800502e:	0052      	lsls	r2, r2, #1
 8005030:	eb43 0303 	adc.w	r3, r3, r3
 8005034:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005038:	bf08      	it	eq
 800503a:	3d01      	subeq	r5, #1
 800503c:	d0f7      	beq.n	800502e <__aeabi_dmul+0x1c6>
 800503e:	ea43 0306 	orr.w	r3, r3, r6
 8005042:	4770      	bx	lr
 8005044:	ea94 0f0c 	teq	r4, ip
 8005048:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800504c:	bf18      	it	ne
 800504e:	ea95 0f0c 	teqne	r5, ip
 8005052:	d00c      	beq.n	800506e <__aeabi_dmul+0x206>
 8005054:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005058:	bf18      	it	ne
 800505a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800505e:	d1d1      	bne.n	8005004 <__aeabi_dmul+0x19c>
 8005060:	ea81 0103 	eor.w	r1, r1, r3
 8005064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005068:	f04f 0000 	mov.w	r0, #0
 800506c:	bd70      	pop	{r4, r5, r6, pc}
 800506e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005072:	bf06      	itte	eq
 8005074:	4610      	moveq	r0, r2
 8005076:	4619      	moveq	r1, r3
 8005078:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800507c:	d019      	beq.n	80050b2 <__aeabi_dmul+0x24a>
 800507e:	ea94 0f0c 	teq	r4, ip
 8005082:	d102      	bne.n	800508a <__aeabi_dmul+0x222>
 8005084:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005088:	d113      	bne.n	80050b2 <__aeabi_dmul+0x24a>
 800508a:	ea95 0f0c 	teq	r5, ip
 800508e:	d105      	bne.n	800509c <__aeabi_dmul+0x234>
 8005090:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005094:	bf1c      	itt	ne
 8005096:	4610      	movne	r0, r2
 8005098:	4619      	movne	r1, r3
 800509a:	d10a      	bne.n	80050b2 <__aeabi_dmul+0x24a>
 800509c:	ea81 0103 	eor.w	r1, r1, r3
 80050a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80050a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80050a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050ac:	f04f 0000 	mov.w	r0, #0
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
 80050b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80050b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80050ba:	bd70      	pop	{r4, r5, r6, pc}

080050bc <__aeabi_ddiv>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80050c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80050c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80050ca:	bf1d      	ittte	ne
 80050cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80050d0:	ea94 0f0c 	teqne	r4, ip
 80050d4:	ea95 0f0c 	teqne	r5, ip
 80050d8:	f000 f8a7 	bleq	800522a <__aeabi_ddiv+0x16e>
 80050dc:	eba4 0405 	sub.w	r4, r4, r5
 80050e0:	ea81 0e03 	eor.w	lr, r1, r3
 80050e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80050e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80050ec:	f000 8088 	beq.w	8005200 <__aeabi_ddiv+0x144>
 80050f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80050f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80050f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80050fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005100:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005104:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005108:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800510c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005110:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005114:	429d      	cmp	r5, r3
 8005116:	bf08      	it	eq
 8005118:	4296      	cmpeq	r6, r2
 800511a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800511e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005122:	d202      	bcs.n	800512a <__aeabi_ddiv+0x6e>
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	ea4f 0232 	mov.w	r2, r2, rrx
 800512a:	1ab6      	subs	r6, r6, r2
 800512c:	eb65 0503 	sbc.w	r5, r5, r3
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	ea4f 0232 	mov.w	r2, r2, rrx
 8005136:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800513a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800513e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005142:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005146:	bf22      	ittt	cs
 8005148:	1ab6      	subcs	r6, r6, r2
 800514a:	4675      	movcs	r5, lr
 800514c:	ea40 000c 	orrcs.w	r0, r0, ip
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	ea4f 0232 	mov.w	r2, r2, rrx
 8005156:	ebb6 0e02 	subs.w	lr, r6, r2
 800515a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800515e:	bf22      	ittt	cs
 8005160:	1ab6      	subcs	r6, r6, r2
 8005162:	4675      	movcs	r5, lr
 8005164:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	ea4f 0232 	mov.w	r2, r2, rrx
 800516e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005172:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005176:	bf22      	ittt	cs
 8005178:	1ab6      	subcs	r6, r6, r2
 800517a:	4675      	movcs	r5, lr
 800517c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	ea4f 0232 	mov.w	r2, r2, rrx
 8005186:	ebb6 0e02 	subs.w	lr, r6, r2
 800518a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800518e:	bf22      	ittt	cs
 8005190:	1ab6      	subcs	r6, r6, r2
 8005192:	4675      	movcs	r5, lr
 8005194:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005198:	ea55 0e06 	orrs.w	lr, r5, r6
 800519c:	d018      	beq.n	80051d0 <__aeabi_ddiv+0x114>
 800519e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80051a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80051a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80051aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80051ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80051b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80051b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80051ba:	d1c0      	bne.n	800513e <__aeabi_ddiv+0x82>
 80051bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80051c0:	d10b      	bne.n	80051da <__aeabi_ddiv+0x11e>
 80051c2:	ea41 0100 	orr.w	r1, r1, r0
 80051c6:	f04f 0000 	mov.w	r0, #0
 80051ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80051ce:	e7b6      	b.n	800513e <__aeabi_ddiv+0x82>
 80051d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80051d4:	bf04      	itt	eq
 80051d6:	4301      	orreq	r1, r0
 80051d8:	2000      	moveq	r0, #0
 80051da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80051de:	bf88      	it	hi
 80051e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80051e4:	f63f aeaf 	bhi.w	8004f46 <__aeabi_dmul+0xde>
 80051e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80051ec:	bf04      	itt	eq
 80051ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80051f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80051f6:	f150 0000 	adcs.w	r0, r0, #0
 80051fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005204:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005208:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800520c:	bfc2      	ittt	gt
 800520e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005212:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005216:	bd70      	popgt	{r4, r5, r6, pc}
 8005218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800521c:	f04f 0e00 	mov.w	lr, #0
 8005220:	3c01      	subs	r4, #1
 8005222:	e690      	b.n	8004f46 <__aeabi_dmul+0xde>
 8005224:	ea45 0e06 	orr.w	lr, r5, r6
 8005228:	e68d      	b.n	8004f46 <__aeabi_dmul+0xde>
 800522a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800522e:	ea94 0f0c 	teq	r4, ip
 8005232:	bf08      	it	eq
 8005234:	ea95 0f0c 	teqeq	r5, ip
 8005238:	f43f af3b 	beq.w	80050b2 <__aeabi_dmul+0x24a>
 800523c:	ea94 0f0c 	teq	r4, ip
 8005240:	d10a      	bne.n	8005258 <__aeabi_ddiv+0x19c>
 8005242:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005246:	f47f af34 	bne.w	80050b2 <__aeabi_dmul+0x24a>
 800524a:	ea95 0f0c 	teq	r5, ip
 800524e:	f47f af25 	bne.w	800509c <__aeabi_dmul+0x234>
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	e72c      	b.n	80050b2 <__aeabi_dmul+0x24a>
 8005258:	ea95 0f0c 	teq	r5, ip
 800525c:	d106      	bne.n	800526c <__aeabi_ddiv+0x1b0>
 800525e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005262:	f43f aefd 	beq.w	8005060 <__aeabi_dmul+0x1f8>
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	e722      	b.n	80050b2 <__aeabi_dmul+0x24a>
 800526c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005270:	bf18      	it	ne
 8005272:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005276:	f47f aec5 	bne.w	8005004 <__aeabi_dmul+0x19c>
 800527a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800527e:	f47f af0d 	bne.w	800509c <__aeabi_dmul+0x234>
 8005282:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005286:	f47f aeeb 	bne.w	8005060 <__aeabi_dmul+0x1f8>
 800528a:	e712      	b.n	80050b2 <__aeabi_dmul+0x24a>

0800528c <__aeabi_d2f>:
 800528c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005290:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005294:	bf24      	itt	cs
 8005296:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800529a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800529e:	d90d      	bls.n	80052bc <__aeabi_d2f+0x30>
 80052a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80052a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80052a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80052ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80052b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80052b4:	bf08      	it	eq
 80052b6:	f020 0001 	biceq.w	r0, r0, #1
 80052ba:	4770      	bx	lr
 80052bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80052c0:	d121      	bne.n	8005306 <__aeabi_d2f+0x7a>
 80052c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80052c6:	bfbc      	itt	lt
 80052c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80052cc:	4770      	bxlt	lr
 80052ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80052d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80052d6:	f1c2 0218 	rsb	r2, r2, #24
 80052da:	f1c2 0c20 	rsb	ip, r2, #32
 80052de:	fa10 f30c 	lsls.w	r3, r0, ip
 80052e2:	fa20 f002 	lsr.w	r0, r0, r2
 80052e6:	bf18      	it	ne
 80052e8:	f040 0001 	orrne.w	r0, r0, #1
 80052ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80052f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80052f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80052f8:	ea40 000c 	orr.w	r0, r0, ip
 80052fc:	fa23 f302 	lsr.w	r3, r3, r2
 8005300:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005304:	e7cc      	b.n	80052a0 <__aeabi_d2f+0x14>
 8005306:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800530a:	d107      	bne.n	800531c <__aeabi_d2f+0x90>
 800530c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005310:	bf1e      	ittt	ne
 8005312:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005316:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800531a:	4770      	bxne	lr
 800531c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005320:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005324:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop

0800532c <__libc_init_array>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4e0f      	ldr	r6, [pc, #60]	; (800536c <__libc_init_array+0x40>)
 8005330:	4d0f      	ldr	r5, [pc, #60]	; (8005370 <__libc_init_array+0x44>)
 8005332:	1b76      	subs	r6, r6, r5
 8005334:	10b6      	asrs	r6, r6, #2
 8005336:	bf18      	it	ne
 8005338:	2400      	movne	r4, #0
 800533a:	d005      	beq.n	8005348 <__libc_init_array+0x1c>
 800533c:	3401      	adds	r4, #1
 800533e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005342:	4798      	blx	r3
 8005344:	42a6      	cmp	r6, r4
 8005346:	d1f9      	bne.n	800533c <__libc_init_array+0x10>
 8005348:	4e0a      	ldr	r6, [pc, #40]	; (8005374 <__libc_init_array+0x48>)
 800534a:	4d0b      	ldr	r5, [pc, #44]	; (8005378 <__libc_init_array+0x4c>)
 800534c:	1b76      	subs	r6, r6, r5
 800534e:	f7fb f9e5 	bl	800071c <_init>
 8005352:	10b6      	asrs	r6, r6, #2
 8005354:	bf18      	it	ne
 8005356:	2400      	movne	r4, #0
 8005358:	d006      	beq.n	8005368 <__libc_init_array+0x3c>
 800535a:	3401      	adds	r4, #1
 800535c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005360:	4798      	blx	r3
 8005362:	42a6      	cmp	r6, r4
 8005364:	d1f9      	bne.n	800535a <__libc_init_array+0x2e>
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	bd70      	pop	{r4, r5, r6, pc}
 800536a:	bf00      	nop
 800536c:	1ffe8824 	.word	0x1ffe8824
 8005370:	1ffe8824 	.word	0x1ffe8824
 8005374:	1ffe8824 	.word	0x1ffe8824
 8005378:	1ffe8824 	.word	0x1ffe8824

0800537c <npio2_hw>:
 800537c:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 800538c:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 800539c:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 80053ac:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 80053bc:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 80053cc:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 80053dc:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 80053ec:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080053fc <two_over_pi>:
 80053fc:	000000a2 000000f9 00000083 0000006e     ............n...
 800540c:	0000004e 00000044 00000015 00000029     N...D.......)...
 800541c:	000000fc 00000027 00000057 000000d1     ....'...W.......
 800542c:	000000f5 00000034 000000dd 000000c0     ....4...........
 800543c:	000000db 00000062 00000095 00000099     ....b...........
 800544c:	0000003c 00000043 00000090 00000041     <...C.......A...
 800545c:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 800546c:	000000de 000000bb 000000c5 00000061     ............a...
 800547c:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 800548c:	00000042 0000004d 000000d2 000000e0     B...M...........
 800549c:	00000006 00000049 0000002e 000000ea     ....I...........
 80054ac:	00000009 000000d1 00000092 0000001c     ................
 80054bc:	000000fe 0000001d 000000eb 0000001c     ................
 80054cc:	000000b1 00000029 000000a7 0000003e     ....).......>...
 80054dc:	000000e8 00000082 00000035 000000f5     ........5.......
 80054ec:	0000002e 000000bb 00000044 00000084     ........D.......
 80054fc:	000000e9 0000009c 00000070 00000026     ........p...&...
 800550c:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 800551c:	00000039 00000091 000000d6 00000039     9...........9...
 800552c:	00000083 00000053 00000039 000000f4     ....S...9.......
 800553c:	0000009c 00000084 0000005f 0000008b     ........_.......
 800554c:	000000bd 000000f9 00000028 0000003b     ........(...;...
 800555c:	0000001f 000000f8 00000097 000000ff     ................
 800556c:	000000de 00000005 00000098 0000000f     ................
 800557c:	000000ef 0000002f 00000011 0000008b     ..../...........
 800558c:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 800559c:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 80055ac:	00000027 000000cb 00000009 000000b7     '...............
 80055bc:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 80055cc:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 80055dc:	00000075 00000027 000000ba 000000c7     u...'...........
 80055ec:	000000eb 000000e5 000000f1 0000007b     ............{...
 80055fc:	0000003d 00000007 00000039 000000f7     =.......9.......
 800560c:	0000008a 00000052 00000092 000000ea     ....R...........
 800561c:	0000006b 000000fb 0000005f 000000b1     k......._.......
 800562c:	0000001f 0000008d 0000005d 00000008     ........].......
 800563c:	00000056 00000003 00000030 00000046     V.......0...F...
 800564c:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 800565c:	000000f0 000000cf 000000bc 00000020     ............ ...
 800566c:	0000009a 000000f4 00000036 0000001d     ........6.......
 800567c:	000000a9 000000e3 00000091 00000061     ............a...
 800568c:	0000005e 000000e6 0000001b 00000008     ^...............
 800569c:	00000065 00000099 00000085 0000005f     e..........._...
 80056ac:	00000014 000000a0 00000068 00000040     ........h...@...
 80056bc:	0000008d 000000ff 000000d8 00000080     ................
 80056cc:	0000004d 00000073 00000027 00000031     M...s...'...1...
 80056dc:	00000006 00000006 00000015 00000056     ............V...
 80056ec:	000000ca 00000073 000000a8 000000c9     ....s...........
 80056fc:	00000060 000000e2 0000007b 000000c0     `.......{.......
 800570c:	0000008c 0000006b                       ....k...

08005714 <init_jk>:
 8005714:	00000004 00000007 00000009              ............

08005720 <PIo2>:
 8005720:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8005730:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8005740:	1fc40000 1bc60000 17440000              ..........D.
