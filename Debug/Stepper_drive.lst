
Stepper_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000568c  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000024  1ffe8800  0c00568c  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00007fc0  1ffe8824  0c0056b0  00010824  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000003c0  00000000  00000000  00010828  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e3a  00000000  00000000  00010be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001057  00000000  00000000  00017a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020a7  00000000  00000000  00018a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d38  00000000  00000000  0001ab20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001da9  00000000  00000000  0001b858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012d0  00000000  00000000  0001d601  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0001e8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000061c  00000000  00000000  0001eb81  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 29 07 00 08 99 02 00 08     ........).......
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 45 18 00 08 99 02 00 08 99 02 00 08     ....E...........
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 19 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
    ldr r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
    cmp r4, r5
 800020c:	42ac      	cmp	r4, r5
    bge .L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
    ldr r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
    ldr r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
    ldr r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
    subs    r3, #4
 8000216:	3b04      	subs	r3, #4
    ittt    ge
 8000218:	bfa2      	ittt	ge
    ldrge   r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
    strge   r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
    bge .L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

    adds    r4, #12
 8000220:	340c      	adds	r4, #12
    b   .L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
    ldr r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
    ldr r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
    cmp r3, r4
 8000228:	42a3      	cmp	r3, r4
    bge .L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
    ldr r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
    ldr r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
    movs    r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
    subs    r2, #4
 8000232:	3a04      	subs	r2, #4
    itt ge
 8000234:	bfa4      	itt	ge
    strge   r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
    bge .L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

    adds    r3, #8
 800023a:	3308      	adds	r3, #8
    b   .L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00568c 	.word	0x0c00568c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000024 	.word	0x00000024
 8000254:	0c00568c 	.word	0x0c00568c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8824 	.word	0x1ffe8824
 8000264:	00007fc0 	.word	0x00007fc0
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	080002c5 	.word	0x080002c5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
    ldr r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
    ldr r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
    ldr r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
    b   .L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800526d 	.word	0x0800526d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080019b1 	.word	0x080019b1

08000298 <BusFault_Handler>:
    .align  1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e003      	b.n	80002b2 <delay+0x16>
  {
    __NOP();
 80002aa:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d3f7      	bcc.n	80002aa <delay+0xe>
  {
    __NOP();
  }
}
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002c4:	b598      	push	{r3, r4, r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <SystemInit+0x1c>)
 80002ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ce:	4614      	mov	r4, r2
 80002d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002d6:	f000 f805 	bl	80002e4 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002da:	f000 f83b 	bl	8000354 <SystemCoreClockSetup>
}
 80002de:	bd98      	pop	{r3, r4, r7, pc}
 80002e0:	2003ffc4 	.word	0x2003ffc4

080002e4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ea:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemCoreSetup+0x64>)
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <SystemCoreSetup+0x68>)
 80002f0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002f2:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002f6:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <SystemCoreSetup+0x6c>)
 8000316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800031a:	3314      	adds	r3, #20
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f023 030f 	bic.w	r3, r3, #15
 8000326:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <SystemCoreSetup+0x6c>)
 8000332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000336:	3314      	adds	r3, #20
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	08000000 	.word	0x08000000
 8000350:	58001000 	.word	0x58001000

08000354 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000358:	4ba4      	ldr	r3, [pc, #656]	; (80005ec <SystemCoreClockSetup+0x298>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d10c      	bne.n	800037e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000364:	4aa1      	ldr	r2, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000366:	4ba1      	ldr	r3, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000370:	bf00      	nop
 8000372:	4b9e      	ldr	r3, [pc, #632]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800037e:	4b9c      	ldr	r3, [pc, #624]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000386:	2b00      	cmp	r3, #0
 8000388:	d009      	beq.n	800039e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800038a:	4a99      	ldr	r2, [pc, #612]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038c:	4b98      	ldr	r3, [pc, #608]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000394:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000396:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800039a:	f7ff ff7f 	bl	800029c <delay>
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800039e:	4a95      	ldr	r2, [pc, #596]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a0:	4b94      	ldr	r3, [pc, #592]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ae:	f7ff ff75 	bl	800029c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003b2:	4a90      	ldr	r2, [pc, #576]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b4:	4b8f      	ldr	r3, [pc, #572]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003c2:	4b8d      	ldr	r3, [pc, #564]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d029      	beq.n	8000422 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003ce:	4a8a      	ldr	r2, [pc, #552]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d0:	4b89      	ldr	r3, [pc, #548]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003dc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003de:	f000 f993 	bl	8000708 <OSCHP_GetFrequency>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b85      	ldr	r3, [pc, #532]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 80003e6:	fba3 2302 	umull	r2, r3, r3, r2
 80003ea:	0d1b      	lsrs	r3, r3, #20
 80003ec:	3b01      	subs	r3, #1
 80003ee:	041b      	lsls	r3, r3, #16
 80003f0:	4981      	ldr	r1, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f2:	4a81      	ldr	r2, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80003fa:	4a7e      	ldr	r2, [pc, #504]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fc:	4b7d      	ldr	r3, [pc, #500]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000406:	4a7b      	ldr	r2, [pc, #492]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000408:	4b7a      	ldr	r3, [pc, #488]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000410:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000412:	bf00      	nop
 8000414:	4b77      	ldr	r3, [pc, #476]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800041c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000420:	d1f8      	bne.n	8000414 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000422:	4a74      	ldr	r2, [pc, #464]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000424:	4b73      	ldr	r3, [pc, #460]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800042e:	4a71      	ldr	r2, [pc, #452]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000430:	4b70      	ldr	r3, [pc, #448]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800043a:	4b6e      	ldr	r3, [pc, #440]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800043c:	4a70      	ldr	r2, [pc, #448]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800043e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_24MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000440:	4a6c      	ldr	r2, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000442:	4b6c      	ldr	r3, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800044a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800044c:	4a69      	ldr	r2, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800044e:	4b69      	ldr	r3, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000458:	4a66      	ldr	r2, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045a:	4b66      	ldr	r3, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000462:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000464:	bf00      	nop
 8000466:	4b63      	ldr	r3, [pc, #396]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f9      	beq.n	8000466 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock at 24MHz*/
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000472:	4a60      	ldr	r2, [pc, #384]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000474:	4b5f      	ldr	r3, [pc, #380]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800047e:	bf00      	nop
 8000480:	4b5c      	ldr	r3, [pc, #368]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d1f9      	bne.n	8000480 <SystemCoreClockSetup+0x12c>
  }

#endif /* ENABLE_PLL */

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->SYSCLKCR = __SYSCLKCR;
 800048c:	4b5d      	ldr	r3, [pc, #372]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800048e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000492:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = __PBCLKCR;
 8000494:	4b5b      	ldr	r3, [pc, #364]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 8000496:	2200      	movs	r2, #0
 8000498:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = __CPUCLKCR;
 800049a:	4b5a      	ldr	r3, [pc, #360]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = __CCUCLKCR;
 80004a0:	4b58      	ldr	r3, [pc, #352]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = __WDTCLKCR;
 80004a6:	4b57      	ldr	r3, [pc, #348]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = __EBUCLKCR;
 80004ac:	4b55      	ldr	r3, [pc, #340]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ae:	2203      	movs	r2, #3
 80004b0:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = __USBCLKCR;
 80004b2:	4b54      	ldr	r3, [pc, #336]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004b4:	4a54      	ldr	r2, [pc, #336]	; (8000608 <SystemCoreClockSetup+0x2b4>)
 80004b6:	619a      	str	r2, [r3, #24]
  SCU_CLK->ECATCLKCR = __ECATCLKCR;
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	639a      	str	r2, [r3, #56]	; 0x38
  SCU_CLK->EXTCLKCR = __EXTCLKCR;
 80004be:	4b51      	ldr	r3, [pc, #324]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004c0:	4a52      	ldr	r2, [pc, #328]	; (800060c <SystemCoreClockSetup+0x2b8>)
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004c4:	4a4b      	ldr	r2, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c6:	4b4b      	ldr	r3, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ce:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d0:	4b48      	ldr	r3, [pc, #288]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004d2:	4a4f      	ldr	r2, [pc, #316]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004d4:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_48MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_48MHZ);
 80004d6:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80004da:	f7ff fedf 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004de:	4b45      	ldr	r3, [pc, #276]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004e0:	4a4c      	ldr	r2, [pc, #304]	; (8000614 <SystemCoreClockSetup+0x2c0>)
 80004e2:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_72MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_72MHZ);
 80004e4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80004e8:	f7ff fed8 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004ec:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004ee:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <SystemCoreClockSetup+0x2c4>)
 80004f0:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_96MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_96MHZ);
 80004f2:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80004f6:	f7ff fed1 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004fa:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004fc:	4a47      	ldr	r2, [pc, #284]	; (800061c <SystemCoreClockSetup+0x2c8>)
 80004fe:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_120MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_120MHZ);
 8000500:	f241 7070 	movw	r0, #6000	; 0x1770
 8000504:	f7ff feca 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000508:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800050a:	4a45      	ldr	r2, [pc, #276]	; (8000620 <SystemCoreClockSetup+0x2cc>)
 800050c:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_144MHZ);
 800050e:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8000512:	f7ff fec3 	bl	800029c <delay>

#endif /* ENABLE_PLL */

#if ENABLE_USBPLL
  /* enable USB PLL first */
  SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000516:	4a37      	ldr	r2, [pc, #220]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000520:	f023 0302 	bic.w	r3, r3, #2
 8000524:	6153      	str	r3, [r2, #20]

  /* USB PLL uses as clock input the OSC_HP */
  /* check and if not already running enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000526:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d031      	beq.n	8000596 <SystemCoreClockSetup+0x242>
  {
    /* check if Main PLL is switched on for OSC WDG*/
    if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <SystemCoreClockSetup+0x2d0>)
 8000538:	4013      	ands	r3, r2
 800053a:	2b00      	cmp	r3, #0
 800053c:	d007      	beq.n	800054e <SystemCoreClockSetup+0x1fa>
    {
      /* enable PLL first */
      SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800053e:	4a2d      	ldr	r2, [pc, #180]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000548:	f023 0302 	bic.w	r3, r3, #2
 800054c:	6053      	str	r3, [r2, #4]
    }

    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800054e:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000558:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800055c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800055e:	f000 f8d3 	bl	8000708 <OSCHP_GetFrequency>
 8000562:	4602      	mov	r2, r0
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 8000566:	fba3 2302 	umull	r2, r3, r3, r2
 800056a:	0d1b      	lsrs	r3, r3, #20
 800056c:	3b01      	subs	r3, #1
 800056e:	041b      	lsls	r3, r3, #16
 8000570:	4921      	ldr	r1, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000572:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000574:	6852      	ldr	r2, [r2, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	604b      	str	r3, [r1, #4]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800057a:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000584:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000586:	bf00      	nop
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000590:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000594:	d1f8      	bne.n	8000588 <SystemCoreClockSetup+0x234>
    }
  }

  /* Setup USB PLL */
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b0:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <SystemCoreClockSetup+0x2d4>)
 80005b2:	615a      	str	r2, [r3, #20]
                        (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005be:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f023 0310 	bic.w	r3, r3, #16
 80005ca:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80005d8:	bf00      	nop
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005dc:	691b      	ldr	r3, [r3, #16]
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <SystemCoreClockSetup+0x286>
    /* wait for PLL Lock */
  }
#endif

  /* Enable selected clocks */
  SCU_CLK->CLKSET = __CLKSET;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	e01f      	b.n	800062c <SystemCoreClockSetup+0x2d8>
 80005ec:	50004200 	.word	0x50004200
 80005f0:	50004400 	.word	0x50004400
 80005f4:	50004710 	.word	0x50004710
 80005f8:	50004700 	.word	0x50004700
 80005fc:	6b5fca6b 	.word	0x6b5fca6b
 8000600:	010b2f00 	.word	0x010b2f00
 8000604:	50004600 	.word	0x50004600
 8000608:	00010005 	.word	0x00010005
 800060c:	01200003 	.word	0x01200003
 8000610:	01052f00 	.word	0x01052f00
 8000614:	01032f00 	.word	0x01032f00
 8000618:	01022f00 	.word	0x01022f00
 800061c:	01012f00 	.word	0x01012f00
 8000620:	01002f00 	.word	0x01002f00
 8000624:	00010002 	.word	0x00010002
 8000628:	02006300 	.word	0x02006300
 800062c:	605a      	str	r2, [r3, #4]
  PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif
#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800062e:	f000 f801 	bl	8000634 <SystemCoreClockUpdate>
}
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d03e      	beq.n	80006c4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e002      	b.n	800065e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000658:	f000 f856 	bl	8000708 <OSCHP_GetFrequency>
 800065c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	2b00      	cmp	r3, #0
 8000668:	d020      	beq.n	80006ac <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000672:	0e1b      	lsrs	r3, r3, #24
 8000674:	3301      	adds	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800068e:	0c1b      	lsrs	r3, r3, #16
 8000690:	3301      	adds	r3, #1
 8000692:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00d      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e001      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 80006c6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	3301      	adds	r3, #1
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <SystemCoreClockUpdate+0xd0>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	50004600 	.word	0x50004600
 80006fc:	50004710 	.word	0x50004710
 8000700:	016e3600 	.word	0x016e3600
 8000704:	2003ffc0 	.word	0x2003ffc0

08000708 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <OSCHP_GetFrequency+0x10>)
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	00b71b00 	.word	0x00b71b00

0800071c <_init>:
  }
}

/* Init */
void _init(void)
{}
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <ERU0_0_IRQHandler>:
#include "stdlib.h"
#include "transform.h"
#include "io.h"

/*Interrupt function for Eru0 used with ENCZ component of encoder -- NOT USED*/
void ERU0_0_IRQHandler(void) {}
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <encoder_init>:

/*
 * Initialize CCU40 and POSIF0
 */
void encoder_init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	/*
	 * Pin set up
	 */
	/*Digital Pad activated*/
	PORT14->PDISC &= ~(PORTS_PDISC_5_MSK);
 8000738:	4a68      	ldr	r2, [pc, #416]	; (80008dc <encoder_init+0x1a8>)
 800073a:	4b68      	ldr	r3, [pc, #416]	; (80008dc <encoder_init+0x1a8>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	f023 0320 	bic.w	r3, r3, #32
 8000742:	6613      	str	r3, [r2, #96]	; 0x60
	PORT14->PDISC &= ~(PORTS_PDISC_6_MSK);
 8000744:	4a65      	ldr	r2, [pc, #404]	; (80008dc <encoder_init+0x1a8>)
 8000746:	4b65      	ldr	r3, [pc, #404]	; (80008dc <encoder_init+0x1a8>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800074e:	6613      	str	r3, [r2, #96]	; 0x60
	PORT14->PDISC &= ~(PORTS_PDISC_7_MSK);
 8000750:	4a62      	ldr	r2, [pc, #392]	; (80008dc <encoder_init+0x1a8>)
 8000752:	4b62      	ldr	r3, [pc, #392]	; (80008dc <encoder_init+0x1a8>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800075a:	6613      	str	r3, [r2, #96]	; 0x60

	/*POSIF Pins*/
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC5_POS); // P14.5 ENCZ
 800075c:	4a5f      	ldr	r2, [pc, #380]	; (80008dc <encoder_init+0x1a8>)
 800075e:	4b5f      	ldr	r3, [pc, #380]	; (80008dc <encoder_init+0x1a8>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000766:	6153      	str	r3, [r2, #20]
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC6_POS); // P14.6	ENCB
 8000768:	4a5c      	ldr	r2, [pc, #368]	; (80008dc <encoder_init+0x1a8>)
 800076a:	4b5c      	ldr	r3, [pc, #368]	; (80008dc <encoder_init+0x1a8>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000772:	6153      	str	r3, [r2, #20]
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC7_POS); // P14.7	ENCA
 8000774:	4a59      	ldr	r2, [pc, #356]	; (80008dc <encoder_init+0x1a8>)
 8000776:	4b59      	ldr	r3, [pc, #356]	; (80008dc <encoder_init+0x1a8>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6153      	str	r3, [r2, #20]

	/*
	 * Configure CCU40
	 */
	/* Reset CCU40*/
	SCU_RESET->PRSET0 |= (SCU_PRESET0_CCU40RS_MSK);
 8000780:	4a57      	ldr	r2, [pc, #348]	; (80008e0 <encoder_init+0x1ac>)
 8000782:	4b57      	ldr	r3, [pc, #348]	; (80008e0 <encoder_init+0x1ac>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6113      	str	r3, [r2, #16]

	/* Clear reset of CCU40 */
	SCU_RESET->PRCLR0 |= (SCU_PRCLR0_CCU40RS_MSK);
 800078c:	4a54      	ldr	r2, [pc, #336]	; (80008e0 <encoder_init+0x1ac>)
 800078e:	4b54      	ldr	r3, [pc, #336]	; (80008e0 <encoder_init+0x1ac>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6153      	str	r3, [r2, #20]

	/* Enable CCU4 via clkset */
	SCU_CLK->CLKSET |= SCU_CLKSET_CCUCEN_MSK;
 8000798:	4a52      	ldr	r2, [pc, #328]	; (80008e4 <encoder_init+0x1b0>)
 800079a:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <encoder_init+0x1b0>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6053      	str	r3, [r2, #4]

	/* Enable prescaler */
	CCU40->GIDLC |= CCU4_GIDLC_SPRB_MSK;
 80007a4:	4a50      	ldr	r2, [pc, #320]	; (80008e8 <encoder_init+0x1b4>)
 80007a6:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <encoder_init+0x1b4>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ae:	60d3      	str	r3, [r2, #12]

	/*Set clock as Module Clock*/
	CCU40->GCTRL &= ~(CCU4_GCTRL_PCIS_MOD_CLK_MSK << CCU4_GCTRL_PCIS_POS);
 80007b0:	4a4d      	ldr	r2, [pc, #308]	; (80008e8 <encoder_init+0x1b4>)
 80007b2:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <encoder_init+0x1b4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007ba:	6013      	str	r3, [r2, #0]

	/*Set Counting Mode - Edge Aligned*/
	CCU40_CC40->TC &= ~(CCU4_TC_TCM_EDGE_MSK);
 80007bc:	4a4b      	ldr	r2, [pc, #300]	; (80008ec <encoder_init+0x1b8>)
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <encoder_init+0x1b8>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f023 0301 	bic.w	r3, r3, #1
 80007c6:	6153      	str	r3, [r2, #20]

	/*Period Value*/
	CCU40_CC40->PRS |= (CCU4_CC4_PRS_VALUE);
 80007c8:	4a48      	ldr	r2, [pc, #288]	; (80008ec <encoder_init+0x1b8>)
 80007ca:	4b48      	ldr	r3, [pc, #288]	; (80008ec <encoder_init+0x1b8>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80007d2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80007d6:	6353      	str	r3, [r2, #52]	; 0x34

	/*Shadow transfer for PR*/
	CCU40->GCSS |= (CCU4_GCSS_S0SE_MSK);
 80007d8:	4a43      	ldr	r2, [pc, #268]	; (80008e8 <encoder_init+0x1b4>)
 80007da:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <encoder_init+0x1b4>)
 80007dc:	691b      	ldr	r3, [r3, #16]
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6113      	str	r3, [r2, #16]

	/*
	 * Configure POSIF0
	 */
	/* Reset POSIF0*/
	SCU_RESET->PRSET0 |= (SCU_PRESET0_POSIF0RS_MSK);
 80007e4:	4a3e      	ldr	r2, [pc, #248]	; (80008e0 <encoder_init+0x1ac>)
 80007e6:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <encoder_init+0x1ac>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ee:	6113      	str	r3, [r2, #16]

	/* Clear reset of POSIF0*/
	SCU_RESET->PRCLR0 |= (SCU_PRCLR0_POSIF0RS_MSK);
 80007f0:	4a3b      	ldr	r2, [pc, #236]	; (80008e0 <encoder_init+0x1ac>)
 80007f2:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <encoder_init+0x1ac>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fa:	6153      	str	r3, [r2, #20]

	/*Quadrature Decoder Mode enabled*/
	POSIF0->PCONF |= POSIF_PCONF_FSEL_QUAD_MSK;
 80007fc:	4a3c      	ldr	r2, [pc, #240]	; (80008f0 <encoder_init+0x1bc>)
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <encoder_init+0x1bc>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6013      	str	r3, [r2, #0]

	/*Phase/Hal selector as INxB for the used pins*/
	POSIF0->PCONF |= (POSIF_IN_B_MSK << POSIF_PCONF_INSEL0_POS);
 8000808:	4a39      	ldr	r2, [pc, #228]	; (80008f0 <encoder_init+0x1bc>)
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <encoder_init+0x1bc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000812:	6013      	str	r3, [r2, #0]
	POSIF0->PCONF |= (POSIF_IN_B_MSK << POSIF_PCONF_INSEL1_POS);
 8000814:	4a36      	ldr	r2, [pc, #216]	; (80008f0 <encoder_init+0x1bc>)
 8000816:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <encoder_init+0x1bc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800081e:	6013      	str	r3, [r2, #0]
	POSIF0->PCONF |= (POSIF_IN_B_MSK << POSIF_PCONF_INSEL2_POS);
 8000820:	4a33      	ldr	r2, [pc, #204]	; (80008f0 <encoder_init+0x1bc>)
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <encoder_init+0x1bc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082a:	6013      	str	r3, [r2, #0]

	/*Low Pass filter configuration - 4 clock cycles*/
	POSIF0->PCONF |= (POSIF_LOW_PASS_4 << POSIF_PCONF_LPC_POS);
 800082c:	4a30      	ldr	r2, [pc, #192]	; (80008f0 <encoder_init+0x1bc>)
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <encoder_init+0x1bc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000836:	6013      	str	r3, [r2, #0]

	/*
	 * POSIF to CC40
	 */
	/*Input selector configuration*/
	CCU40_CC40->INS |= (CCU4_IN_E_MSK << CCU4_INS_EV0IS_POS); // Event 0 for Out0 on rising edge
 8000838:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <encoder_init+0x1b8>)
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <encoder_init+0x1b8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6013      	str	r3, [r2, #0]
	CCU40_CC40->INS |= (RISING_EDGE_ENC << CCU4_INS_EV0EM_POS);
 8000844:	4a29      	ldr	r2, [pc, #164]	; (80008ec <encoder_init+0x1b8>)
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <encoder_init+0x1b8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800084e:	6013      	str	r3, [r2, #0]
	CCU40_CC40->INS |= (CCU4_IN_F_MSK << CCU4_INS_EV1IS_POS); // Event 1 for Out1 on low level
 8000850:	4a26      	ldr	r2, [pc, #152]	; (80008ec <encoder_init+0x1b8>)
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <encoder_init+0x1b8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800085a:	6013      	str	r3, [r2, #0]
	//	CCU40_CC40->INS |= (RISING_EDGE_ENC << CCU4_INS_EV1EM_POS);
	CCU40_CC40->INS |= (0x1UL << CCU4_CC4_INS_EV1LM_Pos);
 800085c:	4a23      	ldr	r2, [pc, #140]	; (80008ec <encoder_init+0x1b8>)
 800085e:	4b23      	ldr	r3, [pc, #140]	; (80008ec <encoder_init+0x1b8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000866:	6013      	str	r3, [r2, #0]

	/*Connection Matrix Control*/
	CCU40_CC40->CMC |= (CCU4_EVENT_0_MSK << CCU4_CMC_CNTS_POS); // Event0 set up for Counting
 8000868:	4a20      	ldr	r2, [pc, #128]	; (80008ec <encoder_init+0x1b8>)
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <encoder_init+0x1b8>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6053      	str	r3, [r2, #4]
	CCU40_CC40->CMC |= (CCU4_EVENT_1_MSK << CCU4_CMC_UDS_POS);	// Event1 set up for Direction
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <encoder_init+0x1b8>)
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <encoder_init+0x1b8>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800087e:	6053      	str	r3, [r2, #4]
	/*
	 * Stop and Start POSIF/CC40
	 */
	/*Stop and reset the state machine of the quadrature decoder and the current status of the Hall sensor - POSIF*/
	POSIF0->PRUNC |= POSIF_PRUNC_CRB_MSK; // Stops POSIF
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <encoder_init+0x1bc>)
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <encoder_init+0x1bc>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	60d3      	str	r3, [r2, #12]
	POSIF0->PRUNC |= POSIF_PRUNC_CSM_MSK; // Resets POSIF
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <encoder_init+0x1bc>)
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <encoder_init+0x1bc>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	60d3      	str	r3, [r2, #12]

	/*Exit Idle CC40*/
	CCU40->GIDLC |= (CCU4_GIDLC_CS0I_MSK);
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <encoder_init+0x1b4>)
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <encoder_init+0x1b4>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	60d3      	str	r3, [r2, #12]

	/*Stop and clear timer*/
	CCU40_CC40->TCCLR |= (uint32_t)(CCU4_CC4_TCCLR_TRBC_Msk);
 80008a4:	4a11      	ldr	r2, [pc, #68]	; (80008ec <encoder_init+0x1b8>)
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <encoder_init+0x1b8>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6113      	str	r3, [r2, #16]
	CCU40_CC40->TCCLR |= (uint32_t)(CCU4_CC4_TCCLR_TCC_Msk);
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <encoder_init+0x1b8>)
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <encoder_init+0x1b8>)
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	6113      	str	r3, [r2, #16]

	/*Start CCU40*/
	CCU40_CC40->TCSET |= (CCU4_TCSET_TRBS_MSK);
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <encoder_init+0x1b8>)
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <encoder_init+0x1b8>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	60d3      	str	r3, [r2, #12]

	/*Start POSIF0*/
	POSIF0->PRUNS |= (POSIF_PRUNS_SRB_MSK);
 80008c8:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <encoder_init+0x1bc>)
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <encoder_init+0x1bc>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6093      	str	r3, [r2, #8]

	/*Saves the first value of the timer*/
	//	timer_value_old = CCU40_CC40->TIMER;
	//	timer_value_old_fast = CCU40_CC40->TIMER;
}
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	48028e00 	.word	0x48028e00
 80008e0:	50004400 	.word	0x50004400
 80008e4:	50004600 	.word	0x50004600
 80008e8:	4000c000 	.word	0x4000c000
 80008ec:	4000c100 	.word	0x4000c100
 80008f0:	40028000 	.word	0x40028000

080008f4 <current_filter>:
/*
 *	y = k*(x - y_last) + y_last
 *	First order signal filter
 */
void current_filter(float filter_input)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	filter_output = k * (filter_input - filter_output_old) + filter_output_old;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <current_filter+0x44>)
 80008fe:	edd3 7a00 	vldr	s15, [r3]
 8000902:	ed97 7a01 	vldr	s14, [r7, #4]
 8000906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <current_filter+0x48>)
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <current_filter+0x44>)
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <current_filter+0x4c>)
 8000920:	edc3 7a00 	vstr	s15, [r3]
	filter_output_old = filter_output;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <current_filter+0x4c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a03      	ldr	r2, [pc, #12]	; (8000938 <current_filter+0x44>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	1ffe8828 	.word	0x1ffe8828
 800093c:	1ffe8804 	.word	0x1ffe8804
 8000940:	1ffe8824 	.word	0x1ffe8824

08000944 <current_protection>:

/*
 *	Stops current output if above i_prot for TIME_TRIGGER_FAIL time
 */
void current_protection(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	current_filter((i_alpha * i_alpha) + (i_beta * i_beta));
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <current_protection+0xa0>)
 800094a:	ed93 7a00 	vldr	s14, [r3]
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <current_protection+0xa0>)
 8000950:	edd3 7a00 	vldr	s15, [r3]
 8000954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <current_protection+0xa4>)
 800095a:	edd3 6a00 	vldr	s13, [r3]
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <current_protection+0xa4>)
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800096c:	ee17 0a90 	vmov	r0, s15
 8000970:	f7ff ffc0 	bl	80008f4 <current_filter>
	if (filter_output > (i_prot * i_prot))
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <current_protection+0xa8>)
 8000976:	ed93 7a00 	vldr	s14, [r3]
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <current_protection+0xa8>)
 800097c:	edd3 7a00 	vldr	s15, [r3]
 8000980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <current_protection+0xac>)
 8000986:	edd3 7a00 	vldr	s15, [r3]
 800098a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800098e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000992:	d522      	bpl.n	80009da <current_protection+0x96>
	{
		counter_timer_prot++;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <current_protection+0xb0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <current_protection+0xb0>)
 800099c:	6013      	str	r3, [r2, #0]

		if (counter_timer_prot > TIME_TRIGGER_FAIL)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <current_protection+0xb0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009a6:	d91b      	bls.n	80009e0 <current_protection+0x9c>
		{
			drive_disabled();
 80009a8:	f002 ff6a 	bl	8003880 <drive_disabled>
			drive_status |= DRIVE_STATUS_PROT_MSK; // set current_prot_flag
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <current_protection+0xb4>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80009b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <current_protection+0xb4>)
 80009bc:	801a      	strh	r2, [r3, #0]
			drive_status &= CLEAR_DRIVE_STATUS;	   // set STATUS bits to 0 -> go to state 0
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <current_protection+0xb4>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	f023 030f 	bic.w	r3, r3, #15
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <current_protection+0xb4>)
 80009ca:	801a      	strh	r2, [r3, #0]
			counter_timer_prot = 0;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <current_protection+0xb0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
			drive_command_old = 0; // reset old status of drive_command
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <current_protection+0xb8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	801a      	strh	r2, [r3, #0]
 80009d8:	e002      	b.n	80009e0 <current_protection+0x9c>
		}
	}
	else
	{
		counter_timer_prot = 0;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <current_protection+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
	}
}
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	1fff07c4 	.word	0x1fff07c4
 80009e8:	1fff07dc 	.word	0x1fff07dc
 80009ec:	1ffe8800 	.word	0x1ffe8800
 80009f0:	1ffe8824 	.word	0x1ffe8824
 80009f4:	1ffe882c 	.word	0x1ffe882c
 80009f8:	1fff066a 	.word	0x1fff066a
 80009fc:	1fff066e 	.word	0x1fff066e

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_EnableIRQ+0x34>)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	095b      	lsrs	r3, r3, #5
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	f002 021f 	and.w	r2, r2, #31
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0c      	blt.n	8000a64 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	4909      	ldr	r1, [pc, #36]	; (8000a70 <__NVIC_ClearPendingIRQ+0x38>)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	095b      	lsrs	r3, r3, #5
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	f002 021f 	and.w	r2, r2, #31
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	3360      	adds	r3, #96	; 0x60
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	4909      	ldr	r1, [pc, #36]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	0092      	lsls	r2, r2, #2
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
  }
}
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <adc_init>:

/*
	Initialize VADC unit
*/
void adc_init(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	/*Pin setup - P14.0 P14.3 P14.4*/
	PORT14->IOCR0 |= (INPUT_PULL_UP_MSK << PORT14_IOCR0_PC0_POS); // P14.0 - G0CH0				-A
 8000acc:	4ac8      	ldr	r2, [pc, #800]	; (8000df0 <adc_init+0x328>)
 8000ace:	4bc8      	ldr	r3, [pc, #800]	; (8000df0 <adc_init+0x328>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6113      	str	r3, [r2, #16]
	PORT14->IOCR0 |= (INPUT_PULL_UP_MSK << PORT14_IOCR0_PC3_POS); // P14.3 - G1CH3(ALIAS CH0)	-B
 8000ad8:	4ac5      	ldr	r2, [pc, #788]	; (8000df0 <adc_init+0x328>)
 8000ada:	4bc5      	ldr	r3, [pc, #788]	; (8000df0 <adc_init+0x328>)
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6113      	str	r3, [r2, #16]
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC4_POS); // P14.4 - G2CH0				-C
 8000ae4:	4ac2      	ldr	r2, [pc, #776]	; (8000df0 <adc_init+0x328>)
 8000ae6:	4bc2      	ldr	r3, [pc, #776]	; (8000df0 <adc_init+0x328>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6153      	str	r3, [r2, #20]

	/*Disable Gating - enables the clock for VADC */
	SCU_CLK->CGATCLR0 |= SCU_CGATCLR0_VADC_MSK;
 8000af0:	4ac0      	ldr	r2, [pc, #768]	; (8000df4 <adc_init+0x32c>)
 8000af2:	4bc0      	ldr	r3, [pc, #768]	; (8000df4 <adc_init+0x32c>)
 8000af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6493      	str	r3, [r2, #72]	; 0x48

	/*Clear reset*/
	//	SCU_RESET->PRSET0 |= SCU_PRCLR0_VADCRS_MSK
	SCU_RESET->PRCLR0 |= SCU_PRCLR0_VADCRS_MSK;
 8000afc:	4abe      	ldr	r2, [pc, #760]	; (8000df8 <adc_init+0x330>)
 8000afe:	4bbe      	ldr	r3, [pc, #760]	; (8000df8 <adc_init+0x330>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6153      	str	r3, [r2, #20]

	/*Enable Module Clock - write 0 to enable*/
	VADC->CLC &= ~VADC_CLC_DISR_MSK;
 8000b08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f023 0301 	bic.w	r3, r3, #1
 8000b16:	6013      	str	r3, [r2, #0]

	/*Set Frequency to 36MHz by dividing the F_ADC/4 -> 144/4=36 --- NEED TO ALSO WRITE INTO ENABLE BIT*/
	//	VADC->GLOBCFG = (uint32_t)((VADC_GLOBCGF_DIVA_4_MSK << VADC_GLOBCGF_DIVA_POS) | (VADC_GLOBCFG_DIVWC));

	/*Configure Conversion resolution - 12BITS  --- GLOBAL*/
	VADC->GLOBICLASS[0] &= ~(VADC_GLOBICLASS0_CMS_12_MSK << VADC_GLOBICLASS0_CMS_POS);
 8000b18:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	/*Configure Sample and hold time - 5clocks --- GLOBAL*/
	VADC->GLOBICLASS[0] |= (VADC_GLOBICLASS0_STCS_5_MSK << VADC_GLOBICLASS0_STCS_POS);
 8000b2c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b38:	f043 0305 	orr.w	r3, r3, #5
 8000b3c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	/*Power Up VADC G0/G1/G2 for calibration*/
	/*Enable all Analog Converters*/
	VADC_G0->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000b40:	4aae      	ldr	r2, [pc, #696]	; (8000dfc <adc_init+0x334>)
 8000b42:	4bae      	ldr	r3, [pc, #696]	; (8000dfc <adc_init+0x334>)
 8000b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b48:	f043 0303 	orr.w	r3, r3, #3
 8000b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G1->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000b50:	4aab      	ldr	r2, [pc, #684]	; (8000e00 <adc_init+0x338>)
 8000b52:	4bab      	ldr	r3, [pc, #684]	; (8000e00 <adc_init+0x338>)
 8000b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b58:	f043 0303 	orr.w	r3, r3, #3
 8000b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G2->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000b60:	4aa8      	ldr	r2, [pc, #672]	; (8000e04 <adc_init+0x33c>)
 8000b62:	4ba8      	ldr	r3, [pc, #672]	; (8000e04 <adc_init+0x33c>)
 8000b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b68:	f043 0303 	orr.w	r3, r3, #3
 8000b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*StartUp Calibration*/
	VADC->GLOBCFG |= ENABLE << VADC_GLOBCFG_SUCAL_POS;
 8000b70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*Wait for calibration to finish*/
	while ((VADC_G0->ARBCFG & VADC_ARBCFG_CAL_MSK) && (VADC_G1->ARBCFG & VADC_ARBCFG_CAL_MSK) && (VADC_G2->ARBCFG & VADC_ARBCFG_CAL_MSK))
 8000b84:	bf00      	nop
 8000b86:	4b9d      	ldr	r3, [pc, #628]	; (8000dfc <adc_init+0x334>)
 8000b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00d      	beq.n	8000bb0 <adc_init+0xe8>
 8000b94:	4b9a      	ldr	r3, [pc, #616]	; (8000e00 <adc_init+0x338>)
 8000b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d006      	beq.n	8000bb0 <adc_init+0xe8>
 8000ba2:	4b98      	ldr	r3, [pc, #608]	; (8000e04 <adc_init+0x33c>)
 8000ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1ea      	bne.n	8000b86 <adc_init+0xbe>

	/*Configure the conversion kernel*/

	/*Slave SetUp - G1/G2*/
	/*Disable arbitration*/
	VADC_G1->ARBPR &= ~(DISABLE << VADC_ARBPR_ASEN0_POS);
 8000bb0:	4a93      	ldr	r2, [pc, #588]	; (8000e00 <adc_init+0x338>)
 8000bb2:	4b93      	ldr	r3, [pc, #588]	; (8000e00 <adc_init+0x338>)
 8000bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR &= ~(DISABLE << VADC_ARBPR_ASEN0_POS);
 8000bc0:	4a90      	ldr	r2, [pc, #576]	; (8000e04 <adc_init+0x33c>)
 8000bc2:	4b90      	ldr	r3, [pc, #576]	; (8000e04 <adc_init+0x33c>)
 8000bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bcc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Set maximum priority */
	VADC_G1->ARBPR |= VADC_ARBPR_PRIO0_MAX_MSK;
 8000bd0:	4a8b      	ldr	r2, [pc, #556]	; (8000e00 <adc_init+0x338>)
 8000bd2:	4b8b      	ldr	r3, [pc, #556]	; (8000e00 <adc_init+0x338>)
 8000bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bd8:	f043 0303 	orr.w	r3, r3, #3
 8000bdc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= VADC_ARBPR_PRIO0_MAX_MSK;
 8000be0:	4a88      	ldr	r2, [pc, #544]	; (8000e04 <adc_init+0x33c>)
 8000be2:	4b88      	ldr	r3, [pc, #544]	; (8000e04 <adc_init+0x33c>)
 8000be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000be8:	f043 0303 	orr.w	r3, r3, #3
 8000bec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	//	/*External Trigger Input Selection - Trigger on Input J (CCU80.SR3)*/
	//	VADC_G1->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTSEL_J_MSK << VADC_QCTRL0_XTSEL_POS);
	//	VADC_G2->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTSEL_J_MSK << VADC_QCTRL0_XTSEL_POS);

	/*Enable interruption of other running conversions*/
	VADC_G1->ARBPR |= VADC_ARBPR_CSM0_MSK;
 8000bf0:	4a83      	ldr	r2, [pc, #524]	; (8000e00 <adc_init+0x338>)
 8000bf2:	4b83      	ldr	r3, [pc, #524]	; (8000e00 <adc_init+0x338>)
 8000bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= VADC_ARBPR_CSM0_MSK;
 8000c00:	4a80      	ldr	r2, [pc, #512]	; (8000e04 <adc_init+0x33c>)
 8000c02:	4b80      	ldr	r3, [pc, #512]	; (8000e04 <adc_init+0x33c>)
 8000c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Enable arbitration*/
	VADC_G1->ARBPR |= (ENABLE << VADC_ARBPR_ASEN0_POS);
 8000c10:	4a7b      	ldr	r2, [pc, #492]	; (8000e00 <adc_init+0x338>)
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <adc_init+0x338>)
 8000c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= (ENABLE << VADC_ARBPR_ASEN0_POS);
 8000c20:	4a78      	ldr	r2, [pc, #480]	; (8000e04 <adc_init+0x33c>)
 8000c22:	4b78      	ldr	r3, [pc, #480]	; (8000e04 <adc_init+0x33c>)
 8000c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Master SetUp - G0*/
	/*Disable arbitration*/
	VADC_G0->ARBPR &= ~(DISABLE << VADC_ARBPR_ASEN0_POS);
 8000c30:	4a72      	ldr	r2, [pc, #456]	; (8000dfc <adc_init+0x334>)
 8000c32:	4b72      	ldr	r3, [pc, #456]	; (8000dfc <adc_init+0x334>)
 8000c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Set maximum priority */
	VADC_G0->ARBPR |= VADC_ARBPR_PRIO0_MAX_MSK;
 8000c40:	4a6e      	ldr	r2, [pc, #440]	; (8000dfc <adc_init+0x334>)
 8000c42:	4b6e      	ldr	r3, [pc, #440]	; (8000dfc <adc_init+0x334>)
 8000c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c48:	f043 0303 	orr.w	r3, r3, #3
 8000c4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Enable writing in TMEN - Timer mode for equidistant sampling enabled*/
	VADC_G0->QCTRL0 |= (ENABLE << VADC_QCTRL0_TMWC_POS) | (ENABLE << VADC_QCTRL0_TMEN_POS);
 8000c50:	4a6a      	ldr	r2, [pc, #424]	; (8000dfc <adc_init+0x334>)
 8000c52:	4b6a      	ldr	r3, [pc, #424]	; (8000dfc <adc_init+0x334>)
 8000c54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c58:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 8000c5c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	/*Enable writing in XTMODE and XTSEL */
	/*Trigger Operating Mode - Trigger event upon any edge*/
	VADC_G0->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTMODE_ANY_MSK << VADC_QCTRL0_XTMODE_POS);
 8000c60:	4a66      	ldr	r2, [pc, #408]	; (8000dfc <adc_init+0x334>)
 8000c62:	4b66      	ldr	r3, [pc, #408]	; (8000dfc <adc_init+0x334>)
 8000c64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c68:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c6c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	/*External Trigger Input Selection - Trigger on Input J (CCU80.SR3)*/
	VADC_G0->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTSEL_J_MSK << VADC_QCTRL0_XTSEL_POS);
 8000c70:	4a62      	ldr	r2, [pc, #392]	; (8000dfc <adc_init+0x334>)
 8000c72:	4b62      	ldr	r3, [pc, #392]	; (8000dfc <adc_init+0x334>)
 8000c74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c78:	f443 4309 	orr.w	r3, r3, #35072	; 0x8900
 8000c7c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	/*Configure the Queue Mode*/
	/*Enable Gate - Conversion requests are issued if a valid conversion request is pending in the queue 0 register or in the backup register*/
	VADC_G0->QMR0 |= VADC_QMR0_ENGT_MSK;
 8000c80:	4a5e      	ldr	r2, [pc, #376]	; (8000dfc <adc_init+0x334>)
 8000c82:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <adc_init+0x334>)
 8000c84:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

	/*Enable External Trigger - The selected edge at the selected trigger input signal REQTR generates the trigger event*/
	VADC_G0->QMR0 |= VADC_QMR0_ENTR_MSK;
 8000c90:	4a5a      	ldr	r2, [pc, #360]	; (8000dfc <adc_init+0x334>)
 8000c92:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <adc_init+0x334>)
 8000c94:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

	/*Enable arbitration*/
	VADC_G0->ARBPR |= (ENABLE << VADC_ARBPR_ASEN0_POS);
 8000ca0:	4a56      	ldr	r2, [pc, #344]	; (8000dfc <adc_init+0x334>)
 8000ca2:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <adc_init+0x334>)
 8000ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Channel configuration*/
	/*Set Channel 0 as priority channel*/
	VADC_G0->CHASS |= VADC_CHASS_ASSCH0_MSK;
 8000cb0:	4a52      	ldr	r2, [pc, #328]	; (8000dfc <adc_init+0x334>)
 8000cb2:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <adc_init+0x334>)
 8000cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	VADC_G1->CHASS |= VADC_CHASS_ASSCH0_MSK;
 8000cc0:	4a4f      	ldr	r2, [pc, #316]	; (8000e00 <adc_init+0x338>)
 8000cc2:	4b4f      	ldr	r3, [pc, #316]	; (8000e00 <adc_init+0x338>)
 8000cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	VADC_G2->CHASS |= VADC_CHASS_ASSCH0_MSK;
 8000cd0:	4a4c      	ldr	r2, [pc, #304]	; (8000e04 <adc_init+0x33c>)
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <adc_init+0x33c>)
 8000cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/*Convert G1CH3 into CH0 with ALIAS*/
	VADC_G1->ALIAS |= 3U << VADC_ALIAS_ALIAS0_POS;
 8000ce0:	4a47      	ldr	r2, [pc, #284]	; (8000e00 <adc_init+0x338>)
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <adc_init+0x338>)
 8000ce4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ce8:	f043 0303 	orr.w	r3, r3, #3
 8000cec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	/*Channel Control - Request a synchronized conversion of this channel (only taken into account for a master)*/
	VADC_G0->CHCTR[0] |= VADC_CHCTR_SYNC_MSK;
 8000cf0:	4a42      	ldr	r2, [pc, #264]	; (8000dfc <adc_init+0x334>)
 8000cf2:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <adc_init+0x334>)
 8000cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Use GLOBAL class0 configuration*/
	VADC_G0->CHCTR[0] |= VADC_CHCTR_ICSEL_GLOBAL_0_MSK;
 8000d00:	4a3e      	ldr	r2, [pc, #248]	; (8000dfc <adc_init+0x334>)
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <adc_init+0x334>)
 8000d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Register used to store results 0-15*/
	VADC_G0->CHCTR[0] |= (1U << VADC_G_CHCTR_RESREG_Pos);
 8000d10:	4a3a      	ldr	r2, [pc, #232]	; (8000dfc <adc_init+0x334>)
 8000d12:	4b3a      	ldr	r3, [pc, #232]	; (8000dfc <adc_init+0x334>)
 8000d14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	VADC_G1->CHCTR[0] |= (1U << VADC_G_CHCTR_RESREG_Pos);
 8000d20:	4a37      	ldr	r2, [pc, #220]	; (8000e00 <adc_init+0x338>)
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <adc_init+0x338>)
 8000d24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	VADC_G2->CHCTR[0] |= (1U << VADC_G_CHCTR_RESREG_Pos);
 8000d30:	4a34      	ldr	r2, [pc, #208]	; (8000e04 <adc_init+0x33c>)
 8000d32:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <adc_init+0x33c>)
 8000d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/*----Channel to be converted									*/
	/*Enable Source Interrupt - (x << VADC_G_QINR0_REQCHNR_Pos)		*/
	/*External Trigger - VADC_QINR0_EXTR_MSK						*/
	/*Automatic refill - VADC_QINR0_RF_MSK							*/
	/*End of conversion trigger - VADC_QINR0_ENSI_MSK				*/
	VADC_G0->QINR0 |= (0U << VADC_G_QINR0_REQCHNR_Pos) | VADC_QINR0_RF_MSK | VADC_QINR0_EXTR_MSK | VADC_QINR0_ENSI_MSK;
 8000d40:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <adc_init+0x334>)
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <adc_init+0x334>)
 8000d44:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000d48:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000d4c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
	;

	/*Configure master and slave channels*/
	/*Power down the VADC */
	VADC_G0->ARBCFG &= ~VADC_ARBCFG_ANONC_MSK;
 8000d50:	4a2a      	ldr	r2, [pc, #168]	; (8000dfc <adc_init+0x334>)
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <adc_init+0x334>)
 8000d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d58:	f023 0303 	bic.w	r3, r3, #3
 8000d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G1->ARBCFG &= ~VADC_ARBCFG_ANONC_MSK;
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <adc_init+0x338>)
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <adc_init+0x338>)
 8000d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d68:	f023 0303 	bic.w	r3, r3, #3
 8000d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G2->ARBCFG &= ~VADC_ARBCFG_ANONC_MSK;
 8000d70:	4a24      	ldr	r2, [pc, #144]	; (8000e04 <adc_init+0x33c>)
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <adc_init+0x33c>)
 8000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d78:	f023 0303 	bic.w	r3, r3, #3
 8000d7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*G0 – master; G1, G2 – slaves */
	VADC_G1->SYNCTR |= VADC_SYNCTR_STSEL_CL1_MSK;
 8000d80:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <adc_init+0x338>)
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <adc_init+0x338>)
 8000d84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	VADC_G2->SYNCTR |= VADC_SYNCTR_STSEL_CL1_MSK;
 8000d90:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <adc_init+0x33c>)
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <adc_init+0x33c>)
 8000d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	/*Evaluate Ready Input Rx - EVALR1*/
	VADC_G0->SYNCTR |= VADC_SYNCTR_EVALR1_MSK;
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <adc_init+0x334>)
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <adc_init+0x334>)
 8000da4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	VADC_G1->SYNCTR |= VADC_SYNCTR_EVALR1_MSK;
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <adc_init+0x338>)
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <adc_init+0x338>)
 8000db4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	VADC_G2->SYNCTR |= VADC_SYNCTR_EVALR1_MSK;
 8000dc0:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <adc_init+0x33c>)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <adc_init+0x33c>)
 8000dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
 8000dcc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	/*Power on the VADC*/
	VADC_G0->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <adc_init+0x334>)
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <adc_init+0x334>)
 8000dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dd8:	f043 0303 	orr.w	r3, r3, #3
 8000ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*Result Register - Service Request Generation Enable*/
	VADC_G0->RCR[1] = VADC_GxRCRy_SRGEN_MSK;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <adc_init+0x334>)
 8000de2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000de6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284

	/*Routes the corresponding event trigger from RESULT group to G0_CH2*/
	VADC_G0->REVNP0 |= (VADC_REVNP0_REV0NP_L2G0_MSK << 4U);
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <adc_init+0x334>)
 8000dec:	e00c      	b.n	8000e08 <adc_init+0x340>
 8000dee:	bf00      	nop
 8000df0:	48028e00 	.word	0x48028e00
 8000df4:	50004600 	.word	0x50004600
 8000df8:	50004400 	.word	0x50004400
 8000dfc:	40004400 	.word	0x40004400
 8000e00:	40004800 	.word	0x40004800
 8000e04:	40004c00 	.word	0x40004c00
 8000e08:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <adc_init+0x418>)
 8000e0a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0

	/*AutoScan for V_mot & V_log*/

	/*Pin Set up*/
	PORT15->IOCR4 |= (INPUT_PULL_UP_MSK << PORT15_IOCR4_PC6_Pos);	 // P15.6 - G2CH6				-Vmot
 8000e16:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <adc_init+0x41c>)
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <adc_init+0x41c>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e20:	6153      	str	r3, [r2, #20]
	PORT14->IOCR12 |= (INPUT_PULL_UP_MSK << PORT14_IOCR12_PC14_Pos); // P14.14- G1CH6				-Vlog
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <adc_init+0x420>)
 8000e24:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <adc_init+0x420>)
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e2c:	61d3      	str	r3, [r2, #28]

	/*Channel Select*/
	VADC_G1->ASSEL |= (ENABLE << VADC_ASSEL_CHSEL6_POS);
 8000e2e:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <adc_init+0x424>)
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <adc_init+0x424>)
 8000e32:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	VADC_G2->ASSEL |= (ENABLE << VADC_ASSEL_CHSEL6_POS);
 8000e3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <adc_init+0x428>)
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <adc_init+0x428>)
 8000e42:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

	/*Define load event*/
	VADC_G1->ASMR |= VADC_ASMR_SCAN_MSK | VADC_ASMR_ENGT_MSK | VADC_ASMR_LDEV_MSK;
 8000e4e:	4a27      	ldr	r2, [pc, #156]	; (8000eec <adc_init+0x424>)
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <adc_init+0x424>)
 8000e52:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e56:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	VADC_G2->ASMR |= VADC_ASMR_SCAN_MSK | VADC_ASMR_ENGT_MSK | VADC_ASMR_LDEV_MSK;
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <adc_init+0x428>)
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <adc_init+0x428>)
 8000e66:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e6a:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

	/*Conversion configuration to use global 0 settings*/
	VADC_G1->CHCTR[6] |= VADC_CHCTR_ICSEL_GLOBAL_0_MSK;
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <adc_init+0x424>)
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <adc_init+0x424>)
 8000e7a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
	VADC_G2->CHCTR[6] |= VADC_CHCTR_ICSEL_GLOBAL_0_MSK;
 8000e86:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <adc_init+0x428>)
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <adc_init+0x428>)
 8000e8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

	/*Enable Arbitration*/
	VADC_G1->ARBPR |= (ENABLE << VADC_ARBPR_ASEN1_POS);
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <adc_init+0x424>)
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <adc_init+0x424>)
 8000e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= (ENABLE << VADC_ARBPR_ASEN1_POS);
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <adc_init+0x428>)
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <adc_init+0x428>)
 8000eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Registers to store results 0-15*/
	VADC_G1->CHCTR[6] |= (14U << VADC_G_CHCTR_RESREG_Pos);
 8000eb6:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <adc_init+0x424>)
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <adc_init+0x424>)
 8000eba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000ebe:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000ec2:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
	VADC_G2->CHCTR[6] |= (14U << VADC_G_CHCTR_RESREG_Pos);
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <adc_init+0x428>)
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <adc_init+0x428>)
 8000eca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000ece:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000ed2:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
}
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	48028f00 	.word	0x48028f00
 8000ee8:	48028e00 	.word	0x48028e00
 8000eec:	40004800 	.word	0x40004800
 8000ef0:	40004c00 	.word	0x40004c00

08000ef4 <interrupt_vadc_init>:

void interrupt_vadc_init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	/*  Reset CCU80 */
	SCU_RESET->PRSET0 |= SCU_RESET_PRSET0_CCU80RS_Msk;
 8000ef8:	4a3d      	ldr	r2, [pc, #244]	; (8000ff0 <interrupt_vadc_init+0xfc>)
 8000efa:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <interrupt_vadc_init+0xfc>)
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f02:	6113      	str	r3, [r2, #16]

	/* Clear reset of CCU80 */
	SCU_RESET->PRCLR0 |= SCU_RESET_PRCLR0_CCU80RS_Msk;
 8000f04:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <interrupt_vadc_init+0xfc>)
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <interrupt_vadc_init+0xfc>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0e:	6153      	str	r3, [r2, #20]

	/* Enable CCU8 via clkset */
	SCU_CLK->CLKSET |= SCU_CLK_CLKSET_CCUCEN_Msk;
 8000f10:	4a38      	ldr	r2, [pc, #224]	; (8000ff4 <interrupt_vadc_init+0x100>)
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <interrupt_vadc_init+0x100>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6053      	str	r3, [r2, #4]

	/* Enable prescaler */
	CCU80->GIDLC |= CCU8_GIDLC_SPRB_Msk;
 8000f1c:	4a36      	ldr	r2, [pc, #216]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	60d3      	str	r3, [r2, #12]

	/*Set timer to center aligned mode */
	CCU80_CC83->TC |= (uint32_t)(CCU8_CC8_TC_TCM_Msk);
 8000f28:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f2a:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6153      	str	r3, [r2, #20]

	/*SHADOW:Define the period value of Compare Channel 1 */
	CCU80_CC83->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_Value << CCU8_CC8_PR_PR_Pos);
 8000f34:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f36:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 8000f3e:	6353      	str	r3, [r2, #52]	; 0x34

	/*SHADOW:Define the compare value of Compare Channel 1 */
	CCU80_CC83->CR1S |= (uint32_t)(CCU80_CC83_CR_Value << CCU8_CC8_CR1_CR1_Pos);
 8000f40:	4a2e      	ldr	r2, [pc, #184]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f46:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 8000f4a:	63d3      	str	r3, [r2, #60]	; 0x3c

	/*Request shadow transfer  */
	CCU80->GCSS |= (CCU8_GCSS_S3SE_Msk);
 8000f4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f56:	6113      	str	r3, [r2, #16]

	/*Enable CC80*/
	CCU80->GIDLC |= (CCU8_GIDLC_CS3I_Msk);
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <interrupt_vadc_init+0x104>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	60d3      	str	r3, [r2, #12]

	/*Clear the timer run bit(TRBC) and timer (TCC) */
	CCU80_CC83->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_Msk);
 8000f64:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6113      	str	r3, [r2, #16]
	CCU80_CC83->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_Msk);
 8000f70:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	6113      	str	r3, [r2, #16]

	/* Use IN_H for Event 0 on Rising edge
	 * Set start on EVENT 0 on Rising edge
	 */
	CCU80_CC83->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_Pos;
 8000f7c:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f043 0307 	orr.w	r3, r3, #7
 8000f86:	6013      	str	r3, [r2, #0]
	CCU80_CC83->INS |= ACTIVE_ON_RISING_EDGE << CCU8_CC8_INS_EV0EM_Pos;
 8000f88:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
	CCU80_CC83->CMC |= ENABLE << CCU8_CC8_CMC_STRTS_Pos;
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6053      	str	r3, [r2, #4]
	//	CCU80_CC83->INS  |=  15 << CCU8_CC8_INS_EV2IS_Pos;   		//which input is used -> input CC80.IN3P
	//	CCU80_CC83->INS  &=  ~CCU8_CC8_INS_EV2EM_Msk;	 			// clear event active on rising edge
	//	CCU80_CC83->INS  |=  ENABLE  << CCU8_CC8_INS_EV2EM_Pos;	 	// set event active on rising edge

	/*Enables the Channel 1 compare match while counting down interrupt*/
	CCU80_CC83->INTE |= ENABLE << CCU8_CC8_INTE_CMD1E_Pos;
 8000fa0:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

	/*The interrupt generated by compare match of channel 1 is forwarded to CC8ySR3*/
	CCU80_CC83->SRS |= CCU8_SRS_CM1SR_SR3_MSK << CCU8_SRS_CM1SR_POS;
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <interrupt_vadc_init+0x108>)
 8000fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000fb8:	f043 030c 	orr.w	r3, r3, #12
 8000fbc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

	/*Enable the VADC G0 Line 2 interrupt*/
	NVIC_ClearPendingIRQ(VADC0_G0_2_IRQn);
 8000fc0:	2014      	movs	r0, #20
 8000fc2:	f7ff fd39 	bl	8000a38 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(VADC0_G0_2_IRQn);
 8000fc6:	2014      	movs	r0, #20
 8000fc8:	f7ff fd1a 	bl	8000a00 <__NVIC_EnableIRQ>

	/*Set priority level for VADC to 1(second highest)*/
	NVIC_SetPriority(VADC0_G0_2_IRQn, 1U);
 8000fcc:	2014      	movs	r0, #20
 8000fce:	2101      	movs	r1, #1
 8000fd0:	f7ff fd50 	bl	8000a74 <__NVIC_SetPriority>
	//	NVIC_EnableIRQ(VADC0_G2_2_IRQn);
	//
	//	/*Set priority level for VADC to 1(second highest)*/
	//	NVIC_SetPriority(VADC0_G2_2_IRQn, 10U);

	SCU_GENERAL->CCUCON |= SCU_GENERAL_CCUCON_GSC80_Msk;
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <interrupt_vadc_init+0x10c>)
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <interrupt_vadc_init+0x10c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	64d3      	str	r3, [r2, #76]	; 0x4c
	SCU_GENERAL->CCUCON &= ~SCU_GENERAL_CCUCON_GSC80_Msk;
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <interrupt_vadc_init+0x10c>)
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <interrupt_vadc_init+0x10c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	50004400 	.word	0x50004400
 8000ff4:	50004600 	.word	0x50004600
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020400 	.word	0x40020400
 8001000:	50004000 	.word	0x50004000

08001004 <read_currents>:
	Read currents from VADC
	abc RES[1] | u_mot u_log RES[14]
	'a' is too noisy => computed form 'bc'
*/
void read_currents(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	ia = (VADC_G0->RES[1] & 0xFFFF) * 16 - offset_ia; // 16 bit value -- INVERTED
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <read_currents+0x94>)
 800100a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800100e:	b29b      	uxth	r3, r3
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <read_currents+0x98>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	b29b      	uxth	r3, r3
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <read_currents+0x9c>)
 8001022:	801a      	strh	r2, [r3, #0]
	ib = (VADC_G1->RES[1] & 0xFFFF) * 16 - offset_ib; // 16 bit value
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <read_currents+0xa0>)
 8001026:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800102a:	b29b      	uxth	r3, r3
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <read_currents+0xa4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	b29b      	uxth	r3, r3
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <read_currents+0xa8>)
 800103e:	801a      	strh	r2, [r3, #0]
	ic = (VADC_G2->RES[1] & 0xFFFF) * 16 - offset_ic; // 16 bit value
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <read_currents+0xac>)
 8001042:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001046:	b29b      	uxth	r3, r3
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <read_currents+0xb0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b29b      	uxth	r3, r3
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <read_currents+0xb4>)
 800105a:	801a      	strh	r2, [r3, #0]
	ia = (-ib - ic);								  // TOO NOISY
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <read_currents+0xa8>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	425b      	negs	r3, r3
 8001064:	b29a      	uxth	r2, r3
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <read_currents+0xb4>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	b29b      	uxth	r3, r3
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <read_currents+0x9c>)
 8001074:	801a      	strh	r2, [r3, #0]

	u_mot_dig = (VADC_G2->RES[14] & 0xFFFF); // 12 bit value
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <read_currents+0xac>)
 8001078:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800107c:	b29b      	uxth	r3, r3
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <read_currents+0xb8>)
 8001080:	6013      	str	r3, [r2, #0]
	u_log_dig = (VADC_G1->RES[14] & 0xFFFF); // 12 bit value
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <read_currents+0xa0>)
 8001084:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8001088:	b29b      	uxth	r3, r3
 800108a:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <read_currents+0xbc>)
 800108c:	6013      	str	r3, [r2, #0]

	// ia_32 = ia;
	// ib_32 = ib;
	// ic_32 = ic;
}
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40004400 	.word	0x40004400
 800109c:	1fff06c0 	.word	0x1fff06c0
 80010a0:	1fff06a4 	.word	0x1fff06a4
 80010a4:	40004800 	.word	0x40004800
 80010a8:	1fff0690 	.word	0x1fff0690
 80010ac:	1fff069c 	.word	0x1fff069c
 80010b0:	40004c00 	.word	0x40004c00
 80010b4:	1fff0698 	.word	0x1fff0698
 80010b8:	1fff06c4 	.word	0x1fff06c4
 80010bc:	1fff06b8 	.word	0x1fff06b8
 80010c0:	1fff06a0 	.word	0x1fff06a0

080010c4 <current_offset>:
/**
 * Compute current offset for every phase
 */
void current_offset(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	prot_status = OFF; //Turn Current protection OFF
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <current_offset+0xbc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
	offset_ia = 0;
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <current_offset+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
	offset_ib = 0;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <current_offset+0xc4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
	offset_ic = 0;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <current_offset+0xc8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 16; ++i)
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	e026      	b.n	8001136 <current_offset+0x72>
	{
		delay_t(3);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f002 fc13 	bl	8003914 <delay_t>
		offset_ia += ((VADC_G0->RES[1] & 0xFFFF) * 16);
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <current_offset+0xcc>)
 80010f0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4a22      	ldr	r2, [pc, #136]	; (8001184 <current_offset+0xc0>)
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	461a      	mov	r2, r3
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <current_offset+0xc0>)
 8001102:	601a      	str	r2, [r3, #0]
		offset_ib += ((VADC_G1->RES[1] & 0xFFFF) * 16);
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <current_offset+0xd0>)
 8001106:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800110a:	b29b      	uxth	r3, r3
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <current_offset+0xc4>)
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	4413      	add	r3, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <current_offset+0xc4>)
 8001118:	601a      	str	r2, [r3, #0]
		offset_ic += ((VADC_G2->RES[1] & 0xFFFF) * 16);
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <current_offset+0xd4>)
 800111c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001120:	b29b      	uxth	r3, r3
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <current_offset+0xc8>)
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	4413      	add	r3, r2
 800112a:	461a      	mov	r2, r3
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <current_offset+0xc8>)
 800112e:	601a      	str	r2, [r3, #0]
	prot_status = OFF; //Turn Current protection OFF
	offset_ia = 0;
	offset_ib = 0;
	offset_ic = 0;

	for (int i = 0; i < 16; ++i)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3301      	adds	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	ddd5      	ble.n	80010e8 <current_offset+0x24>
		offset_ia += ((VADC_G0->RES[1] & 0xFFFF) * 16);
		offset_ib += ((VADC_G1->RES[1] & 0xFFFF) * 16);
		offset_ic += ((VADC_G2->RES[1] & 0xFFFF) * 16);
	}

	offset_ia = offset_ia / 16;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <current_offset+0xc0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	da00      	bge.n	8001146 <current_offset+0x82>
 8001144:	330f      	adds	r3, #15
 8001146:	111b      	asrs	r3, r3, #4
 8001148:	461a      	mov	r2, r3
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <current_offset+0xc0>)
 800114c:	601a      	str	r2, [r3, #0]
	offset_ib = offset_ib / 16;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <current_offset+0xc4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	da00      	bge.n	8001158 <current_offset+0x94>
 8001156:	330f      	adds	r3, #15
 8001158:	111b      	asrs	r3, r3, #4
 800115a:	461a      	mov	r2, r3
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <current_offset+0xc4>)
 800115e:	601a      	str	r2, [r3, #0]
	offset_ic = offset_ic / 16;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <current_offset+0xc8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	da00      	bge.n	800116a <current_offset+0xa6>
 8001168:	330f      	adds	r3, #15
 800116a:	111b      	asrs	r3, r3, #4
 800116c:	461a      	mov	r2, r3
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <current_offset+0xc8>)
 8001170:	601a      	str	r2, [r3, #0]
	prot_status = ON; //Turn Current protection ON
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <current_offset+0xbc>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
}
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	1ffe8808 	.word	0x1ffe8808
 8001184:	1fff06c0 	.word	0x1fff06c0
 8001188:	1fff0690 	.word	0x1fff0690
 800118c:	1fff0698 	.word	0x1fff0698
 8001190:	40004400 	.word	0x40004400
 8001194:	40004800 	.word	0x40004800
 8001198:	40004c00 	.word	0x40004c00
 800119c:	00000000 	.word	0x00000000

080011a0 <compute_u_mot>:
 * For Micrium display
 * Compute 12bit value of u_mot into volts
 * u_mot_max = 100V
 */
void compute_u_mot(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	u_mot = u_mot_dig * 0.0245;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <compute_u_mot+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fd97 	bl	8004cdc <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	a308      	add	r3, pc, #32	; (adr r3, 80011d8 <compute_u_mot+0x38>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f003 fdf4 	bl	8004da8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f004 f800 	bl	80051cc <__aeabi_d2f>
 80011cc:	4602      	mov	r2, r0
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <compute_u_mot+0x44>)
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	f3af 8000 	nop.w
 80011d8:	2b020c4a 	.word	0x2b020c4a
 80011dc:	3f991687 	.word	0x3f991687
 80011e0:	1fff06b8 	.word	0x1fff06b8
 80011e4:	1fff06b4 	.word	0x1fff06b4

080011e8 <compute_u_log>:
 * For Micrium display
 * Compute the 12bit value of u_log into volts
 * u_log_max = 50V
 */
void compute_u_log(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	u_log = u_log_dig * 0.01327;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <compute_u_log+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fd73 	bl	8004cdc <__aeabi_i2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	a308      	add	r3, pc, #32	; (adr r3, 8001220 <compute_u_log+0x38>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f003 fdd0 	bl	8004da8 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f003 ffdc 	bl	80051cc <__aeabi_d2f>
 8001214:	4602      	mov	r2, r0
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <compute_u_log+0x44>)
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	bd80      	pop	{r7, pc}
 800121c:	f3af 8000 	nop.w
 8001220:	4024b33e 	.word	0x4024b33e
 8001224:	3f8b2d4d 	.word	0x3f8b2d4d
 8001228:	1fff06a0 	.word	0x1fff06a0
 800122c:	1fff0694 	.word	0x1fff0694

08001230 <compute_currents>:
/*
 * For Micrium read
 * I_pos = 40A | I_neg = -40A
 */
void compute_currents(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	ia_a = (float_t)(ia + 32768) / 65535.0 * 80.0 - 40.0;
 8001234:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <compute_currents+0x198>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	b21b      	sxth	r3, r3
 800123a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	ee17 0a90 	vmov	r0, s15
 800124a:	f003 fd59 	bl	8004d00 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	a35a      	add	r3, pc, #360	; (adr r3, 80013c0 <compute_currents+0x190>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f003 fece 	bl	8004ffc <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <compute_currents+0x19c>)
 800126e:	f003 fd9b 	bl	8004da8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <compute_currents+0x1a0>)
 8001280:	f003 fbde 	bl	8004a40 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f003 ff9e 	bl	80051cc <__aeabi_d2f>
 8001290:	4602      	mov	r2, r0
 8001292:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <compute_currents+0x1a4>)
 8001294:	601a      	str	r2, [r3, #0]
	ib_a = (float_t)(ib + 32768) / 65535.0 * 80.0 - 40.0;
 8001296:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <compute_currents+0x1a8>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b21b      	sxth	r3, r3
 800129c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	ee17 0a90 	vmov	r0, s15
 80012ac:	f003 fd28 	bl	8004d00 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	a341      	add	r3, pc, #260	; (adr r3, 80013c0 <compute_currents+0x190>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f003 fe9d 	bl	8004ffc <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <compute_currents+0x19c>)
 80012d0:	f003 fd6a 	bl	8004da8 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <compute_currents+0x1a0>)
 80012e2:	f003 fbad 	bl	8004a40 <__aeabi_dsub>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f003 ff6d 	bl	80051cc <__aeabi_d2f>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <compute_currents+0x1ac>)
 80012f6:	601a      	str	r2, [r3, #0]
	ic_a = (float_t)(ic + 32768) / 65535.0 * 80.0 - 40.0;
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <compute_currents+0x1b0>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130a:	ee17 0a90 	vmov	r0, s15
 800130e:	f003 fcf7 	bl	8004d00 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	a329      	add	r3, pc, #164	; (adr r3, 80013c0 <compute_currents+0x190>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f003 fe6c 	bl	8004ffc <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <compute_currents+0x19c>)
 8001332:	f003 fd39 	bl	8004da8 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <compute_currents+0x1a0>)
 8001344:	f003 fb7c 	bl	8004a40 <__aeabi_dsub>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f003 ff3c 	bl	80051cc <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <compute_currents+0x1b4>)
 8001358:	601a      	str	r2, [r3, #0]
	iq_a = (float_t)(i_q + 32768) / 65535.0 * 80.0 - 40.0;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <compute_currents+0x1b8>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80013ec <compute_currents+0x1bc>
 8001364:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001368:	ee17 0a90 	vmov	r0, s15
 800136c:	f003 fcc8 	bl	8004d00 <__aeabi_f2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	a311      	add	r3, pc, #68	; (adr r3, 80013c0 <compute_currents+0x190>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f003 fe3d 	bl	8004ffc <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <compute_currents+0x19c>)
 8001390:	f003 fd0a 	bl	8004da8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <compute_currents+0x1a0>)
 80013a2:	f003 fb4d 	bl	8004a40 <__aeabi_dsub>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f003 ff0d 	bl	80051cc <__aeabi_d2f>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <compute_currents+0x1c0>)
 80013b6:	601a      	str	r2, [r3, #0]
}
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40efffe0 	.word	0x40efffe0
 80013c8:	1fff06a4 	.word	0x1fff06a4
 80013cc:	40540000 	.word	0x40540000
 80013d0:	40440000 	.word	0x40440000
 80013d4:	1fff06b0 	.word	0x1fff06b0
 80013d8:	1fff069c 	.word	0x1fff069c
 80013dc:	1fff06bc 	.word	0x1fff06bc
 80013e0:	1fff06c4 	.word	0x1fff06c4
 80013e4:	1fff06ac 	.word	0x1fff06ac
 80013e8:	1fff07c8 	.word	0x1fff07c8
 80013ec:	47000000 	.word	0x47000000
 80013f0:	1fff06a8 	.word	0x1fff06a8
 80013f4:	f3af 8000 	nop.w

080013f8 <pwm_init>:

/*
	Initialize PWM unit
*/
void pwm_init(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	//	CCU80->GIDLC |= CCU8_GIDLC_SPRB_MSK;

	/*
	 * Counting Mode - center aligned(0->max->0)
	 */
	CCU80_CC80->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 80013fc:	4a80      	ldr	r2, [pc, #512]	; (8001600 <pwm_init+0x208>)
 80013fe:	4b80      	ldr	r3, [pc, #512]	; (8001600 <pwm_init+0x208>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6153      	str	r3, [r2, #20]
	CCU80_CC81->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 8001408:	4a7e      	ldr	r2, [pc, #504]	; (8001604 <pwm_init+0x20c>)
 800140a:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <pwm_init+0x20c>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6153      	str	r3, [r2, #20]
	CCU80_CC82->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 8001414:	4a7c      	ldr	r2, [pc, #496]	; (8001608 <pwm_init+0x210>)
 8001416:	4b7c      	ldr	r3, [pc, #496]	; (8001608 <pwm_init+0x210>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6153      	str	r3, [r2, #20]

	/*
	 * Period&Compare channel 1 values configuration
	 */
	CCU80_CC80->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);	// Shadow value to timer period PR
 8001420:	4a77      	ldr	r2, [pc, #476]	; (8001600 <pwm_init+0x208>)
 8001422:	4b77      	ldr	r3, [pc, #476]	; (8001600 <pwm_init+0x208>)
 8001424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001426:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 800142a:	6353      	str	r3, [r2, #52]	; 0x34
	CCU80_CC80->CR1S |= (uint32_t)(CCU8_CC8_CR1_CR1_VALUE); // Shadow value to compare channel 1
 800142c:	4a74      	ldr	r2, [pc, #464]	; (8001600 <pwm_init+0x208>)
 800142e:	4b74      	ldr	r3, [pc, #464]	; (8001600 <pwm_init+0x208>)
 8001430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001432:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 8001436:	63d3      	str	r3, [r2, #60]	; 0x3c

	CCU80_CC81->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);
 8001438:	4a72      	ldr	r2, [pc, #456]	; (8001604 <pwm_init+0x20c>)
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <pwm_init+0x20c>)
 800143c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143e:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 8001442:	6353      	str	r3, [r2, #52]	; 0x34
	CCU80_CC81->CR1S |= (uint32_t)(CCU8_CC8_CR1_CR1_VALUE);
 8001444:	4a6f      	ldr	r2, [pc, #444]	; (8001604 <pwm_init+0x20c>)
 8001446:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <pwm_init+0x20c>)
 8001448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144a:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 800144e:	63d3      	str	r3, [r2, #60]	; 0x3c

	CCU80_CC82->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);
 8001450:	4a6d      	ldr	r2, [pc, #436]	; (8001608 <pwm_init+0x210>)
 8001452:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <pwm_init+0x210>)
 8001454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001456:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 800145a:	6353      	str	r3, [r2, #52]	; 0x34
	CCU80_CC82->CR1S |= (uint32_t)(CCU8_CC8_CR1_CR1_VALUE);
 800145c:	4a6a      	ldr	r2, [pc, #424]	; (8001608 <pwm_init+0x210>)
 800145e:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <pwm_init+0x210>)
 8001460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001462:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 8001466:	63d3      	str	r3, [r2, #60]	; 0x3c

	/*
	 *  Shadow transfer enable for CCU80_80/81/82    Request shadow transfer
	 */
	CCU80->GCSS |= (CCU8_GCSS_S0SE_MSK | CCU8_GCSS_S1SE_MSK | CCU8_GCSS_S2SE_MSK);
 8001468:	4a68      	ldr	r2, [pc, #416]	; (800160c <pwm_init+0x214>)
 800146a:	4b68      	ldr	r3, [pc, #416]	; (800160c <pwm_init+0x214>)
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6113      	str	r3, [r2, #16]
	 * Configure timers
	 */
	/*
	 * Remove from IDLE 80-82
	 */
	CCU80->GIDLC |= (CCU8_GIDLC_CS0I_MSK | CCU8_GIDLC_CS1I_MSK | CCU8_GIDLC_CS2I_MSK);
 8001478:	4a64      	ldr	r2, [pc, #400]	; (800160c <pwm_init+0x214>)
 800147a:	4b64      	ldr	r3, [pc, #400]	; (800160c <pwm_init+0x214>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f043 0307 	orr.w	r3, r3, #7
 8001482:	60d3      	str	r3, [r2, #12]

	/*   Clear the timer run bit(TRBC) and timer (TCC) */
	CCU80_CC80->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 8001484:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <pwm_init+0x208>)
 8001486:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <pwm_init+0x208>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6113      	str	r3, [r2, #16]
	CCU80_CC80->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 8001490:	4a5b      	ldr	r2, [pc, #364]	; (8001600 <pwm_init+0x208>)
 8001492:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <pwm_init+0x208>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	6113      	str	r3, [r2, #16]

	CCU80_CC81->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 800149c:	4a59      	ldr	r2, [pc, #356]	; (8001604 <pwm_init+0x20c>)
 800149e:	4b59      	ldr	r3, [pc, #356]	; (8001604 <pwm_init+0x20c>)
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6113      	str	r3, [r2, #16]
	CCU80_CC81->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 80014a8:	4a56      	ldr	r2, [pc, #344]	; (8001604 <pwm_init+0x20c>)
 80014aa:	4b56      	ldr	r3, [pc, #344]	; (8001604 <pwm_init+0x20c>)
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	6113      	str	r3, [r2, #16]

	CCU80_CC82->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 80014b4:	4a54      	ldr	r2, [pc, #336]	; (8001608 <pwm_init+0x210>)
 80014b6:	4b54      	ldr	r3, [pc, #336]	; (8001608 <pwm_init+0x210>)
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6113      	str	r3, [r2, #16]
	CCU80_CC82->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 80014c0:	4a51      	ldr	r2, [pc, #324]	; (8001608 <pwm_init+0x210>)
 80014c2:	4b51      	ldr	r3, [pc, #324]	; (8001608 <pwm_init+0x210>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	6113      	str	r3, [r2, #16]

	/*
	 * Deadband config - enable for channel 1 and ST1
	 */
	CCU80_CC80->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 80014cc:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <pwm_init+0x208>)
 80014ce:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <pwm_init+0x208>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f043 0305 	orr.w	r3, r3, #5
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
	CCU80_CC81->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 80014d8:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <pwm_init+0x20c>)
 80014da:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <pwm_init+0x20c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f043 0305 	orr.w	r3, r3, #5
 80014e2:	64d3      	str	r3, [r2, #76]	; 0x4c
	CCU80_CC82->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 80014e4:	4a48      	ldr	r2, [pc, #288]	; (8001608 <pwm_init+0x210>)
 80014e6:	4b48      	ldr	r3, [pc, #288]	; (8001608 <pwm_init+0x210>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f043 0305 	orr.w	r3, r3, #5
 80014ee:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*
	 * Deadband value rising config - rising 50ns
	 */
	CCU80_CC80->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 80014f0:	4a43      	ldr	r2, [pc, #268]	; (8001600 <pwm_init+0x208>)
 80014f2:	4b43      	ldr	r3, [pc, #268]	; (8001600 <pwm_init+0x208>)
 80014f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f6:	f043 030e 	orr.w	r3, r3, #14
 80014fa:	6513      	str	r3, [r2, #80]	; 0x50
	CCU80_CC81->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 80014fc:	4a41      	ldr	r2, [pc, #260]	; (8001604 <pwm_init+0x20c>)
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <pwm_init+0x20c>)
 8001500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001502:	f043 030e 	orr.w	r3, r3, #14
 8001506:	6513      	str	r3, [r2, #80]	; 0x50
	CCU80_CC82->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 8001508:	4a3f      	ldr	r2, [pc, #252]	; (8001608 <pwm_init+0x210>)
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <pwm_init+0x210>)
 800150c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800150e:	f043 030e 	orr.w	r3, r3, #14
 8001512:	6513      	str	r3, [r2, #80]	; 0x50
	 * Input selector & matrix
	 * Use IN_H for Event 0 on Rising edge
	 * Set start on EVENT 0 on Rising edge
	 * Set stop on Event 1 on Falling edge
	 */
	CCU80_CC80->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS; // Set Event 0(system control) as rising edge
 8001514:	4a3a      	ldr	r2, [pc, #232]	; (8001600 <pwm_init+0x208>)
 8001516:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <pwm_init+0x208>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f043 0307 	orr.w	r3, r3, #7
 800151e:	6013      	str	r3, [r2, #0]
	CCU80_CC80->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 8001520:	4a37      	ldr	r2, [pc, #220]	; (8001600 <pwm_init+0x208>)
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <pwm_init+0x208>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
	CCU80_CC80->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS; // Set Event 1(system control) as falling edge
 800152c:	4a34      	ldr	r2, [pc, #208]	; (8001600 <pwm_init+0x208>)
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <pwm_init+0x208>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001536:	6013      	str	r3, [r2, #0]
	CCU80_CC80->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 8001538:	4a31      	ldr	r2, [pc, #196]	; (8001600 <pwm_init+0x208>)
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <pwm_init+0x208>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001542:	6013      	str	r3, [r2, #0]

	CCU80_CC81->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS;
 8001544:	4a2f      	ldr	r2, [pc, #188]	; (8001604 <pwm_init+0x20c>)
 8001546:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <pwm_init+0x20c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f043 0307 	orr.w	r3, r3, #7
 800154e:	6013      	str	r3, [r2, #0]
	CCU80_CC81->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 8001550:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <pwm_init+0x20c>)
 8001552:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <pwm_init+0x20c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
	CCU80_CC81->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS;
 800155c:	4a29      	ldr	r2, [pc, #164]	; (8001604 <pwm_init+0x20c>)
 800155e:	4b29      	ldr	r3, [pc, #164]	; (8001604 <pwm_init+0x20c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001566:	6013      	str	r3, [r2, #0]
	CCU80_CC81->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 8001568:	4a26      	ldr	r2, [pc, #152]	; (8001604 <pwm_init+0x20c>)
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <pwm_init+0x20c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001572:	6013      	str	r3, [r2, #0]

	CCU80_CC82->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS;
 8001574:	4a24      	ldr	r2, [pc, #144]	; (8001608 <pwm_init+0x210>)
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <pwm_init+0x210>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f043 0307 	orr.w	r3, r3, #7
 800157e:	6013      	str	r3, [r2, #0]
	CCU80_CC82->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 8001580:	4a21      	ldr	r2, [pc, #132]	; (8001608 <pwm_init+0x210>)
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <pwm_init+0x210>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158a:	6013      	str	r3, [r2, #0]
	CCU80_CC82->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS;
 800158c:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <pwm_init+0x210>)
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <pwm_init+0x210>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001596:	6013      	str	r3, [r2, #0]
	CCU80_CC82->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 8001598:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <pwm_init+0x210>)
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <pwm_init+0x210>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015a2:	6013      	str	r3, [r2, #0]

	CCU80_CC80->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS; // Set Event 0 for start
 80015a4:	4a16      	ldr	r2, [pc, #88]	; (8001600 <pwm_init+0x208>)
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <pwm_init+0x208>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6053      	str	r3, [r2, #4]
	CCU80_CC81->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <pwm_init+0x20c>)
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <pwm_init+0x20c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6053      	str	r3, [r2, #4]
	CCU80_CC82->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS;
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <pwm_init+0x210>)
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <pwm_init+0x210>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6053      	str	r3, [r2, #4]

	CCU80_CC80->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS; // Set Event 1 for end
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <pwm_init+0x208>)
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <pwm_init+0x208>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6053      	str	r3, [r2, #4]
	CCU80_CC81->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS;
 80015d4:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <pwm_init+0x20c>)
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <pwm_init+0x20c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6053      	str	r3, [r2, #4]
	CCU80_CC82->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS;
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <pwm_init+0x210>)
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <pwm_init+0x210>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6053      	str	r3, [r2, #4]

	/*
	 * Enable CCUCON Module
	 */
	SCU_GENERAL->CCUCON |= SCU_GENERAL_CCUCON_GSC80_MSK;
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <pwm_init+0x218>)
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <pwm_init+0x218>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	64d3      	str	r3, [r2, #76]	; 0x4c
	//	SCU_GENERAL->CCUCON &= ~SCU_GENERAL_CCUCON_GSC80_MSK; 		//Reset back to 0 if it needs to be re-enabled later
}
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40020100 	.word	0x40020100
 8001604:	40020200 	.word	0x40020200
 8001608:	40020300 	.word	0x40020300
 800160c:	40020000 	.word	0x40020000
 8001610:	50004000 	.word	0x50004000

08001614 <pwm_update>:
/*
 * Update compare values for PWM
 * Input type: int16_t
 */
void pwm_update(int16_t uaref, int16_t ubref, int16_t ucref)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	80fb      	strh	r3, [r7, #6]
 800161e:	460b      	mov	r3, r1
 8001620:	80bb      	strh	r3, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	807b      	strh	r3, [r7, #2]
	/*
	 * Keeps the voltage values between max/min saturation
	 * Resulted PWM shouldn't be 0 or MAX
	 */
	if (uaref > sat_pwm)
 8001626:	4b50      	ldr	r3, [pc, #320]	; (8001768 <pwm_update+0x154>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800162e:	b21b      	sxth	r3, r3
 8001630:	429a      	cmp	r2, r3
 8001632:	dd03      	ble.n	800163c <pwm_update+0x28>
	{
		uaref = sat_pwm;
 8001634:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <pwm_update+0x154>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	80fb      	strh	r3, [r7, #6]
 800163a:	e00d      	b.n	8001658 <pwm_update+0x44>
	}
	else if (uaref < -sat_pwm)
 800163c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001640:	4b49      	ldr	r3, [pc, #292]	; (8001768 <pwm_update+0x154>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	b21b      	sxth	r3, r3
 8001646:	425b      	negs	r3, r3
 8001648:	429a      	cmp	r2, r3
 800164a:	da05      	bge.n	8001658 <pwm_update+0x44>
	{
		uaref = -sat_pwm;
 800164c:	4b46      	ldr	r3, [pc, #280]	; (8001768 <pwm_update+0x154>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	425b      	negs	r3, r3
 8001654:	b29b      	uxth	r3, r3
 8001656:	80fb      	strh	r3, [r7, #6]
	}

	if (ubref > sat_pwm)
 8001658:	4b43      	ldr	r3, [pc, #268]	; (8001768 <pwm_update+0x154>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001660:	b21b      	sxth	r3, r3
 8001662:	429a      	cmp	r2, r3
 8001664:	dd03      	ble.n	800166e <pwm_update+0x5a>
	{
		ubref = sat_pwm;
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <pwm_update+0x154>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	80bb      	strh	r3, [r7, #4]
 800166c:	e00d      	b.n	800168a <pwm_update+0x76>
	}
	else if (ubref < -sat_pwm)
 800166e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <pwm_update+0x154>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b21b      	sxth	r3, r3
 8001678:	425b      	negs	r3, r3
 800167a:	429a      	cmp	r2, r3
 800167c:	da05      	bge.n	800168a <pwm_update+0x76>
	{
		ubref = -sat_pwm;
 800167e:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <pwm_update+0x154>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	425b      	negs	r3, r3
 8001686:	b29b      	uxth	r3, r3
 8001688:	80bb      	strh	r3, [r7, #4]
	}

	if (ucref > sat_pwm)
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <pwm_update+0x154>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001692:	b21b      	sxth	r3, r3
 8001694:	429a      	cmp	r2, r3
 8001696:	dd03      	ble.n	80016a0 <pwm_update+0x8c>
	{
		ucref = sat_pwm;
 8001698:	4b33      	ldr	r3, [pc, #204]	; (8001768 <pwm_update+0x154>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	807b      	strh	r3, [r7, #2]
 800169e:	e00d      	b.n	80016bc <pwm_update+0xa8>
	}
	else if (ucref < -sat_pwm)
 80016a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <pwm_update+0x154>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	425b      	negs	r3, r3
 80016ac:	429a      	cmp	r2, r3
 80016ae:	da05      	bge.n	80016bc <pwm_update+0xa8>
	{
		ucref = -sat_pwm;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <pwm_update+0x154>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	425b      	negs	r3, r3
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	807b      	strh	r3, [r7, #2]
	}

	// New compare value
	CCU80_CC80->CR1S = (pwm_value / 2 - pwm_value * uaref / 65535);
 80016bc:	482b      	ldr	r0, [pc, #172]	; (800176c <pwm_update+0x158>)
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <pwm_update+0x15c>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	0fda      	lsrs	r2, r3, #31
 80016c6:	4413      	add	r3, r2
 80016c8:	105b      	asrs	r3, r3, #1
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <pwm_update+0x15c>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4925      	ldr	r1, [pc, #148]	; (8001774 <pwm_update+0x160>)
 80016de:	fb81 e103 	smull	lr, r1, r1, r3
 80016e2:	4419      	add	r1, r3
 80016e4:	13c9      	asrs	r1, r1, #15
 80016e6:	17db      	asrs	r3, r3, #31
 80016e8:	1acb      	subs	r3, r1, r3
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	63c3      	str	r3, [r0, #60]	; 0x3c
	CCU80_CC81->CR1S = (pwm_value / 2 - pwm_value * ubref / 65535);
 80016ee:	4822      	ldr	r0, [pc, #136]	; (8001778 <pwm_update+0x164>)
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <pwm_update+0x15c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	0fda      	lsrs	r2, r3, #31
 80016f8:	4413      	add	r3, r2
 80016fa:	105b      	asrs	r3, r3, #1
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b21a      	sxth	r2, r3
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <pwm_update+0x15c>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	b21b      	sxth	r3, r3
 8001706:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	4919      	ldr	r1, [pc, #100]	; (8001774 <pwm_update+0x160>)
 8001710:	fb81 e103 	smull	lr, r1, r1, r3
 8001714:	4419      	add	r1, r3
 8001716:	13c9      	asrs	r1, r1, #15
 8001718:	17db      	asrs	r3, r3, #31
 800171a:	1acb      	subs	r3, r1, r3
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	63c3      	str	r3, [r0, #60]	; 0x3c
	CCU80_CC82->CR1S = (pwm_value / 2 - pwm_value * ucref / 65535);
 8001720:	4816      	ldr	r0, [pc, #88]	; (800177c <pwm_update+0x168>)
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <pwm_update+0x15c>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b21b      	sxth	r3, r3
 8001728:	0fda      	lsrs	r2, r3, #31
 800172a:	4413      	add	r3, r2
 800172c:	105b      	asrs	r3, r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <pwm_update+0x15c>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b21b      	sxth	r3, r3
 8001738:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <pwm_update+0x160>)
 8001742:	fb81 e103 	smull	lr, r1, r1, r3
 8001746:	4419      	add	r1, r3
 8001748:	13c9      	asrs	r1, r1, #15
 800174a:	17db      	asrs	r3, r3, #31
 800174c:	1acb      	subs	r3, r1, r3
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	63c3      	str	r3, [r0, #60]	; 0x3c

	// Shadow transfer enabled for new compare value
	CCU80->GCSS |= (CCU8_GCSS_S0SE_MSK | CCU8_GCSS_S1SE_MSK | CCU8_GCSS_S2SE_MSK);
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <pwm_update+0x16c>)
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <pwm_update+0x16c>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6113      	str	r3, [r2, #16]
}
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	1ffe880c 	.word	0x1ffe880c
 800176c:	40020100 	.word	0x40020100
 8001770:	1ffe880a 	.word	0x1ffe880a
 8001774:	80008001 	.word	0x80008001
 8001778:	40020200 	.word	0x40020200
 800177c:	40020300 	.word	0x40020300
 8001780:	40020000 	.word	0x40020000

08001784 <motion_on>:
/*
	Enable all PWM pins
*/
void motion_on(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	/*
	 * PWM pins configuration CCU80 - as alter function 3 - CCU80 OUTxy
	 */
	PORT5->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT5_PC11_POS); // A_HIGH 	- P5.11 - OUT00
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <motion_on+0x54>)
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <motion_on+0x54>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f043 4318 	orr.w	r3, r3, #2550136832	; 0x98000000
 8001792:	6193      	str	r3, [r2, #24]
	PORT5->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT5_PC8_POS);	 // A_LOW 	- P5.8  - OUT01
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <motion_on+0x54>)
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <motion_on+0x54>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 800179e:	6193      	str	r3, [r2, #24]

	PORT0->IOCR4 |= (GPIO_OUTPUT_ALTER_3 << PORT0_IOCR4_PC4_Pos); // B_HIGH 	- P5.10 - OUT10 P0.4 alternative
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <motion_on+0x58>)
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <motion_on+0x58>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80017aa:	6153      	str	r3, [r2, #20]
	PORT2->IOCR12 |= (GPIO_OUTPUT_ALTER_3 << PORT2_PC15_POS);	  // B_LOW 	- P2.15 - OUT11
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <motion_on+0x5c>)
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <motion_on+0x5c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f043 4318 	orr.w	r3, r3, #2550136832	; 0x98000000
 80017b6:	61d3      	str	r3, [r2, #28]

	PORT5->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT5_PC9_POS);	  // C_HIGH 	- P5.9	- OUT20
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <motion_on+0x54>)
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <motion_on+0x54>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f443 4318 	orr.w	r3, r3, #38912	; 0x9800
 80017c2:	6193      	str	r3, [r2, #24]
	PORT2->IOCR12 |= (GPIO_OUTPUT_ALTER_3 << PORT2_PC14_POS); // C_LOW 	- P2.14	- OUT21
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <motion_on+0x5c>)
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <motion_on+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f443 0318 	orr.w	r3, r3, #9961472	; 0x980000
 80017ce:	61d3      	str	r3, [r2, #28]
}
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	48028500 	.word	0x48028500
 80017dc:	48028000 	.word	0x48028000
 80017e0:	48028200 	.word	0x48028200

080017e4 <motion_off>:

/*
	Disable all PWM pins
*/
void motion_off(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	/*
	 * PWM pins configuration CCU80 - OFF
	 */
	PORT5->IOCR8 &= ~(DISABLE_OUTPUT << PORT5_PC11_POS); // A_HIGH 	- P5.11 - OUT00
 80017e8:	4a13      	ldr	r2, [pc, #76]	; (8001838 <motion_off+0x54>)
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <motion_off+0x54>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80017f2:	6193      	str	r3, [r2, #24]
	PORT5->IOCR8 &= ~(DISABLE_OUTPUT << PORT5_PC8_POS);	 // A_LOW 	- P5.8  - OUT01
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <motion_off+0x54>)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <motion_off+0x54>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017fe:	6193      	str	r3, [r2, #24]

	PORT0->IOCR4 &= ~(DISABLE_OUTPUT << PORT0_IOCR4_PC4_Pos); // B_HIGH 	- P5.10 - OUT10 P0.4 alternative
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <motion_off+0x58>)
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <motion_off+0x58>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800180a:	6153      	str	r3, [r2, #20]
	PORT2->IOCR12 &= ~(DISABLE_OUTPUT << PORT2_PC15_POS);	  // B_LOW 	- P2.15 - OUT11
 800180c:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <motion_off+0x5c>)
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <motion_off+0x5c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001816:	61d3      	str	r3, [r2, #28]

	PORT5->IOCR8 &= ~(DISABLE_OUTPUT << PORT5_PC9_POS);	  // C_HIGH 	- P5.9	- OUT20
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <motion_off+0x54>)
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <motion_off+0x54>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8001822:	6193      	str	r3, [r2, #24]
	PORT2->IOCR12 &= ~(DISABLE_OUTPUT << PORT2_PC14_POS); // C_LOW 	- P2.14	- OUT21
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <motion_off+0x5c>)
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <motion_off+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 800182e:	61d3      	str	r3, [r2, #28]
}
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	48028500 	.word	0x48028500
 800183c:	48028000 	.word	0x48028000
 8001840:	48028200 	.word	0x48028200

08001844 <VADC0_G0_2_IRQHandler>:
//  float_t sin_increment_2_pi, cos_increment_2_pi;
//  float_t sin_plus_cos;
/********************************************************************/

void VADC0_G0_2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
	interrupt_counter_slow_loop++;
 800184a:	4b48      	ldr	r3, [pc, #288]	; (800196c <VADC0_G0_2_IRQHandler+0x128>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b46      	ldr	r3, [pc, #280]	; (800196c <VADC0_G0_2_IRQHandler+0x128>)
 8001854:	801a      	strh	r2, [r3, #0]
	interrupt_counter_fast_loop++;
 8001856:	4b46      	ldr	r3, [pc, #280]	; (8001970 <VADC0_G0_2_IRQHandler+0x12c>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <VADC0_G0_2_IRQHandler+0x12c>)
 8001860:	801a      	strh	r2, [r3, #0]
	interrupt_counter_timer++;
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <VADC0_G0_2_IRQHandler+0x130>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a42      	ldr	r2, [pc, #264]	; (8001974 <VADC0_G0_2_IRQHandler+0x130>)
 800186a:	6013      	str	r3, [r2, #0]
	/*
	 * Fast compute "loop"
	 * Every 100us compute speed,mechanical/electrical position, field, dq_abc transformation
	 */
	if (TIME_100_us == interrupt_counter_fast_loop)
 800186c:	4b40      	ldr	r3, [pc, #256]	; (8001970 <VADC0_G0_2_IRQHandler+0x12c>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d14f      	bne.n	8001914 <VADC0_G0_2_IRQHandler+0xd0>
	{

		// Read and compute into [SI] all currents
		read_currents();
 8001874:	f7ff fbc6 	bl	8001004 <read_currents>
		compute_currents();
 8001878:	f7ff fcda 	bl	8001230 <compute_currents>
		compute_u_mot();
 800187c:	f7ff fc90 	bl	80011a0 <compute_u_mot>
		compute_u_log();
 8001880:	f7ff fcb2 	bl	80011e8 <compute_u_log>

		// Compute all data for motor movement in Operation Enable
		if (motion_config)
 8001884:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <VADC0_G0_2_IRQHandler+0x134>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d03a      	beq.n	8001902 <VADC0_G0_2_IRQHandler+0xbe>
		{
			compute_fast_speed();
 800188c:	f002 f986 	bl	8003b9c <compute_fast_speed>
			compute_fast_mechanical_position();
 8001890:	f002 f9a4 	bl	8003bdc <compute_fast_mechanical_position>
			compute_fast_electrical_position();
 8001894:	f002 f9b4 	bl	8003c00 <compute_fast_electrical_position>
			compute_fast_field();
 8001898:	f002 f9da 	bl	8003c50 <compute_fast_field>
			abc_dq();
 800189c:	f002 f850 	bl	8003940 <abc_dq>

			// Add Fast Loop regulators
			if (loop_control & I_REF_LOOP_MSK)
 80018a0:	4b36      	ldr	r3, [pc, #216]	; (800197c <VADC0_G0_2_IRQHandler+0x138>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <VADC0_G0_2_IRQHandler+0x70>
			{
				pi_regulator_i_d();
 80018ac:	f000 f996 	bl	8001bdc <pi_regulator_i_d>
				pi_regulator_i_q();
 80018b0:	f000 f8e6 	bl	8001a80 <pi_regulator_i_q>
			}

			dq_abc();
 80018b4:	f002 f8a8 	bl	8003a08 <dq_abc>
			pwm_update(u_a_ref, u_b_ref, u_c_ref);
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <VADC0_G0_2_IRQHandler+0x13c>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	b299      	uxth	r1, r3
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <VADC0_G0_2_IRQHandler+0x140>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80018d8:	88bb      	ldrh	r3, [r7, #4]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <VADC0_G0_2_IRQHandler+0x144>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	b209      	sxth	r1, r1
 80018f0:	b212      	sxth	r2, r2
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	f7ff fe8b 	bl	8001614 <pwm_update>

			ProbeScope_Sampling(); // For Micrium Osciloscope
 80018fe:	f000 fea5 	bl	800264c <ProbeScope_Sampling>
		}

		if (prot_status)
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <VADC0_G0_2_IRQHandler+0x148>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <VADC0_G0_2_IRQHandler+0xca>
		{
			current_protection();
 800190a:	f7ff f81b 	bl	8000944 <current_protection>
		}

		interrupt_counter_fast_loop = 0;
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <VADC0_G0_2_IRQHandler+0x12c>)
 8001910:	2200      	movs	r2, #0
 8001912:	801a      	strh	r2, [r3, #0]
	}
	/*
	 * Slow compute loop
	 * Every 1ms compute speed
	 */
	if (TIME_1_ms == interrupt_counter_slow_loop)
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <VADC0_G0_2_IRQHandler+0x128>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	2b14      	cmp	r3, #20
 800191a:	d123      	bne.n	8001964 <VADC0_G0_2_IRQHandler+0x120>
	{
		if (motion_config)
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <VADC0_G0_2_IRQHandler+0x134>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01c      	beq.n	800195e <VADC0_G0_2_IRQHandler+0x11a>
		{
			compute_speed(); // Compute motor speed and position
 8001924:	f000 f88c 	bl	8001a40 <compute_speed>

			// Reference Generator function and timer  TO DO - CHECK IF STILL WORKS
			if (STATUS_0_DISABLED != ref_gen_status)
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <VADC0_G0_2_IRQHandler+0x14c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <VADC0_G0_2_IRQHandler+0xfa>
			{
				interrupt_counter_ref_gen++;
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <VADC0_G0_2_IRQHandler+0x150>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <VADC0_G0_2_IRQHandler+0x150>)
 8001938:	6013      	str	r3, [r2, #0]
				reference_generator();
 800193a:	f001 fdd1 	bl	80034e0 <reference_generator>
			}

			// Slow loop regulators
			if (loop_control & POS_REF_LOOP_MSK)
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <VADC0_G0_2_IRQHandler+0x138>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <VADC0_G0_2_IRQHandler+0x10a>
			{
				pid_regulator_pos();
 800194a:	f000 faa7 	bl	8001e9c <pid_regulator_pos>
			}
			if (loop_control & SPD_REF_LOOP_MSK)
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <VADC0_G0_2_IRQHandler+0x138>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <VADC0_G0_2_IRQHandler+0x11a>
			{
				pi_regulator_speed();
 800195a:	f000 f9ed 	bl	8001d38 <pi_regulator_speed>
			}
		}

		interrupt_counter_slow_loop = 0;
 800195e:	4b03      	ldr	r3, [pc, #12]	; (800196c <VADC0_G0_2_IRQHandler+0x128>)
 8001960:	2200      	movs	r2, #0
 8001962:	801a      	strh	r2, [r3, #0]
	}
}
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	1ffe8830 	.word	0x1ffe8830
 8001970:	1ffe8832 	.word	0x1ffe8832
 8001974:	1ffe8834 	.word	0x1ffe8834
 8001978:	1fff0671 	.word	0x1fff0671
 800197c:	1fff0670 	.word	0x1fff0670
 8001980:	1fff07d0 	.word	0x1fff07d0
 8001984:	1fff07c0 	.word	0x1fff07c0
 8001988:	1fff07e0 	.word	0x1fff07e0
 800198c:	1ffe8808 	.word	0x1ffe8808
 8001990:	1fff0640 	.word	0x1fff0640
 8001994:	1fff063c 	.word	0x1fff063c

08001998 <CCU81_0_IRQHandler>:

/*
 * Interrupt with low priority every 0.2ms
 */
void CCU81_0_IRQHandler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	// interrupt_counter_timer++;
}
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <infinite_loop>:
#include "state_machine.h"
#include "current_protection.h"
#include "pi_regulator.h"

void infinite_loop(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	state_machine();
 80019a8:	f001 fe5a 	bl	8003660 <state_machine>
}
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop

080019b0 <main>:

int main(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	interrupt_vadc_init();	// Interrupts generated by the VADC - sets up the CCU80 - CC83
 80019b4:	f7ff fa9e 	bl	8000ef4 <interrupt_vadc_init>
	pwm_init();				// PWM & clock initialization - CC80/81/82
 80019b8:	f7ff fd1e 	bl	80013f8 <pwm_init>
	encoder_init();			// Encoder initialization
 80019bc:	f7fe feba 	bl	8000734 <encoder_init>
	adc_init();				// VADC initialization
 80019c0:	f7ff f882 	bl	8000ac8 <adc_init>
	ProbeScope_Init(10000); // Initialize Oscilloscope for Micrium - imported
 80019c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80019c8:	f000 fd90 	bl	80024ec <ProbeScope_Init>
 80019cc:	b662      	cpsie	i
	//	encoder_interrupt_init();	// Interrupt generated by Encoder
	//	init_io();					// (For testing I/O stuff) - not used anymore
	__enable_irq();			// built in interrupt enable function
	pi_init();
 80019ce:	f000 fcf9 	bl	80023c4 <pi_init>


	while (1U)
	{
		/* Infinite loop */
		infinite_loop();
 80019d2:	f7ff ffe7 	bl	80019a4 <infinite_loop>
	}
 80019d6:	e7fc      	b.n	80019d2 <main+0x22>

080019d8 <init_position>:
 * B High -> wait -> A High 0 -> wait
 * Reset: Theta | Position | Timers_old
 * Disable PWM output
 */
void init_position(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	motion_on();			// Enable PWM pins
 80019dc:	f7ff fed2 	bl	8001784 <motion_on>
	pwm_update(0, 4000, 0); // Apply voltage on B Phase
 80019e0:	2000      	movs	r0, #0
 80019e2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80019e6:	2200      	movs	r2, #0
 80019e8:	f7ff fe14 	bl	8001614 <pwm_update>
	delay_t(SECOND_1 / 2);	// Wait 0.5s
 80019ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80019f0:	f001 ff90 	bl	8003914 <delay_t>

	pwm_update(4000, 0, 0); // Apply voltage on A Phase
 80019f4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2200      	movs	r2, #0
 80019fc:	f7ff fe0a 	bl	8001614 <pwm_update>
	delay_t(SECOND_1 / 2);	// Wait 0.5s
 8001a00:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a04:	f001 ff86 	bl	8003914 <delay_t>
//	motion_off();			// Disable PWM pin			NEED TO CHECK if it still works

	theta_fast = 0;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <init_position+0x54>)
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
	mechanical_position_fast = 0;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <init_position+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
	timer_value_old_fast = CCU40_CC40->TIMER;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <init_position+0x5c>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <init_position+0x60>)
 8001a1e:	801a      	strh	r2, [r3, #0]
	timer_value_old_slow = CCU40_CC40->TIMER;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <init_position+0x5c>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <init_position+0x64>)
 8001a28:	801a      	strh	r2, [r3, #0]
}
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	1fff067c 	.word	0x1fff067c
 8001a30:	1fff0674 	.word	0x1fff0674
 8001a34:	4000c100 	.word	0x4000c100
 8001a38:	1fff068a 	.word	0x1fff068a
 8001a3c:	1ffe883e 	.word	0x1ffe883e

08001a40 <compute_speed>:
/*
 * Compute current speed
 * Slow loop
 */
void compute_speed(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
	timer_value_slow = CCU40_CC40->TIMER;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <compute_speed+0x30>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <compute_speed+0x34>)
 8001a4c:	801a      	strh	r2, [r3, #0]
	motor_spd = timer_value_slow - timer_value_old_slow;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <compute_speed+0x34>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <compute_speed+0x38>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <compute_speed+0x3c>)
 8001a5c:	6013      	str	r3, [r2, #0]
	timer_value_old_slow = timer_value_slow;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <compute_speed+0x34>)
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <compute_speed+0x38>)
 8001a64:	801a      	strh	r2, [r3, #0]
}
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	4000c100 	.word	0x4000c100
 8001a74:	1ffe883c 	.word	0x1ffe883c
 8001a78:	1ffe883e 	.word	0x1ffe883e
 8001a7c:	1ffe8838 	.word	0x1ffe8838

08001a80 <pi_regulator_i_q>:
float_t err_old_pos;

float_t i_q_ref = 0, i_d_ref = 0, pos_ref = 0, spd_ref = 0, u_q_ref = 0, u_d_ref;

void pi_regulator_i_q(void) // i_q -> u_q_ref
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
	current_q.error = i_q_ref - i_q;
 8001a84:	4b51      	ldr	r3, [pc, #324]	; (8001bcc <pi_regulator_i_q+0x14c>)
 8001a86:	ed93 7a00 	vldr	s14, [r3]
 8001a8a:	4b51      	ldr	r3, [pc, #324]	; (8001bd0 <pi_regulator_i_q+0x150>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a94:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001a96:	edc3 7a03 	vstr	s15, [r3, #12]

	// Proportional part computation
	current_q.p_part = current_q.error * current_q.kp;
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001a9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001aa0:	4b4c      	ldr	r3, [pc, #304]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001aac:	edc3 7a04 	vstr	s15, [r3, #16]
	if (current_q.p_part > current_q.sat_out)
 8001ab0:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001ab2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001ab8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001abc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	dd04      	ble.n	8001ad0 <pi_regulator_i_q+0x50>
	{
		current_q.p_part = current_q.sat_out;
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a42      	ldr	r2, [pc, #264]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001acc:	6113      	str	r3, [r2, #16]
 8001ace:	e014      	b.n	8001afa <pi_regulator_i_q+0x7a>
	}
	else if (current_q.p_part < -current_q.sat_out)
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001ad2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001ad8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001adc:	eef1 7a67 	vneg.f32	s15, s15
 8001ae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	d507      	bpl.n	8001afa <pi_regulator_i_q+0x7a>
	{
		current_q.p_part = -current_q.sat_out;
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001aec:	edd3 7a07 	vldr	s15, [r3, #28]
 8001af0:	eef1 7a67 	vneg.f32	s15, s15
 8001af4:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001af6:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Integral part computation
	current_q.i_part += current_q.error * current_q.ki;
 8001afa:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001afc:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b02:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b06:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b16:	edc3 7a05 	vstr	s15, [r3, #20]
	if (current_q.i_part > current_q.sat_i_part)
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b1c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b22:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	dd04      	ble.n	8001b3a <pi_regulator_i_q+0xba>
	{
		current_q.i_part = current_q.sat_i_part;
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a27      	ldr	r2, [pc, #156]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b36:	6153      	str	r3, [r2, #20]
 8001b38:	e014      	b.n	8001b64 <pi_regulator_i_q+0xe4>
	}
	else if (current_q.i_part < -current_q.sat_i_part)
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b3c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b42:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b46:	eef1 7a67 	vneg.f32	s15, s15
 8001b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	d507      	bpl.n	8001b64 <pi_regulator_i_q+0xe4>
	{
		current_q.i_part = -current_q.sat_i_part;
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b56:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b5a:	eef1 7a67 	vneg.f32	s15, s15
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b60:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	// Output
	u_q_ref = current_q.p_part + current_q.i_part;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b66:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b6c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <pi_regulator_i_q+0x158>)
 8001b76:	edc3 7a00 	vstr	s15, [r3]

	if (u_q_ref > current_q.sat_out)
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b7c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <pi_regulator_i_q+0x158>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	d504      	bpl.n	8001b9a <pi_regulator_i_q+0x11a>
	{
		u_q_ref = current_q.sat_out;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <pi_regulator_i_q+0x158>)
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e014      	b.n	8001bc4 <pi_regulator_i_q+0x144>
	}
	else if (u_q_ref < -current_q.sat_out)
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001b9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ba0:	eeb1 7a67 	vneg.f32	s14, s15
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <pi_regulator_i_q+0x158>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	dd07      	ble.n	8001bc4 <pi_regulator_i_q+0x144>
	{
		u_q_ref = -current_q.sat_out;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <pi_regulator_i_q+0x154>)
 8001bb6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bba:	eef1 7a67 	vneg.f32	s15, s15
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <pi_regulator_i_q+0x158>)
 8001bc0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	1ffe8840 	.word	0x1ffe8840
 8001bd0:	1fff07c8 	.word	0x1fff07c8
 8001bd4:	1fff0760 	.word	0x1fff0760
 8001bd8:	1ffe8850 	.word	0x1ffe8850

08001bdc <pi_regulator_i_d>:

void pi_regulator_i_d(void) // i_d -> u_d_ref
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	current_d.error = i_d_ref - i_d;
 8001be0:	4b51      	ldr	r3, [pc, #324]	; (8001d28 <pi_regulator_i_d+0x14c>)
 8001be2:	ed93 7a00 	vldr	s14, [r3]
 8001be6:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <pi_regulator_i_d+0x150>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf0:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001bf2:	edc3 7a03 	vstr	s15, [r3, #12]

	// Proportional part computation
	current_d.p_part = current_d.error * current_d.kp;
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001bf8:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bfc:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c06:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c08:	edc3 7a04 	vstr	s15, [r3, #16]
	if (current_d.p_part > current_d.sat_out)
 8001c0c:	4b48      	ldr	r3, [pc, #288]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c0e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c12:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c14:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c20:	dd04      	ble.n	8001c2c <pi_regulator_i_d+0x50>
	{
		current_d.p_part = current_d.sat_out;
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a42      	ldr	r2, [pc, #264]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c28:	6113      	str	r3, [r2, #16]
 8001c2a:	e014      	b.n	8001c56 <pi_regulator_i_d+0x7a>
	}
	else if (current_d.p_part < -current_d.sat_out)
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c2e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c34:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c38:	eef1 7a67 	vneg.f32	s15, s15
 8001c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	d507      	bpl.n	8001c56 <pi_regulator_i_d+0x7a>
	{
		current_d.p_part = -current_d.sat_out;
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c48:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c4c:	eef1 7a67 	vneg.f32	s15, s15
 8001c50:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c52:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Integral part computation
	current_d.i_part += current_d.error * current_d.ki;
 8001c56:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c58:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c5c:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c5e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c64:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c72:	edc3 7a05 	vstr	s15, [r3, #20]
	if (current_d.i_part > current_d.sat_i_part)
 8001c76:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c78:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c7e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	dd04      	ble.n	8001c96 <pi_regulator_i_d+0xba>
	{
		current_d.i_part = current_d.sat_i_part;
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c92:	6153      	str	r3, [r2, #20]
 8001c94:	e014      	b.n	8001cc0 <pi_regulator_i_d+0xe4>
	}
	else if (current_d.i_part < -current_d.sat_i_part)
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c98:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001c9e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ca2:	eef1 7a67 	vneg.f32	s15, s15
 8001ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	d507      	bpl.n	8001cc0 <pi_regulator_i_d+0xe4>
	{
		current_d.i_part = -current_d.sat_i_part;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001cb2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cb6:	eef1 7a67 	vneg.f32	s15, s15
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001cbc:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	// Output
	u_d_ref = current_d.p_part + current_d.i_part;
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001cc2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001cc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <pi_regulator_i_d+0x158>)
 8001cd2:	edc3 7a00 	vstr	s15, [r3]

	if (u_d_ref > current_d.sat_out)
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001cd8:	ed93 7a07 	vldr	s14, [r3, #28]
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <pi_regulator_i_d+0x158>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	d504      	bpl.n	8001cf6 <pi_regulator_i_d+0x11a>
	{
		u_d_ref = current_d.sat_out;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <pi_regulator_i_d+0x158>)
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e014      	b.n	8001d20 <pi_regulator_i_d+0x144>
	}
	else if (u_d_ref < -current_d.sat_out)
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001cf8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001cfc:	eeb1 7a67 	vneg.f32	s14, s15
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <pi_regulator_i_d+0x158>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	dd07      	ble.n	8001d20 <pi_regulator_i_d+0x144>
	{
		u_d_ref = -current_d.sat_out;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <pi_regulator_i_d+0x154>)
 8001d12:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d16:	eef1 7a67 	vneg.f32	s15, s15
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <pi_regulator_i_d+0x158>)
 8001d1c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	1ffe8844 	.word	0x1ffe8844
 8001d2c:	1fff07cc 	.word	0x1fff07cc
 8001d30:	1fff0714 	.word	0x1fff0714
 8001d34:	1fff0738 	.word	0x1fff0738

08001d38 <pi_regulator_speed>:

void pi_regulator_speed(void) // motor_spd -> i_q_ref
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
	speed.error = spd_ref - motor_spd;
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <pi_regulator_speed+0x154>)
 8001d3e:	ed93 7a00 	vldr	s14, [r3]
 8001d42:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <pi_regulator_speed+0x158>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d52:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d54:	edc3 7a03 	vstr	s15, [r3, #12]

	// Proportional part computation
	speed.p_part = speed.error * speed.kp;
 8001d58:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d5a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d5e:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d68:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d6a:	edc3 7a04 	vstr	s15, [r3, #16]
	if (speed.p_part > speed.sat_out)
 8001d6e:	4b49      	ldr	r3, [pc, #292]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d70:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d74:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d76:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	dd04      	ble.n	8001d8e <pi_regulator_speed+0x56>
	{
		speed.p_part = speed.sat_out;
 8001d84:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	4a42      	ldr	r2, [pc, #264]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d8a:	6113      	str	r3, [r2, #16]
 8001d8c:	e014      	b.n	8001db8 <pi_regulator_speed+0x80>
	}
	else if (speed.p_part < -speed.sat_out)
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d90:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d94:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001d96:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d9a:	eef1 7a67 	vneg.f32	s15, s15
 8001d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d507      	bpl.n	8001db8 <pi_regulator_speed+0x80>
	{
		speed.p_part = -speed.sat_out;
 8001da8:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001daa:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dae:	eef1 7a67 	vneg.f32	s15, s15
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001db4:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Integral part computation
	speed.i_part += speed.error * speed.ki;
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001dba:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001dc0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001dc4:	4b33      	ldr	r3, [pc, #204]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001dc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001dd4:	edc3 7a05 	vstr	s15, [r3, #20]
	if (speed.i_part > speed.sat_i_part)
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001dda:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001de0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	dd04      	ble.n	8001df8 <pi_regulator_speed+0xc0>
	{
		speed.i_part = speed.sat_i_part;
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a28      	ldr	r2, [pc, #160]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001df4:	6153      	str	r3, [r2, #20]
 8001df6:	e014      	b.n	8001e22 <pi_regulator_speed+0xea>
	}
	else if (speed.i_part < -speed.sat_i_part)
 8001df8:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001dfa:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001e00:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e04:	eef1 7a67 	vneg.f32	s15, s15
 8001e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	d507      	bpl.n	8001e22 <pi_regulator_speed+0xea>
	{
		speed.i_part = -speed.sat_i_part;
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001e14:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e18:	eef1 7a67 	vneg.f32	s15, s15
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001e1e:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	// Output
	i_q_ref = speed.p_part + speed.i_part;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001e24:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001e2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <pi_regulator_speed+0x160>)
 8001e34:	edc3 7a00 	vstr	s15, [r3]

	if (i_q_ref > speed.sat_out)
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001e3a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <pi_regulator_speed+0x160>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	d504      	bpl.n	8001e58 <pi_regulator_speed+0x120>
	{
		i_q_ref = speed.sat_out;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <pi_regulator_speed+0x160>)
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e014      	b.n	8001e82 <pi_regulator_speed+0x14a>
	}
	else if (i_q_ref < -speed.sat_out)
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001e5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e5e:	eeb1 7a67 	vneg.f32	s14, s15
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <pi_regulator_speed+0x160>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	dd07      	ble.n	8001e82 <pi_regulator_speed+0x14a>
	{
		i_q_ref = -speed.sat_out;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <pi_regulator_speed+0x15c>)
 8001e74:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e78:	eef1 7a67 	vneg.f32	s15, s15
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <pi_regulator_speed+0x160>)
 8001e7e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	1ffe884c 	.word	0x1ffe884c
 8001e90:	1ffe8838 	.word	0x1ffe8838
 8001e94:	1fff073c 	.word	0x1fff073c
 8001e98:	1ffe8840 	.word	0x1ffe8840

08001e9c <pid_regulator_pos>:

void pid_regulator_pos(void) // mechanical_position_fast -> spd_ref
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
	int i = !(LOOP_SPD_ENABLE);
 8001ea2:	4bba      	ldr	r3, [pc, #744]	; (800218c <pid_regulator_pos+0x2f0>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	607b      	str	r3, [r7, #4]

	position[i].error = pos_ref - mechanical_position_fast;
 8001eb6:	4bb6      	ldr	r3, [pc, #728]	; (8002190 <pid_regulator_pos+0x2f4>)
 8001eb8:	ed93 7a00 	vldr	s14, [r3]
 8001ebc:	4bb5      	ldr	r3, [pc, #724]	; (8002194 <pid_regulator_pos+0x2f8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ecc:	49b2      	ldr	r1, [pc, #712]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	3308      	adds	r3, #8
 8001edc:	edc3 7a01 	vstr	s15, [r3, #4]

	// Proportional part computation
	position[i].p_part = position[i].error * position[i].kp;
 8001ee0:	49ad      	ldr	r1, [pc, #692]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	3308      	adds	r3, #8
 8001ef0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ef4:	49a8      	ldr	r1, [pc, #672]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	49a3      	ldr	r1, [pc, #652]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3310      	adds	r3, #16
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
	if (position[i].p_part > position[i].sat_out)
 8001f1e:	499e      	ldr	r1, [pc, #632]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3310      	adds	r3, #16
 8001f2e:	ed93 7a00 	vldr	s14, [r3]
 8001f32:	4999      	ldr	r1, [pc, #612]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	3318      	adds	r3, #24
 8001f42:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	dd12      	ble.n	8001f76 <pid_regulator_pos+0xda>
	{
		position[i].p_part = position[i].sat_out;
 8001f50:	4991      	ldr	r1, [pc, #580]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3318      	adds	r3, #24
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	488d      	ldr	r0, [pc, #564]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4403      	add	r3, r0
 8001f70:	3310      	adds	r3, #16
 8001f72:	6019      	str	r1, [r3, #0]
 8001f74:	e030      	b.n	8001fd8 <pid_regulator_pos+0x13c>
	}
	else if (position[i].p_part < -position[i].sat_out)
 8001f76:	4988      	ldr	r1, [pc, #544]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3310      	adds	r3, #16
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	4983      	ldr	r1, [pc, #524]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	3318      	adds	r3, #24
 8001f9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f9e:	eef1 7a67 	vneg.f32	s15, s15
 8001fa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001faa:	d515      	bpl.n	8001fd8 <pid_regulator_pos+0x13c>
	{
		position[i].p_part = -position[i].sat_out;
 8001fac:	497a      	ldr	r1, [pc, #488]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3318      	adds	r3, #24
 8001fbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fc0:	eef1 7a67 	vneg.f32	s15, s15
 8001fc4:	4974      	ldr	r1, [pc, #464]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3310      	adds	r3, #16
 8001fd4:	edc3 7a00 	vstr	s15, [r3]
	}

	// Integral part computation
	position[i].i_part += position[i].error * position[i].ki;
 8001fd8:	496f      	ldr	r1, [pc, #444]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3310      	adds	r3, #16
 8001fe8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fec:	496a      	ldr	r1, [pc, #424]	; (8002198 <pid_regulator_pos+0x2fc>)
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	edd3 6a01 	vldr	s13, [r3, #4]
 8002000:	4965      	ldr	r1, [pc, #404]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	495f      	ldr	r1, [pc, #380]	; (8002198 <pid_regulator_pos+0x2fc>)
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3310      	adds	r3, #16
 800202a:	edc3 7a01 	vstr	s15, [r3, #4]
	if (position[i].i_part > position[i].sat_i_part)
 800202e:	495a      	ldr	r1, [pc, #360]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	3310      	adds	r3, #16
 800203e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002042:	4955      	ldr	r1, [pc, #340]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	3320      	adds	r3, #32
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	dd12      	ble.n	8002086 <pid_regulator_pos+0x1ea>
	{
		position[i].i_part = position[i].sat_i_part;
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3320      	adds	r3, #32
 8002070:	6819      	ldr	r1, [r3, #0]
 8002072:	4849      	ldr	r0, [pc, #292]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4403      	add	r3, r0
 8002080:	3310      	adds	r3, #16
 8002082:	6059      	str	r1, [r3, #4]
 8002084:	e030      	b.n	80020e8 <pid_regulator_pos+0x24c>
	}
	else if (position[i].i_part < -position[i].sat_i_part)
 8002086:	4944      	ldr	r1, [pc, #272]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3310      	adds	r3, #16
 8002096:	ed93 7a01 	vldr	s14, [r3, #4]
 800209a:	493f      	ldr	r1, [pc, #252]	; (8002198 <pid_regulator_pos+0x2fc>)
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3320      	adds	r3, #32
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	eef1 7a67 	vneg.f32	s15, s15
 80020b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	d515      	bpl.n	80020e8 <pid_regulator_pos+0x24c>
	{
		position[i].i_part = -position[i].sat_i_part;
 80020bc:	4936      	ldr	r1, [pc, #216]	; (8002198 <pid_regulator_pos+0x2fc>)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3320      	adds	r3, #32
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	eef1 7a67 	vneg.f32	s15, s15
 80020d4:	4930      	ldr	r1, [pc, #192]	; (8002198 <pid_regulator_pos+0x2fc>)
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3310      	adds	r3, #16
 80020e4:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	// Derived part computation	
	position[i].d_part = (position[i].error - err_old_pos) * position[i].kd;
 80020e8:	492b      	ldr	r1, [pc, #172]	; (8002198 <pid_regulator_pos+0x2fc>)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	3308      	adds	r3, #8
 80020f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <pid_regulator_pos+0x300>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002106:	4924      	ldr	r1, [pc, #144]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3308      	adds	r3, #8
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211e:	491e      	ldr	r1, [pc, #120]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3318      	adds	r3, #24
 800212e:	edc3 7a00 	vstr	s15, [r3]
	if (position[i].d_part > position[i].sat_out)
 8002132:	4919      	ldr	r1, [pc, #100]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	3318      	adds	r3, #24
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	4914      	ldr	r1, [pc, #80]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3318      	adds	r3, #24
 8002156:	edd3 7a01 	vldr	s15, [r3, #4]
 800215a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	dd1d      	ble.n	80021a0 <pid_regulator_pos+0x304>
	{
		position[i].d_part = position[i].sat_out;
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3318      	adds	r3, #24
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	4808      	ldr	r0, [pc, #32]	; (8002198 <pid_regulator_pos+0x2fc>)
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4403      	add	r3, r0
 8002184:	3318      	adds	r3, #24
 8002186:	6019      	str	r1, [r3, #0]
 8002188:	e03b      	b.n	8002202 <pid_regulator_pos+0x366>
 800218a:	bf00      	nop
 800218c:	1fff066e 	.word	0x1fff066e
 8002190:	1ffe8848 	.word	0x1ffe8848
 8002194:	1fff0674 	.word	0x1fff0674
 8002198:	1fff06c8 	.word	0x1fff06c8
 800219c:	1fff0710 	.word	0x1fff0710
	}
	else if (position[i].d_part < -position[i].sat_out)
 80021a0:	4985      	ldr	r1, [pc, #532]	; (80023b8 <pid_regulator_pos+0x51c>)
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3318      	adds	r3, #24
 80021b0:	ed93 7a00 	vldr	s14, [r3]
 80021b4:	4980      	ldr	r1, [pc, #512]	; (80023b8 <pid_regulator_pos+0x51c>)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3318      	adds	r3, #24
 80021c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021c8:	eef1 7a67 	vneg.f32	s15, s15
 80021cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d4:	d515      	bpl.n	8002202 <pid_regulator_pos+0x366>
	{
		position[i].d_part = -position[i].sat_out;
 80021d6:	4978      	ldr	r1, [pc, #480]	; (80023b8 <pid_regulator_pos+0x51c>)
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	3318      	adds	r3, #24
 80021e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80021ea:	eef1 7a67 	vneg.f32	s15, s15
 80021ee:	4972      	ldr	r1, [pc, #456]	; (80023b8 <pid_regulator_pos+0x51c>)
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3318      	adds	r3, #24
 80021fe:	edc3 7a00 	vstr	s15, [r3]
	}

	// Output SPD or I
	switch (i)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <pid_regulator_pos+0x372>
 8002208:	2b01      	cmp	r3, #1
 800220a:	d068      	beq.n	80022de <pid_regulator_pos+0x442>
			i_q_ref = -position[i].sat_out;
		}
		break;

	default:
		break;
 800220c:	e0cf      	b.n	80023ae <pid_regulator_pos+0x512>

	// Output SPD or I
	switch (i)
	{
	case (SPD_REF):
		spd_ref = position[i].p_part + position[i].i_part + position[i].d_part;
 800220e:	496a      	ldr	r1, [pc, #424]	; (80023b8 <pid_regulator_pos+0x51c>)
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3310      	adds	r3, #16
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	4965      	ldr	r1, [pc, #404]	; (80023b8 <pid_regulator_pos+0x51c>)
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3310      	adds	r3, #16
 8002232:	edd3 7a01 	vldr	s15, [r3, #4]
 8002236:	ee37 7a27 	vadd.f32	s14, s14, s15
 800223a:	495f      	ldr	r1, [pc, #380]	; (80023b8 <pid_regulator_pos+0x51c>)
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3318      	adds	r3, #24
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002252:	4b5a      	ldr	r3, [pc, #360]	; (80023bc <pid_regulator_pos+0x520>)
 8002254:	edc3 7a00 	vstr	s15, [r3]

		if (spd_ref > position[i].sat_out)
 8002258:	4957      	ldr	r1, [pc, #348]	; (80023b8 <pid_regulator_pos+0x51c>)
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3318      	adds	r3, #24
 8002268:	ed93 7a01 	vldr	s14, [r3, #4]
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <pid_regulator_pos+0x520>)
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	d50b      	bpl.n	8002294 <pid_regulator_pos+0x3f8>
		{
			spd_ref = position[i].sat_out;
 800227c:	494e      	ldr	r1, [pc, #312]	; (80023b8 <pid_regulator_pos+0x51c>)
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3318      	adds	r3, #24
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4a4b      	ldr	r2, [pc, #300]	; (80023bc <pid_regulator_pos+0x520>)
 8002290:	6013      	str	r3, [r2, #0]
		}
		else if (spd_ref < -position[i].sat_out)
		{
			spd_ref = -position[i].sat_out;
		}
		break;
 8002292:	e08c      	b.n	80023ae <pid_regulator_pos+0x512>

		if (spd_ref > position[i].sat_out)
		{
			spd_ref = position[i].sat_out;
		}
		else if (spd_ref < -position[i].sat_out)
 8002294:	4948      	ldr	r1, [pc, #288]	; (80023b8 <pid_regulator_pos+0x51c>)
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3318      	adds	r3, #24
 80022a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80022a8:	eeb1 7a67 	vneg.f32	s14, s15
 80022ac:	4b43      	ldr	r3, [pc, #268]	; (80023bc <pid_regulator_pos+0x520>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ba:	dc00      	bgt.n	80022be <pid_regulator_pos+0x422>
		{
			spd_ref = -position[i].sat_out;
		}
		break;
 80022bc:	e077      	b.n	80023ae <pid_regulator_pos+0x512>
		{
			spd_ref = position[i].sat_out;
		}
		else if (spd_ref < -position[i].sat_out)
		{
			spd_ref = -position[i].sat_out;
 80022be:	493e      	ldr	r1, [pc, #248]	; (80023b8 <pid_regulator_pos+0x51c>)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3318      	adds	r3, #24
 80022ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80022d2:	eef1 7a67 	vneg.f32	s15, s15
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <pid_regulator_pos+0x520>)
 80022d8:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80022dc:	e067      	b.n	80023ae <pid_regulator_pos+0x512>

	case (I_REF):
		i_q_ref = position[i].p_part + position[i].i_part + position[i].d_part;
 80022de:	4936      	ldr	r1, [pc, #216]	; (80023b8 <pid_regulator_pos+0x51c>)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3310      	adds	r3, #16
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	4931      	ldr	r1, [pc, #196]	; (80023b8 <pid_regulator_pos+0x51c>)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3310      	adds	r3, #16
 8002302:	edd3 7a01 	vldr	s15, [r3, #4]
 8002306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800230a:	492b      	ldr	r1, [pc, #172]	; (80023b8 <pid_regulator_pos+0x51c>)
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3318      	adds	r3, #24
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <pid_regulator_pos+0x524>)
 8002324:	edc3 7a00 	vstr	s15, [r3]

		if (i_q_ref > position[i].sat_out)
 8002328:	4923      	ldr	r1, [pc, #140]	; (80023b8 <pid_regulator_pos+0x51c>)
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3318      	adds	r3, #24
 8002338:	ed93 7a01 	vldr	s14, [r3, #4]
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <pid_regulator_pos+0x524>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234a:	d50b      	bpl.n	8002364 <pid_regulator_pos+0x4c8>
		{
			i_q_ref = position[i].sat_out;
 800234c:	491a      	ldr	r1, [pc, #104]	; (80023b8 <pid_regulator_pos+0x51c>)
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3318      	adds	r3, #24
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <pid_regulator_pos+0x524>)
 8002360:	6013      	str	r3, [r2, #0]
		}
		else if (i_q_ref < -position[i].sat_out)
		{
			i_q_ref = -position[i].sat_out;
		}
		break;
 8002362:	e023      	b.n	80023ac <pid_regulator_pos+0x510>

		if (i_q_ref > position[i].sat_out)
		{
			i_q_ref = position[i].sat_out;
		}
		else if (i_q_ref < -position[i].sat_out)
 8002364:	4914      	ldr	r1, [pc, #80]	; (80023b8 <pid_regulator_pos+0x51c>)
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3318      	adds	r3, #24
 8002374:	edd3 7a01 	vldr	s15, [r3, #4]
 8002378:	eeb1 7a67 	vneg.f32	s14, s15
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <pid_regulator_pos+0x524>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	dc00      	bgt.n	800238e <pid_regulator_pos+0x4f2>
		{
			i_q_ref = -position[i].sat_out;
		}
		break;
 800238c:	e00e      	b.n	80023ac <pid_regulator_pos+0x510>
		{
			i_q_ref = position[i].sat_out;
		}
		else if (i_q_ref < -position[i].sat_out)
		{
			i_q_ref = -position[i].sat_out;
 800238e:	490a      	ldr	r1, [pc, #40]	; (80023b8 <pid_regulator_pos+0x51c>)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3318      	adds	r3, #24
 800239e:	edd3 7a01 	vldr	s15, [r3, #4]
 80023a2:	eef1 7a67 	vneg.f32	s15, s15
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <pid_regulator_pos+0x524>)
 80023a8:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80023ac:	bf00      	nop

	default:
		break;
	}
}
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	1fff06c8 	.word	0x1fff06c8
 80023bc:	1ffe884c 	.word	0x1ffe884c
 80023c0:	1ffe8840 	.word	0x1ffe8840

080023c4 <pi_init>:

void pi_init(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
	current_q.kp = 10;
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <pi_init+0xec>)
 80023ca:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <pi_init+0xf0>)
 80023cc:	601a      	str	r2, [r3, #0]
	current_q.ki = 0.05;
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <pi_init+0xec>)
 80023d0:	4a39      	ldr	r2, [pc, #228]	; (80024b8 <pi_init+0xf4>)
 80023d2:	605a      	str	r2, [r3, #4]
	current_q.kd = 0;
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <pi_init+0xec>)
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
	current_q.sat_out = 15000;
 80023dc:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <pi_init+0xec>)
 80023de:	4a37      	ldr	r2, [pc, #220]	; (80024bc <pi_init+0xf8>)
 80023e0:	61da      	str	r2, [r3, #28]
	current_q.sat_i_part = current_q.sat_out / 10;
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <pi_init+0xec>)
 80023e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80023e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 80023ec:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80023f0:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <pi_init+0xec>)
 80023f2:	edc3 7a08 	vstr	s15, [r3, #32]

	current_d.kp = current_q.kp;
 80023f6:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <pi_init+0xec>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a31      	ldr	r2, [pc, #196]	; (80024c0 <pi_init+0xfc>)
 80023fc:	6013      	str	r3, [r2, #0]
	current_d.ki = current_q.ki;
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <pi_init+0xec>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <pi_init+0xfc>)
 8002404:	6053      	str	r3, [r2, #4]
	current_d.kd = current_q.kd;
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <pi_init+0xec>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4a2d      	ldr	r2, [pc, #180]	; (80024c0 <pi_init+0xfc>)
 800240c:	6093      	str	r3, [r2, #8]
	current_d.sat_out = current_q.sat_out;
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <pi_init+0xec>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <pi_init+0xfc>)
 8002414:	61d3      	str	r3, [r2, #28]
	current_d.sat_i_part = current_q.sat_i_part;
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <pi_init+0xec>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a29      	ldr	r2, [pc, #164]	; (80024c0 <pi_init+0xfc>)
 800241c:	6213      	str	r3, [r2, #32]

	speed.kp = 200;
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <pi_init+0x100>)
 8002420:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <pi_init+0x104>)
 8002422:	601a      	str	r2, [r3, #0]
	speed.ki = 5;
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <pi_init+0x100>)
 8002426:	4a29      	ldr	r2, [pc, #164]	; (80024cc <pi_init+0x108>)
 8002428:	605a      	str	r2, [r3, #4]
	speed.kd = 0;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <pi_init+0x100>)
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
	speed.sat_out = 5000;
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <pi_init+0x100>)
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <pi_init+0x10c>)
 8002436:	61da      	str	r2, [r3, #28]
	speed.sat_i_part = speed.sat_out / 10;
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <pi_init+0x100>)
 800243a:	edd3 7a07 	vldr	s15, [r3, #28]
 800243e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8002442:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002446:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <pi_init+0x100>)
 8002448:	edc3 7a08 	vstr	s15, [r3, #32]

	position[0].kp = 0.3;
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <pi_init+0x110>)
 800244e:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <pi_init+0x114>)
 8002450:	601a      	str	r2, [r3, #0]
	position[0].ki = 0.0015;
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <pi_init+0x110>)
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <pi_init+0x118>)
 8002456:	605a      	str	r2, [r3, #4]
	position[0].kd = 0;
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <pi_init+0x110>)
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
	position[0].sat_out = 50;
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <pi_init+0x110>)
 8002462:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <pi_init+0x11c>)
 8002464:	61da      	str	r2, [r3, #28]
	position[0].sat_i_part = position[0].sat_out / 10;
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <pi_init+0x110>)
 8002468:	edd3 7a07 	vldr	s15, [r3, #28]
 800246c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8002470:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002474:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <pi_init+0x110>)
 8002476:	edc3 7a08 	vstr	s15, [r3, #32]

	position[1].kp = 0.5;
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <pi_init+0x110>)
 800247c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
	position[1].ki = 0.025;
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <pi_init+0x110>)
 8002484:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <pi_init+0x120>)
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
	position[1].kd = 25.0;
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <pi_init+0x110>)
 800248a:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <pi_init+0x124>)
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
	position[1].sat_out = 5000;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <pi_init+0x110>)
 8002490:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <pi_init+0x10c>)
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
	position[1].sat_i_part = position[1].sat_out / 10;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <pi_init+0x110>)
 8002496:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800249a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800249e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <pi_init+0x110>)
 80024a4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

}
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	1fff0760 	.word	0x1fff0760
 80024b4:	41200000 	.word	0x41200000
 80024b8:	3d4ccccd 	.word	0x3d4ccccd
 80024bc:	466a6000 	.word	0x466a6000
 80024c0:	1fff0714 	.word	0x1fff0714
 80024c4:	1fff073c 	.word	0x1fff073c
 80024c8:	43480000 	.word	0x43480000
 80024cc:	40a00000 	.word	0x40a00000
 80024d0:	459c4000 	.word	0x459c4000
 80024d4:	1fff06c8 	.word	0x1fff06c8
 80024d8:	3e99999a 	.word	0x3e99999a
 80024dc:	3ac49ba6 	.word	0x3ac49ba6
 80024e0:	42480000 	.word	0x42480000
 80024e4:	3ccccccd 	.word	0x3ccccccd
 80024e8:	41c80000 	.word	0x41c80000

080024ec <ProbeScope_Init>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Init (uint32_t  sampling_clk_hz)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
    static  CPU_INT32U  temp = 0;


    ProbeScope_Ch1.En             = 0;
 80024f4:	4b37      	ldr	r3, [pc, #220]	; (80025d4 <ProbeScope_Init+0xe8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
#if PROBE_SCOPE_MAX_CH >= 2       
    ProbeScope_Ch2.En             = 0;
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <ProbeScope_Init+0xec>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 3       
    ProbeScope_Ch3.En             = 0;
 8002500:	4b36      	ldr	r3, [pc, #216]	; (80025dc <ProbeScope_Init+0xf0>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 4       
    ProbeScope_Ch4.En             = 0;
 8002506:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <ProbeScope_Init+0xf4>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 5       
    ProbeScope_Ch5.En             = 0;
 800250c:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <ProbeScope_Init+0xf8>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 6       
    ProbeScope_Ch6.En             = 0;
 8002512:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <ProbeScope_Init+0xfc>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 7       
    ProbeScope_Ch7.En             = 0;
 8002518:	4b34      	ldr	r3, [pc, #208]	; (80025ec <ProbeScope_Init+0x100>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 8       
    ProbeScope_Ch8.En             = 0;
 800251e:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <ProbeScope_Init+0x104>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
#endif

    ProbeScope_Mode               = PROBE_SCOPE_MODE_OFF;
 8002524:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <ProbeScope_Init+0x108>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
    ProbeScope_State              = PROBE_SCOPE_STATE_START;
 800252a:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <ProbeScope_Init+0x10c>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    ProbeScope_TrigChSel          = PROBE_SCOPE_CH1;                         // Default trigger channel
 8002530:	4b32      	ldr	r3, [pc, #200]	; (80025fc <ProbeScope_Init+0x110>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
    ProbeScope_SampleIxPrev       = 0;
 8002536:	4b32      	ldr	r3, [pc, #200]	; (8002600 <ProbeScope_Init+0x114>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
    ProbeScope_SampleIxCur        = 0;
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <ProbeScope_Init+0x118>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigFlag           = 0;
 8002542:	4b31      	ldr	r3, [pc, #196]	; (8002608 <ProbeScope_Init+0x11c>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigDispPos        = 0;
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <ProbeScope_Init+0x120>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOff        = 0;
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <ProbeScope_Init+0x124>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOffCtr     = 0;
 8002554:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <ProbeScope_Init+0x128>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
    ProbeScope_DataRdyFlag        = 0;
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <ProbeScope_Init+0x12c>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <ProbeScope_Init+0x120>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2d      	ldr	r2, [pc, #180]	; (800261c <ProbeScope_Init+0x130>)
 8002566:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES;
 8002568:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <ProbeScope_Init+0x134>)
 800256a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800256e:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigSlope          = PROBE_SCOPE_TRIG_POS;                    // We assume a positive going signal by default
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <ProbeScope_Init+0x138>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
    temp                          = ProbeScopeDbg_MaxSamples;
 8002576:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <ProbeScope_Init+0x13c>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4b2b      	ldr	r3, [pc, #172]	; (800262c <ProbeScope_Init+0x140>)
 8002580:	601a      	str	r2, [r3, #0]
    temp                         += ProbeScopeDbg_MaxCh;
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <ProbeScope_Init+0x144>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	4b28      	ldr	r3, [pc, #160]	; (800262c <ProbeScope_Init+0x140>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a26      	ldr	r2, [pc, #152]	; (800262c <ProbeScope_Init+0x140>)
 8002592:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_16BitEn;
 8002594:	4b27      	ldr	r3, [pc, #156]	; (8002634 <ProbeScope_Init+0x148>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <ProbeScope_Init+0x140>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4413      	add	r3, r2
 800259e:	4a23      	ldr	r2, [pc, #140]	; (800262c <ProbeScope_Init+0x140>)
 80025a0:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_32BitEn;
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <ProbeScope_Init+0x14c>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b21      	ldr	r3, [pc, #132]	; (800262c <ProbeScope_Init+0x140>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <ProbeScope_Init+0x140>)
 80025ae:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplingClkDiv     =    1;
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <ProbeScope_Init+0x150>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkDivCtr  =    0;
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <ProbeScope_Init+0x154>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkHz      = sampling_clk_hz;
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <ProbeScope_Init+0x158>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
    ProbeScope_InitFlag           =    1;
 80025c2:	4b21      	ldr	r3, [pc, #132]	; (8002648 <ProbeScope_Init+0x15c>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	1ffe8854 	.word	0x1ffe8854
 80025d8:	1ffe980c 	.word	0x1ffe980c
 80025dc:	1ffea7c4 	.word	0x1ffea7c4
 80025e0:	1ffeb77c 	.word	0x1ffeb77c
 80025e4:	1ffec734 	.word	0x1ffec734
 80025e8:	1ffed6ec 	.word	0x1ffed6ec
 80025ec:	1ffee6a4 	.word	0x1ffee6a4
 80025f0:	1ffef65c 	.word	0x1ffef65c
 80025f4:	1fff0614 	.word	0x1fff0614
 80025f8:	1fff0634 	.word	0x1fff0634
 80025fc:	1fff0615 	.word	0x1fff0615
 8002600:	1fff0620 	.word	0x1fff0620
 8002604:	1fff0624 	.word	0x1fff0624
 8002608:	1fff0784 	.word	0x1fff0784
 800260c:	1fff0790 	.word	0x1fff0790
 8002610:	1fff0794 	.word	0x1fff0794
 8002614:	1fff0618 	.word	0x1fff0618
 8002618:	1fff079c 	.word	0x1fff079c
 800261c:	1fff0628 	.word	0x1fff0628
 8002620:	1fff062c 	.word	0x1fff062c
 8002624:	1fff061c 	.word	0x1fff061c
 8002628:	1ffe880e 	.word	0x1ffe880e
 800262c:	1fff0638 	.word	0x1fff0638
 8002630:	1ffe8810 	.word	0x1ffe8810
 8002634:	1ffe8814 	.word	0x1ffe8814
 8002638:	1ffe8818 	.word	0x1ffe8818
 800263c:	1fff0630 	.word	0x1fff0630
 8002640:	1fff0632 	.word	0x1fff0632
 8002644:	1fff0788 	.word	0x1fff0788
 8002648:	1fff0798 	.word	0x1fff0798

0800264c <ProbeScope_Sampling>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Sampling (void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
    switch (ProbeScope_Mode) {
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <ProbeScope_Sampling+0x40>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d817      	bhi.n	8002688 <ProbeScope_Sampling+0x3c>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <ProbeScope_Sampling+0x14>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002671 	.word	0x08002671
 8002664:	08002677 	.word	0x08002677
 8002668:	0800267d 	.word	0x0800267d
 800266c:	08002683 	.word	0x08002683
        case PROBE_SCOPE_MODE_OFF:
             ProbeScope_ModeOff();
 8002670:	f000 f80e 	bl	8002690 <ProbeScope_ModeOff>
             break;
 8002674:	e008      	b.n	8002688 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_SINGLE:
             ProbeScope_ModeTrig();
 8002676:	f000 f85d 	bl	8002734 <ProbeScope_ModeTrig>
             break;
 800267a:	e005      	b.n	8002688 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_CONTINUOUS:
             ProbeScope_ModeContinuous();
 800267c:	f000 f81c 	bl	80026b8 <ProbeScope_ModeContinuous>
             break;
 8002680:	e002      	b.n	8002688 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_TRIG:
             ProbeScope_ModeTrig(); 
 8002682:	f000 f857 	bl	8002734 <ProbeScope_ModeTrig>
             break;
 8002686:	bf00      	nop
    }
}
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	1fff0614 	.word	0x1fff0614

08002690 <ProbeScope_ModeOff>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeOff (void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                // Force Triggered mode state to START
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <ProbeScope_ModeOff+0x20>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
    if (ProbeScope_SamplingClkDiv == 0) {
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <ProbeScope_ModeOff+0x24>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <ProbeScope_ModeOff+0x18>
        ProbeScope_SamplingClkDiv =  1;
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <ProbeScope_ModeOff+0x24>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	801a      	strh	r2, [r3, #0]
    }
}
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	1fff0634 	.word	0x1fff0634
 80026b4:	1fff0630 	.word	0x1fff0630

080026b8 <ProbeScope_ModeContinuous>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeContinuous (void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
    if (ProbeScope_DataRdyFlag == 0) {                                          // Read one buffer's worth of data
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <ProbeScope_ModeContinuous+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d126      	bne.n	8002712 <ProbeScope_ModeContinuous+0x5a>
        ProbeScope_TrigFlag = 0;
 80026c4:	4b16      	ldr	r3, [pc, #88]	; (8002720 <ProbeScope_ModeContinuous+0x68>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
        if (ProbeScope_SamplingClkDivCtr > 1) {
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <ProbeScope_ModeContinuous+0x6c>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d906      	bls.n	80026e0 <ProbeScope_ModeContinuous+0x28>
            ProbeScope_SamplingClkDivCtr--;
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <ProbeScope_ModeContinuous+0x6c>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <ProbeScope_ModeContinuous+0x6c>)
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	e018      	b.n	8002712 <ProbeScope_ModeContinuous+0x5a>
        } else {
            if (ProbeScope_SamplingClkDiv == 0) {                               // Make sure clock divider is not 0
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <ProbeScope_ModeContinuous+0x70>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <ProbeScope_ModeContinuous+0x36>
                ProbeScope_SamplingClkDiv =  1;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <ProbeScope_ModeContinuous+0x70>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	801a      	strh	r2, [r3, #0]
            }
            ProbeScope_SamplingClkDivCtr  = ProbeScope_SamplingClkDiv;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <ProbeScope_ModeContinuous+0x70>)
 80026f0:	881a      	ldrh	r2, [r3, #0]
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <ProbeScope_ModeContinuous+0x6c>)
 80026f4:	801a      	strh	r2, [r3, #0]
            ProbeScope_SampleChAll();                                           // Get the first sample to create a 'previous' value for triggering
 80026f6:	f000 f8e5 	bl	80028c4 <ProbeScope_SampleChAll>
            ProbeScope_SamplePosNext();                                         // Position to next sample
 80026fa:	f000 fa0b 	bl	8002b14 <ProbeScope_SamplePosNext>
            if (ProbeScope_SampleIxCur == 0) {                                  // Read one buffer's worth of data
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <ProbeScope_ModeContinuous+0x74>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <ProbeScope_ModeContinuous+0x5a>
                ProbeScope_DataRdyFlag = 1;   
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <ProbeScope_ModeContinuous+0x64>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]
                ProbeScope_TrigFlag    = 1;
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <ProbeScope_ModeContinuous+0x68>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
            }
        }
    }
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                 // Force Triggered mode state to START
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <ProbeScope_ModeContinuous+0x78>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
}
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	1fff079c 	.word	0x1fff079c
 8002720:	1fff0784 	.word	0x1fff0784
 8002724:	1fff0632 	.word	0x1fff0632
 8002728:	1fff0630 	.word	0x1fff0630
 800272c:	1fff0624 	.word	0x1fff0624
 8002730:	1fff0634 	.word	0x1fff0634

08002734 <ProbeScope_ModeTrig>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeTrig (void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
    if (ProbeScope_SamplingClkDivCtr > 1) {
 8002738:	4b55      	ldr	r3, [pc, #340]	; (8002890 <ProbeScope_ModeTrig+0x15c>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d906      	bls.n	800274e <ProbeScope_ModeTrig+0x1a>
        ProbeScope_SamplingClkDivCtr--;
 8002740:	4b53      	ldr	r3, [pc, #332]	; (8002890 <ProbeScope_ModeTrig+0x15c>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	4b51      	ldr	r3, [pc, #324]	; (8002890 <ProbeScope_ModeTrig+0x15c>)
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	e09e      	b.n	800288c <ProbeScope_ModeTrig+0x158>
    } else { 
        if (ProbeScope_SamplingClkDiv == 0) {                                        // Make sure clock divider is not 0
 800274e:	4b51      	ldr	r3, [pc, #324]	; (8002894 <ProbeScope_ModeTrig+0x160>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <ProbeScope_ModeTrig+0x28>
            ProbeScope_SamplingClkDiv =  1;
 8002756:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <ProbeScope_ModeTrig+0x160>)
 8002758:	2201      	movs	r2, #1
 800275a:	801a      	strh	r2, [r3, #0]
        }
        ProbeScope_SamplingClkDivCtr = ProbeScope_SamplingClkDiv;
 800275c:	4b4d      	ldr	r3, [pc, #308]	; (8002894 <ProbeScope_ModeTrig+0x160>)
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	4b4b      	ldr	r3, [pc, #300]	; (8002890 <ProbeScope_ModeTrig+0x15c>)
 8002762:	801a      	strh	r2, [r3, #0]
        switch (ProbeScope_State) {
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <ProbeScope_ModeTrig+0x164>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b03      	cmp	r3, #3
 800276a:	f200 808b 	bhi.w	8002884 <ProbeScope_ModeTrig+0x150>
 800276e:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <ProbeScope_ModeTrig+0x40>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	08002785 	.word	0x08002785
 8002778:	080027c1 	.word	0x080027c1
 800277c:	08002801 	.word	0x08002801
 8002780:	08002849 	.word	0x08002849
            case PROBE_SCOPE_STATE_START:
                 ProbeScope_DataRdyFlag        = 0;
 8002784:	4b45      	ldr	r3, [pc, #276]	; (800289c <ProbeScope_ModeTrig+0x168>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigFlag           = 0;
 800278a:	4b45      	ldr	r3, [pc, #276]	; (80028a0 <ProbeScope_ModeTrig+0x16c>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxPrev       = 0;
 8002790:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <ProbeScope_ModeTrig+0x170>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxCur        = 0;
 8002796:	4b44      	ldr	r3, [pc, #272]	; (80028a8 <ProbeScope_ModeTrig+0x174>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigHoldOffCtr     = 0;
 800279c:	4b43      	ldr	r3, [pc, #268]	; (80028ac <ProbeScope_ModeTrig+0x178>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPostTrigCtr = 0;
 80027a2:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <ProbeScope_ModeTrig+0x17c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;            // Minimum number of samples pre-trigger
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <ProbeScope_ModeTrig+0x180>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a42      	ldr	r2, [pc, #264]	; (80028b8 <ProbeScope_ModeTrig+0x184>)
 80027ae:	6013      	str	r3, [r2, #0]
                 ProbeScope_SampleChAll();                                          // Get the first sample to create a 'previous' value for triggering
 80027b0:	f000 f888 	bl	80028c4 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 80027b4:	f000 f9ae 	bl	8002b14 <ProbeScope_SamplePosNext>
                 ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 80027b8:	4b37      	ldr	r3, [pc, #220]	; (8002898 <ProbeScope_ModeTrig+0x164>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
                 break;
 80027be:	e065      	b.n	800288c <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 80027c0:	f000 f880 	bl	80028c4 <ProbeScope_SampleChAll>
                 if (ProbeScope_SamplesPreTrigCtr > 0) {                            // We need a minimum number of samples before the trigger
 80027c4:	4b3c      	ldr	r3, [pc, #240]	; (80028b8 <ProbeScope_ModeTrig+0x184>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <ProbeScope_ModeTrig+0xa4>
                     ProbeScope_SamplesPreTrigCtr--;                               
 80027cc:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <ProbeScope_ModeTrig+0x184>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	4a39      	ldr	r2, [pc, #228]	; (80028b8 <ProbeScope_ModeTrig+0x184>)
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e001      	b.n	80027dc <ProbeScope_ModeTrig+0xa8>
                 } else {
                     ProbeScope_IsTrig();                                           // See if we detected the trigger
 80027d8:	f000 f9b8 	bl	8002b4c <ProbeScope_IsTrig>
                 }
                 ProbeScope_SamplePosNext();
 80027dc:	f000 f99a 	bl	8002b14 <ProbeScope_SamplePosNext>
                 if (ProbeScope_TrigFlag == 1) {                                    // Remaining number of samples to collect before data available
 80027e0:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <ProbeScope_ModeTrig+0x16c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10a      	bne.n	80027fe <ProbeScope_ModeTrig+0xca>
                     ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES - ProbeScope_TrigDispPos - 2;  
 80027e8:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <ProbeScope_ModeTrig+0x180>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 80027f0:	3302      	adds	r3, #2
 80027f2:	4a2f      	ldr	r2, [pc, #188]	; (80028b0 <ProbeScope_ModeTrig+0x17c>)
 80027f4:	6013      	str	r3, [r2, #0]
                     ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_POST_TRIG;
 80027f6:	4b28      	ldr	r3, [pc, #160]	; (8002898 <ProbeScope_ModeTrig+0x164>)
 80027f8:	2202      	movs	r2, #2
 80027fa:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 80027fc:	e046      	b.n	800288c <ProbeScope_ModeTrig+0x158>
 80027fe:	e045      	b.n	800288c <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_POST_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 8002800:	f000 f860 	bl	80028c4 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 8002804:	f000 f986 	bl	8002b14 <ProbeScope_SamplePosNext>
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <ProbeScope_ModeTrig+0x17c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <ProbeScope_ModeTrig+0xe8>
                     ProbeScope_SamplesPostTrigCtr--;
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <ProbeScope_ModeTrig+0x17c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <ProbeScope_ModeTrig+0x17c>)
 8002818:	6013      	str	r3, [r2, #0]
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
                 }                                                                  
                 break;                                                             
 800281a:	e037      	b.n	800288c <ProbeScope_ModeTrig+0x158>
                 ProbeScope_SampleChAll();                                          // Get the next sample
                 ProbeScope_SamplePosNext();
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
                     ProbeScope_SamplesPostTrigCtr--;
                 } else {
                     if (ProbeScope_Mode == PROBE_SCOPE_MODE_SINGLE) {
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <ProbeScope_ModeTrig+0x188>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d106      	bne.n	8002832 <ProbeScope_ModeTrig+0xfe>
                         ProbeScope_Mode           = PROBE_SCOPE_MODE_OFF;
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <ProbeScope_ModeTrig+0x188>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_START;
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <ProbeScope_ModeTrig+0x164>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e006      	b.n	8002840 <ProbeScope_ModeTrig+0x10c>
                     } else {
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <ProbeScope_ModeTrig+0x18c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <ProbeScope_ModeTrig+0x178>)
 8002838:	6013      	str	r3, [r2, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <ProbeScope_ModeTrig+0x164>)
 800283c:	2203      	movs	r2, #3
 800283e:	701a      	strb	r2, [r3, #0]
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <ProbeScope_ModeTrig+0x168>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]
                 }                                                                  
                 break;                                                             
 8002846:	e021      	b.n	800288c <ProbeScope_ModeTrig+0x158>
                                                                                    
            case PROBE_SCOPE_STATE_DATA_RDY:                                        
                 if (ProbeScope_TrigHoldOffCtr > 0) {                               // Hold-off before beeing able to re-trigger
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <ProbeScope_ModeTrig+0x178>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <ProbeScope_ModeTrig+0x128>
                     ProbeScope_TrigHoldOffCtr--;                                   
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <ProbeScope_ModeTrig+0x178>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3b01      	subs	r3, #1
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <ProbeScope_ModeTrig+0x178>)
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e012      	b.n	8002882 <ProbeScope_ModeTrig+0x14e>
                 } else {                                                           
                     if (ProbeScope_DataRdyFlag == 0) {                             // Give Probe time to collect and display the waveform(s)
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <ProbeScope_ModeTrig+0x168>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10e      	bne.n	8002882 <ProbeScope_ModeTrig+0x14e>
                         ProbeScope_TrigFlag          = 0;
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <ProbeScope_ModeTrig+0x16c>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
                         ProbeScope_SamplesPreTrigCtr = ProbeScope_TrigDispPos;     // Minimum number of samples pre-trigger
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <ProbeScope_ModeTrig+0x180>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <ProbeScope_ModeTrig+0x184>)
 8002870:	6013      	str	r3, [r2, #0]
                         ProbeScope_State             = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <ProbeScope_ModeTrig+0x164>)
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
                         ProbeScope_SampleChAll();                                  // Get the first sample to create a 'previous' value for triggering
 8002878:	f000 f824 	bl	80028c4 <ProbeScope_SampleChAll>
                         ProbeScope_SamplePosNext();
 800287c:	f000 f94a 	bl	8002b14 <ProbeScope_SamplePosNext>
                     }
                 }
                 break;
 8002880:	e004      	b.n	800288c <ProbeScope_ModeTrig+0x158>
 8002882:	e003      	b.n	800288c <ProbeScope_ModeTrig+0x158>
                 
            default:
                 ProbeScope_State = PROBE_SCOPE_STATE_START;
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <ProbeScope_ModeTrig+0x164>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
                 break;
 800288a:	bf00      	nop
        }
    }
}
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	1fff0632 	.word	0x1fff0632
 8002894:	1fff0630 	.word	0x1fff0630
 8002898:	1fff0634 	.word	0x1fff0634
 800289c:	1fff079c 	.word	0x1fff079c
 80028a0:	1fff0784 	.word	0x1fff0784
 80028a4:	1fff0620 	.word	0x1fff0620
 80028a8:	1fff0624 	.word	0x1fff0624
 80028ac:	1fff0618 	.word	0x1fff0618
 80028b0:	1fff062c 	.word	0x1fff062c
 80028b4:	1fff0790 	.word	0x1fff0790
 80028b8:	1fff0628 	.word	0x1fff0628
 80028bc:	1fff0614 	.word	0x1fff0614
 80028c0:	1fff0794 	.word	0x1fff0794

080028c4 <ProbeScope_SampleChAll>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleChAll (void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
    ProbeScope_SampleCh(&ProbeScope_Ch1);
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <ProbeScope_SampleChAll+0x38>)
 80028ca:	f000 f827 	bl	800291c <ProbeScope_SampleCh>

#if PROBE_SCOPE_MAX_CH >= 2
    ProbeScope_SampleCh(&ProbeScope_Ch2);
 80028ce:	480c      	ldr	r0, [pc, #48]	; (8002900 <ProbeScope_SampleChAll+0x3c>)
 80028d0:	f000 f824 	bl	800291c <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 3                     
    ProbeScope_SampleCh(&ProbeScope_Ch3);
 80028d4:	480b      	ldr	r0, [pc, #44]	; (8002904 <ProbeScope_SampleChAll+0x40>)
 80028d6:	f000 f821 	bl	800291c <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 4                     
    ProbeScope_SampleCh(&ProbeScope_Ch4);
 80028da:	480b      	ldr	r0, [pc, #44]	; (8002908 <ProbeScope_SampleChAll+0x44>)
 80028dc:	f000 f81e 	bl	800291c <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 5
    ProbeScope_SampleCh(&ProbeScope_Ch5);
 80028e0:	480a      	ldr	r0, [pc, #40]	; (800290c <ProbeScope_SampleChAll+0x48>)
 80028e2:	f000 f81b 	bl	800291c <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 6                     
    ProbeScope_SampleCh(&ProbeScope_Ch6);
 80028e6:	480a      	ldr	r0, [pc, #40]	; (8002910 <ProbeScope_SampleChAll+0x4c>)
 80028e8:	f000 f818 	bl	800291c <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 7                     
    ProbeScope_SampleCh(&ProbeScope_Ch7);
 80028ec:	4809      	ldr	r0, [pc, #36]	; (8002914 <ProbeScope_SampleChAll+0x50>)
 80028ee:	f000 f815 	bl	800291c <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 8                     
    ProbeScope_SampleCh(&ProbeScope_Ch8);
 80028f2:	4809      	ldr	r0, [pc, #36]	; (8002918 <ProbeScope_SampleChAll+0x54>)
 80028f4:	f000 f812 	bl	800291c <ProbeScope_SampleCh>
#endif                     
}
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	1ffe8854 	.word	0x1ffe8854
 8002900:	1ffe980c 	.word	0x1ffe980c
 8002904:	1ffea7c4 	.word	0x1ffea7c4
 8002908:	1ffeb77c 	.word	0x1ffeb77c
 800290c:	1ffec734 	.word	0x1ffec734
 8002910:	1ffed6ec 	.word	0x1ffed6ec
 8002914:	1ffee6a4 	.word	0x1ffee6a4
 8002918:	1ffef65c 	.word	0x1ffef65c

0800291c <ProbeScope_SampleCh>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleCh (PROBE_SCOPE_CH  *p_ch)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    PROBE_SCOPE_CH_SAMPLE   msk;                                    // Mask used to select desired bit when in bit mode.
    PROBE_SCOPE_CH_SAMPLE  *p_sample;                               // Pointer to where the sample will be stored


    if (p_ch->En == 1) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	f040 80eb 	bne.w	8002b04 <ProbeScope_SampleCh+0x1e8>
        p_sample = &p_ch->Samples[ProbeScope_SampleIxCur];          // Point to current position in sampling buffer
 800292e:	4b78      	ldr	r3, [pc, #480]	; (8002b10 <ProbeScope_SampleCh+0x1f4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3306      	adds	r3, #6
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
        switch (p_ch->DataType) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	791b      	ldrb	r3, [r3, #4]
 8002940:	2b06      	cmp	r3, #6
 8002942:	f200 80df 	bhi.w	8002b04 <ProbeScope_SampleCh+0x1e8>
 8002946:	a201      	add	r2, pc, #4	; (adr r2, 800294c <ProbeScope_SampleCh+0x30>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	08002969 	.word	0x08002969
 8002950:	080029ad 	.word	0x080029ad
 8002954:	080029f1 	.word	0x080029f1
 8002958:	08002a35 	.word	0x08002a35
 800295c:	08002a79 	.word	0x08002a79
 8002960:	08002ab9 	.word	0x08002ab9
 8002964:	08002af9 	.word	0x08002af9
            case PROBE_SCOPE_INT08U:
                 if (p_ch->BitEn == 0) {
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <ProbeScope_SampleCh+0x60>
                     p_sample->Val08U     = *(CPU_INT08U *)p_ch->DataAddr;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e016      	b.n	80029aa <ProbeScope_SampleCh+0x8e>
                 } else {
                     msk.Val08U           =  (CPU_INT08U)1 << p_ch->BitSel;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7b1b      	ldrb	r3, [r3, #12]
 8002980:	461a      	mov	r2, r3
 8002982:	2301      	movs	r3, #1
 8002984:	4093      	lsls	r3, r2
 8002986:	b2db      	uxtb	r3, r3
 8002988:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08U *)p_ch->DataAddr & msk.Val08U) {
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	7a3b      	ldrb	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <ProbeScope_SampleCh+0x86>
                         p_sample->Val08U = 1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e003      	b.n	80029aa <ProbeScope_SampleCh+0x8e>
                     } else {
                         p_sample->Val08U = 0;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 80029a8:	e0ac      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
 80029aa:	e0ab      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT08S:
                 if (p_ch->BitEn == 0) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <ProbeScope_SampleCh+0xa4>
                     p_sample->Val08S     = *(CPU_INT08S *)p_ch->DataAddr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e016      	b.n	80029ee <ProbeScope_SampleCh+0xd2>
                 } else {
                     msk.Val08S           =  (CPU_INT08S)1 << p_ch->BitSel;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7b1b      	ldrb	r3, [r3, #12]
 80029c4:	461a      	mov	r2, r3
 80029c6:	2301      	movs	r3, #1
 80029c8:	4093      	lsls	r3, r2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08S *)p_ch->DataAddr & msk.Val08S) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	781a      	ldrb	r2, [r3, #0]
 80029d4:	7a3b      	ldrb	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <ProbeScope_SampleCh+0xca>
                         p_sample->Val08S = 1;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e003      	b.n	80029ee <ProbeScope_SampleCh+0xd2>
                     } else {
                         p_sample->Val08S = 0;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 80029ec:	e08a      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
 80029ee:	e089      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
                                  
#if PROBE_SCOPE_16_BIT_EN > 0                                   
            case PROBE_SCOPE_INT16U:
                 if (p_ch->BitEn == 0) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <ProbeScope_SampleCh+0xe8>
                     p_sample->Val16U     = *(CPU_INT16U *)p_ch->DataAddr;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	881a      	ldrh	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	e016      	b.n	8002a32 <ProbeScope_SampleCh+0x116>
                 } else {
                     msk.Val16U           =  (CPU_INT16U)1 << p_ch->BitSel;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7b1b      	ldrb	r3, [r3, #12]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16U *)p_ch->DataAddr & msk.Val16U) {
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <ProbeScope_SampleCh+0x10e>
                         p_sample->Val16U = 1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	801a      	strh	r2, [r3, #0]
 8002a28:	e003      	b.n	8002a32 <ProbeScope_SampleCh+0x116>
                     } else {
                         p_sample->Val16U = 0;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8002a30:	e068      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
 8002a32:	e067      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT16S:
                 if (p_ch->BitEn == 0) {
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <ProbeScope_SampleCh+0x12c>
                     p_sample->Val16S     = *(CPU_INT16S *)p_ch->DataAddr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	881a      	ldrh	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e016      	b.n	8002a76 <ProbeScope_SampleCh+0x15a>
                 } else {
                     msk.Val16S           =  (CPU_INT16S)1 << p_ch->BitSel;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7b1b      	ldrb	r3, [r3, #12]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2301      	movs	r3, #1
 8002a50:	4093      	lsls	r3, r2
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16S *)p_ch->DataAddr & msk.Val16S) {
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	881a      	ldrh	r2, [r3, #0]
 8002a5c:	893b      	ldrh	r3, [r7, #8]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <ProbeScope_SampleCh+0x152>
                         p_sample->Val16S = 1;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	801a      	strh	r2, [r3, #0]
 8002a6c:	e003      	b.n	8002a76 <ProbeScope_SampleCh+0x15a>
                     } else {
                         p_sample->Val16S = 0;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8002a74:	e046      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
 8002a76:	e045      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
            case PROBE_SCOPE_INT32U:
                 if (p_ch->BitEn == 0) {
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <ProbeScope_SampleCh+0x170>
                     p_sample->Val32U     = *(CPU_INT32U *)p_ch->DataAddr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e014      	b.n	8002ab6 <ProbeScope_SampleCh+0x19a>
                 } else {
                     msk.Val32U           =  (CPU_INT32U)1 << p_ch->BitSel;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7b1b      	ldrb	r3, [r3, #12]
 8002a90:	461a      	mov	r2, r3
 8002a92:	2301      	movs	r3, #1
 8002a94:	4093      	lsls	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32U *)p_ch->DataAddr & msk.Val32U) {
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <ProbeScope_SampleCh+0x192>
                         p_sample->Val32U = 1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e003      	b.n	8002ab6 <ProbeScope_SampleCh+0x19a>
                     } else {
                         p_sample->Val32U = 0;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8002ab4:	e026      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
 8002ab6:	e025      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT32S:
                 if (p_ch->BitEn == 0) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <ProbeScope_SampleCh+0x1b0>
                     p_sample->Val32S     = *(CPU_INT32S *)p_ch->DataAddr;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e014      	b.n	8002af6 <ProbeScope_SampleCh+0x1da>
                 } else {
                     msk.Val32S           =  (CPU_INT32S)1 << p_ch->BitSel;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7b1b      	ldrb	r3, [r3, #12]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32S *)p_ch->DataAddr & msk.Val32S) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <ProbeScope_SampleCh+0x1d2>
                         p_sample->Val32S = 1;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e003      	b.n	8002af6 <ProbeScope_SampleCh+0x1da>
                     } else {
                         p_sample->Val32S = 0;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8002af4:	e006      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
 8002af6:	e005      	b.n	8002b04 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_FP32:
                 p_sample->ValFP32  = *(CPU_FP32   *)p_ch->DataAddr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	601a      	str	r2, [r3, #0]
                 break;
 8002b02:	bf00      	nop
#endif
        }                          
    }
}
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	1fff0624 	.word	0x1fff0624

08002b14 <ProbeScope_SamplePosNext>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SamplePosNext (void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
    ProbeScope_SampleIxPrev = ProbeScope_SampleIxCur;              // Update the position of the previous sample
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <ProbeScope_SamplePosNext+0x30>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <ProbeScope_SamplePosNext+0x34>)
 8002b1e:	6013      	str	r3, [r2, #0]
    ProbeScope_SampleIxCur++;                                      // Position to where next sample will be placed
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <ProbeScope_SamplePosNext+0x30>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <ProbeScope_SamplePosNext+0x30>)
 8002b28:	6013      	str	r3, [r2, #0]
    if (ProbeScope_SampleIxCur >= PROBE_SCOPE_MAX_SAMPLES) {       // See if we need to wrap around
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <ProbeScope_SamplePosNext+0x30>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b32:	d302      	bcc.n	8002b3a <ProbeScope_SamplePosNext+0x26>
        ProbeScope_SampleIxCur = 0;                                // yes
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <ProbeScope_SamplePosNext+0x30>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
    }
}
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	1fff0624 	.word	0x1fff0624
 8002b48:	1fff0620 	.word	0x1fff0620

08002b4c <ProbeScope_IsTrig>:
*              Sets ProbeScope_TrigFlag to 0 when no trigger is detected
************************************************************************************************************************
*/

static  void  ProbeScope_IsTrig (void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
    PROBE_SCOPE_CH          *p_ch;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_prev;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_cur;
    

    switch (ProbeScope_TrigChSel) {
 8002b52:	4b90      	ldr	r3, [pc, #576]	; (8002d94 <ProbeScope_IsTrig+0x248>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	2b07      	cmp	r3, #7
 8002b5a:	d82b      	bhi.n	8002bb4 <ProbeScope_IsTrig+0x68>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <ProbeScope_IsTrig+0x18>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002b85 	.word	0x08002b85
 8002b68:	08002b8b 	.word	0x08002b8b
 8002b6c:	08002b91 	.word	0x08002b91
 8002b70:	08002b97 	.word	0x08002b97
 8002b74:	08002b9d 	.word	0x08002b9d
 8002b78:	08002ba3 	.word	0x08002ba3
 8002b7c:	08002ba9 	.word	0x08002ba9
 8002b80:	08002baf 	.word	0x08002baf
        case PROBE_SCOPE_CH1:
             p_ch = &ProbeScope_Ch1;
 8002b84:	4b84      	ldr	r3, [pc, #528]	; (8002d98 <ProbeScope_IsTrig+0x24c>)
 8002b86:	60fb      	str	r3, [r7, #12]
             break;
 8002b88:	e01a      	b.n	8002bc0 <ProbeScope_IsTrig+0x74>
             
#if PROBE_SCOPE_MAX_CH >= 2
        case PROBE_SCOPE_CH2:
             p_ch = &ProbeScope_Ch2;
 8002b8a:	4b84      	ldr	r3, [pc, #528]	; (8002d9c <ProbeScope_IsTrig+0x250>)
 8002b8c:	60fb      	str	r3, [r7, #12]
             break;
 8002b8e:	e017      	b.n	8002bc0 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 3
        case PROBE_SCOPE_CH3:
             p_ch = &ProbeScope_Ch3;
 8002b90:	4b83      	ldr	r3, [pc, #524]	; (8002da0 <ProbeScope_IsTrig+0x254>)
 8002b92:	60fb      	str	r3, [r7, #12]
             break;
 8002b94:	e014      	b.n	8002bc0 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 4
        case PROBE_SCOPE_CH4:
             p_ch = &ProbeScope_Ch4;
 8002b96:	4b83      	ldr	r3, [pc, #524]	; (8002da4 <ProbeScope_IsTrig+0x258>)
 8002b98:	60fb      	str	r3, [r7, #12]
             break;
 8002b9a:	e011      	b.n	8002bc0 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 5
        case PROBE_SCOPE_CH5:
             p_ch = &ProbeScope_Ch5;
 8002b9c:	4b82      	ldr	r3, [pc, #520]	; (8002da8 <ProbeScope_IsTrig+0x25c>)
 8002b9e:	60fb      	str	r3, [r7, #12]
             break;
 8002ba0:	e00e      	b.n	8002bc0 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 6
        case PROBE_SCOPE_CH6:
             p_ch = &ProbeScope_Ch6;
 8002ba2:	4b82      	ldr	r3, [pc, #520]	; (8002dac <ProbeScope_IsTrig+0x260>)
 8002ba4:	60fb      	str	r3, [r7, #12]
             break;
 8002ba6:	e00b      	b.n	8002bc0 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 7
        case PROBE_SCOPE_CH7:
             p_ch = &ProbeScope_Ch7;
 8002ba8:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <ProbeScope_IsTrig+0x264>)
 8002baa:	60fb      	str	r3, [r7, #12]
             break;
 8002bac:	e008      	b.n	8002bc0 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 8
        case PROBE_SCOPE_CH8:
             p_ch = &ProbeScope_Ch8;
 8002bae:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <ProbeScope_IsTrig+0x268>)
 8002bb0:	60fb      	str	r3, [r7, #12]
             break;
 8002bb2:	e005      	b.n	8002bc0 <ProbeScope_IsTrig+0x74>
#endif
             
        default:
             p_ch                 = &ProbeScope_Ch1;
 8002bb4:	4b78      	ldr	r3, [pc, #480]	; (8002d98 <ProbeScope_IsTrig+0x24c>)
 8002bb6:	60fb      	str	r3, [r7, #12]
             ProbeScope_TrigChSel = PROBE_SCOPE_CH1;
 8002bb8:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <ProbeScope_IsTrig+0x248>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
             break;
 8002bbe:	bf00      	nop
    }         
    ProbeScope_TrigFlag = 0;
 8002bc0:	4b7d      	ldr	r3, [pc, #500]	; (8002db8 <ProbeScope_IsTrig+0x26c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
    if (p_ch->En == 1) {
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	f040 8308 	bne.w	80031e0 <ProbeScope_IsTrig+0x694>
        p_sample_prev = &p_ch->Samples[ProbeScope_SampleIxPrev];          // Point to previous position in sampling buffer
 8002bd0:	4b7a      	ldr	r3, [pc, #488]	; (8002dbc <ProbeScope_IsTrig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3306      	adds	r3, #6
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	60bb      	str	r3, [r7, #8]
        p_sample_cur  = &p_ch->Samples[ProbeScope_SampleIxCur];           // Point to current  position in sampling buffer
 8002bde:	4b78      	ldr	r3, [pc, #480]	; (8002dc0 <ProbeScope_IsTrig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3306      	adds	r3, #6
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	607b      	str	r3, [r7, #4]
        if (ProbeScope_TrigSlope == PROBE_SCOPE_TRIG_POS) {
 8002bec:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <ProbeScope_IsTrig+0x278>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f040 8187 	bne.w	8002f04 <ProbeScope_IsTrig+0x3b8>
            switch (p_ch->DataType) {
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	791b      	ldrb	r3, [r3, #4]
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	f200 82f0 	bhi.w	80031e0 <ProbeScope_IsTrig+0x694>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <ProbeScope_IsTrig+0xbc>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c25 	.word	0x08002c25
 8002c0c:	08002c83 	.word	0x08002c83
 8002c10:	08002ced 	.word	0x08002ced
 8002c14:	08002d4b 	.word	0x08002d4b
 8002c18:	08002def 	.word	0x08002def
 8002c1c:	08002e4d 	.word	0x08002e4d
 8002c20:	08002eab 	.word	0x08002eab
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d119      	bne.n	8002c60 <ProbeScope_IsTrig+0x114>
                         if (p_sample_prev->Val08U < p_sample_cur->Val08U) {
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781a      	ldrb	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d223      	bcs.n	8002c80 <ProbeScope_IsTrig+0x134>
                             if (p_sample_prev->Val08U <= p_ch->TrigLevel.Val08U) {
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	7d1b      	ldrb	r3, [r3, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d81d      	bhi.n	8002c80 <ProbeScope_IsTrig+0x134>
                                 if (p_sample_cur->Val08U >= p_ch->TrigLevel.Val08U) {
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	781a      	ldrb	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	7d1b      	ldrb	r3, [r3, #20]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d317      	bcc.n	8002c80 <ProbeScope_IsTrig+0x134>
                                     ProbeScope_TrigFlag = 1;
 8002c50:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <ProbeScope_IsTrig+0x26c>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002c56:	4b5a      	ldr	r3, [pc, #360]	; (8002dc0 <ProbeScope_IsTrig+0x274>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5b      	ldr	r2, [pc, #364]	; (8002dc8 <ProbeScope_IsTrig+0x27c>)
 8002c5c:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002c5e:	e150      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U == 0) {
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <ProbeScope_IsTrig+0x134>
                             if (p_sample_cur->Val08U != 0) { 
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <ProbeScope_IsTrig+0x134>
                                 ProbeScope_TrigFlag = 1;
 8002c70:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <ProbeScope_IsTrig+0x26c>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002c76:	4b52      	ldr	r3, [pc, #328]	; (8002dc0 <ProbeScope_IsTrig+0x274>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a53      	ldr	r2, [pc, #332]	; (8002dc8 <ProbeScope_IsTrig+0x27c>)
 8002c7c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002c7e:	e140      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
 8002c80:	e13f      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11f      	bne.n	8002cca <ProbeScope_IsTrig+0x17e>
                         if (p_sample_prev->Val08S < p_sample_cur->Val08S) {
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b252      	sxtb	r2, r2
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	429a      	cmp	r2, r3
 8002c98:	da27      	bge.n	8002cea <ProbeScope_IsTrig+0x19e>
                             if (p_sample_prev->Val08S <= p_ch->TrigLevel.Val08S) {
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	7d1b      	ldrb	r3, [r3, #20]
 8002ca2:	b252      	sxtb	r2, r2
 8002ca4:	b25b      	sxtb	r3, r3
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	dc1f      	bgt.n	8002cea <ProbeScope_IsTrig+0x19e>
                                 if (p_sample_cur->Val08S >= p_ch->TrigLevel.Val08S) {
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	7d1b      	ldrb	r3, [r3, #20]
 8002cb2:	b252      	sxtb	r2, r2
 8002cb4:	b25b      	sxtb	r3, r3
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	db17      	blt.n	8002cea <ProbeScope_IsTrig+0x19e>
                                     ProbeScope_TrigFlag = 1;
 8002cba:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <ProbeScope_IsTrig+0x26c>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002cc0:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <ProbeScope_IsTrig+0x274>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a40      	ldr	r2, [pc, #256]	; (8002dc8 <ProbeScope_IsTrig+0x27c>)
 8002cc6:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002cc8:	e11b      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S == 0) {
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <ProbeScope_IsTrig+0x19e>
                             if (p_sample_cur->Val08S != 0) { 
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <ProbeScope_IsTrig+0x19e>
                                 ProbeScope_TrigFlag = 1;
 8002cda:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <ProbeScope_IsTrig+0x26c>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002ce0:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <ProbeScope_IsTrig+0x274>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <ProbeScope_IsTrig+0x27c>)
 8002ce6:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002ce8:	e10b      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
 8002cea:	e10a      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>

#if PROBE_SCOPE_16_BIT_EN > 0                                    
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d119      	bne.n	8002d28 <ProbeScope_IsTrig+0x1dc>
                         if (p_sample_prev->Val16U < p_sample_cur->Val16U) {
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	881a      	ldrh	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d223      	bcs.n	8002d48 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_prev->Val16U <= p_ch->TrigLevel.Val16U) {
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8a9b      	ldrh	r3, [r3, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d81d      	bhi.n	8002d48 <ProbeScope_IsTrig+0x1fc>
                                 if (p_sample_cur->Val16U >= p_ch->TrigLevel.Val16U) {
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8a9b      	ldrh	r3, [r3, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d317      	bcc.n	8002d48 <ProbeScope_IsTrig+0x1fc>
                                     ProbeScope_TrigFlag = 1;
 8002d18:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <ProbeScope_IsTrig+0x26c>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <ProbeScope_IsTrig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <ProbeScope_IsTrig+0x27c>)
 8002d24:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002d26:	e0ec      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U == 0) {
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_cur->Val16U != 0) { 
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <ProbeScope_IsTrig+0x1fc>
                                 ProbeScope_TrigFlag = 1;
 8002d38:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <ProbeScope_IsTrig+0x26c>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <ProbeScope_IsTrig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <ProbeScope_IsTrig+0x27c>)
 8002d44:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002d46:	e0dc      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
 8002d48:	e0db      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d13c      	bne.n	8002dcc <ProbeScope_IsTrig+0x280>
                         if (p_sample_prev->Val16S < p_sample_cur->Val16S) {
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	881a      	ldrh	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b212      	sxth	r2, r2
 8002d5c:	b21b      	sxth	r3, r3
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	da44      	bge.n	8002dec <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_prev->Val16S <= p_ch->TrigLevel.Val16S) {
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	881a      	ldrh	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8a9b      	ldrh	r3, [r3, #20]
 8002d6a:	b212      	sxth	r2, r2
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	dc3c      	bgt.n	8002dec <ProbeScope_IsTrig+0x2a0>
                                 if (p_sample_cur->Val16S >= p_ch->TrigLevel.Val16S) {
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	881a      	ldrh	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8a9b      	ldrh	r3, [r3, #20]
 8002d7a:	b212      	sxth	r2, r2
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	db34      	blt.n	8002dec <ProbeScope_IsTrig+0x2a0>
                                     ProbeScope_TrigFlag = 1;
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <ProbeScope_IsTrig+0x26c>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002d88:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <ProbeScope_IsTrig+0x274>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <ProbeScope_IsTrig+0x27c>)
 8002d8e:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002d90:	e0b7      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
 8002d92:	bf00      	nop
 8002d94:	1fff0615 	.word	0x1fff0615
 8002d98:	1ffe8854 	.word	0x1ffe8854
 8002d9c:	1ffe980c 	.word	0x1ffe980c
 8002da0:	1ffea7c4 	.word	0x1ffea7c4
 8002da4:	1ffeb77c 	.word	0x1ffeb77c
 8002da8:	1ffec734 	.word	0x1ffec734
 8002dac:	1ffed6ec 	.word	0x1ffed6ec
 8002db0:	1ffee6a4 	.word	0x1ffee6a4
 8002db4:	1ffef65c 	.word	0x1ffef65c
 8002db8:	1fff0784 	.word	0x1fff0784
 8002dbc:	1fff0620 	.word	0x1fff0620
 8002dc0:	1fff0624 	.word	0x1fff0624
 8002dc4:	1fff061c 	.word	0x1fff061c
 8002dc8:	1fff078c 	.word	0x1fff078c
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S == 0) {
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_cur->Val16S != 0) { 
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <ProbeScope_IsTrig+0x2a0>
                                 ProbeScope_TrigFlag = 1;
 8002ddc:	4b86      	ldr	r3, [pc, #536]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002de2:	4b86      	ldr	r3, [pc, #536]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a86      	ldr	r2, [pc, #536]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002de8:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002dea:	e08a      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
 8002dec:	e089      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d119      	bne.n	8002e2a <ProbeScope_IsTrig+0x2de>
                         if (p_sample_prev->Val32U < p_sample_cur->Val32U) {
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d223      	bcs.n	8002e4a <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_prev->Val32U <= p_ch->TrigLevel.Val32U) {
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d81d      	bhi.n	8002e4a <ProbeScope_IsTrig+0x2fe>
                                 if (p_sample_cur->Val32U >= p_ch->TrigLevel.Val32U) {
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d317      	bcc.n	8002e4a <ProbeScope_IsTrig+0x2fe>
                                     ProbeScope_TrigFlag = 1;
 8002e1a:	4b77      	ldr	r3, [pc, #476]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002e20:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a76      	ldr	r2, [pc, #472]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002e26:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002e28:	e06b      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U == 0) {
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_cur->Val32U != 0) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <ProbeScope_IsTrig+0x2fe>
                                 ProbeScope_TrigFlag = 1;
 8002e3a:	4b6f      	ldr	r3, [pc, #444]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002e40:	4b6e      	ldr	r3, [pc, #440]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a6e      	ldr	r2, [pc, #440]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002e46:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002e48:	e05b      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
 8002e4a:	e05a      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d119      	bne.n	8002e88 <ProbeScope_IsTrig+0x33c>
                         if (p_sample_prev->Val32S < p_sample_cur->Val32S) {
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	da23      	bge.n	8002ea8 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_prev->Val32S <= p_ch->TrigLevel.Val32S) {
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dc1d      	bgt.n	8002ea8 <ProbeScope_IsTrig+0x35c>
                                 if (p_sample_cur->Val32S >= p_ch->TrigLevel.Val32S) {
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	db17      	blt.n	8002ea8 <ProbeScope_IsTrig+0x35c>
                                     ProbeScope_TrigFlag = 1;
 8002e78:	4b5f      	ldr	r3, [pc, #380]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002e7e:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5f      	ldr	r2, [pc, #380]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002e84:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002e86:	e03c      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S == 0) {
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_cur->Val32S != 0) {
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <ProbeScope_IsTrig+0x35c>
                                 ProbeScope_TrigFlag = 1;
 8002e98:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002e9e:	4b57      	ldr	r3, [pc, #348]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a57      	ldr	r2, [pc, #348]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002ea4:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002ea6:	e02c      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
 8002ea8:	e02b      	b.n	8002f02 <ProbeScope_IsTrig+0x3b6>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	ed93 7a00 	vldr	s14, [r3]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	edd3 7a00 	vldr	s15, [r3]
 8002eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	d400      	bmi.n	8002ec2 <ProbeScope_IsTrig+0x376>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002ec0:	e01e      	b.n	8002f00 <ProbeScope_IsTrig+0x3b4>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	ed93 7a00 	vldr	s14, [r3]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	d900      	bls.n	8002eda <ProbeScope_IsTrig+0x38e>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002ed8:	e012      	b.n	8002f00 <ProbeScope_IsTrig+0x3b4>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	ed93 7a00 	vldr	s14, [r3]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	da00      	bge.n	8002ef2 <ProbeScope_IsTrig+0x3a6>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002ef0:	e006      	b.n	8002f00 <ProbeScope_IsTrig+0x3b4>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002ef8:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a40      	ldr	r2, [pc, #256]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002efe:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002f00:	bf00      	nop
 8002f02:	e16d      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
#endif
            }
        } else {
            switch (p_ch->DataType) {
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	2b06      	cmp	r3, #6
 8002f0a:	f200 8169 	bhi.w	80031e0 <ProbeScope_IsTrig+0x694>
 8002f0e:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <ProbeScope_IsTrig+0x3c8>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002f31 	.word	0x08002f31
 8002f18:	08002f8f 	.word	0x08002f8f
 8002f1c:	08003005 	.word	0x08003005
 8002f20:	08003063 	.word	0x08003063
 8002f24:	080030cd 	.word	0x080030cd
 8002f28:	0800312b 	.word	0x0800312b
 8002f2c:	08003189 	.word	0x08003189
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d119      	bne.n	8002f6c <ProbeScope_IsTrig+0x420>
                         if (p_sample_prev->Val08U > p_sample_cur->Val08U) {
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d923      	bls.n	8002f8c <ProbeScope_IsTrig+0x440>
                             if (p_sample_prev->Val08U >= p_ch->TrigLevel.Val08U) {
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	7d1b      	ldrb	r3, [r3, #20]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d31d      	bcc.n	8002f8c <ProbeScope_IsTrig+0x440>
                                 if (p_sample_cur->Val08U <= p_ch->TrigLevel.Val08U) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	781a      	ldrb	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	7d1b      	ldrb	r3, [r3, #20]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d817      	bhi.n	8002f8c <ProbeScope_IsTrig+0x440>
                                     ProbeScope_TrigFlag = 1;
 8002f5c:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a26      	ldr	r2, [pc, #152]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002f68:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002f6a:	e139      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U != 0) {
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <ProbeScope_IsTrig+0x440>
                             if (p_sample_cur->Val08U == 0) {
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <ProbeScope_IsTrig+0x440>
                                 ProbeScope_TrigFlag = 1;
 8002f7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002f82:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002f88:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002f8a:	e129      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
 8002f8c:	e128      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11f      	bne.n	8002fd6 <ProbeScope_IsTrig+0x48a>
                         if (p_sample_prev->Val08S > p_sample_cur->Val08S) {
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b252      	sxtb	r2, r2
 8002fa0:	b25b      	sxtb	r3, r3
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	dd27      	ble.n	8002ff6 <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_prev->Val08S >= p_ch->TrigLevel.Val08S) {
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	7d1b      	ldrb	r3, [r3, #20]
 8002fae:	b252      	sxtb	r2, r2
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	db1f      	blt.n	8002ff6 <ProbeScope_IsTrig+0x4aa>
                                 if (p_sample_cur->Val08S <= p_ch->TrigLevel.Val08S) {
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	7d1b      	ldrb	r3, [r3, #20]
 8002fbe:	b252      	sxtb	r2, r2
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	dc17      	bgt.n	8002ff6 <ProbeScope_IsTrig+0x4aa>
                                     ProbeScope_TrigFlag = 1;
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002fd2:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002fd4:	e104      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S != 0) {
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_cur->Val08S == 0) {
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d107      	bne.n	8002ff6 <ProbeScope_IsTrig+0x4aa>
                                 ProbeScope_TrigFlag = 1;
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <ProbeScope_IsTrig+0x4ac>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <ProbeScope_IsTrig+0x4b0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a03      	ldr	r2, [pc, #12]	; (8003000 <ProbeScope_IsTrig+0x4b4>)
 8002ff2:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002ff4:	e0f4      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
 8002ff6:	e0f3      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
 8002ff8:	1fff0784 	.word	0x1fff0784
 8002ffc:	1fff0624 	.word	0x1fff0624
 8003000:	1fff078c 	.word	0x1fff078c
                                    
#if PROBE_SCOPE_16_BIT_EN > 0                                   
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d119      	bne.n	8003040 <ProbeScope_IsTrig+0x4f4>
                         if (p_sample_prev->Val16U > p_sample_cur->Val16U) {
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	881a      	ldrh	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d923      	bls.n	8003060 <ProbeScope_IsTrig+0x514>
                             if (p_sample_prev->Val16U >= p_ch->TrigLevel.Val16U) {
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8a9b      	ldrh	r3, [r3, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d31d      	bcc.n	8003060 <ProbeScope_IsTrig+0x514>
                                 if (p_sample_cur->Val16U <= p_ch->TrigLevel.Val16U) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8a9b      	ldrh	r3, [r3, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	d817      	bhi.n	8003060 <ProbeScope_IsTrig+0x514>
                                     ProbeScope_TrigFlag = 1;
 8003030:	4b6e      	ldr	r3, [pc, #440]	; (80031ec <ProbeScope_IsTrig+0x6a0>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003036:	4b6e      	ldr	r3, [pc, #440]	; (80031f0 <ProbeScope_IsTrig+0x6a4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6e      	ldr	r2, [pc, #440]	; (80031f4 <ProbeScope_IsTrig+0x6a8>)
 800303c:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800303e:	e0cf      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U != 0) {
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <ProbeScope_IsTrig+0x514>
                             if (p_sample_cur->Val16U == 0) {
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d107      	bne.n	8003060 <ProbeScope_IsTrig+0x514>
                                 ProbeScope_TrigFlag = 1;
 8003050:	4b66      	ldr	r3, [pc, #408]	; (80031ec <ProbeScope_IsTrig+0x6a0>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003056:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <ProbeScope_IsTrig+0x6a4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a66      	ldr	r2, [pc, #408]	; (80031f4 <ProbeScope_IsTrig+0x6a8>)
 800305c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800305e:	e0bf      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
 8003060:	e0be      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11f      	bne.n	80030aa <ProbeScope_IsTrig+0x55e>
                         if (p_sample_prev->Val16S > p_sample_cur->Val16S) {
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	881a      	ldrh	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b212      	sxth	r2, r2
 8003074:	b21b      	sxth	r3, r3
 8003076:	429a      	cmp	r2, r3
 8003078:	dd27      	ble.n	80030ca <ProbeScope_IsTrig+0x57e>
                             if (p_sample_prev->Val16S >= p_ch->TrigLevel.Val16S) {
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8a9b      	ldrh	r3, [r3, #20]
 8003082:	b212      	sxth	r2, r2
 8003084:	b21b      	sxth	r3, r3
 8003086:	429a      	cmp	r2, r3
 8003088:	db1f      	blt.n	80030ca <ProbeScope_IsTrig+0x57e>
                                 if (p_sample_cur->Val16S <= p_ch->TrigLevel.Val16S) {
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8a9b      	ldrh	r3, [r3, #20]
 8003092:	b212      	sxth	r2, r2
 8003094:	b21b      	sxth	r3, r3
 8003096:	429a      	cmp	r2, r3
 8003098:	dc17      	bgt.n	80030ca <ProbeScope_IsTrig+0x57e>
                                     ProbeScope_TrigFlag = 1;
 800309a:	4b54      	ldr	r3, [pc, #336]	; (80031ec <ProbeScope_IsTrig+0x6a0>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80030a0:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <ProbeScope_IsTrig+0x6a4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a53      	ldr	r2, [pc, #332]	; (80031f4 <ProbeScope_IsTrig+0x6a8>)
 80030a6:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80030a8:	e09a      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S != 0) {
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <ProbeScope_IsTrig+0x57e>
                             if (p_sample_cur->Val16S == 0) {
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <ProbeScope_IsTrig+0x57e>
                                 ProbeScope_TrigFlag = 1;
 80030ba:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <ProbeScope_IsTrig+0x6a0>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80030c0:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <ProbeScope_IsTrig+0x6a4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <ProbeScope_IsTrig+0x6a8>)
 80030c6:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80030c8:	e08a      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
 80030ca:	e089      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                                                     
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d119      	bne.n	8003108 <ProbeScope_IsTrig+0x5bc>
                         if (p_sample_prev->Val32U > p_sample_cur->Val32U) {                  
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d923      	bls.n	8003128 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_prev->Val32U >= p_ch->TrigLevel.Val32U) {
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d31d      	bcc.n	8003128 <ProbeScope_IsTrig+0x5dc>
                                 if (p_sample_cur->Val32U <= p_ch->TrigLevel.Val32U) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d817      	bhi.n	8003128 <ProbeScope_IsTrig+0x5dc>
                                     ProbeScope_TrigFlag = 1;
 80030f8:	4b3c      	ldr	r3, [pc, #240]	; (80031ec <ProbeScope_IsTrig+0x6a0>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80030fe:	4b3c      	ldr	r3, [pc, #240]	; (80031f0 <ProbeScope_IsTrig+0x6a4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a3c      	ldr	r2, [pc, #240]	; (80031f4 <ProbeScope_IsTrig+0x6a8>)
 8003104:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003106:	e06b      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U != 0) {
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_cur->Val32U == 0) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <ProbeScope_IsTrig+0x5dc>
                                 ProbeScope_TrigFlag = 1;
 8003118:	4b34      	ldr	r3, [pc, #208]	; (80031ec <ProbeScope_IsTrig+0x6a0>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800311e:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <ProbeScope_IsTrig+0x6a4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a34      	ldr	r2, [pc, #208]	; (80031f4 <ProbeScope_IsTrig+0x6a8>)
 8003124:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003126:	e05b      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
 8003128:	e05a      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d119      	bne.n	8003166 <ProbeScope_IsTrig+0x61a>
                         if (p_sample_prev->Val32S > p_sample_cur->Val32S) {
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	dd23      	ble.n	8003186 <ProbeScope_IsTrig+0x63a>
                             if (p_sample_prev->Val32S >= p_ch->TrigLevel.Val32S) {
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	429a      	cmp	r2, r3
 8003148:	db1d      	blt.n	8003186 <ProbeScope_IsTrig+0x63a>
                                 if (p_sample_cur->Val32S <= p_ch->TrigLevel.Val32S) {
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	429a      	cmp	r2, r3
 8003154:	dc17      	bgt.n	8003186 <ProbeScope_IsTrig+0x63a>
                                     ProbeScope_TrigFlag = 1;
 8003156:	4b25      	ldr	r3, [pc, #148]	; (80031ec <ProbeScope_IsTrig+0x6a0>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800315c:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <ProbeScope_IsTrig+0x6a4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <ProbeScope_IsTrig+0x6a8>)
 8003162:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003164:	e03c      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S != 0) {
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <ProbeScope_IsTrig+0x63a>
                             if (p_sample_cur->Val32S == 0) {
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <ProbeScope_IsTrig+0x63a>
                                 ProbeScope_TrigFlag = 1;
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <ProbeScope_IsTrig+0x6a0>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800317c:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <ProbeScope_IsTrig+0x6a4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <ProbeScope_IsTrig+0x6a8>)
 8003182:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003184:	e02c      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
 8003186:	e02b      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	ed93 7a00 	vldr	s14, [r3]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319c:	dc00      	bgt.n	80031a0 <ProbeScope_IsTrig+0x654>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800319e:	e01f      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	ed93 7a00 	vldr	s14, [r3]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80031ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	da00      	bge.n	80031b8 <ProbeScope_IsTrig+0x66c>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80031b6:	e013      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	ed93 7a00 	vldr	s14, [r3]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80031c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	d900      	bls.n	80031d0 <ProbeScope_IsTrig+0x684>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80031ce:	e007      	b.n	80031e0 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <ProbeScope_IsTrig+0x6a0>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <ProbeScope_IsTrig+0x6a4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a06      	ldr	r2, [pc, #24]	; (80031f4 <ProbeScope_IsTrig+0x6a8>)
 80031dc:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80031de:	bf00      	nop
#endif                     
            }                          
        }
    }
}
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	1fff0784 	.word	0x1fff0784
 80031f0:	1fff0624 	.word	0x1fff0624
 80031f4:	1fff078c 	.word	0x1fff078c

080031f8 <reference_generator_compute>:
float_t reference_old = 0;

ref_type ref_type_select = 0;

void reference_generator_compute(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
	// Compute human data inputs into machine outputs
	switch (ref_type_select)
 80031fc:	4ba1      	ldr	r3, [pc, #644]	; (8003484 <reference_generator_compute+0x28c>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b03      	cmp	r3, #3
 8003202:	f200 8107 	bhi.w	8003414 <reference_generator_compute+0x21c>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <reference_generator_compute+0x14>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	0800321d 	.word	0x0800321d
 8003210:	080032a1 	.word	0x080032a1
 8003214:	08003325 	.word	0x08003325
 8003218:	08003399 	.word	0x08003399
	{
	case (REF_POS):
		high_level = rotation_input * ROTATION_IU;
 800321c:	4b9a      	ldr	r3, [pc, #616]	; (8003488 <reference_generator_compute+0x290>)
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800348c <reference_generator_compute+0x294>
 8003226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800322a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800322e:	ee17 2a90 	vmov	r2, s15
 8003232:	4b97      	ldr	r3, [pc, #604]	; (8003490 <reference_generator_compute+0x298>)
 8003234:	601a      	str	r2, [r3, #0]
		high_level_time = time_high_input_s * SECOND;
 8003236:	4b97      	ldr	r3, [pc, #604]	; (8003494 <reference_generator_compute+0x29c>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8003498 <reference_generator_compute+0x2a0>
 8003240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003248:	ee17 2a90 	vmov	r2, s15
 800324c:	4b93      	ldr	r3, [pc, #588]	; (800349c <reference_generator_compute+0x2a4>)
 800324e:	601a      	str	r2, [r3, #0]
		low_level_time = time_low_input_s * SECOND;
 8003250:	4b93      	ldr	r3, [pc, #588]	; (80034a0 <reference_generator_compute+0x2a8>)
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003498 <reference_generator_compute+0x2a0>
 800325a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003262:	ee17 2a90 	vmov	r2, s15
 8003266:	4b8f      	ldr	r3, [pc, #572]	; (80034a4 <reference_generator_compute+0x2ac>)
 8003268:	601a      	str	r2, [r3, #0]
		rise_time = time_rise_input_s * SECOND;
 800326a:	4b8f      	ldr	r3, [pc, #572]	; (80034a8 <reference_generator_compute+0x2b0>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003498 <reference_generator_compute+0x2a0>
 8003274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800327c:	ee17 2a90 	vmov	r2, s15
 8003280:	4b8a      	ldr	r3, [pc, #552]	; (80034ac <reference_generator_compute+0x2b4>)
 8003282:	601a      	str	r2, [r3, #0]
		fall_time = time_fall_input_s * SECOND;
 8003284:	4b8a      	ldr	r3, [pc, #552]	; (80034b0 <reference_generator_compute+0x2b8>)
 8003286:	edd3 7a00 	vldr	s15, [r3]
 800328a:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003498 <reference_generator_compute+0x2a0>
 800328e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003296:	ee17 2a90 	vmov	r2, s15
 800329a:	4b86      	ldr	r3, [pc, #536]	; (80034b4 <reference_generator_compute+0x2bc>)
 800329c:	601a      	str	r2, [r3, #0]
		break;
 800329e:	e0ba      	b.n	8003416 <reference_generator_compute+0x21e>
	case (REF_SPD):
		rise_time = time_rise_input_s * SECOND;
 80032a0:	4b81      	ldr	r3, [pc, #516]	; (80034a8 <reference_generator_compute+0x2b0>)
 80032a2:	edd3 7a00 	vldr	s15, [r3]
 80032a6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003498 <reference_generator_compute+0x2a0>
 80032aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b2:	ee17 2a90 	vmov	r2, s15
 80032b6:	4b7d      	ldr	r3, [pc, #500]	; (80034ac <reference_generator_compute+0x2b4>)
 80032b8:	601a      	str	r2, [r3, #0]
		fall_time = time_high_input_s * SECOND;
 80032ba:	4b76      	ldr	r3, [pc, #472]	; (8003494 <reference_generator_compute+0x29c>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003498 <reference_generator_compute+0x2a0>
 80032c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032cc:	ee17 2a90 	vmov	r2, s15
 80032d0:	4b78      	ldr	r3, [pc, #480]	; (80034b4 <reference_generator_compute+0x2bc>)
 80032d2:	601a      	str	r2, [r3, #0]
		high_level = rpm_input / (MINUTE / ROTATION_IU);
 80032d4:	4b78      	ldr	r3, [pc, #480]	; (80034b8 <reference_generator_compute+0x2c0>)
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x3e
 80032de:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80032e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032e6:	ee17 2a90 	vmov	r2, s15
 80032ea:	4b69      	ldr	r3, [pc, #420]	; (8003490 <reference_generator_compute+0x298>)
 80032ec:	601a      	str	r2, [r3, #0]
		high_level_time = time_high_input_s * SECOND;
 80032ee:	4b69      	ldr	r3, [pc, #420]	; (8003494 <reference_generator_compute+0x29c>)
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003498 <reference_generator_compute+0x2a0>
 80032f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003300:	ee17 2a90 	vmov	r2, s15
 8003304:	4b65      	ldr	r3, [pc, #404]	; (800349c <reference_generator_compute+0x2a4>)
 8003306:	601a      	str	r2, [r3, #0]
		low_level_time = time_low_input_s * SECOND;
 8003308:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <reference_generator_compute+0x2a8>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003498 <reference_generator_compute+0x2a0>
 8003312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331a:	ee17 2a90 	vmov	r2, s15
 800331e:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <reference_generator_compute+0x2ac>)
 8003320:	601a      	str	r2, [r3, #0]
		break;
 8003322:	e078      	b.n	8003416 <reference_generator_compute+0x21e>
	case (REF_I):
		high_level = current_input;
 8003324:	4b65      	ldr	r3, [pc, #404]	; (80034bc <reference_generator_compute+0x2c4>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b21b      	sxth	r3, r3
 800332a:	4a59      	ldr	r2, [pc, #356]	; (8003490 <reference_generator_compute+0x298>)
 800332c:	6013      	str	r3, [r2, #0]
		high_level_time = time_high_input_s * SECOND;
 800332e:	4b59      	ldr	r3, [pc, #356]	; (8003494 <reference_generator_compute+0x29c>)
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003498 <reference_generator_compute+0x2a0>
 8003338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800333c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003340:	ee17 2a90 	vmov	r2, s15
 8003344:	4b55      	ldr	r3, [pc, #340]	; (800349c <reference_generator_compute+0x2a4>)
 8003346:	601a      	str	r2, [r3, #0]
		low_level_time = time_low_input_s * SECOND;
 8003348:	4b55      	ldr	r3, [pc, #340]	; (80034a0 <reference_generator_compute+0x2a8>)
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003498 <reference_generator_compute+0x2a0>
 8003352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800335a:	ee17 2a90 	vmov	r2, s15
 800335e:	4b51      	ldr	r3, [pc, #324]	; (80034a4 <reference_generator_compute+0x2ac>)
 8003360:	601a      	str	r2, [r3, #0]
		rise_time = time_rise_input_s * SECOND;
 8003362:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <reference_generator_compute+0x2b0>)
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003498 <reference_generator_compute+0x2a0>
 800336c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003374:	ee17 2a90 	vmov	r2, s15
 8003378:	4b4c      	ldr	r3, [pc, #304]	; (80034ac <reference_generator_compute+0x2b4>)
 800337a:	601a      	str	r2, [r3, #0]
		fall_time = time_fall_input_s * SECOND;
 800337c:	4b4c      	ldr	r3, [pc, #304]	; (80034b0 <reference_generator_compute+0x2b8>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003498 <reference_generator_compute+0x2a0>
 8003386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800338a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800338e:	ee17 2a90 	vmov	r2, s15
 8003392:	4b48      	ldr	r3, [pc, #288]	; (80034b4 <reference_generator_compute+0x2bc>)
 8003394:	601a      	str	r2, [r3, #0]
		break;
 8003396:	e03e      	b.n	8003416 <reference_generator_compute+0x21e>
	case (REF_U):
		high_level = voltage_input;
 8003398:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <reference_generator_compute+0x2c8>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b21b      	sxth	r3, r3
 800339e:	4a3c      	ldr	r2, [pc, #240]	; (8003490 <reference_generator_compute+0x298>)
 80033a0:	6013      	str	r3, [r2, #0]
		high_level_time = time_high_input_s * SECOND;
 80033a2:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <reference_generator_compute+0x29c>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003498 <reference_generator_compute+0x2a0>
 80033ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b4:	ee17 2a90 	vmov	r2, s15
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <reference_generator_compute+0x2a4>)
 80033ba:	601a      	str	r2, [r3, #0]
		low_level_time = time_low_input_s * SECOND;
 80033bc:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <reference_generator_compute+0x2a8>)
 80033be:	edd3 7a00 	vldr	s15, [r3]
 80033c2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003498 <reference_generator_compute+0x2a0>
 80033c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ce:	ee17 2a90 	vmov	r2, s15
 80033d2:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <reference_generator_compute+0x2ac>)
 80033d4:	601a      	str	r2, [r3, #0]
		rise_time = time_rise_input_s * SECOND;
 80033d6:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <reference_generator_compute+0x2b0>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003498 <reference_generator_compute+0x2a0>
 80033e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e8:	ee17 2a90 	vmov	r2, s15
 80033ec:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <reference_generator_compute+0x2b4>)
 80033ee:	601a      	str	r2, [r3, #0]
		fall_time = time_fall_input_s * SECOND;
 80033f0:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <reference_generator_compute+0x2b8>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003498 <reference_generator_compute+0x2a0>
 80033fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003402:	ee17 2a90 	vmov	r2, s15
 8003406:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <reference_generator_compute+0x2bc>)
 8003408:	601a      	str	r2, [r3, #0]
		u_q_ref = reference;
 800340a:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <reference_generator_compute+0x2cc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2e      	ldr	r2, [pc, #184]	; (80034c8 <reference_generator_compute+0x2d0>)
 8003410:	6013      	str	r3, [r2, #0]
		break;
 8003412:	e000      	b.n	8003416 <reference_generator_compute+0x21e>
	default:
		break;
 8003414:	bf00      	nop
	}

	rise_increment = (float_t)high_level / rise_time;
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <reference_generator_compute+0x298>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <reference_generator_compute+0x2b4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800342e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <reference_generator_compute+0x2d4>)
 8003434:	edc3 7a00 	vstr	s15, [r3]
	fall_decrement = (float_t)high_level / fall_time;
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <reference_generator_compute+0x298>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <reference_generator_compute+0x2bc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003450:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <reference_generator_compute+0x2d8>)
 8003456:	edc3 7a00 	vstr	s15, [r3]
	reference = 0;
 800345a:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <reference_generator_compute+0x2cc>)
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
	reference_old = 0;
 8003462:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <reference_generator_compute+0x2dc>)
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800346a:	b672      	cpsid	i

	__disable_irq();
	interrupt_counter_ref_gen = 0;
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <reference_generator_compute+0x2e0>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003472:	b662      	cpsie	i
	__enable_irq();
	ref_gen_status = STATUS_1_RISE;
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <reference_generator_compute+0x2e4>)
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
}
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	1fff0668 	.word	0x1fff0668
 8003488:	1fff065c 	.word	0x1fff065c
 800348c:	44fa0000 	.word	0x44fa0000
 8003490:	1fff07b4 	.word	0x1fff07b4
 8003494:	1fff064c 	.word	0x1fff064c
 8003498:	447a0000 	.word	0x447a0000
 800349c:	1fff07a4 	.word	0x1fff07a4
 80034a0:	1fff0650 	.word	0x1fff0650
 80034a4:	1fff07b0 	.word	0x1fff07b0
 80034a8:	1fff0644 	.word	0x1fff0644
 80034ac:	1fff07ac 	.word	0x1fff07ac
 80034b0:	1fff0648 	.word	0x1fff0648
 80034b4:	1fff07bc 	.word	0x1fff07bc
 80034b8:	1fff0658 	.word	0x1fff0658
 80034bc:	1fff0654 	.word	0x1fff0654
 80034c0:	1fff0656 	.word	0x1fff0656
 80034c4:	1fff0660 	.word	0x1fff0660
 80034c8:	1ffe8850 	.word	0x1ffe8850
 80034cc:	1fff07a0 	.word	0x1fff07a0
 80034d0:	1fff07b8 	.word	0x1fff07b8
 80034d4:	1fff0664 	.word	0x1fff0664
 80034d8:	1fff063c 	.word	0x1fff063c
 80034dc:	1fff0640 	.word	0x1fff0640

080034e0 <reference_generator>:

void reference_generator(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
	switch (ref_gen_status)
 80034e4:	4b4f      	ldr	r3, [pc, #316]	; (8003624 <reference_generator+0x144>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d870      	bhi.n	80035d0 <reference_generator+0xf0>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <reference_generator+0x14>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003505 	.word	0x08003505
 80034f8:	08003537 	.word	0x08003537
 80034fc:	08003555 	.word	0x08003555
 8003500:	08003587 	.word	0x08003587
	{
	case (STATUS_1_RISE):
		if (interrupt_counter_ref_gen >= rise_time)
 8003504:	4b48      	ldr	r3, [pc, #288]	; (8003628 <reference_generator+0x148>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4b48      	ldr	r3, [pc, #288]	; (800362c <reference_generator+0x14c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d805      	bhi.n	800351e <reference_generator+0x3e>
		{
			ref_gen_status = STATUS_2_HIGH_LEVEL;
 8003512:	4b44      	ldr	r3, [pc, #272]	; (8003624 <reference_generator+0x144>)
 8003514:	2202      	movs	r2, #2
 8003516:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 8003518:	4b44      	ldr	r3, [pc, #272]	; (800362c <reference_generator+0x14c>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
		}
		reference += rise_increment;
 800351e:	4b44      	ldr	r3, [pc, #272]	; (8003630 <reference_generator+0x150>)
 8003520:	ed93 7a00 	vldr	s14, [r3]
 8003524:	4b43      	ldr	r3, [pc, #268]	; (8003634 <reference_generator+0x154>)
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352e:	4b40      	ldr	r3, [pc, #256]	; (8003630 <reference_generator+0x150>)
 8003530:	edc3 7a00 	vstr	s15, [r3]

		break;
 8003534:	e04d      	b.n	80035d2 <reference_generator+0xf2>

	case (STATUS_2_HIGH_LEVEL):
		if (interrupt_counter_ref_gen >= high_level_time)
 8003536:	4b40      	ldr	r3, [pc, #256]	; (8003638 <reference_generator+0x158>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	4b3b      	ldr	r3, [pc, #236]	; (800362c <reference_generator+0x14c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d806      	bhi.n	8003552 <reference_generator+0x72>
		{
			ref_gen_status = STATUS_3_FALL;
 8003544:	4b37      	ldr	r3, [pc, #220]	; (8003624 <reference_generator+0x144>)
 8003546:	2203      	movs	r2, #3
 8003548:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 800354a:	4b38      	ldr	r3, [pc, #224]	; (800362c <reference_generator+0x14c>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
		}
		break;
 8003550:	e03f      	b.n	80035d2 <reference_generator+0xf2>
 8003552:	e03e      	b.n	80035d2 <reference_generator+0xf2>

	case (STATUS_3_FALL):
	{
		if (interrupt_counter_ref_gen >= fall_time)
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <reference_generator+0x15c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b34      	ldr	r3, [pc, #208]	; (800362c <reference_generator+0x14c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d805      	bhi.n	800356e <reference_generator+0x8e>
		{
			ref_gen_status = STATUS_4_LOW_LEVEL;
 8003562:	4b30      	ldr	r3, [pc, #192]	; (8003624 <reference_generator+0x144>)
 8003564:	2204      	movs	r2, #4
 8003566:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 8003568:	4b30      	ldr	r3, [pc, #192]	; (800362c <reference_generator+0x14c>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
		}
		reference -= fall_decrement;
 800356e:	4b30      	ldr	r3, [pc, #192]	; (8003630 <reference_generator+0x150>)
 8003570:	ed93 7a00 	vldr	s14, [r3]
 8003574:	4b32      	ldr	r3, [pc, #200]	; (8003640 <reference_generator+0x160>)
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <reference_generator+0x150>)
 8003580:	edc3 7a00 	vstr	s15, [r3]
	}
	break;
 8003584:	e025      	b.n	80035d2 <reference_generator+0xf2>

	case (STATUS_4_LOW_LEVEL):
		if ((interrupt_counter_ref_gen >= low_level_time) && (repeat_motion == 0))
 8003586:	4b2f      	ldr	r3, [pc, #188]	; (8003644 <reference_generator+0x164>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <reference_generator+0x14c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d80a      	bhi.n	80035aa <reference_generator+0xca>
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <reference_generator+0x168>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <reference_generator+0xca>
		{
			ref_gen_status = STATUS_0_DISABLED;
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <reference_generator+0x144>)
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 80035a2:	4b22      	ldr	r3, [pc, #136]	; (800362c <reference_generator+0x14c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e011      	b.n	80035ce <reference_generator+0xee>
		}
		else if ((interrupt_counter_ref_gen >= low_level_time) && (repeat_motion == 1))
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <reference_generator+0x164>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <reference_generator+0x14c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d80a      	bhi.n	80035ce <reference_generator+0xee>
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <reference_generator+0x168>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <reference_generator+0xee>
		{
			ref_gen_status = STATUS_1_RISE;
 80035c0:	4b18      	ldr	r3, [pc, #96]	; (8003624 <reference_generator+0x144>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
			interrupt_counter_ref_gen = 0;
 80035c6:	4b19      	ldr	r3, [pc, #100]	; (800362c <reference_generator+0x14c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
		}
		break;
 80035cc:	e001      	b.n	80035d2 <reference_generator+0xf2>
 80035ce:	e000      	b.n	80035d2 <reference_generator+0xf2>

	default:
		break;
 80035d0:	bf00      	nop
	}

	switch (ref_type_select)
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <reference_generator+0x16c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d81e      	bhi.n	8003618 <reference_generator+0x138>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <reference_generator+0x100>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	080035fb 	.word	0x080035fb
 80035e8:	08003605 	.word	0x08003605
 80035ec:	0800360f 	.word	0x0800360f
	{
	case (REF_POS):
		pos_ref = reference;
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <reference_generator+0x150>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a16      	ldr	r2, [pc, #88]	; (8003650 <reference_generator+0x170>)
 80035f6:	6013      	str	r3, [r2, #0]
		break;
 80035f8:	e00f      	b.n	800361a <reference_generator+0x13a>
	case (REF_SPD):
		spd_ref = reference;
 80035fa:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <reference_generator+0x150>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a15      	ldr	r2, [pc, #84]	; (8003654 <reference_generator+0x174>)
 8003600:	6013      	str	r3, [r2, #0]
		break;
 8003602:	e00a      	b.n	800361a <reference_generator+0x13a>
	case (REF_I):
		i_q_ref = reference;
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <reference_generator+0x150>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <reference_generator+0x178>)
 800360a:	6013      	str	r3, [r2, #0]
		break;
 800360c:	e005      	b.n	800361a <reference_generator+0x13a>
	case (REF_U):
		u_q_ref = reference;
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <reference_generator+0x150>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <reference_generator+0x17c>)
 8003614:	6013      	str	r3, [r2, #0]
		break;
 8003616:	e000      	b.n	800361a <reference_generator+0x13a>
	default:
		break;
 8003618:	bf00      	nop
	}
}
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	1fff0640 	.word	0x1fff0640
 8003628:	1fff07ac 	.word	0x1fff07ac
 800362c:	1fff063c 	.word	0x1fff063c
 8003630:	1fff0660 	.word	0x1fff0660
 8003634:	1fff07a0 	.word	0x1fff07a0
 8003638:	1fff07a4 	.word	0x1fff07a4
 800363c:	1fff07bc 	.word	0x1fff07bc
 8003640:	1fff07b8 	.word	0x1fff07b8
 8003644:	1fff07b0 	.word	0x1fff07b0
 8003648:	1ffe881c 	.word	0x1ffe881c
 800364c:	1fff0668 	.word	0x1fff0668
 8003650:	1ffe8848 	.word	0x1ffe8848
 8003654:	1ffe884c 	.word	0x1ffe884c
 8003658:	1ffe8840 	.word	0x1ffe8840
 800365c:	1ffe8850 	.word	0x1ffe8850

08003660 <state_machine>:
/*
	Simple State Machine
	DRIVE_DISABLED | DRIVE_ON | OPERATION_ENABLED
*/
void state_machine(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
	switch (DRIVE_STATUS_MSK)
 8003664:	4b81      	ldr	r3, [pc, #516]	; (800386c <state_machine+0x20c>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	2b01      	cmp	r3, #1
 800366e:	d026      	beq.n	80036be <state_machine+0x5e>
 8003670:	2b01      	cmp	r3, #1
 8003672:	d302      	bcc.n	800367a <state_machine+0x1a>
 8003674:	2b02      	cmp	r3, #2
 8003676:	d061      	beq.n	800373c <state_machine+0xdc>
			drive_command_old = drive_command;
		}
	}
	break;
	default:
		break;
 8003678:	e0f6      	b.n	8003868 <state_machine+0x208>
{
	switch (DRIVE_STATUS_MSK)
	{
	case (STATE_0_DRIVE_DISABLED):
		// Transition 0->1
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_0_DRIVE_DISABLED) && (DRIVE_COMMAND_STATE_MSK == STATE_1_DRIVE_ON))
 800367a:	4b7d      	ldr	r3, [pc, #500]	; (8003870 <state_machine+0x210>)
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	2b00      	cmp	r3, #0
 8003684:	d11a      	bne.n	80036bc <state_machine+0x5c>
 8003686:	4b7b      	ldr	r3, [pc, #492]	; (8003874 <state_machine+0x214>)
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	2b01      	cmp	r3, #1
 8003690:	d114      	bne.n	80036bc <state_machine+0x5c>
		{
			drive_on();
 8003692:	f000 f909 	bl	80038a8 <drive_on>
			drive_status &= DRIVE_STATUS_CLEAR;
 8003696:	4b75      	ldr	r3, [pc, #468]	; (800386c <state_machine+0x20c>)
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	f023 030f 	bic.w	r3, r3, #15
 800369e:	b29a      	uxth	r2, r3
 80036a0:	4b72      	ldr	r3, [pc, #456]	; (800386c <state_machine+0x20c>)
 80036a2:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_1_DRIVE_ON;
 80036a4:	4b71      	ldr	r3, [pc, #452]	; (800386c <state_machine+0x20c>)
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	4b6f      	ldr	r3, [pc, #444]	; (800386c <state_machine+0x20c>)
 80036b0:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 80036b2:	4b70      	ldr	r3, [pc, #448]	; (8003874 <state_machine+0x214>)
 80036b4:	881a      	ldrh	r2, [r3, #0]
 80036b6:	4b6e      	ldr	r3, [pc, #440]	; (8003870 <state_machine+0x210>)
 80036b8:	801a      	strh	r2, [r3, #0]
		}
		break;
 80036ba:	e0d5      	b.n	8003868 <state_machine+0x208>
 80036bc:	e0d4      	b.n	8003868 <state_machine+0x208>

	case (STATE_1_DRIVE_ON):
		// Transition 1->2
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_1_DRIVE_ON) && (DRIVE_COMMAND_STATE_MSK == STATE_2_OPERATION_ENABLED))
 80036be:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <state_machine+0x210>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d119      	bne.n	80036fe <state_machine+0x9e>
 80036ca:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <state_machine+0x214>)
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d113      	bne.n	80036fe <state_machine+0x9e>
		{
			operation_enabled();
 80036d6:	f000 f907 	bl	80038e8 <operation_enabled>
			drive_status &= DRIVE_STATUS_CLEAR;
 80036da:	4b64      	ldr	r3, [pc, #400]	; (800386c <state_machine+0x20c>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	f023 030f 	bic.w	r3, r3, #15
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	4b61      	ldr	r3, [pc, #388]	; (800386c <state_machine+0x20c>)
 80036e6:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_2_OPERATION_ENABLED;
 80036e8:	4b60      	ldr	r3, [pc, #384]	; (800386c <state_machine+0x20c>)
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f043 0302 	orr.w	r3, r3, #2
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	4b5e      	ldr	r3, [pc, #376]	; (800386c <state_machine+0x20c>)
 80036f4:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 80036f6:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <state_machine+0x214>)
 80036f8:	881a      	ldrh	r2, [r3, #0]
 80036fa:	4b5d      	ldr	r3, [pc, #372]	; (8003870 <state_machine+0x210>)
 80036fc:	801a      	strh	r2, [r3, #0]
		}
		// Transition 1->0
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_1_DRIVE_ON) && (DRIVE_COMMAND_STATE_MSK == STATE_0_DRIVE_DISABLED))
 80036fe:	4b5c      	ldr	r3, [pc, #368]	; (8003870 <state_machine+0x210>)
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	2b01      	cmp	r3, #1
 8003708:	d117      	bne.n	800373a <state_machine+0xda>
 800370a:	4b5a      	ldr	r3, [pc, #360]	; (8003874 <state_machine+0x214>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	2b00      	cmp	r3, #0
 8003714:	d111      	bne.n	800373a <state_machine+0xda>
		{
			drive_disabled();
 8003716:	f000 f8b3 	bl	8003880 <drive_disabled>
			drive_status &= DRIVE_STATUS_CLEAR;
 800371a:	4b54      	ldr	r3, [pc, #336]	; (800386c <state_machine+0x20c>)
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	f023 030f 	bic.w	r3, r3, #15
 8003722:	b29a      	uxth	r2, r3
 8003724:	4b51      	ldr	r3, [pc, #324]	; (800386c <state_machine+0x20c>)
 8003726:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_0_DRIVE_DISABLED;
 8003728:	4b50      	ldr	r3, [pc, #320]	; (800386c <state_machine+0x20c>)
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	4b4f      	ldr	r3, [pc, #316]	; (800386c <state_machine+0x20c>)
 800372e:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 8003730:	4b50      	ldr	r3, [pc, #320]	; (8003874 <state_machine+0x214>)
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	4b4e      	ldr	r3, [pc, #312]	; (8003870 <state_machine+0x210>)
 8003736:	801a      	strh	r2, [r3, #0]
		}
		break;
 8003738:	e096      	b.n	8003868 <state_machine+0x208>
 800373a:	e095      	b.n	8003868 <state_machine+0x208>

	case (STATE_2_OPERATION_ENABLED):
	{
		// Transition 2->1
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_2_OPERATION_ENABLED) && (DRIVE_COMMAND_STATE_MSK == STATE_1_DRIVE_ON))
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <state_machine+0x210>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	2b02      	cmp	r3, #2
 8003746:	d119      	bne.n	800377c <state_machine+0x11c>
 8003748:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <state_machine+0x214>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	2b01      	cmp	r3, #1
 8003752:	d113      	bne.n	800377c <state_machine+0x11c>
		{
			drive_on();
 8003754:	f000 f8a8 	bl	80038a8 <drive_on>
			drive_status &= DRIVE_STATUS_CLEAR;
 8003758:	4b44      	ldr	r3, [pc, #272]	; (800386c <state_machine+0x20c>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	f023 030f 	bic.w	r3, r3, #15
 8003760:	b29a      	uxth	r2, r3
 8003762:	4b42      	ldr	r3, [pc, #264]	; (800386c <state_machine+0x20c>)
 8003764:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_1_DRIVE_ON;
 8003766:	4b41      	ldr	r3, [pc, #260]	; (800386c <state_machine+0x20c>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	4b3e      	ldr	r3, [pc, #248]	; (800386c <state_machine+0x20c>)
 8003772:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 8003774:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <state_machine+0x214>)
 8003776:	881a      	ldrh	r2, [r3, #0]
 8003778:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <state_machine+0x210>)
 800377a:	801a      	strh	r2, [r3, #0]
		}
		// Transition 2->0
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_2_OPERATION_ENABLED) && (DRIVE_COMMAND_STATE_MSK == STATE_0_DRIVE_DISABLED))
 800377c:	4b3c      	ldr	r3, [pc, #240]	; (8003870 <state_machine+0x210>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	2b02      	cmp	r3, #2
 8003786:	d116      	bne.n	80037b6 <state_machine+0x156>
 8003788:	4b3a      	ldr	r3, [pc, #232]	; (8003874 <state_machine+0x214>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	2b00      	cmp	r3, #0
 8003792:	d110      	bne.n	80037b6 <state_machine+0x156>
		{
			drive_disabled();
 8003794:	f000 f874 	bl	8003880 <drive_disabled>
			drive_status &= DRIVE_STATUS_CLEAR;
 8003798:	4b34      	ldr	r3, [pc, #208]	; (800386c <state_machine+0x20c>)
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	f023 030f 	bic.w	r3, r3, #15
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	4b32      	ldr	r3, [pc, #200]	; (800386c <state_machine+0x20c>)
 80037a4:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_0_DRIVE_DISABLED;
 80037a6:	4b31      	ldr	r3, [pc, #196]	; (800386c <state_machine+0x20c>)
 80037a8:	881a      	ldrh	r2, [r3, #0]
 80037aa:	4b30      	ldr	r3, [pc, #192]	; (800386c <state_machine+0x20c>)
 80037ac:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 80037ae:	4b31      	ldr	r3, [pc, #196]	; (8003874 <state_machine+0x214>)
 80037b0:	881a      	ldrh	r2, [r3, #0]
 80037b2:	4b2f      	ldr	r3, [pc, #188]	; (8003870 <state_machine+0x210>)
 80037b4:	801a      	strh	r2, [r3, #0]
		}
		// Check for update transition and OPERATION_ENABLED still active
		if ((!(DRIVE_COMMAND_UPDATE_OLD_MSK & UPDATE_MSK) && (DRIVE_COMMAND_UPDATE_MSK & UPDATE_MSK)) && (DRIVE_COMMAND_STATE_MSK == STATE_2_OPERATION_ENABLED))
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <state_machine+0x210>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d151      	bne.n	8003866 <state_machine+0x206>
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <state_machine+0x214>)
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d04b      	beq.n	8003866 <state_machine+0x206>
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <state_machine+0x214>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d145      	bne.n	8003866 <state_machine+0x206>
		{
			loop_control = LOOP_CONTROL_OFF;			// reset all loops
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <state_machine+0x218>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
			loop_control |= DRIVE_COMMAND_REF_MSK >> 8; // save selected loops
 80037e0:	4b24      	ldr	r3, [pc, #144]	; (8003874 <state_machine+0x214>)
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037e8:	121b      	asrs	r3, r3, #8
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <state_machine+0x218>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4313      	orrs	r3, r2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <state_machine+0x218>)
 80037fa:	701a      	strb	r2, [r3, #0]

			// Check for reference generator output (Priority list: POS > SPD > I > U)
			if (DRIVE_COMMAND_REF_MSK & REF_POS_MSK)
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <state_machine+0x214>)
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <state_machine+0x1b0>
			{
				// POS REF
				ref_type_select = REF_POS;
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <state_machine+0x21c>)
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	e023      	b.n	8003858 <state_machine+0x1f8>
			}
			else if (DRIVE_COMMAND_REF_MSK & REF_SPD_MSK)
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <state_machine+0x214>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <state_machine+0x1c4>
			{
				// SPD REF
				ref_type_select = REF_SPD;
 800381c:	4b17      	ldr	r3, [pc, #92]	; (800387c <state_machine+0x21c>)
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e019      	b.n	8003858 <state_machine+0x1f8>
			}
			else if (DRIVE_COMMAND_REF_MSK & REF_I_MSK)
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <state_machine+0x214>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d010      	beq.n	8003852 <state_machine+0x1f2>
			{
				// I REFF
				ref_type_select = REF_I;
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <state_machine+0x21c>)
 8003832:	2202      	movs	r2, #2
 8003834:	701a      	strb	r2, [r3, #0]
				if (DRIVE_COMMAND_TEST_MSK & TUNE_TEST)
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <state_machine+0x214>)
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	b21b      	sxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	da0a      	bge.n	8003858 <state_machine+0x1f8>
				{
					loop_control |= TUNE_REF_LOOP_MSK;
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <state_machine+0x218>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800384a:	b2da      	uxtb	r2, r3
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <state_machine+0x218>)
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e002      	b.n	8003858 <state_machine+0x1f8>
				}
			}
			else
			{
				// U REF
				ref_type_select = REF_U;
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <state_machine+0x21c>)
 8003854:	2203      	movs	r2, #3
 8003856:	701a      	strb	r2, [r3, #0]
			}
			compute_motion();
 8003858:	f000 f852 	bl	8003900 <compute_motion>
			drive_command_old = drive_command;
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <state_machine+0x214>)
 800385e:	881a      	ldrh	r2, [r3, #0]
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <state_machine+0x210>)
 8003862:	801a      	strh	r2, [r3, #0]
		}
	}
	break;
 8003864:	e7ff      	b.n	8003866 <state_machine+0x206>
 8003866:	bf00      	nop
	default:
		break;
	}
}
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	1fff066a 	.word	0x1fff066a
 8003870:	1fff066e 	.word	0x1fff066e
 8003874:	1fff066c 	.word	0x1fff066c
 8003878:	1fff0670 	.word	0x1fff0670
 800387c:	1fff0668 	.word	0x1fff0668

08003880 <drive_disabled>:
/*
	PWM output disabled
	CONTROL_LOOPS | REF_GEN | MOTION = OFF
*/
void drive_disabled(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
	motion_off();
 8003884:	f7fd ffae 	bl	80017e4 <motion_off>
	loop_control = LOOP_CONTROL_OFF;
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <drive_disabled+0x1c>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
	ref_gen_status = STATUS_0_DISABLED;
 800388e:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <drive_disabled+0x20>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
	motion_config = OFF;
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <drive_disabled+0x24>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
}
 800389a:	bd80      	pop	{r7, pc}
 800389c:	1fff0670 	.word	0x1fff0670
 80038a0:	1fff0640 	.word	0x1fff0640
 80038a4:	1fff0671 	.word	0x1fff0671

080038a8 <drive_on>:
/*
	Initilize position | PWM(50%) | PWM output enabled | Current offset computed
	CONTROL_LOOPS | REF_GEN | MOTION | = OFF
*/
void drive_on(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	motion_off();
 80038ac:	f7fd ff9a 	bl	80017e4 <motion_off>
	loop_control = LOOP_CONTROL_OFF;
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <drive_on+0x34>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
	ref_gen_status = STATUS_0_DISABLED;
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <drive_on+0x38>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
	motion_config = OFF;
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <drive_on+0x3c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]

	pwm_update(0, 0, 0); // PWM(50%)
 80038c2:	2000      	movs	r0, #0
 80038c4:	2100      	movs	r1, #0
 80038c6:	2200      	movs	r2, #0
 80038c8:	f7fd fea4 	bl	8001614 <pwm_update>
	motion_on();
 80038cc:	f7fd ff5a 	bl	8001784 <motion_on>
	current_offset();
 80038d0:	f7fd fbf8 	bl	80010c4 <current_offset>
	init_position();		//NEED TO CHECK if it still works !!!!
 80038d4:	f7fe f880 	bl	80019d8 <init_position>
}
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	1fff0670 	.word	0x1fff0670
 80038e0:	1fff0640 	.word	0x1fff0640
 80038e4:	1fff0671 	.word	0x1fff0671

080038e8 <operation_enabled>:
/*
	CONTROL_LOOPS = OFF
	Wait for motion commands to start movement computation
*/
void operation_enabled(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
	loop_control = LOOP_CONTROL_OFF;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <operation_enabled+0x14>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
}
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	1fff0670 	.word	0x1fff0670

08003900 <compute_motion>:

/*
	During OPERATION_ENABLE start computation function
*/
void compute_motion(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	reference_generator_compute();
 8003904:	f7ff fc78 	bl	80031f8 <reference_generator_compute>
	motion_config = ON;
 8003908:	4b01      	ldr	r3, [pc, #4]	; (8003910 <compute_motion+0x10>)
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
}
 800390e:	bd80      	pop	{r7, pc}
 8003910:	1fff0671 	.word	0x1fff0671

08003914 <delay_t>:

/*
 * Wait for time*50us
 */
void delay_t(uint32_t time)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800391c:	b672      	cpsid	i
	__disable_irq();
	interrupt_counter_timer = 0;
 800391e:	4b07      	ldr	r3, [pc, #28]	; (800393c <delay_t+0x28>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003924:	b662      	cpsie	i
	__enable_irq();
	while (interrupt_counter_timer < time)
 8003926:	bf00      	nop
 8003928:	4b04      	ldr	r3, [pc, #16]	; (800393c <delay_t+0x28>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	429a      	cmp	r2, r3
 8003930:	d3fa      	bcc.n	8003928 <delay_t+0x14>
	{
		// NO_ACTION
	};
}
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	1ffe8834 	.word	0x1ffe8834

08003940 <abc_dq>:

/*
 * Convert three-phase electrical signals from time-domain to dq0-reference frame
 */
void abc_dq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
	// The Clarke Transformation
	i_alpha = ia;
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <abc_dq+0xa4>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b21b      	sxth	r3, r3
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003952:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <abc_dq+0xa8>)
 8003954:	edc3 7a00 	vstr	s15, [r3]
	i_beta = F_1_SQRT_3 * (float_t)(ia + (float_t)(2 * ib));
 8003958:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <abc_dq+0xa4>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b21b      	sxth	r3, r3
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003966:	4b21      	ldr	r3, [pc, #132]	; (80039ec <abc_dq+0xac>)
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b21b      	sxth	r3, r3
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800397a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80039f0 <abc_dq+0xb0>
 800397e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <abc_dq+0xb4>)
 8003984:	edc3 7a00 	vstr	s15, [r3]

	// The Park Transformation
	i_d = i_alpha * cos_theta_fast + i_beta * sin_theta_fast;
 8003988:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <abc_dq+0xa8>)
 800398a:	ed93 7a00 	vldr	s14, [r3]
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <abc_dq+0xb8>)
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003998:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <abc_dq+0xb4>)
 800399a:	edd3 6a00 	vldr	s13, [r3]
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <abc_dq+0xbc>)
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <abc_dq+0xc0>)
 80039ae:	edc3 7a00 	vstr	s15, [r3]
	i_q = i_beta * cos_theta_fast - i_alpha * sin_theta_fast;
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <abc_dq+0xb4>)
 80039b4:	ed93 7a00 	vldr	s14, [r3]
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <abc_dq+0xb8>)
 80039ba:	edd3 7a00 	vldr	s15, [r3]
 80039be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <abc_dq+0xa8>)
 80039c4:	edd3 6a00 	vldr	s13, [r3]
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <abc_dq+0xbc>)
 80039ca:	edd3 7a00 	vldr	s15, [r3]
 80039ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <abc_dq+0xc4>)
 80039d8:	edc3 7a00 	vstr	s15, [r3]
}
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	1fff06a4 	.word	0x1fff06a4
 80039e8:	1fff07c4 	.word	0x1fff07c4
 80039ec:	1fff069c 	.word	0x1fff069c
 80039f0:	3f13cd39 	.word	0x3f13cd39
 80039f4:	1fff07dc 	.word	0x1fff07dc
 80039f8:	1fff0684 	.word	0x1fff0684
 80039fc:	1fff0680 	.word	0x1fff0680
 8003a00:	1fff07cc 	.word	0x1fff07cc
 8003a04:	1fff07c8 	.word	0x1fff07c8

08003a08 <dq_abc>:

/*
 * Convert two-phase balanced sinusoidal signals to three-phase electrical signals
 */
void dq_abc(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0

	// The Inverse Park Transformation
	u_alpha = u_d_ref * cos_theta_fast - u_q_ref * sin_theta_fast;
 8003a0c:	4b56      	ldr	r3, [pc, #344]	; (8003b68 <dq_abc+0x160>)
 8003a0e:	ed93 7a00 	vldr	s14, [r3]
 8003a12:	4b56      	ldr	r3, [pc, #344]	; (8003b6c <dq_abc+0x164>)
 8003a14:	edd3 7a00 	vldr	s15, [r3]
 8003a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a1c:	4b54      	ldr	r3, [pc, #336]	; (8003b70 <dq_abc+0x168>)
 8003a1e:	edd3 6a00 	vldr	s13, [r3]
 8003a22:	4b54      	ldr	r3, [pc, #336]	; (8003b74 <dq_abc+0x16c>)
 8003a24:	edd3 7a00 	vldr	s15, [r3]
 8003a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a30:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <dq_abc+0x170>)
 8003a32:	edc3 7a00 	vstr	s15, [r3]
	u_beta = u_q_ref * cos_theta_fast + u_d_ref * sin_theta_fast;
 8003a36:	4b4e      	ldr	r3, [pc, #312]	; (8003b70 <dq_abc+0x168>)
 8003a38:	ed93 7a00 	vldr	s14, [r3]
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <dq_abc+0x164>)
 8003a3e:	edd3 7a00 	vldr	s15, [r3]
 8003a42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a46:	4b48      	ldr	r3, [pc, #288]	; (8003b68 <dq_abc+0x160>)
 8003a48:	edd3 6a00 	vldr	s13, [r3]
 8003a4c:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <dq_abc+0x16c>)
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5a:	4b48      	ldr	r3, [pc, #288]	; (8003b7c <dq_abc+0x174>)
 8003a5c:	edc3 7a00 	vstr	s15, [r3]

	// The Inverse Clarke Transformation
	u_a_ref = u_alpha;
 8003a60:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <dq_abc+0x170>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a46      	ldr	r2, [pc, #280]	; (8003b80 <dq_abc+0x178>)
 8003a66:	6013      	str	r3, [r2, #0]
	u_b_ref = (-u_alpha + SQRT_3 * u_beta) / 2;
 8003a68:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <dq_abc+0x174>)
 8003a6a:	edd3 7a00 	vldr	s15, [r3]
 8003a6e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003b84 <dq_abc+0x17c>
 8003a72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <dq_abc+0x170>)
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a80:	eeb0 7a00 	vmov.f32	s14, #0
 8003a84:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8003a88:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <dq_abc+0x180>)
 8003a8a:	edc3 7a00 	vstr	s15, [r3]
	u_c_ref = (-u_alpha - SQRT_3 * u_beta) / 2;
 8003a8e:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <dq_abc+0x170>)
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	eeb1 7a67 	vneg.f32	s14, s15
 8003a98:	4b38      	ldr	r3, [pc, #224]	; (8003b7c <dq_abc+0x174>)
 8003a9a:	edd3 7a00 	vldr	s15, [r3]
 8003a9e:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003b84 <dq_abc+0x17c>
 8003aa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aaa:	eeb0 7a00 	vmov.f32	s14, #0
 8003aae:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8003ab2:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <dq_abc+0x184>)
 8003ab4:	edc3 7a00 	vstr	s15, [r3]

	/*
	 * Keeps the values in range of int16_t
	 * Later on the Float values will be casted into Int
	 */
	if (u_a_ref > MAX_UINT_16)
 8003ab8:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <dq_abc+0x178>)
 8003aba:	edd3 7a00 	vldr	s15, [r3]
 8003abe:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003b90 <dq_abc+0x188>
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	dd03      	ble.n	8003ad4 <dq_abc+0xcc>
	{
		u_a_ref = MAX_UINT_16;
 8003acc:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <dq_abc+0x178>)
 8003ace:	4a31      	ldr	r2, [pc, #196]	; (8003b94 <dq_abc+0x18c>)
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e00d      	b.n	8003af0 <dq_abc+0xe8>
	}
	else if (u_a_ref < MIN_UINT_16)
 8003ad4:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <dq_abc+0x178>)
 8003ad6:	edd3 7a00 	vldr	s15, [r3]
 8003ada:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003b98 <dq_abc+0x190>
 8003ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	d503      	bpl.n	8003af0 <dq_abc+0xe8>
	{
		u_a_ref = MIN_UINT_16;
 8003ae8:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <dq_abc+0x178>)
 8003aea:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 8003aee:	601a      	str	r2, [r3, #0]
	}

	if (u_b_ref > MAX_UINT_16)
 8003af0:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <dq_abc+0x180>)
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003b90 <dq_abc+0x188>
 8003afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b02:	dd03      	ble.n	8003b0c <dq_abc+0x104>
	{
		u_b_ref = MAX_UINT_16;
 8003b04:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <dq_abc+0x180>)
 8003b06:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <dq_abc+0x18c>)
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e00d      	b.n	8003b28 <dq_abc+0x120>
	}
	else if (u_b_ref < MIN_UINT_16)
 8003b0c:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <dq_abc+0x180>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003b98 <dq_abc+0x190>
 8003b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1e:	d503      	bpl.n	8003b28 <dq_abc+0x120>
	{
		u_a_ref = MIN_UINT_16;
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <dq_abc+0x178>)
 8003b22:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 8003b26:	601a      	str	r2, [r3, #0]
	}

	if (u_c_ref > MAX_UINT_16)
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <dq_abc+0x184>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003b90 <dq_abc+0x188>
 8003b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3a:	dd03      	ble.n	8003b44 <dq_abc+0x13c>
	{
		u_a_ref = MAX_UINT_16;
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <dq_abc+0x178>)
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <dq_abc+0x18c>)
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e00d      	b.n	8003b60 <dq_abc+0x158>
	}
	else if (u_c_ref < MIN_UINT_16)
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <dq_abc+0x184>)
 8003b46:	edd3 7a00 	vldr	s15, [r3]
 8003b4a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003b98 <dq_abc+0x190>
 8003b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	d503      	bpl.n	8003b60 <dq_abc+0x158>
	{
		u_c_ref = MIN_UINT_16;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <dq_abc+0x184>)
 8003b5a:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 8003b5e:	601a      	str	r2, [r3, #0]
	}
}
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	1fff0738 	.word	0x1fff0738
 8003b6c:	1fff0684 	.word	0x1fff0684
 8003b70:	1ffe8850 	.word	0x1ffe8850
 8003b74:	1fff0680 	.word	0x1fff0680
 8003b78:	1fff07d8 	.word	0x1fff07d8
 8003b7c:	1fff07d4 	.word	0x1fff07d4
 8003b80:	1fff07d0 	.word	0x1fff07d0
 8003b84:	3fddb3d7 	.word	0x3fddb3d7
 8003b88:	1fff07c0 	.word	0x1fff07c0
 8003b8c:	1fff07e0 	.word	0x1fff07e0
 8003b90:	46fffe00 	.word	0x46fffe00
 8003b94:	46fffe00 	.word	0x46fffe00
 8003b98:	c7000000 	.word	0xc7000000

08003b9c <compute_fast_speed>:

/*
 * Compute the speed based on the encoder increments, read from CCU40 Timer
 */
void compute_fast_speed(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
	timer_value_fast = CCU40_CC40->TIMER;
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <compute_fast_speed+0x30>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <compute_fast_speed+0x34>)
 8003ba8:	801a      	strh	r2, [r3, #0]
	speed_value_fast = timer_value_fast - timer_value_old_fast;
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <compute_fast_speed+0x34>)
 8003bac:	881a      	ldrh	r2, [r3, #0]
 8003bae:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <compute_fast_speed+0x38>)
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <compute_fast_speed+0x3c>)
 8003bba:	801a      	strh	r2, [r3, #0]
	timer_value_old_fast = timer_value_fast;
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <compute_fast_speed+0x34>)
 8003bbe:	881a      	ldrh	r2, [r3, #0]
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <compute_fast_speed+0x38>)
 8003bc2:	801a      	strh	r2, [r3, #0]
}
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	4000c100 	.word	0x4000c100
 8003bd0:	1fff0688 	.word	0x1fff0688
 8003bd4:	1fff068a 	.word	0x1fff068a
 8003bd8:	1fff068c 	.word	0x1fff068c

08003bdc <compute_fast_mechanical_position>:
/*
 * Compute the mechanical position based on the speed value
 */
void compute_fast_mechanical_position(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
	mechanical_position_fast += speed_value_fast;
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <compute_fast_mechanical_position+0x1c>)
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b21a      	sxth	r2, r3
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <compute_fast_mechanical_position+0x20>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	4a03      	ldr	r2, [pc, #12]	; (8003bfc <compute_fast_mechanical_position+0x20>)
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	1fff068c 	.word	0x1fff068c
 8003bfc:	1fff0674 	.word	0x1fff0674

08003c00 <compute_fast_electrical_position>:

/*
 * Compute the module of the electrical position based on the mechanical position
 */
void compute_fast_electrical_position(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
	electrical_resolution = encoder_resolution / pp;
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <compute_fast_electrical_position+0x3c>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b21a      	sxth	r2, r3
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <compute_fast_electrical_position+0x40>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b25b      	sxtb	r3, r3
 8003c10:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <compute_fast_electrical_position+0x44>)
 8003c18:	801a      	strh	r2, [r3, #0]
	electrical_position_modulo_fast = mechanical_position_fast % electrical_resolution;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <compute_fast_electrical_position+0x48>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <compute_fast_electrical_position+0x44>)
 8003c20:	8812      	ldrh	r2, [r2, #0]
 8003c22:	b212      	sxth	r2, r2
 8003c24:	fb93 f1f2 	sdiv	r1, r3, r2
 8003c28:	fb02 f201 	mul.w	r2, r2, r1
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <compute_fast_electrical_position+0x4c>)
 8003c30:	6013      	str	r3, [r2, #0]
}
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	1ffe881e 	.word	0x1ffe881e
 8003c40:	1ffe8820 	.word	0x1ffe8820
 8003c44:	1fff068e 	.word	0x1fff068e
 8003c48:	1fff0674 	.word	0x1fff0674
 8003c4c:	1fff0678 	.word	0x1fff0678

08003c50 <compute_fast_field>:
/*
 * Compute the electrical angle based on the electrical position
 * Compute the sin&cos of theta
 */
void compute_fast_field(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
	theta_fast = electrical_position_modulo_fast * (2 * Pi) / electrical_resolution;
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <compute_fast_field+0x54>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c60:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003ca8 <compute_fast_field+0x58>
 8003c64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <compute_fast_field+0x5c>)
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	b21b      	sxth	r3, r3
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c76:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <compute_fast_field+0x60>)
 8003c7c:	edc3 7a00 	vstr	s15, [r3]
	if (loop_control & TUNE_REF_LOOP_MSK)
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <compute_fast_field+0x64>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da03      	bge.n	8003c94 <compute_fast_field+0x44>
	{
		theta_fast = 0;
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <compute_fast_field+0x60>)
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
	}
	sincosf(theta_fast, &sin_theta_fast, &cos_theta_fast);
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <compute_fast_field+0x60>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <compute_fast_field+0x68>)
 8003c9c:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <compute_fast_field+0x6c>)
 8003c9e:	f000 f80f 	bl	8003cc0 <sincosf>
}
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	1fff0678 	.word	0x1fff0678
 8003ca8:	40c90fd0 	.word	0x40c90fd0
 8003cac:	1fff068e 	.word	0x1fff068e
 8003cb0:	1fff067c 	.word	0x1fff067c
 8003cb4:	1fff0670 	.word	0x1fff0670
 8003cb8:	1fff0680 	.word	0x1fff0680
 8003cbc:	1fff0684 	.word	0x1fff0684

08003cc0 <sincosf>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	460e      	mov	r6, r1
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	f000 f84c 	bl	8003d64 <sinf>
 8003ccc:	6030      	str	r0, [r6, #0]
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 f802 	bl	8003cd8 <cosf>
 8003cd4:	6020      	str	r0, [r4, #0]
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}

08003cd8 <cosf>:
 8003cd8:	b500      	push	{lr}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <cosf+0x88>)
 8003cde:	9001      	str	r0, [sp, #4]
 8003ce0:	9b01      	ldr	r3, [sp, #4]
 8003ce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	dd1d      	ble.n	8003d26 <cosf+0x4e>
 8003cea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003cee:	db08      	blt.n	8003d02 <cosf+0x2a>
 8003cf0:	eddd 7a01 	vldr	s15, [sp, #4]
 8003cf4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003cf8:	ee17 0a90 	vmov	r0, s15
 8003cfc:	b005      	add	sp, #20
 8003cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d02:	a902      	add	r1, sp, #8
 8003d04:	f000 f87c 	bl	8003e00 <__ieee754_rem_pio2f>
 8003d08:	f000 0203 	and.w	r2, r0, #3
 8003d0c:	2a01      	cmp	r2, #1
 8003d0e:	9802      	ldr	r0, [sp, #8]
 8003d10:	9903      	ldr	r1, [sp, #12]
 8003d12:	d019      	beq.n	8003d48 <cosf+0x70>
 8003d14:	2a02      	cmp	r2, #2
 8003d16:	d010      	beq.n	8003d3a <cosf+0x62>
 8003d18:	b1ea      	cbz	r2, 8003d56 <cosf+0x7e>
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f000 fd5a 	bl	80047d4 <__kernel_sinf>
 8003d20:	ee07 0a90 	vmov	s15, r0
 8003d24:	e7e8      	b.n	8003cf8 <cosf+0x20>
 8003d26:	2100      	movs	r1, #0
 8003d28:	f000 f9b6 	bl	8004098 <__kernel_cosf>
 8003d2c:	ee07 0a90 	vmov	s15, r0
 8003d30:	ee17 0a90 	vmov	r0, s15
 8003d34:	b005      	add	sp, #20
 8003d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d3a:	f000 f9ad 	bl	8004098 <__kernel_cosf>
 8003d3e:	ee07 0a90 	vmov	s15, r0
 8003d42:	eef1 7a67 	vneg.f32	s15, s15
 8003d46:	e7d7      	b.n	8003cf8 <cosf+0x20>
 8003d48:	f000 fd44 	bl	80047d4 <__kernel_sinf>
 8003d4c:	ee07 0a90 	vmov	s15, r0
 8003d50:	eef1 7a67 	vneg.f32	s15, s15
 8003d54:	e7d0      	b.n	8003cf8 <cosf+0x20>
 8003d56:	f000 f99f 	bl	8004098 <__kernel_cosf>
 8003d5a:	ee07 0a90 	vmov	s15, r0
 8003d5e:	e7cb      	b.n	8003cf8 <cosf+0x20>
 8003d60:	3f490fd8 	.word	0x3f490fd8

08003d64 <sinf>:
 8003d64:	b500      	push	{lr}
 8003d66:	b085      	sub	sp, #20
 8003d68:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <sinf+0x98>)
 8003d6a:	9001      	str	r0, [sp, #4]
 8003d6c:	9b01      	ldr	r3, [sp, #4]
 8003d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d72:	4293      	cmp	r3, r2
 8003d74:	dd1e      	ble.n	8003db4 <sinf+0x50>
 8003d76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003d7a:	db08      	blt.n	8003d8e <sinf+0x2a>
 8003d7c:	eddd 7a01 	vldr	s15, [sp, #4]
 8003d80:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003d84:	ee17 0a90 	vmov	r0, s15
 8003d88:	b005      	add	sp, #20
 8003d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d8e:	a902      	add	r1, sp, #8
 8003d90:	f000 f836 	bl	8003e00 <__ieee754_rem_pio2f>
 8003d94:	f000 0003 	and.w	r0, r0, #3
 8003d98:	2801      	cmp	r0, #1
 8003d9a:	d020      	beq.n	8003dde <sinf+0x7a>
 8003d9c:	2802      	cmp	r0, #2
 8003d9e:	d014      	beq.n	8003dca <sinf+0x66>
 8003da0:	b320      	cbz	r0, 8003dec <sinf+0x88>
 8003da2:	9802      	ldr	r0, [sp, #8]
 8003da4:	9903      	ldr	r1, [sp, #12]
 8003da6:	f000 f977 	bl	8004098 <__kernel_cosf>
 8003daa:	ee07 0a90 	vmov	s15, r0
 8003dae:	eef1 7a67 	vneg.f32	s15, s15
 8003db2:	e7e7      	b.n	8003d84 <sinf+0x20>
 8003db4:	2100      	movs	r1, #0
 8003db6:	2200      	movs	r2, #0
 8003db8:	f000 fd0c 	bl	80047d4 <__kernel_sinf>
 8003dbc:	ee07 0a90 	vmov	s15, r0
 8003dc0:	ee17 0a90 	vmov	r0, s15
 8003dc4:	b005      	add	sp, #20
 8003dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dca:	9802      	ldr	r0, [sp, #8]
 8003dcc:	9903      	ldr	r1, [sp, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f000 fd00 	bl	80047d4 <__kernel_sinf>
 8003dd4:	ee07 0a90 	vmov	s15, r0
 8003dd8:	eef1 7a67 	vneg.f32	s15, s15
 8003ddc:	e7d2      	b.n	8003d84 <sinf+0x20>
 8003dde:	9802      	ldr	r0, [sp, #8]
 8003de0:	9903      	ldr	r1, [sp, #12]
 8003de2:	f000 f959 	bl	8004098 <__kernel_cosf>
 8003de6:	ee07 0a90 	vmov	s15, r0
 8003dea:	e7cb      	b.n	8003d84 <sinf+0x20>
 8003dec:	9802      	ldr	r0, [sp, #8]
 8003dee:	9903      	ldr	r1, [sp, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f000 fcef 	bl	80047d4 <__kernel_sinf>
 8003df6:	ee07 0a90 	vmov	s15, r0
 8003dfa:	e7c3      	b.n	8003d84 <sinf+0x20>
 8003dfc:	3f490fd8 	.word	0x3f490fd8

08003e00 <__ieee754_rem_pio2f>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	4a97      	ldr	r2, [pc, #604]	; (8004060 <__ieee754_rem_pio2f+0x260>)
 8003e04:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003e08:	4294      	cmp	r4, r2
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	460d      	mov	r5, r1
 8003e10:	dd68      	ble.n	8003ee4 <__ieee754_rem_pio2f+0xe4>
 8003e12:	4a94      	ldr	r2, [pc, #592]	; (8004064 <__ieee754_rem_pio2f+0x264>)
 8003e14:	4294      	cmp	r4, r2
 8003e16:	dc1c      	bgt.n	8003e52 <__ieee754_rem_pio2f+0x52>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	eddf 7a93 	vldr	s15, [pc, #588]	; 8004068 <__ieee754_rem_pio2f+0x268>
 8003e1e:	4a93      	ldr	r2, [pc, #588]	; (800406c <__ieee754_rem_pio2f+0x26c>)
 8003e20:	f024 040f 	bic.w	r4, r4, #15
 8003e24:	ee07 0a10 	vmov	s14, r0
 8003e28:	f340 80e2 	ble.w	8003ff0 <__ieee754_rem_pio2f+0x1f0>
 8003e2c:	4294      	cmp	r4, r2
 8003e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e32:	d067      	beq.n	8003f04 <__ieee754_rem_pio2f+0x104>
 8003e34:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8004070 <__ieee754_rem_pio2f+0x270>
 8003e38:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e42:	edc1 6a00 	vstr	s13, [r1]
 8003e46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e4a:	edc1 7a01 	vstr	s15, [r1, #4]
 8003e4e:	b006      	add	sp, #24
 8003e50:	bd70      	pop	{r4, r5, r6, pc}
 8003e52:	4a88      	ldr	r2, [pc, #544]	; (8004074 <__ieee754_rem_pio2f+0x274>)
 8003e54:	4294      	cmp	r4, r2
 8003e56:	dd67      	ble.n	8003f28 <__ieee754_rem_pio2f+0x128>
 8003e58:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003e5c:	da48      	bge.n	8003ef0 <__ieee754_rem_pio2f+0xf0>
 8003e5e:	15e2      	asrs	r2, r4, #23
 8003e60:	3a86      	subs	r2, #134	; 0x86
 8003e62:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003e66:	ee07 3a10 	vmov	s14, r3
 8003e6a:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8003e6e:	eddf 7a82 	vldr	s15, [pc, #520]	; 8004078 <__ieee754_rem_pio2f+0x278>
 8003e72:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003e76:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003e7a:	edcd 6a03 	vstr	s13, [sp, #12]
 8003e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e82:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8003e86:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003e8a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003e8e:	edcd 6a04 	vstr	s13, [sp, #16]
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9e:	edcd 7a05 	vstr	s15, [sp, #20]
 8003ea2:	f040 80b8 	bne.w	8004016 <__ieee754_rem_pio2f+0x216>
 8003ea6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eae:	bf14      	ite	ne
 8003eb0:	2302      	movne	r3, #2
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	4971      	ldr	r1, [pc, #452]	; (800407c <__ieee754_rem_pio2f+0x27c>)
 8003eb6:	2002      	movs	r0, #2
 8003eb8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003ebc:	a803      	add	r0, sp, #12
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f000 f974 	bl	80041ac <__kernel_rem_pio2f>
 8003ec4:	2e00      	cmp	r6, #0
 8003ec6:	da11      	bge.n	8003eec <__ieee754_rem_pio2f+0xec>
 8003ec8:	ed95 7a00 	vldr	s14, [r5]
 8003ecc:	edd5 7a01 	vldr	s15, [r5, #4]
 8003ed0:	eeb1 7a47 	vneg.f32	s14, s14
 8003ed4:	eef1 7a67 	vneg.f32	s15, s15
 8003ed8:	4240      	negs	r0, r0
 8003eda:	ed85 7a00 	vstr	s14, [r5]
 8003ede:	edc5 7a01 	vstr	s15, [r5, #4]
 8003ee2:	e003      	b.n	8003eec <__ieee754_rem_pio2f+0xec>
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	6028      	str	r0, [r5, #0]
 8003ee8:	604a      	str	r2, [r1, #4]
 8003eea:	2000      	movs	r0, #0
 8003eec:	b006      	add	sp, #24
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	ee07 0a90 	vmov	s15, r0
 8003ef4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003ef8:	2000      	movs	r0, #0
 8003efa:	edc1 7a01 	vstr	s15, [r1, #4]
 8003efe:	edc1 7a00 	vstr	s15, [r1]
 8003f02:	e7f3      	b.n	8003eec <__ieee754_rem_pio2f+0xec>
 8003f04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004080 <__ieee754_rem_pio2f+0x280>
 8003f08:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004084 <__ieee754_rem_pio2f+0x284>
 8003f0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f10:	2001      	movs	r0, #1
 8003f12:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003f16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f1a:	edc1 6a00 	vstr	s13, [r1]
 8003f1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f22:	edc1 7a01 	vstr	s15, [r1, #4]
 8003f26:	e7e1      	b.n	8003eec <__ieee754_rem_pio2f+0xec>
 8003f28:	f000 fca2 	bl	8004870 <fabsf>
 8003f2c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8004088 <__ieee754_rem_pio2f+0x288>
 8003f30:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 8004068 <__ieee754_rem_pio2f+0x268>
 8003f34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004070 <__ieee754_rem_pio2f+0x270>
 8003f38:	ee07 0a10 	vmov	s14, r0
 8003f3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8003f40:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f48:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f4c:	ee17 0a90 	vmov	r0, s15
 8003f50:	eef1 5a46 	vneg.f32	s11, s12
 8003f54:	eef0 7a47 	vmov.f32	s15, s14
 8003f58:	281f      	cmp	r0, #31
 8003f5a:	eee5 7a85 	vfma.f32	s15, s11, s10
 8003f5e:	ee26 7a26 	vmul.f32	s14, s12, s13
 8003f62:	dc1d      	bgt.n	8003fa0 <__ieee754_rem_pio2f+0x1a0>
 8003f64:	4a49      	ldr	r2, [pc, #292]	; (800408c <__ieee754_rem_pio2f+0x28c>)
 8003f66:	1e41      	subs	r1, r0, #1
 8003f68:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8003f6c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d015      	beq.n	8003fa0 <__ieee754_rem_pio2f+0x1a0>
 8003f74:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003f78:	edc5 6a00 	vstr	s13, [r5]
 8003f7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f80:	2e00      	cmp	r6, #0
 8003f82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f86:	edc5 7a01 	vstr	s15, [r5, #4]
 8003f8a:	daaf      	bge.n	8003eec <__ieee754_rem_pio2f+0xec>
 8003f8c:	eef1 6a66 	vneg.f32	s13, s13
 8003f90:	eef1 7a67 	vneg.f32	s15, s15
 8003f94:	edc5 6a00 	vstr	s13, [r5]
 8003f98:	edc5 7a01 	vstr	s15, [r5, #4]
 8003f9c:	4240      	negs	r0, r0
 8003f9e:	e7a5      	b.n	8003eec <__ieee754_rem_pio2f+0xec>
 8003fa0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003fa4:	15e4      	asrs	r4, r4, #23
 8003fa6:	ee16 3a90 	vmov	r3, s13
 8003faa:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8003fae:	1ae3      	subs	r3, r4, r3
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	dde1      	ble.n	8003f78 <__ieee754_rem_pio2f+0x178>
 8003fb4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004080 <__ieee754_rem_pio2f+0x280>
 8003fb8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004084 <__ieee754_rem_pio2f+0x284>
 8003fbc:	eeb0 5a67 	vmov.f32	s10, s15
 8003fc0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8003fc4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003fc8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8003fcc:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8003fd0:	ee75 6a67 	vsub.f32	s13, s10, s15
 8003fd4:	eeb0 7a67 	vmov.f32	s14, s15
 8003fd8:	ee16 3a90 	vmov	r3, s13
 8003fdc:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8003fe0:	1ae4      	subs	r4, r4, r3
 8003fe2:	2c19      	cmp	r4, #25
 8003fe4:	dc2c      	bgt.n	8004040 <__ieee754_rem_pio2f+0x240>
 8003fe6:	edc5 6a00 	vstr	s13, [r5]
 8003fea:	eef0 7a45 	vmov.f32	s15, s10
 8003fee:	e7c5      	b.n	8003f7c <__ieee754_rem_pio2f+0x17c>
 8003ff0:	4294      	cmp	r4, r2
 8003ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff6:	d010      	beq.n	800401a <__ieee754_rem_pio2f+0x21a>
 8003ff8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004070 <__ieee754_rem_pio2f+0x270>
 8003ffc:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004008:	edc1 6a00 	vstr	s13, [r1]
 800400c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004010:	edc1 7a01 	vstr	s15, [r1, #4]
 8004014:	e76a      	b.n	8003eec <__ieee754_rem_pio2f+0xec>
 8004016:	2303      	movs	r3, #3
 8004018:	e74c      	b.n	8003eb4 <__ieee754_rem_pio2f+0xb4>
 800401a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004080 <__ieee754_rem_pio2f+0x280>
 800401e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004084 <__ieee754_rem_pio2f+0x284>
 8004022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004026:	f04f 30ff 	mov.w	r0, #4294967295
 800402a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800402e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004032:	edc1 6a00 	vstr	s13, [r1]
 8004036:	ee77 7a87 	vadd.f32	s15, s15, s14
 800403a:	edc1 7a01 	vstr	s15, [r1, #4]
 800403e:	e755      	b.n	8003eec <__ieee754_rem_pio2f+0xec>
 8004040:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004090 <__ieee754_rem_pio2f+0x290>
 8004044:	eddf 4a13 	vldr	s9, [pc, #76]	; 8004094 <__ieee754_rem_pio2f+0x294>
 8004048:	eef0 7a45 	vmov.f32	s15, s10
 800404c:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8004050:	ee35 7a67 	vsub.f32	s14, s10, s15
 8004054:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004058:	ee96 7a24 	vfnms.f32	s14, s12, s9
 800405c:	e78a      	b.n	8003f74 <__ieee754_rem_pio2f+0x174>
 800405e:	bf00      	nop
 8004060:	3f490fd8 	.word	0x3f490fd8
 8004064:	4016cbe3 	.word	0x4016cbe3
 8004068:	3fc90f80 	.word	0x3fc90f80
 800406c:	3fc90fd0 	.word	0x3fc90fd0
 8004070:	37354443 	.word	0x37354443
 8004074:	43490f80 	.word	0x43490f80
 8004078:	43800000 	.word	0x43800000
 800407c:	0800533c 	.word	0x0800533c
 8004080:	37354400 	.word	0x37354400
 8004084:	2e85a308 	.word	0x2e85a308
 8004088:	3f22f984 	.word	0x3f22f984
 800408c:	080052bc 	.word	0x080052bc
 8004090:	2e85a300 	.word	0x2e85a300
 8004094:	248d3132 	.word	0x248d3132

08004098 <__kernel_cosf>:
 8004098:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800409c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80040a0:	ee06 0a10 	vmov	s12, r0
 80040a4:	ee06 1a90 	vmov	s13, r1
 80040a8:	da2e      	bge.n	8004108 <__kernel_cosf+0x70>
 80040aa:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 80040ae:	ee17 3a90 	vmov	r3, s15
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d064      	beq.n	8004180 <__kernel_cosf+0xe8>
 80040b6:	ee26 7a06 	vmul.f32	s14, s12, s12
 80040ba:	eddf 3a34 	vldr	s7, [pc, #208]	; 800418c <__kernel_cosf+0xf4>
 80040be:	ed9f 4a34 	vldr	s8, [pc, #208]	; 8004190 <__kernel_cosf+0xf8>
 80040c2:	eddf 4a34 	vldr	s9, [pc, #208]	; 8004194 <__kernel_cosf+0xfc>
 80040c6:	ed9f 5a34 	vldr	s10, [pc, #208]	; 8004198 <__kernel_cosf+0x100>
 80040ca:	eddf 7a34 	vldr	s15, [pc, #208]	; 800419c <__kernel_cosf+0x104>
 80040ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041a0 <__kernel_cosf+0x108>
 80040d2:	eea7 4a23 	vfma.f32	s8, s14, s7
 80040d6:	eee4 4a07 	vfma.f32	s9, s8, s14
 80040da:	eea4 5a87 	vfma.f32	s10, s9, s14
 80040de:	eee5 7a07 	vfma.f32	s15, s10, s14
 80040e2:	eee7 5a87 	vfma.f32	s11, s15, s14
 80040e6:	ee65 5a87 	vmul.f32	s11, s11, s14
 80040ea:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 80040ee:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 80040f2:	eee7 6a25 	vfma.f32	s13, s14, s11
 80040f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80040fa:	eed7 6a06 	vfnms.f32	s13, s14, s12
 80040fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004102:	ee17 0a90 	vmov	r0, s15
 8004106:	4770      	bx	lr
 8004108:	ee26 7a06 	vmul.f32	s14, s12, s12
 800410c:	eddf 3a1f 	vldr	s7, [pc, #124]	; 800418c <__kernel_cosf+0xf4>
 8004110:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 8004190 <__kernel_cosf+0xf8>
 8004114:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8004194 <__kernel_cosf+0xfc>
 8004118:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8004198 <__kernel_cosf+0x100>
 800411c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800419c <__kernel_cosf+0x104>
 8004120:	eddf 5a1f 	vldr	s11, [pc, #124]	; 80041a0 <__kernel_cosf+0x108>
 8004124:	4a1f      	ldr	r2, [pc, #124]	; (80041a4 <__kernel_cosf+0x10c>)
 8004126:	eea7 4a23 	vfma.f32	s8, s14, s7
 800412a:	4293      	cmp	r3, r2
 800412c:	eee4 4a07 	vfma.f32	s9, s8, s14
 8004130:	eea4 5a87 	vfma.f32	s10, s9, s14
 8004134:	eee5 7a07 	vfma.f32	s15, s10, s14
 8004138:	eee7 5a87 	vfma.f32	s11, s15, s14
 800413c:	ee65 5a87 	vmul.f32	s11, s11, s14
 8004140:	ddd3      	ble.n	80040ea <__kernel_cosf+0x52>
 8004142:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <__kernel_cosf+0x110>)
 8004144:	4293      	cmp	r3, r2
 8004146:	dc16      	bgt.n	8004176 <__kernel_cosf+0xde>
 8004148:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eeb7 5a00 	vmov.f32	s10, #112	; 0x70
 8004154:	ee35 5a67 	vsub.f32	s10, s10, s15
 8004158:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800415c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8004160:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004164:	eed7 7a06 	vfnms.f32	s15, s14, s12
 8004168:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800416c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004170:	ee17 0a90 	vmov	r0, s15
 8004174:	4770      	bx	lr
 8004176:	eeb6 5a07 	vmov.f32	s10, #103	; 0x67
 800417a:	eef5 7a02 	vmov.f32	s15, #82	; 0x52
 800417e:	e7eb      	b.n	8004158 <__kernel_cosf+0xc0>
 8004180:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004184:	ee17 0a90 	vmov	r0, s15
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	ad47d74e 	.word	0xad47d74e
 8004190:	310f74f6 	.word	0x310f74f6
 8004194:	b493f27c 	.word	0xb493f27c
 8004198:	37d00d01 	.word	0x37d00d01
 800419c:	bab60b61 	.word	0xbab60b61
 80041a0:	3d2aaaab 	.word	0x3d2aaaab
 80041a4:	3e999999 	.word	0x3e999999
 80041a8:	3f480000 	.word	0x3f480000

080041ac <__kernel_rem_pio2f>:
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	ed2d 8b04 	vpush	{d8-d9}
 80041b4:	b0d7      	sub	sp, #348	; 0x15c
 80041b6:	1e5e      	subs	r6, r3, #1
 80041b8:	4ca5      	ldr	r4, [pc, #660]	; (8004450 <__kernel_rem_pio2f+0x2a4>)
 80041ba:	9d64      	ldr	r5, [sp, #400]	; 0x190
 80041bc:	9302      	str	r3, [sp, #8]
 80041be:	1ed3      	subs	r3, r2, #3
 80041c0:	bf48      	it	mi
 80041c2:	1d13      	addmi	r3, r2, #4
 80041c4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80041c8:	9101      	str	r1, [sp, #4]
 80041ca:	10db      	asrs	r3, r3, #3
 80041cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80041d0:	ea6f 0a03 	mvn.w	sl, r3
 80041d4:	1971      	adds	r1, r6, r5
 80041d6:	9303      	str	r3, [sp, #12]
 80041d8:	4681      	mov	r9, r0
 80041da:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 80041de:	eba3 0306 	sub.w	r3, r3, r6
 80041e2:	d414      	bmi.n	800420e <__kernel_rem_pio2f+0x62>
 80041e4:	4419      	add	r1, r3
 80041e6:	9865      	ldr	r0, [sp, #404]	; 0x194
 80041e8:	3101      	adds	r1, #1
 80041ea:	aa1a      	add	r2, sp, #104	; 0x68
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bfaa      	itet	ge
 80041f0:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 80041f4:	eddf 7a97 	vldrlt	s15, [pc, #604]	; 8004454 <__kernel_rem_pio2f+0x2a8>
 80041f8:	ee07 4a90 	vmovge	s15, r4
 80041fc:	f103 0301 	add.w	r3, r3, #1
 8004200:	bfa8      	it	ge
 8004202:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8004206:	428b      	cmp	r3, r1
 8004208:	ece2 7a01 	vstmia	r2!, {s15}
 800420c:	d1ee      	bne.n	80041ec <__kernel_rem_pio2f+0x40>
 800420e:	2d00      	cmp	r5, #0
 8004210:	db1a      	blt.n	8004248 <__kernel_rem_pio2f+0x9c>
 8004212:	9b02      	ldr	r3, [sp, #8]
 8004214:	a91a      	add	r1, sp, #104	; 0x68
 8004216:	1c6c      	adds	r4, r5, #1
 8004218:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800421c:	a842      	add	r0, sp, #264	; 0x108
 800421e:	009f      	lsls	r7, r3, #2
 8004220:	2e00      	cmp	r6, #0
 8004222:	f2c0 81ce 	blt.w	80045c2 <__kernel_rem_pio2f+0x416>
 8004226:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8004454 <__kernel_rem_pio2f+0x2a8>
 800422a:	464a      	mov	r2, r9
 800422c:	19cb      	adds	r3, r1, r7
 800422e:	ed33 7a01 	vldmdb	r3!, {s14}
 8004232:	ecf2 6a01 	vldmia	r2!, {s13}
 8004236:	4299      	cmp	r1, r3
 8004238:	eee6 7a87 	vfma.f32	s15, s13, s14
 800423c:	d1f7      	bne.n	800422e <__kernel_rem_pio2f+0x82>
 800423e:	3104      	adds	r1, #4
 8004240:	42a1      	cmp	r1, r4
 8004242:	ece0 7a01 	vstmia	r0!, {s15}
 8004246:	d1eb      	bne.n	8004220 <__kernel_rem_pio2f+0x74>
 8004248:	9a02      	ldr	r2, [sp, #8]
 800424a:	eddf 8a84 	vldr	s17, [pc, #528]	; 800445c <__kernel_rem_pio2f+0x2b0>
 800424e:	ed9f 8a82 	vldr	s16, [pc, #520]	; 8004458 <__kernel_rem_pio2f+0x2ac>
 8004252:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8004256:	3b01      	subs	r3, #1
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	ebc2 7882 	rsb	r8, r2, r2, lsl #30
 800425e:	aa06      	add	r2, sp, #24
 8004260:	1d1f      	adds	r7, r3, #4
 8004262:	4413      	add	r3, r2
 8004264:	4417      	add	r7, r2
 8004266:	9304      	str	r3, [sp, #16]
 8004268:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800426c:	462c      	mov	r4, r5
 800426e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004272:	ab56      	add	r3, sp, #344	; 0x158
 8004274:	445b      	add	r3, fp
 8004276:	2c00      	cmp	r4, #0
 8004278:	ed53 6a14 	vldr	s13, [r3, #-80]	; 0xffffffb0
 800427c:	dd19      	ble.n	80042b2 <__kernel_rem_pio2f+0x106>
 800427e:	a942      	add	r1, sp, #264	; 0x108
 8004280:	eb01 030b 	add.w	r3, r1, fp
 8004284:	aa05      	add	r2, sp, #20
 8004286:	ee66 7aa8 	vmul.f32	s15, s13, s17
 800428a:	eeb0 7a66 	vmov.f32	s14, s13
 800428e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004292:	ed33 6a01 	vldmdb	r3!, {s12}
 8004296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800429a:	428b      	cmp	r3, r1
 800429c:	eea7 7ac8 	vfms.f32	s14, s15, s16
 80042a0:	ee77 6a86 	vadd.f32	s13, s15, s12
 80042a4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80042a8:	ee17 0a10 	vmov	r0, s14
 80042ac:	f842 0f04 	str.w	r0, [r2, #4]!
 80042b0:	d1e9      	bne.n	8004286 <__kernel_rem_pio2f+0xda>
 80042b2:	ee16 0a90 	vmov	r0, s13
 80042b6:	4651      	mov	r1, sl
 80042b8:	f000 fb38 	bl	800492c <scalbnf>
 80042bc:	ee09 0a10 	vmov	s18, r0
 80042c0:	eef4 7a00 	vmov.f32	s15, #64	; 0x40
 80042c4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80042c8:	ee17 0a90 	vmov	r0, s15
 80042cc:	f000 fad4 	bl	8004878 <floorf>
 80042d0:	ee07 0a10 	vmov	s14, r0
 80042d4:	eef2 7a00 	vmov.f32	s15, #32
 80042d8:	eea7 9a67 	vfms.f32	s18, s14, s15
 80042dc:	f1ba 0f00 	cmp.w	sl, #0
 80042e0:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 80042e4:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80042e8:	ee39 9a67 	vsub.f32	s18, s18, s15
 80042ec:	f340 814d 	ble.w	800458a <__kernel_rem_pio2f+0x3de>
 80042f0:	1e61      	subs	r1, r4, #1
 80042f2:	aa06      	add	r2, sp, #24
 80042f4:	f1ca 0308 	rsb	r3, sl, #8
 80042f8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80042fc:	fa40 f203 	asr.w	r2, r0, r3
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	f10d 0e18 	add.w	lr, sp, #24
 8004308:	1ac3      	subs	r3, r0, r3
 800430a:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 800430e:	ee19 1a90 	vmov	r1, s19
 8004312:	4411      	add	r1, r2
 8004314:	f1ca 0007 	rsb	r0, sl, #7
 8004318:	ee09 1a90 	vmov	s19, r1
 800431c:	fa43 fc00 	asr.w	ip, r3, r0
 8004320:	f1bc 0f00 	cmp.w	ip, #0
 8004324:	dd37      	ble.n	8004396 <__kernel_rem_pio2f+0x1ea>
 8004326:	ee19 3a90 	vmov	r3, s19
 800432a:	2c00      	cmp	r4, #0
 800432c:	f103 0301 	add.w	r3, r3, #1
 8004330:	ee09 3a90 	vmov	s19, r3
 8004334:	f340 81de 	ble.w	80046f4 <__kernel_rem_pio2f+0x548>
 8004338:	2200      	movs	r2, #0
 800433a:	4610      	mov	r0, r2
 800433c:	a905      	add	r1, sp, #20
 800433e:	e008      	b.n	8004352 <__kernel_rem_pio2f+0x1a6>
 8004340:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8004344:	b113      	cbz	r3, 800434c <__kernel_rem_pio2f+0x1a0>
 8004346:	f8c1 e000 	str.w	lr, [r1]
 800434a:	2001      	movs	r0, #1
 800434c:	3201      	adds	r2, #1
 800434e:	4294      	cmp	r4, r2
 8004350:	dd0b      	ble.n	800436a <__kernel_rem_pio2f+0x1be>
 8004352:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8004356:	2800      	cmp	r0, #0
 8004358:	d0f2      	beq.n	8004340 <__kernel_rem_pio2f+0x194>
 800435a:	3201      	adds	r2, #1
 800435c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004360:	4294      	cmp	r4, r2
 8004362:	600b      	str	r3, [r1, #0]
 8004364:	f04f 0001 	mov.w	r0, #1
 8004368:	dcf3      	bgt.n	8004352 <__kernel_rem_pio2f+0x1a6>
 800436a:	f1ba 0f00 	cmp.w	sl, #0
 800436e:	dd0f      	ble.n	8004390 <__kernel_rem_pio2f+0x1e4>
 8004370:	f1ba 0f01 	cmp.w	sl, #1
 8004374:	f000 8111 	beq.w	800459a <__kernel_rem_pio2f+0x3ee>
 8004378:	f1ba 0f02 	cmp.w	sl, #2
 800437c:	d108      	bne.n	8004390 <__kernel_rem_pio2f+0x1e4>
 800437e:	1e62      	subs	r2, r4, #1
 8004380:	ab06      	add	r3, sp, #24
 8004382:	a906      	add	r1, sp, #24
 8004384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800438c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004390:	f1bc 0f02 	cmp.w	ip, #2
 8004394:	d064      	beq.n	8004460 <__kernel_rem_pio2f+0x2b4>
 8004396:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439e:	d177      	bne.n	8004490 <__kernel_rem_pio2f+0x2e4>
 80043a0:	1e63      	subs	r3, r4, #1
 80043a2:	429d      	cmp	r5, r3
 80043a4:	dc0b      	bgt.n	80043be <__kernel_rem_pio2f+0x212>
 80043a6:	aa06      	add	r2, sp, #24
 80043a8:	4493      	add	fp, r2
 80043aa:	2200      	movs	r2, #0
 80043ac:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80043b0:	45bb      	cmp	fp, r7
 80043b2:	ea42 0201 	orr.w	r2, r2, r1
 80043b6:	d1f9      	bne.n	80043ac <__kernel_rem_pio2f+0x200>
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	f040 8185 	bne.w	80046c8 <__kernel_rem_pio2f+0x51c>
 80043be:	1e6b      	subs	r3, r5, #1
 80043c0:	aa06      	add	r2, sp, #24
 80043c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8191 	bne.w	80046ee <__kernel_rem_pio2f+0x542>
 80043cc:	9b04      	ldr	r3, [sp, #16]
 80043ce:	f04f 0c01 	mov.w	ip, #1
 80043d2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80043d6:	f10c 0c01 	add.w	ip, ip, #1
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d0f9      	beq.n	80043d2 <__kernel_rem_pio2f+0x226>
 80043de:	44a4      	add	ip, r4
 80043e0:	1c63      	adds	r3, r4, #1
 80043e2:	4563      	cmp	r3, ip
 80043e4:	dc31      	bgt.n	800444a <__kernel_rem_pio2f+0x29e>
 80043e6:	9a03      	ldr	r2, [sp, #12]
 80043e8:	eb03 0e02 	add.w	lr, r3, r2
 80043ec:	9a02      	ldr	r2, [sp, #8]
 80043ee:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80043f2:	18a0      	adds	r0, r4, r2
 80043f4:	eb0c 0b02 	add.w	fp, ip, r2
 80043f8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80043fa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80043fe:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8004402:	aa1a      	add	r2, sp, #104	; 0x68
 8004404:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8004408:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800440c:	aa42      	add	r2, sp, #264	; 0x108
 800440e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8004412:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441e:	2e00      	cmp	r6, #0
 8004420:	ece0 7a01 	vstmia	r0!, {s15}
 8004424:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004454 <__kernel_rem_pio2f+0x2a8>
 8004428:	db0b      	blt.n	8004442 <__kernel_rem_pio2f+0x296>
 800442a:	464a      	mov	r2, r9
 800442c:	eb00 0108 	add.w	r1, r0, r8
 8004430:	4603      	mov	r3, r0
 8004432:	ed33 7a01 	vldmdb	r3!, {s14}
 8004436:	ecf2 6a01 	vldmia	r2!, {s13}
 800443a:	428b      	cmp	r3, r1
 800443c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004440:	d1f7      	bne.n	8004432 <__kernel_rem_pio2f+0x286>
 8004442:	4558      	cmp	r0, fp
 8004444:	ece4 7a01 	vstmia	r4!, {s15}
 8004448:	d1e3      	bne.n	8004412 <__kernel_rem_pio2f+0x266>
 800444a:	4664      	mov	r4, ip
 800444c:	e70f      	b.n	800426e <__kernel_rem_pio2f+0xc2>
 800444e:	bf00      	nop
 8004450:	08005654 	.word	0x08005654
 8004454:	00000000 	.word	0x00000000
 8004458:	43800000 	.word	0x43800000
 800445c:	3b800000 	.word	0x3b800000
 8004460:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004464:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8004468:	2800      	cmp	r0, #0
 800446a:	d094      	beq.n	8004396 <__kernel_rem_pio2f+0x1ea>
 800446c:	ee17 0a90 	vmov	r0, s15
 8004470:	4651      	mov	r1, sl
 8004472:	f8cd c014 	str.w	ip, [sp, #20]
 8004476:	f000 fa59 	bl	800492c <scalbnf>
 800447a:	ee07 0a90 	vmov	s15, r0
 800447e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8004482:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004486:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448e:	d087      	beq.n	80043a0 <__kernel_rem_pio2f+0x1f4>
 8004490:	ee19 0a10 	vmov	r0, s18
 8004494:	f1ca 0100 	rsb	r1, sl, #0
 8004498:	f8cd c008 	str.w	ip, [sp, #8]
 800449c:	f000 fa46 	bl	800492c <scalbnf>
 80044a0:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 8004458 <__kernel_rem_pio2f+0x2ac>
 80044a4:	f8dd c008 	ldr.w	ip, [sp, #8]
 80044a8:	ee07 0a10 	vmov	s14, r0
 80044ac:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80044b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b4:	f2c0 8181 	blt.w	80047ba <__kernel_rem_pio2f+0x60e>
 80044b8:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 800445c <__kernel_rem_pio2f+0x2b0>
 80044bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c0:	a906      	add	r1, sp, #24
 80044c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c6:	1c63      	adds	r3, r4, #1
 80044c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044cc:	f10a 0a08 	add.w	sl, sl, #8
 80044d0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80044d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044d8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80044dc:	ee17 2a10 	vmov	r2, s14
 80044e0:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80044e4:	ee17 2a90 	vmov	r2, s15
 80044e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80044ec:	4651      	mov	r1, sl
 80044ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80044f2:	9303      	str	r3, [sp, #12]
 80044f4:	f8cd c008 	str.w	ip, [sp, #8]
 80044f8:	f000 fa18 	bl	800492c <scalbnf>
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	ee07 0a10 	vmov	s14, r0
 8004508:	f2c0 80c2 	blt.w	8004690 <__kernel_rem_pio2f+0x4e4>
 800450c:	1c5f      	adds	r7, r3, #1
 800450e:	00ba      	lsls	r2, r7, #2
 8004510:	a842      	add	r0, sp, #264	; 0x108
 8004512:	a906      	add	r1, sp, #24
 8004514:	ed5f 6a2f 	vldr	s13, [pc, #-188]	; 800445c <__kernel_rem_pio2f+0x2b0>
 8004518:	4411      	add	r1, r2
 800451a:	1886      	adds	r6, r0, r2
 800451c:	ed71 7a01 	vldmdb	r1!, {s15}
 8004520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004528:	ee27 7a26 	vmul.f32	s14, s14, s13
 800452c:	ed66 7a01 	vstmdb	r6!, {s15}
 8004530:	4286      	cmp	r6, r0
 8004532:	d1f3      	bne.n	800451c <__kernel_rem_pio2f+0x370>
 8004534:	3a04      	subs	r2, #4
 8004536:	4416      	add	r6, r2
 8004538:	2400      	movs	r4, #0
 800453a:	2d00      	cmp	r5, #0
 800453c:	f2c0 80a5 	blt.w	800468a <__kernel_rem_pio2f+0x4de>
 8004540:	2c00      	cmp	r4, #0
 8004542:	f2c0 80a2 	blt.w	800468a <__kernel_rem_pio2f+0x4de>
 8004546:	48a1      	ldr	r0, [pc, #644]	; (80047cc <__kernel_rem_pio2f+0x620>)
 8004548:	eddf 7aa1 	vldr	s15, [pc, #644]	; 80047d0 <__kernel_rem_pio2f+0x624>
 800454c:	4631      	mov	r1, r6
 800454e:	2200      	movs	r2, #0
 8004550:	e001      	b.n	8004556 <__kernel_rem_pio2f+0x3aa>
 8004552:	42a2      	cmp	r2, r4
 8004554:	dc08      	bgt.n	8004568 <__kernel_rem_pio2f+0x3bc>
 8004556:	ecf0 6a01 	vldmia	r0!, {s13}
 800455a:	ecb1 7a01 	vldmia	r1!, {s14}
 800455e:	3201      	adds	r2, #1
 8004560:	4295      	cmp	r5, r2
 8004562:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004566:	daf4      	bge.n	8004552 <__kernel_rem_pio2f+0x3a6>
 8004568:	aa56      	add	r2, sp, #344	; 0x158
 800456a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800456e:	3401      	adds	r4, #1
 8004570:	42bc      	cmp	r4, r7
 8004572:	f1a6 0604 	sub.w	r6, r6, #4
 8004576:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800457a:	d1de      	bne.n	800453a <__kernel_rem_pio2f+0x38e>
 800457c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800457e:	2a03      	cmp	r2, #3
 8004580:	d865      	bhi.n	800464e <__kernel_rem_pio2f+0x4a2>
 8004582:	e8df f002 	tbb	[pc, r2]
 8004586:	3a6d      	.short	0x3a6d
 8004588:	b93a      	.short	0xb93a
 800458a:	d110      	bne.n	80045ae <__kernel_rem_pio2f+0x402>
 800458c:	1e63      	subs	r3, r4, #1
 800458e:	aa06      	add	r2, sp, #24
 8004590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004594:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8004598:	e6c2      	b.n	8004320 <__kernel_rem_pio2f+0x174>
 800459a:	1e62      	subs	r2, r4, #1
 800459c:	ab06      	add	r3, sp, #24
 800459e:	a906      	add	r1, sp, #24
 80045a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80045ac:	e6f0      	b.n	8004390 <__kernel_rem_pio2f+0x1e4>
 80045ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80045b2:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80045b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ba:	da0b      	bge.n	80045d4 <__kernel_rem_pio2f+0x428>
 80045bc:	f04f 0c00 	mov.w	ip, #0
 80045c0:	e6e9      	b.n	8004396 <__kernel_rem_pio2f+0x1ea>
 80045c2:	eddf 7a83 	vldr	s15, [pc, #524]	; 80047d0 <__kernel_rem_pio2f+0x624>
 80045c6:	3104      	adds	r1, #4
 80045c8:	42a1      	cmp	r1, r4
 80045ca:	ece0 7a01 	vstmia	r0!, {s15}
 80045ce:	f47f ae27 	bne.w	8004220 <__kernel_rem_pio2f+0x74>
 80045d2:	e639      	b.n	8004248 <__kernel_rem_pio2f+0x9c>
 80045d4:	ee19 3a90 	vmov	r3, s19
 80045d8:	2c00      	cmp	r4, #0
 80045da:	f103 0301 	add.w	r3, r3, #1
 80045de:	ee09 3a90 	vmov	s19, r3
 80045e2:	bfc8      	it	gt
 80045e4:	f04f 0c02 	movgt.w	ip, #2
 80045e8:	f73f aea6 	bgt.w	8004338 <__kernel_rem_pio2f+0x18c>
 80045ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80045f0:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80045f4:	f04f 0c02 	mov.w	ip, #2
 80045f8:	e6cd      	b.n	8004396 <__kernel_rem_pio2f+0x1ea>
 80045fa:	aa2e      	add	r2, sp, #184	; 0xb8
 80045fc:	eddf 7a74 	vldr	s15, [pc, #464]	; 80047d0 <__kernel_rem_pio2f+0x624>
 8004600:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004604:	ed37 7a01 	vldmdb	r7!, {s14}
 8004608:	4297      	cmp	r7, r2
 800460a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800460e:	d1f9      	bne.n	8004604 <__kernel_rem_pio2f+0x458>
 8004610:	f1bc 0f00 	cmp.w	ip, #0
 8004614:	d048      	beq.n	80046a8 <__kernel_rem_pio2f+0x4fc>
 8004616:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800461a:	9a01      	ldr	r2, [sp, #4]
 800461c:	eeb1 7a67 	vneg.f32	s14, s15
 8004620:	2b00      	cmp	r3, #0
 8004622:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004626:	ed82 7a00 	vstr	s14, [r2]
 800462a:	dd0b      	ble.n	8004644 <__kernel_rem_pio2f+0x498>
 800462c:	a92f      	add	r1, sp, #188	; 0xbc
 800462e:	2201      	movs	r2, #1
 8004630:	ecb1 7a01 	vldmia	r1!, {s14}
 8004634:	3201      	adds	r2, #1
 8004636:	4293      	cmp	r3, r2
 8004638:	ee77 7a87 	vadd.f32	s15, s15, s14
 800463c:	daf8      	bge.n	8004630 <__kernel_rem_pio2f+0x484>
 800463e:	f1bc 0f00 	cmp.w	ip, #0
 8004642:	d001      	beq.n	8004648 <__kernel_rem_pio2f+0x49c>
 8004644:	eef1 7a67 	vneg.f32	s15, s15
 8004648:	9b01      	ldr	r3, [sp, #4]
 800464a:	edc3 7a01 	vstr	s15, [r3, #4]
 800464e:	ee19 3a90 	vmov	r3, s19
 8004652:	f003 0007 	and.w	r0, r3, #7
 8004656:	b057      	add	sp, #348	; 0x15c
 8004658:	ecbd 8b04 	vpop	{d8-d9}
 800465c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004660:	aa2e      	add	r2, sp, #184	; 0xb8
 8004662:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80047d0 <__kernel_rem_pio2f+0x624>
 8004666:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800466a:	ed37 7a01 	vldmdb	r7!, {s14}
 800466e:	3b01      	subs	r3, #1
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004676:	d1f8      	bne.n	800466a <__kernel_rem_pio2f+0x4be>
 8004678:	f1bc 0f00 	cmp.w	ip, #0
 800467c:	d001      	beq.n	8004682 <__kernel_rem_pio2f+0x4d6>
 800467e:	eef1 7a67 	vneg.f32	s15, s15
 8004682:	9b01      	ldr	r3, [sp, #4]
 8004684:	edc3 7a00 	vstr	s15, [r3]
 8004688:	e7e1      	b.n	800464e <__kernel_rem_pio2f+0x4a2>
 800468a:	eddf 7a51 	vldr	s15, [pc, #324]	; 80047d0 <__kernel_rem_pio2f+0x624>
 800468e:	e76b      	b.n	8004568 <__kernel_rem_pio2f+0x3bc>
 8004690:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004692:	2a03      	cmp	r2, #3
 8004694:	d8db      	bhi.n	800464e <__kernel_rem_pio2f+0x4a2>
 8004696:	e8df f002 	tbb	[pc, r2]
 800469a:	0214      	.short	0x0214
 800469c:	8302      	.short	0x8302
 800469e:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80047d0 <__kernel_rem_pio2f+0x624>
 80046a2:	f1bc 0f00 	cmp.w	ip, #0
 80046a6:	d1b6      	bne.n	8004616 <__kernel_rem_pio2f+0x46a>
 80046a8:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 80046ac:	9a01      	ldr	r2, [sp, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	edc2 7a00 	vstr	s15, [r2]
 80046b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046b8:	dcb8      	bgt.n	800462c <__kernel_rem_pio2f+0x480>
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	edc3 7a01 	vstr	s15, [r3, #4]
 80046c0:	e7c5      	b.n	800464e <__kernel_rem_pio2f+0x4a2>
 80046c2:	eddf 7a43 	vldr	s15, [pc, #268]	; 80047d0 <__kernel_rem_pio2f+0x624>
 80046c6:	e7d7      	b.n	8004678 <__kernel_rem_pio2f+0x4cc>
 80046c8:	aa06      	add	r2, sp, #24
 80046ca:	f1aa 0a08 	sub.w	sl, sl, #8
 80046ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046d2:	2a00      	cmp	r2, #0
 80046d4:	f47f af0a 	bne.w	80044ec <__kernel_rem_pio2f+0x340>
 80046d8:	aa06      	add	r2, sp, #24
 80046da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80046de:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80046e2:	3b01      	subs	r3, #1
 80046e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80046e8:	2900      	cmp	r1, #0
 80046ea:	d0f8      	beq.n	80046de <__kernel_rem_pio2f+0x532>
 80046ec:	e6fe      	b.n	80044ec <__kernel_rem_pio2f+0x340>
 80046ee:	f04f 0c01 	mov.w	ip, #1
 80046f2:	e674      	b.n	80043de <__kernel_rem_pio2f+0x232>
 80046f4:	2000      	movs	r0, #0
 80046f6:	e638      	b.n	800436a <__kernel_rem_pio2f+0x1be>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dd51      	ble.n	80047a0 <__kernel_rem_pio2f+0x5f4>
 80046fc:	009a      	lsls	r2, r3, #2
 80046fe:	a956      	add	r1, sp, #344	; 0x158
 8004700:	4411      	add	r1, r2
 8004702:	ac2e      	add	r4, sp, #184	; 0xb8
 8004704:	1d10      	adds	r0, r2, #4
 8004706:	ed11 7a28 	vldr	s14, [r1, #-160]	; 0xffffff60
 800470a:	4420      	add	r0, r4
 800470c:	18a1      	adds	r1, r4, r2
 800470e:	ed71 7a01 	vldmdb	r1!, {s15}
 8004712:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004716:	42a1      	cmp	r1, r4
 8004718:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800471c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004720:	eeb0 7a66 	vmov.f32	s14, s13
 8004724:	ed60 7a01 	vstmdb	r0!, {s15}
 8004728:	edc1 6a00 	vstr	s13, [r1]
 800472c:	d1ef      	bne.n	800470e <__kernel_rem_pio2f+0x562>
 800472e:	2b01      	cmp	r3, #1
 8004730:	dd36      	ble.n	80047a0 <__kernel_rem_pio2f+0x5f4>
 8004732:	1d13      	adds	r3, r2, #4
 8004734:	a856      	add	r0, sp, #344	; 0x158
 8004736:	4410      	add	r0, r2
 8004738:	440b      	add	r3, r1
 800473a:	ed10 7a28 	vldr	s14, [r0, #-160]	; 0xffffff60
 800473e:	440a      	add	r2, r1
 8004740:	a82f      	add	r0, sp, #188	; 0xbc
 8004742:	4619      	mov	r1, r3
 8004744:	ed72 7a01 	vldmdb	r2!, {s15}
 8004748:	ee77 6a87 	vadd.f32	s13, s15, s14
 800474c:	4282      	cmp	r2, r0
 800474e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004752:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004756:	eeb0 7a66 	vmov.f32	s14, s13
 800475a:	ed61 7a01 	vstmdb	r1!, {s15}
 800475e:	edc2 6a00 	vstr	s13, [r2]
 8004762:	d1ef      	bne.n	8004744 <__kernel_rem_pio2f+0x598>
 8004764:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80047d0 <__kernel_rem_pio2f+0x624>
 8004768:	aa30      	add	r2, sp, #192	; 0xc0
 800476a:	ed33 7a01 	vldmdb	r3!, {s14}
 800476e:	4293      	cmp	r3, r2
 8004770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004774:	d1f9      	bne.n	800476a <__kernel_rem_pio2f+0x5be>
 8004776:	f1bc 0f00 	cmp.w	ip, #0
 800477a:	d016      	beq.n	80047aa <__kernel_rem_pio2f+0x5fe>
 800477c:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8004780:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8004784:	9a01      	ldr	r2, [sp, #4]
 8004786:	eef1 7a67 	vneg.f32	s15, s15
 800478a:	eef1 6a66 	vneg.f32	s13, s13
 800478e:	eeb1 7a47 	vneg.f32	s14, s14
 8004792:	edc2 7a02 	vstr	s15, [r2, #8]
 8004796:	edc2 6a00 	vstr	s13, [r2]
 800479a:	ed82 7a01 	vstr	s14, [r2, #4]
 800479e:	e756      	b.n	800464e <__kernel_rem_pio2f+0x4a2>
 80047a0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80047d0 <__kernel_rem_pio2f+0x624>
 80047a4:	f1bc 0f00 	cmp.w	ip, #0
 80047a8:	d1e8      	bne.n	800477c <__kernel_rem_pio2f+0x5d0>
 80047aa:	9801      	ldr	r0, [sp, #4]
 80047ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80047ae:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80047b0:	edc0 7a02 	vstr	s15, [r0, #8]
 80047b4:	6002      	str	r2, [r0, #0]
 80047b6:	6043      	str	r3, [r0, #4]
 80047b8:	e749      	b.n	800464e <__kernel_rem_pio2f+0x4a2>
 80047ba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80047be:	a906      	add	r1, sp, #24
 80047c0:	ee17 2a10 	vmov	r2, s14
 80047c4:	4623      	mov	r3, r4
 80047c6:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80047ca:	e68f      	b.n	80044ec <__kernel_rem_pio2f+0x340>
 80047cc:	08005660 	.word	0x08005660
 80047d0:	00000000 	.word	0x00000000

080047d4 <__kernel_sinf>:
 80047d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80047d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80047dc:	ee07 0a90 	vmov	s15, r0
 80047e0:	ee06 1a10 	vmov	s12, r1
 80047e4:	da04      	bge.n	80047f0 <__kernel_sinf+0x1c>
 80047e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80047ea:	ee17 3a10 	vmov	r3, s14
 80047ee:	b323      	cbz	r3, 800483a <__kernel_sinf+0x66>
 80047f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80047f4:	ed9f 4a17 	vldr	s8, [pc, #92]	; 8004854 <__kernel_sinf+0x80>
 80047f8:	eddf 4a17 	vldr	s9, [pc, #92]	; 8004858 <__kernel_sinf+0x84>
 80047fc:	ed9f 5a17 	vldr	s10, [pc, #92]	; 800485c <__kernel_sinf+0x88>
 8004800:	eddf 5a17 	vldr	s11, [pc, #92]	; 8004860 <__kernel_sinf+0x8c>
 8004804:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004864 <__kernel_sinf+0x90>
 8004808:	eee7 4a04 	vfma.f32	s9, s14, s8
 800480c:	ee27 4a27 	vmul.f32	s8, s14, s15
 8004810:	eea4 5a87 	vfma.f32	s10, s9, s14
 8004814:	eee5 5a07 	vfma.f32	s11, s10, s14
 8004818:	eee5 6a87 	vfma.f32	s13, s11, s14
 800481c:	b182      	cbz	r2, 8004840 <__kernel_sinf+0x6c>
 800481e:	ee66 6ac4 	vnmul.f32	s13, s13, s8
 8004822:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 8004826:	eee6 6a25 	vfma.f32	s13, s12, s11
 800482a:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8004868 <__kernel_sinf+0x94>
 800482e:	ee96 6a87 	vfnms.f32	s12, s13, s14
 8004832:	eea4 6a25 	vfma.f32	s12, s8, s11
 8004836:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800483a:	ee17 0a90 	vmov	r0, s15
 800483e:	4770      	bx	lr
 8004840:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 800486c <__kernel_sinf+0x98>
 8004844:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004848:	eee6 7a04 	vfma.f32	s15, s12, s8
 800484c:	ee17 0a90 	vmov	r0, s15
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2f2ec9d3 	.word	0x2f2ec9d3
 8004858:	b2d72f34 	.word	0xb2d72f34
 800485c:	3638ef1b 	.word	0x3638ef1b
 8004860:	b9500d01 	.word	0xb9500d01
 8004864:	3c088889 	.word	0x3c088889
 8004868:	3e2aaaab 	.word	0x3e2aaaab
 800486c:	be2aaaab 	.word	0xbe2aaaab

08004870 <fabsf>:
 8004870:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop

08004878 <floorf>:
 8004878:	b410      	push	{r4}
 800487a:	b083      	sub	sp, #12
 800487c:	9001      	str	r0, [sp, #4]
 800487e:	9a01      	ldr	r2, [sp, #4]
 8004880:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004884:	0dcb      	lsrs	r3, r1, #23
 8004886:	3b7f      	subs	r3, #127	; 0x7f
 8004888:	2b16      	cmp	r3, #22
 800488a:	dc19      	bgt.n	80048c0 <floorf+0x48>
 800488c:	2b00      	cmp	r3, #0
 800488e:	4614      	mov	r4, r2
 8004890:	db28      	blt.n	80048e4 <floorf+0x6c>
 8004892:	4824      	ldr	r0, [pc, #144]	; (8004924 <floorf+0xac>)
 8004894:	4118      	asrs	r0, r3
 8004896:	4210      	tst	r0, r2
 8004898:	d015      	beq.n	80048c6 <floorf+0x4e>
 800489a:	eddf 7a23 	vldr	s15, [pc, #140]	; 8004928 <floorf+0xb0>
 800489e:	ed9d 7a01 	vldr	s14, [sp, #4]
 80048a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ae:	dd28      	ble.n	8004902 <floorf+0x8a>
 80048b0:	2a00      	cmp	r2, #0
 80048b2:	db29      	blt.n	8004908 <floorf+0x90>
 80048b4:	ea24 0000 	bic.w	r0, r4, r0
 80048b8:	b003      	add	sp, #12
 80048ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80048c4:	d204      	bcs.n	80048d0 <floorf+0x58>
 80048c6:	9801      	ldr	r0, [sp, #4]
 80048c8:	b003      	add	sp, #12
 80048ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	eddd 7a01 	vldr	s15, [sp, #4]
 80048d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80048d8:	ee17 0a90 	vmov	r0, s15
 80048dc:	b003      	add	sp, #12
 80048de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8004928 <floorf+0xb0>
 80048e8:	ee07 0a10 	vmov	s14, r0
 80048ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f8:	dde5      	ble.n	80048c6 <floorf+0x4e>
 80048fa:	2a00      	cmp	r2, #0
 80048fc:	db0a      	blt.n	8004914 <floorf+0x9c>
 80048fe:	2000      	movs	r0, #0
 8004900:	e7e2      	b.n	80048c8 <floorf+0x50>
 8004902:	ee17 0a10 	vmov	r0, s14
 8004906:	e7df      	b.n	80048c8 <floorf+0x50>
 8004908:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800490c:	fa42 f303 	asr.w	r3, r2, r3
 8004910:	441c      	add	r4, r3
 8004912:	e7cf      	b.n	80048b4 <floorf+0x3c>
 8004914:	2900      	cmp	r1, #0
 8004916:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 800491a:	bf18      	it	ne
 800491c:	ee17 0a90 	vmovne	r0, s15
 8004920:	e7d2      	b.n	80048c8 <floorf+0x50>
 8004922:	bf00      	nop
 8004924:	007fffff 	.word	0x007fffff
 8004928:	7149f2ca 	.word	0x7149f2ca

0800492c <scalbnf>:
 800492c:	b500      	push	{lr}
 800492e:	ed2d 8b02 	vpush	{d8}
 8004932:	b083      	sub	sp, #12
 8004934:	9001      	str	r0, [sp, #4]
 8004936:	9b01      	ldr	r3, [sp, #4]
 8004938:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800493c:	d023      	beq.n	8004986 <scalbnf+0x5a>
 800493e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004942:	d215      	bcs.n	8004970 <scalbnf+0x44>
 8004944:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004948:	d326      	bcc.n	8004998 <scalbnf+0x6c>
 800494a:	0dd2      	lsrs	r2, r2, #23
 800494c:	440a      	add	r2, r1
 800494e:	2afe      	cmp	r2, #254	; 0xfe
 8004950:	dc3c      	bgt.n	80049cc <scalbnf+0xa0>
 8004952:	2a00      	cmp	r2, #0
 8004954:	dd30      	ble.n	80049b8 <scalbnf+0x8c>
 8004956:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800495a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	ee17 0a90 	vmov	r0, s15
 8004966:	b003      	add	sp, #12
 8004968:	ecbd 8b02 	vpop	{d8}
 800496c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004970:	ee07 0a90 	vmov	s15, r0
 8004974:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004978:	ee17 0a90 	vmov	r0, s15
 800497c:	b003      	add	sp, #12
 800497e:	ecbd 8b02 	vpop	{d8}
 8004982:	f85d fb04 	ldr.w	pc, [sp], #4
 8004986:	eddd 7a01 	vldr	s15, [sp, #4]
 800498a:	ee17 0a90 	vmov	r0, s15
 800498e:	b003      	add	sp, #12
 8004990:	ecbd 8b02 	vpop	{d8}
 8004994:	f85d fb04 	ldr.w	pc, [sp], #4
 8004998:	ed9d 7a01 	vldr	s14, [sp, #4]
 800499c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004a18 <scalbnf+0xec>
 80049a0:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <scalbnf+0xf0>)
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	4299      	cmp	r1, r3
 80049a8:	edcd 7a01 	vstr	s15, [sp, #4]
 80049ac:	db20      	blt.n	80049f0 <scalbnf+0xc4>
 80049ae:	9b01      	ldr	r3, [sp, #4]
 80049b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80049b4:	3a19      	subs	r2, #25
 80049b6:	e7c9      	b.n	800494c <scalbnf+0x20>
 80049b8:	f112 0f16 	cmn.w	r2, #22
 80049bc:	da1f      	bge.n	80049fe <scalbnf+0xd2>
 80049be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80049c2:	4299      	cmp	r1, r3
 80049c4:	dc02      	bgt.n	80049cc <scalbnf+0xa0>
 80049c6:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8004a20 <scalbnf+0xf4>
 80049ca:	e001      	b.n	80049d0 <scalbnf+0xa4>
 80049cc:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8004a24 <scalbnf+0xf8>
 80049d0:	9901      	ldr	r1, [sp, #4]
 80049d2:	ee18 0a10 	vmov	r0, s16
 80049d6:	f000 f829 	bl	8004a2c <copysignf>
 80049da:	ee07 0a90 	vmov	s15, r0
 80049de:	ee67 7a88 	vmul.f32	s15, s15, s16
 80049e2:	ee17 0a90 	vmov	r0, s15
 80049e6:	b003      	add	sp, #12
 80049e8:	ecbd 8b02 	vpop	{d8}
 80049ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80049f0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004a20 <scalbnf+0xf4>
 80049f4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80049f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fc:	e7bc      	b.n	8004978 <scalbnf+0x4c>
 80049fe:	3219      	adds	r2, #25
 8004a00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a04:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004a08:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004a28 <scalbnf+0xfc>
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a14:	e7b0      	b.n	8004978 <scalbnf+0x4c>
 8004a16:	bf00      	nop
 8004a18:	4c000000 	.word	0x4c000000
 8004a1c:	ffff3cb0 	.word	0xffff3cb0
 8004a20:	0da24260 	.word	0x0da24260
 8004a24:	7149f2ca 	.word	0x7149f2ca
 8004a28:	33000000 	.word	0x33000000

08004a2c <copysignf>:
 8004a2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004a30:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a34:	4308      	orrs	r0, r1
 8004a36:	4770      	bx	lr

08004a38 <__aeabi_drsub>:
 8004a38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004a3c:	e002      	b.n	8004a44 <__adddf3>
 8004a3e:	bf00      	nop

08004a40 <__aeabi_dsub>:
 8004a40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004a44 <__adddf3>:
 8004a44:	b530      	push	{r4, r5, lr}
 8004a46:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004a4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004a4e:	ea94 0f05 	teq	r4, r5
 8004a52:	bf08      	it	eq
 8004a54:	ea90 0f02 	teqeq	r0, r2
 8004a58:	bf1f      	itttt	ne
 8004a5a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004a5e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004a62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004a66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004a6a:	f000 80e2 	beq.w	8004c32 <__adddf3+0x1ee>
 8004a6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004a72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004a76:	bfb8      	it	lt
 8004a78:	426d      	neglt	r5, r5
 8004a7a:	dd0c      	ble.n	8004a96 <__adddf3+0x52>
 8004a7c:	442c      	add	r4, r5
 8004a7e:	ea80 0202 	eor.w	r2, r0, r2
 8004a82:	ea81 0303 	eor.w	r3, r1, r3
 8004a86:	ea82 0000 	eor.w	r0, r2, r0
 8004a8a:	ea83 0101 	eor.w	r1, r3, r1
 8004a8e:	ea80 0202 	eor.w	r2, r0, r2
 8004a92:	ea81 0303 	eor.w	r3, r1, r3
 8004a96:	2d36      	cmp	r5, #54	; 0x36
 8004a98:	bf88      	it	hi
 8004a9a:	bd30      	pophi	{r4, r5, pc}
 8004a9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004aa0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004aa4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004aa8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004aac:	d002      	beq.n	8004ab4 <__adddf3+0x70>
 8004aae:	4240      	negs	r0, r0
 8004ab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004ab4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004ab8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004abc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004ac0:	d002      	beq.n	8004ac8 <__adddf3+0x84>
 8004ac2:	4252      	negs	r2, r2
 8004ac4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004ac8:	ea94 0f05 	teq	r4, r5
 8004acc:	f000 80a7 	beq.w	8004c1e <__adddf3+0x1da>
 8004ad0:	f1a4 0401 	sub.w	r4, r4, #1
 8004ad4:	f1d5 0e20 	rsbs	lr, r5, #32
 8004ad8:	db0d      	blt.n	8004af6 <__adddf3+0xb2>
 8004ada:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004ade:	fa22 f205 	lsr.w	r2, r2, r5
 8004ae2:	1880      	adds	r0, r0, r2
 8004ae4:	f141 0100 	adc.w	r1, r1, #0
 8004ae8:	fa03 f20e 	lsl.w	r2, r3, lr
 8004aec:	1880      	adds	r0, r0, r2
 8004aee:	fa43 f305 	asr.w	r3, r3, r5
 8004af2:	4159      	adcs	r1, r3
 8004af4:	e00e      	b.n	8004b14 <__adddf3+0xd0>
 8004af6:	f1a5 0520 	sub.w	r5, r5, #32
 8004afa:	f10e 0e20 	add.w	lr, lr, #32
 8004afe:	2a01      	cmp	r2, #1
 8004b00:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004b04:	bf28      	it	cs
 8004b06:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004b0a:	fa43 f305 	asr.w	r3, r3, r5
 8004b0e:	18c0      	adds	r0, r0, r3
 8004b10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004b14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004b18:	d507      	bpl.n	8004b2a <__adddf3+0xe6>
 8004b1a:	f04f 0e00 	mov.w	lr, #0
 8004b1e:	f1dc 0c00 	rsbs	ip, ip, #0
 8004b22:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004b26:	eb6e 0101 	sbc.w	r1, lr, r1
 8004b2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004b2e:	d31b      	bcc.n	8004b68 <__adddf3+0x124>
 8004b30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004b34:	d30c      	bcc.n	8004b50 <__adddf3+0x10c>
 8004b36:	0849      	lsrs	r1, r1, #1
 8004b38:	ea5f 0030 	movs.w	r0, r0, rrx
 8004b3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004b40:	f104 0401 	add.w	r4, r4, #1
 8004b44:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004b48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004b4c:	f080 809a 	bcs.w	8004c84 <__adddf3+0x240>
 8004b50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004b54:	bf08      	it	eq
 8004b56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004b5a:	f150 0000 	adcs.w	r0, r0, #0
 8004b5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004b62:	ea41 0105 	orr.w	r1, r1, r5
 8004b66:	bd30      	pop	{r4, r5, pc}
 8004b68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004b6c:	4140      	adcs	r0, r0
 8004b6e:	eb41 0101 	adc.w	r1, r1, r1
 8004b72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004b76:	f1a4 0401 	sub.w	r4, r4, #1
 8004b7a:	d1e9      	bne.n	8004b50 <__adddf3+0x10c>
 8004b7c:	f091 0f00 	teq	r1, #0
 8004b80:	bf04      	itt	eq
 8004b82:	4601      	moveq	r1, r0
 8004b84:	2000      	moveq	r0, #0
 8004b86:	fab1 f381 	clz	r3, r1
 8004b8a:	bf08      	it	eq
 8004b8c:	3320      	addeq	r3, #32
 8004b8e:	f1a3 030b 	sub.w	r3, r3, #11
 8004b92:	f1b3 0220 	subs.w	r2, r3, #32
 8004b96:	da0c      	bge.n	8004bb2 <__adddf3+0x16e>
 8004b98:	320c      	adds	r2, #12
 8004b9a:	dd08      	ble.n	8004bae <__adddf3+0x16a>
 8004b9c:	f102 0c14 	add.w	ip, r2, #20
 8004ba0:	f1c2 020c 	rsb	r2, r2, #12
 8004ba4:	fa01 f00c 	lsl.w	r0, r1, ip
 8004ba8:	fa21 f102 	lsr.w	r1, r1, r2
 8004bac:	e00c      	b.n	8004bc8 <__adddf3+0x184>
 8004bae:	f102 0214 	add.w	r2, r2, #20
 8004bb2:	bfd8      	it	le
 8004bb4:	f1c2 0c20 	rsble	ip, r2, #32
 8004bb8:	fa01 f102 	lsl.w	r1, r1, r2
 8004bbc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004bc0:	bfdc      	itt	le
 8004bc2:	ea41 010c 	orrle.w	r1, r1, ip
 8004bc6:	4090      	lslle	r0, r2
 8004bc8:	1ae4      	subs	r4, r4, r3
 8004bca:	bfa2      	ittt	ge
 8004bcc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004bd0:	4329      	orrge	r1, r5
 8004bd2:	bd30      	popge	{r4, r5, pc}
 8004bd4:	ea6f 0404 	mvn.w	r4, r4
 8004bd8:	3c1f      	subs	r4, #31
 8004bda:	da1c      	bge.n	8004c16 <__adddf3+0x1d2>
 8004bdc:	340c      	adds	r4, #12
 8004bde:	dc0e      	bgt.n	8004bfe <__adddf3+0x1ba>
 8004be0:	f104 0414 	add.w	r4, r4, #20
 8004be4:	f1c4 0220 	rsb	r2, r4, #32
 8004be8:	fa20 f004 	lsr.w	r0, r0, r4
 8004bec:	fa01 f302 	lsl.w	r3, r1, r2
 8004bf0:	ea40 0003 	orr.w	r0, r0, r3
 8004bf4:	fa21 f304 	lsr.w	r3, r1, r4
 8004bf8:	ea45 0103 	orr.w	r1, r5, r3
 8004bfc:	bd30      	pop	{r4, r5, pc}
 8004bfe:	f1c4 040c 	rsb	r4, r4, #12
 8004c02:	f1c4 0220 	rsb	r2, r4, #32
 8004c06:	fa20 f002 	lsr.w	r0, r0, r2
 8004c0a:	fa01 f304 	lsl.w	r3, r1, r4
 8004c0e:	ea40 0003 	orr.w	r0, r0, r3
 8004c12:	4629      	mov	r1, r5
 8004c14:	bd30      	pop	{r4, r5, pc}
 8004c16:	fa21 f004 	lsr.w	r0, r1, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	bd30      	pop	{r4, r5, pc}
 8004c1e:	f094 0f00 	teq	r4, #0
 8004c22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004c26:	bf06      	itte	eq
 8004c28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004c2c:	3401      	addeq	r4, #1
 8004c2e:	3d01      	subne	r5, #1
 8004c30:	e74e      	b.n	8004ad0 <__adddf3+0x8c>
 8004c32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004c36:	bf18      	it	ne
 8004c38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004c3c:	d029      	beq.n	8004c92 <__adddf3+0x24e>
 8004c3e:	ea94 0f05 	teq	r4, r5
 8004c42:	bf08      	it	eq
 8004c44:	ea90 0f02 	teqeq	r0, r2
 8004c48:	d005      	beq.n	8004c56 <__adddf3+0x212>
 8004c4a:	ea54 0c00 	orrs.w	ip, r4, r0
 8004c4e:	bf04      	itt	eq
 8004c50:	4619      	moveq	r1, r3
 8004c52:	4610      	moveq	r0, r2
 8004c54:	bd30      	pop	{r4, r5, pc}
 8004c56:	ea91 0f03 	teq	r1, r3
 8004c5a:	bf1e      	ittt	ne
 8004c5c:	2100      	movne	r1, #0
 8004c5e:	2000      	movne	r0, #0
 8004c60:	bd30      	popne	{r4, r5, pc}
 8004c62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004c66:	d105      	bne.n	8004c74 <__adddf3+0x230>
 8004c68:	0040      	lsls	r0, r0, #1
 8004c6a:	4149      	adcs	r1, r1
 8004c6c:	bf28      	it	cs
 8004c6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004c72:	bd30      	pop	{r4, r5, pc}
 8004c74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004c78:	bf3c      	itt	cc
 8004c7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004c7e:	bd30      	popcc	{r4, r5, pc}
 8004c80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004c84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004c88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c8c:	f04f 0000 	mov.w	r0, #0
 8004c90:	bd30      	pop	{r4, r5, pc}
 8004c92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004c96:	bf1a      	itte	ne
 8004c98:	4619      	movne	r1, r3
 8004c9a:	4610      	movne	r0, r2
 8004c9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004ca0:	bf1c      	itt	ne
 8004ca2:	460b      	movne	r3, r1
 8004ca4:	4602      	movne	r2, r0
 8004ca6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004caa:	bf06      	itte	eq
 8004cac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004cb0:	ea91 0f03 	teqeq	r1, r3
 8004cb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004cb8:	bd30      	pop	{r4, r5, pc}
 8004cba:	bf00      	nop

08004cbc <__aeabi_ui2d>:
 8004cbc:	f090 0f00 	teq	r0, #0
 8004cc0:	bf04      	itt	eq
 8004cc2:	2100      	moveq	r1, #0
 8004cc4:	4770      	bxeq	lr
 8004cc6:	b530      	push	{r4, r5, lr}
 8004cc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004ccc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004cd0:	f04f 0500 	mov.w	r5, #0
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	e750      	b.n	8004b7c <__adddf3+0x138>
 8004cda:	bf00      	nop

08004cdc <__aeabi_i2d>:
 8004cdc:	f090 0f00 	teq	r0, #0
 8004ce0:	bf04      	itt	eq
 8004ce2:	2100      	moveq	r1, #0
 8004ce4:	4770      	bxeq	lr
 8004ce6:	b530      	push	{r4, r5, lr}
 8004ce8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004cec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004cf0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004cf4:	bf48      	it	mi
 8004cf6:	4240      	negmi	r0, r0
 8004cf8:	f04f 0100 	mov.w	r1, #0
 8004cfc:	e73e      	b.n	8004b7c <__adddf3+0x138>
 8004cfe:	bf00      	nop

08004d00 <__aeabi_f2d>:
 8004d00:	0042      	lsls	r2, r0, #1
 8004d02:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004d06:	ea4f 0131 	mov.w	r1, r1, rrx
 8004d0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004d0e:	bf1f      	itttt	ne
 8004d10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004d14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004d18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004d1c:	4770      	bxne	lr
 8004d1e:	f092 0f00 	teq	r2, #0
 8004d22:	bf14      	ite	ne
 8004d24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004d28:	4770      	bxeq	lr
 8004d2a:	b530      	push	{r4, r5, lr}
 8004d2c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004d30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004d34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004d38:	e720      	b.n	8004b7c <__adddf3+0x138>
 8004d3a:	bf00      	nop

08004d3c <__aeabi_ul2d>:
 8004d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8004d40:	bf08      	it	eq
 8004d42:	4770      	bxeq	lr
 8004d44:	b530      	push	{r4, r5, lr}
 8004d46:	f04f 0500 	mov.w	r5, #0
 8004d4a:	e00a      	b.n	8004d62 <__aeabi_l2d+0x16>

08004d4c <__aeabi_l2d>:
 8004d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8004d50:	bf08      	it	eq
 8004d52:	4770      	bxeq	lr
 8004d54:	b530      	push	{r4, r5, lr}
 8004d56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004d5a:	d502      	bpl.n	8004d62 <__aeabi_l2d+0x16>
 8004d5c:	4240      	negs	r0, r0
 8004d5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004d62:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004d66:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004d6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004d6e:	f43f aedc 	beq.w	8004b2a <__adddf3+0xe6>
 8004d72:	f04f 0203 	mov.w	r2, #3
 8004d76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004d7a:	bf18      	it	ne
 8004d7c:	3203      	addne	r2, #3
 8004d7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004d82:	bf18      	it	ne
 8004d84:	3203      	addne	r2, #3
 8004d86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004d8a:	f1c2 0320 	rsb	r3, r2, #32
 8004d8e:	fa00 fc03 	lsl.w	ip, r0, r3
 8004d92:	fa20 f002 	lsr.w	r0, r0, r2
 8004d96:	fa01 fe03 	lsl.w	lr, r1, r3
 8004d9a:	ea40 000e 	orr.w	r0, r0, lr
 8004d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8004da2:	4414      	add	r4, r2
 8004da4:	e6c1      	b.n	8004b2a <__adddf3+0xe6>
 8004da6:	bf00      	nop

08004da8 <__aeabi_dmul>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004dae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004db2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004db6:	bf1d      	ittte	ne
 8004db8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004dbc:	ea94 0f0c 	teqne	r4, ip
 8004dc0:	ea95 0f0c 	teqne	r5, ip
 8004dc4:	f000 f8de 	bleq	8004f84 <__aeabi_dmul+0x1dc>
 8004dc8:	442c      	add	r4, r5
 8004dca:	ea81 0603 	eor.w	r6, r1, r3
 8004dce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004dd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004dd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004dda:	bf18      	it	ne
 8004ddc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004de0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de8:	d038      	beq.n	8004e5c <__aeabi_dmul+0xb4>
 8004dea:	fba0 ce02 	umull	ip, lr, r0, r2
 8004dee:	f04f 0500 	mov.w	r5, #0
 8004df2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004df6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004dfa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004dfe:	f04f 0600 	mov.w	r6, #0
 8004e02:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004e06:	f09c 0f00 	teq	ip, #0
 8004e0a:	bf18      	it	ne
 8004e0c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004e10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004e14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004e18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004e1c:	d204      	bcs.n	8004e28 <__aeabi_dmul+0x80>
 8004e1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004e22:	416d      	adcs	r5, r5
 8004e24:	eb46 0606 	adc.w	r6, r6, r6
 8004e28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004e2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004e30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004e34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004e38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004e3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004e40:	bf88      	it	hi
 8004e42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004e46:	d81e      	bhi.n	8004e86 <__aeabi_dmul+0xde>
 8004e48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004e4c:	bf08      	it	eq
 8004e4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004e52:	f150 0000 	adcs.w	r0, r0, #0
 8004e56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004e60:	ea46 0101 	orr.w	r1, r6, r1
 8004e64:	ea40 0002 	orr.w	r0, r0, r2
 8004e68:	ea81 0103 	eor.w	r1, r1, r3
 8004e6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004e70:	bfc2      	ittt	gt
 8004e72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004e76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004e7a:	bd70      	popgt	{r4, r5, r6, pc}
 8004e7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004e80:	f04f 0e00 	mov.w	lr, #0
 8004e84:	3c01      	subs	r4, #1
 8004e86:	f300 80ab 	bgt.w	8004fe0 <__aeabi_dmul+0x238>
 8004e8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004e8e:	bfde      	ittt	le
 8004e90:	2000      	movle	r0, #0
 8004e92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004e96:	bd70      	pople	{r4, r5, r6, pc}
 8004e98:	f1c4 0400 	rsb	r4, r4, #0
 8004e9c:	3c20      	subs	r4, #32
 8004e9e:	da35      	bge.n	8004f0c <__aeabi_dmul+0x164>
 8004ea0:	340c      	adds	r4, #12
 8004ea2:	dc1b      	bgt.n	8004edc <__aeabi_dmul+0x134>
 8004ea4:	f104 0414 	add.w	r4, r4, #20
 8004ea8:	f1c4 0520 	rsb	r5, r4, #32
 8004eac:	fa00 f305 	lsl.w	r3, r0, r5
 8004eb0:	fa20 f004 	lsr.w	r0, r0, r4
 8004eb4:	fa01 f205 	lsl.w	r2, r1, r5
 8004eb8:	ea40 0002 	orr.w	r0, r0, r2
 8004ebc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004ec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004ec4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004ec8:	fa21 f604 	lsr.w	r6, r1, r4
 8004ecc:	eb42 0106 	adc.w	r1, r2, r6
 8004ed0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004ed4:	bf08      	it	eq
 8004ed6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	f1c4 040c 	rsb	r4, r4, #12
 8004ee0:	f1c4 0520 	rsb	r5, r4, #32
 8004ee4:	fa00 f304 	lsl.w	r3, r0, r4
 8004ee8:	fa20 f005 	lsr.w	r0, r0, r5
 8004eec:	fa01 f204 	lsl.w	r2, r1, r4
 8004ef0:	ea40 0002 	orr.w	r0, r0, r2
 8004ef4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004ef8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004efc:	f141 0100 	adc.w	r1, r1, #0
 8004f00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004f04:	bf08      	it	eq
 8004f06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	f1c4 0520 	rsb	r5, r4, #32
 8004f10:	fa00 f205 	lsl.w	r2, r0, r5
 8004f14:	ea4e 0e02 	orr.w	lr, lr, r2
 8004f18:	fa20 f304 	lsr.w	r3, r0, r4
 8004f1c:	fa01 f205 	lsl.w	r2, r1, r5
 8004f20:	ea43 0302 	orr.w	r3, r3, r2
 8004f24:	fa21 f004 	lsr.w	r0, r1, r4
 8004f28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004f2c:	fa21 f204 	lsr.w	r2, r1, r4
 8004f30:	ea20 0002 	bic.w	r0, r0, r2
 8004f34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004f38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004f3c:	bf08      	it	eq
 8004f3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	f094 0f00 	teq	r4, #0
 8004f48:	d10f      	bne.n	8004f6a <__aeabi_dmul+0x1c2>
 8004f4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004f4e:	0040      	lsls	r0, r0, #1
 8004f50:	eb41 0101 	adc.w	r1, r1, r1
 8004f54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004f58:	bf08      	it	eq
 8004f5a:	3c01      	subeq	r4, #1
 8004f5c:	d0f7      	beq.n	8004f4e <__aeabi_dmul+0x1a6>
 8004f5e:	ea41 0106 	orr.w	r1, r1, r6
 8004f62:	f095 0f00 	teq	r5, #0
 8004f66:	bf18      	it	ne
 8004f68:	4770      	bxne	lr
 8004f6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004f6e:	0052      	lsls	r2, r2, #1
 8004f70:	eb43 0303 	adc.w	r3, r3, r3
 8004f74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004f78:	bf08      	it	eq
 8004f7a:	3d01      	subeq	r5, #1
 8004f7c:	d0f7      	beq.n	8004f6e <__aeabi_dmul+0x1c6>
 8004f7e:	ea43 0306 	orr.w	r3, r3, r6
 8004f82:	4770      	bx	lr
 8004f84:	ea94 0f0c 	teq	r4, ip
 8004f88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004f8c:	bf18      	it	ne
 8004f8e:	ea95 0f0c 	teqne	r5, ip
 8004f92:	d00c      	beq.n	8004fae <__aeabi_dmul+0x206>
 8004f94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004f98:	bf18      	it	ne
 8004f9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004f9e:	d1d1      	bne.n	8004f44 <__aeabi_dmul+0x19c>
 8004fa0:	ea81 0103 	eor.w	r1, r1, r3
 8004fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004fa8:	f04f 0000 	mov.w	r0, #0
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
 8004fae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004fb2:	bf06      	itte	eq
 8004fb4:	4610      	moveq	r0, r2
 8004fb6:	4619      	moveq	r1, r3
 8004fb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004fbc:	d019      	beq.n	8004ff2 <__aeabi_dmul+0x24a>
 8004fbe:	ea94 0f0c 	teq	r4, ip
 8004fc2:	d102      	bne.n	8004fca <__aeabi_dmul+0x222>
 8004fc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004fc8:	d113      	bne.n	8004ff2 <__aeabi_dmul+0x24a>
 8004fca:	ea95 0f0c 	teq	r5, ip
 8004fce:	d105      	bne.n	8004fdc <__aeabi_dmul+0x234>
 8004fd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004fd4:	bf1c      	itt	ne
 8004fd6:	4610      	movne	r0, r2
 8004fd8:	4619      	movne	r1, r3
 8004fda:	d10a      	bne.n	8004ff2 <__aeabi_dmul+0x24a>
 8004fdc:	ea81 0103 	eor.w	r1, r1, r3
 8004fe0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004fe4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004fe8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fec:	f04f 0000 	mov.w	r0, #0
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004ff6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}

08004ffc <__aeabi_ddiv>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005002:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005006:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800500a:	bf1d      	ittte	ne
 800500c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005010:	ea94 0f0c 	teqne	r4, ip
 8005014:	ea95 0f0c 	teqne	r5, ip
 8005018:	f000 f8a7 	bleq	800516a <__aeabi_ddiv+0x16e>
 800501c:	eba4 0405 	sub.w	r4, r4, r5
 8005020:	ea81 0e03 	eor.w	lr, r1, r3
 8005024:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005028:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800502c:	f000 8088 	beq.w	8005140 <__aeabi_ddiv+0x144>
 8005030:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005034:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005038:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800503c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005040:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005044:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005048:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800504c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005050:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005054:	429d      	cmp	r5, r3
 8005056:	bf08      	it	eq
 8005058:	4296      	cmpeq	r6, r2
 800505a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800505e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005062:	d202      	bcs.n	800506a <__aeabi_ddiv+0x6e>
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	ea4f 0232 	mov.w	r2, r2, rrx
 800506a:	1ab6      	subs	r6, r6, r2
 800506c:	eb65 0503 	sbc.w	r5, r5, r3
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	ea4f 0232 	mov.w	r2, r2, rrx
 8005076:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800507a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800507e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005082:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005086:	bf22      	ittt	cs
 8005088:	1ab6      	subcs	r6, r6, r2
 800508a:	4675      	movcs	r5, lr
 800508c:	ea40 000c 	orrcs.w	r0, r0, ip
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	ea4f 0232 	mov.w	r2, r2, rrx
 8005096:	ebb6 0e02 	subs.w	lr, r6, r2
 800509a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800509e:	bf22      	ittt	cs
 80050a0:	1ab6      	subcs	r6, r6, r2
 80050a2:	4675      	movcs	r5, lr
 80050a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80050ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80050b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80050b6:	bf22      	ittt	cs
 80050b8:	1ab6      	subcs	r6, r6, r2
 80050ba:	4675      	movcs	r5, lr
 80050bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80050c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80050ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80050ce:	bf22      	ittt	cs
 80050d0:	1ab6      	subcs	r6, r6, r2
 80050d2:	4675      	movcs	r5, lr
 80050d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80050d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80050dc:	d018      	beq.n	8005110 <__aeabi_ddiv+0x114>
 80050de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80050e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80050e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80050ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80050ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80050f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80050f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80050fa:	d1c0      	bne.n	800507e <__aeabi_ddiv+0x82>
 80050fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005100:	d10b      	bne.n	800511a <__aeabi_ddiv+0x11e>
 8005102:	ea41 0100 	orr.w	r1, r1, r0
 8005106:	f04f 0000 	mov.w	r0, #0
 800510a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800510e:	e7b6      	b.n	800507e <__aeabi_ddiv+0x82>
 8005110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005114:	bf04      	itt	eq
 8005116:	4301      	orreq	r1, r0
 8005118:	2000      	moveq	r0, #0
 800511a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800511e:	bf88      	it	hi
 8005120:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005124:	f63f aeaf 	bhi.w	8004e86 <__aeabi_dmul+0xde>
 8005128:	ebb5 0c03 	subs.w	ip, r5, r3
 800512c:	bf04      	itt	eq
 800512e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005132:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005136:	f150 0000 	adcs.w	r0, r0, #0
 800513a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005144:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005148:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800514c:	bfc2      	ittt	gt
 800514e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005152:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005156:	bd70      	popgt	{r4, r5, r6, pc}
 8005158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800515c:	f04f 0e00 	mov.w	lr, #0
 8005160:	3c01      	subs	r4, #1
 8005162:	e690      	b.n	8004e86 <__aeabi_dmul+0xde>
 8005164:	ea45 0e06 	orr.w	lr, r5, r6
 8005168:	e68d      	b.n	8004e86 <__aeabi_dmul+0xde>
 800516a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800516e:	ea94 0f0c 	teq	r4, ip
 8005172:	bf08      	it	eq
 8005174:	ea95 0f0c 	teqeq	r5, ip
 8005178:	f43f af3b 	beq.w	8004ff2 <__aeabi_dmul+0x24a>
 800517c:	ea94 0f0c 	teq	r4, ip
 8005180:	d10a      	bne.n	8005198 <__aeabi_ddiv+0x19c>
 8005182:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005186:	f47f af34 	bne.w	8004ff2 <__aeabi_dmul+0x24a>
 800518a:	ea95 0f0c 	teq	r5, ip
 800518e:	f47f af25 	bne.w	8004fdc <__aeabi_dmul+0x234>
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	e72c      	b.n	8004ff2 <__aeabi_dmul+0x24a>
 8005198:	ea95 0f0c 	teq	r5, ip
 800519c:	d106      	bne.n	80051ac <__aeabi_ddiv+0x1b0>
 800519e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80051a2:	f43f aefd 	beq.w	8004fa0 <__aeabi_dmul+0x1f8>
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	e722      	b.n	8004ff2 <__aeabi_dmul+0x24a>
 80051ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80051b0:	bf18      	it	ne
 80051b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80051b6:	f47f aec5 	bne.w	8004f44 <__aeabi_dmul+0x19c>
 80051ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80051be:	f47f af0d 	bne.w	8004fdc <__aeabi_dmul+0x234>
 80051c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80051c6:	f47f aeeb 	bne.w	8004fa0 <__aeabi_dmul+0x1f8>
 80051ca:	e712      	b.n	8004ff2 <__aeabi_dmul+0x24a>

080051cc <__aeabi_d2f>:
 80051cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80051d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80051d4:	bf24      	itt	cs
 80051d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80051da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80051de:	d90d      	bls.n	80051fc <__aeabi_d2f+0x30>
 80051e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80051e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80051e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80051ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80051f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80051f4:	bf08      	it	eq
 80051f6:	f020 0001 	biceq.w	r0, r0, #1
 80051fa:	4770      	bx	lr
 80051fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005200:	d121      	bne.n	8005246 <__aeabi_d2f+0x7a>
 8005202:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005206:	bfbc      	itt	lt
 8005208:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800520c:	4770      	bxlt	lr
 800520e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005212:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005216:	f1c2 0218 	rsb	r2, r2, #24
 800521a:	f1c2 0c20 	rsb	ip, r2, #32
 800521e:	fa10 f30c 	lsls.w	r3, r0, ip
 8005222:	fa20 f002 	lsr.w	r0, r0, r2
 8005226:	bf18      	it	ne
 8005228:	f040 0001 	orrne.w	r0, r0, #1
 800522c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005230:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005234:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005238:	ea40 000c 	orr.w	r0, r0, ip
 800523c:	fa23 f302 	lsr.w	r3, r3, r2
 8005240:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005244:	e7cc      	b.n	80051e0 <__aeabi_d2f+0x14>
 8005246:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800524a:	d107      	bne.n	800525c <__aeabi_d2f+0x90>
 800524c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005250:	bf1e      	ittt	ne
 8005252:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005256:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800525a:	4770      	bxne	lr
 800525c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005260:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005264:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4e0f      	ldr	r6, [pc, #60]	; (80052ac <__libc_init_array+0x40>)
 8005270:	4d0f      	ldr	r5, [pc, #60]	; (80052b0 <__libc_init_array+0x44>)
 8005272:	1b76      	subs	r6, r6, r5
 8005274:	10b6      	asrs	r6, r6, #2
 8005276:	bf18      	it	ne
 8005278:	2400      	movne	r4, #0
 800527a:	d005      	beq.n	8005288 <__libc_init_array+0x1c>
 800527c:	3401      	adds	r4, #1
 800527e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005282:	4798      	blx	r3
 8005284:	42a6      	cmp	r6, r4
 8005286:	d1f9      	bne.n	800527c <__libc_init_array+0x10>
 8005288:	4e0a      	ldr	r6, [pc, #40]	; (80052b4 <__libc_init_array+0x48>)
 800528a:	4d0b      	ldr	r5, [pc, #44]	; (80052b8 <__libc_init_array+0x4c>)
 800528c:	1b76      	subs	r6, r6, r5
 800528e:	f7fb fa45 	bl	800071c <_init>
 8005292:	10b6      	asrs	r6, r6, #2
 8005294:	bf18      	it	ne
 8005296:	2400      	movne	r4, #0
 8005298:	d006      	beq.n	80052a8 <__libc_init_array+0x3c>
 800529a:	3401      	adds	r4, #1
 800529c:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a0:	4798      	blx	r3
 80052a2:	42a6      	cmp	r6, r4
 80052a4:	d1f9      	bne.n	800529a <__libc_init_array+0x2e>
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
 80052aa:	bf00      	nop
 80052ac:	1ffe8824 	.word	0x1ffe8824
 80052b0:	1ffe8824 	.word	0x1ffe8824
 80052b4:	1ffe8824 	.word	0x1ffe8824
 80052b8:	1ffe8824 	.word	0x1ffe8824

080052bc <npio2_hw>:
 80052bc:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 80052cc:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 80052dc:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 80052ec:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 80052fc:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 800530c:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 800531c:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 800532c:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0800533c <two_over_pi>:
 800533c:	000000a2 000000f9 00000083 0000006e     ............n...
 800534c:	0000004e 00000044 00000015 00000029     N...D.......)...
 800535c:	000000fc 00000027 00000057 000000d1     ....'...W.......
 800536c:	000000f5 00000034 000000dd 000000c0     ....4...........
 800537c:	000000db 00000062 00000095 00000099     ....b...........
 800538c:	0000003c 00000043 00000090 00000041     <...C.......A...
 800539c:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 80053ac:	000000de 000000bb 000000c5 00000061     ............a...
 80053bc:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 80053cc:	00000042 0000004d 000000d2 000000e0     B...M...........
 80053dc:	00000006 00000049 0000002e 000000ea     ....I...........
 80053ec:	00000009 000000d1 00000092 0000001c     ................
 80053fc:	000000fe 0000001d 000000eb 0000001c     ................
 800540c:	000000b1 00000029 000000a7 0000003e     ....).......>...
 800541c:	000000e8 00000082 00000035 000000f5     ........5.......
 800542c:	0000002e 000000bb 00000044 00000084     ........D.......
 800543c:	000000e9 0000009c 00000070 00000026     ........p...&...
 800544c:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 800545c:	00000039 00000091 000000d6 00000039     9...........9...
 800546c:	00000083 00000053 00000039 000000f4     ....S...9.......
 800547c:	0000009c 00000084 0000005f 0000008b     ........_.......
 800548c:	000000bd 000000f9 00000028 0000003b     ........(...;...
 800549c:	0000001f 000000f8 00000097 000000ff     ................
 80054ac:	000000de 00000005 00000098 0000000f     ................
 80054bc:	000000ef 0000002f 00000011 0000008b     ..../...........
 80054cc:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 80054dc:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 80054ec:	00000027 000000cb 00000009 000000b7     '...............
 80054fc:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 800550c:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 800551c:	00000075 00000027 000000ba 000000c7     u...'...........
 800552c:	000000eb 000000e5 000000f1 0000007b     ............{...
 800553c:	0000003d 00000007 00000039 000000f7     =.......9.......
 800554c:	0000008a 00000052 00000092 000000ea     ....R...........
 800555c:	0000006b 000000fb 0000005f 000000b1     k......._.......
 800556c:	0000001f 0000008d 0000005d 00000008     ........].......
 800557c:	00000056 00000003 00000030 00000046     V.......0...F...
 800558c:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 800559c:	000000f0 000000cf 000000bc 00000020     ............ ...
 80055ac:	0000009a 000000f4 00000036 0000001d     ........6.......
 80055bc:	000000a9 000000e3 00000091 00000061     ............a...
 80055cc:	0000005e 000000e6 0000001b 00000008     ^...............
 80055dc:	00000065 00000099 00000085 0000005f     e..........._...
 80055ec:	00000014 000000a0 00000068 00000040     ........h...@...
 80055fc:	0000008d 000000ff 000000d8 00000080     ................
 800560c:	0000004d 00000073 00000027 00000031     M...s...'...1...
 800561c:	00000006 00000006 00000015 00000056     ............V...
 800562c:	000000ca 00000073 000000a8 000000c9     ....s...........
 800563c:	00000060 000000e2 0000007b 000000c0     `.......{.......
 800564c:	0000008c 0000006b                       ....k...

08005654 <init_jk>:
 8005654:	00000004 00000007 00000009              ............

08005660 <PIo2>:
 8005660:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8005670:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8005680:	1fc40000 1bc60000 17440000              ..........D.
