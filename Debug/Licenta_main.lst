
Licenta_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000535c  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000044  1ffe8800  0c00535c  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00007f44  1ffe8844  0c0053a0  00010844  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000388  00000000  00000000  00010848  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e35  00000000  00000000  00010bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ecc  00000000  00000000  00016a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e3b  00000000  00000000  000178d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c2c  00000000  00000000  0001970c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001de4  00000000  00000000  0001a338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001094  00000000  00000000  0001c11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0001d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000061c  00000000  00000000  0001d428  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 29 07 00 08 99 02 00 08     ........).......
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 45 18 00 08 99 02 00 08 99 02 00 08     ....E...........
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
    ldr r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
    cmp r4, r5
 800020c:	42ac      	cmp	r4, r5
    bge .L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
    ldr r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
    ldr r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
    ldr r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
    subs    r3, #4
 8000216:	3b04      	subs	r3, #4
    ittt    ge
 8000218:	bfa2      	ittt	ge
    ldrge   r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
    strge   r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
    bge .L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

    adds    r4, #12
 8000220:	340c      	adds	r4, #12
    b   .L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
    ldr r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
    ldr r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
    cmp r3, r4
 8000228:	42a3      	cmp	r3, r4
    bge .L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
    ldr r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
    ldr r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
    movs    r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
    subs    r2, #4
 8000232:	3a04      	subs	r2, #4
    itt ge
 8000234:	bfa4      	itt	ge
    strge   r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
    bge .L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

    adds    r3, #8
 800023a:	3308      	adds	r3, #8
    b   .L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00535c 	.word	0x0c00535c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000044 	.word	0x00000044
 8000254:	0c00535c 	.word	0x0c00535c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8844 	.word	0x1ffe8844
 8000264:	00007f44 	.word	0x00007f44
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	080002c5 	.word	0x080002c5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
    ldr r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
    ldr r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
    ldr r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
    b   .L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08004f3d 	.word	0x08004f3d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080019b5 	.word	0x080019b5

08000298 <BusFault_Handler>:
    .align  1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e003      	b.n	80002b2 <delay+0x16>
  {
    __NOP();
 80002aa:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d3f7      	bcc.n	80002aa <delay+0xe>
  {
    __NOP();
  }
}
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002c4:	b598      	push	{r3, r4, r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <SystemInit+0x1c>)
 80002ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ce:	4614      	mov	r4, r2
 80002d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002d6:	f000 f805 	bl	80002e4 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002da:	f000 f83b 	bl	8000354 <SystemCoreClockSetup>
}
 80002de:	bd98      	pop	{r3, r4, r7, pc}
 80002e0:	2003ffc4 	.word	0x2003ffc4

080002e4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ea:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemCoreSetup+0x64>)
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <SystemCoreSetup+0x68>)
 80002f0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002f2:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002f6:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <SystemCoreSetup+0x6c>)
 8000316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800031a:	3314      	adds	r3, #20
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f023 030f 	bic.w	r3, r3, #15
 8000326:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <SystemCoreSetup+0x6c>)
 8000332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000336:	3314      	adds	r3, #20
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	08000000 	.word	0x08000000
 8000350:	58001000 	.word	0x58001000

08000354 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000358:	4ba4      	ldr	r3, [pc, #656]	; (80005ec <SystemCoreClockSetup+0x298>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d10c      	bne.n	800037e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000364:	4aa1      	ldr	r2, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000366:	4ba1      	ldr	r3, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000370:	bf00      	nop
 8000372:	4b9e      	ldr	r3, [pc, #632]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800037e:	4b9c      	ldr	r3, [pc, #624]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000386:	2b00      	cmp	r3, #0
 8000388:	d009      	beq.n	800039e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800038a:	4a99      	ldr	r2, [pc, #612]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038c:	4b98      	ldr	r3, [pc, #608]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000394:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000396:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800039a:	f7ff ff7f 	bl	800029c <delay>
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800039e:	4a95      	ldr	r2, [pc, #596]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a0:	4b94      	ldr	r3, [pc, #592]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ae:	f7ff ff75 	bl	800029c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003b2:	4a90      	ldr	r2, [pc, #576]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b4:	4b8f      	ldr	r3, [pc, #572]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003c2:	4b8d      	ldr	r3, [pc, #564]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d029      	beq.n	8000422 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003ce:	4a8a      	ldr	r2, [pc, #552]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d0:	4b89      	ldr	r3, [pc, #548]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003dc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003de:	f000 f993 	bl	8000708 <OSCHP_GetFrequency>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b85      	ldr	r3, [pc, #532]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 80003e6:	fba3 2302 	umull	r2, r3, r3, r2
 80003ea:	0d1b      	lsrs	r3, r3, #20
 80003ec:	3b01      	subs	r3, #1
 80003ee:	041b      	lsls	r3, r3, #16
 80003f0:	4981      	ldr	r1, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f2:	4a81      	ldr	r2, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80003fa:	4a7e      	ldr	r2, [pc, #504]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fc:	4b7d      	ldr	r3, [pc, #500]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000406:	4a7b      	ldr	r2, [pc, #492]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000408:	4b7a      	ldr	r3, [pc, #488]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000410:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000412:	bf00      	nop
 8000414:	4b77      	ldr	r3, [pc, #476]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800041c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000420:	d1f8      	bne.n	8000414 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000422:	4a74      	ldr	r2, [pc, #464]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000424:	4b73      	ldr	r3, [pc, #460]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800042e:	4a71      	ldr	r2, [pc, #452]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000430:	4b70      	ldr	r3, [pc, #448]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800043a:	4b6e      	ldr	r3, [pc, #440]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800043c:	4a70      	ldr	r2, [pc, #448]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800043e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_24MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000440:	4a6c      	ldr	r2, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000442:	4b6c      	ldr	r3, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800044a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800044c:	4a69      	ldr	r2, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800044e:	4b69      	ldr	r3, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000458:	4a66      	ldr	r2, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045a:	4b66      	ldr	r3, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000462:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000464:	bf00      	nop
 8000466:	4b63      	ldr	r3, [pc, #396]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f9      	beq.n	8000466 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock at 24MHz*/
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000472:	4a60      	ldr	r2, [pc, #384]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000474:	4b5f      	ldr	r3, [pc, #380]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800047e:	bf00      	nop
 8000480:	4b5c      	ldr	r3, [pc, #368]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d1f9      	bne.n	8000480 <SystemCoreClockSetup+0x12c>
  }

#endif /* ENABLE_PLL */

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->SYSCLKCR = __SYSCLKCR;
 800048c:	4b5d      	ldr	r3, [pc, #372]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800048e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000492:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = __PBCLKCR;
 8000494:	4b5b      	ldr	r3, [pc, #364]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 8000496:	2200      	movs	r2, #0
 8000498:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = __CPUCLKCR;
 800049a:	4b5a      	ldr	r3, [pc, #360]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = __CCUCLKCR;
 80004a0:	4b58      	ldr	r3, [pc, #352]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = __WDTCLKCR;
 80004a6:	4b57      	ldr	r3, [pc, #348]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = __EBUCLKCR;
 80004ac:	4b55      	ldr	r3, [pc, #340]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ae:	2203      	movs	r2, #3
 80004b0:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = __USBCLKCR;
 80004b2:	4b54      	ldr	r3, [pc, #336]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004b4:	4a54      	ldr	r2, [pc, #336]	; (8000608 <SystemCoreClockSetup+0x2b4>)
 80004b6:	619a      	str	r2, [r3, #24]
  SCU_CLK->ECATCLKCR = __ECATCLKCR;
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	639a      	str	r2, [r3, #56]	; 0x38
  SCU_CLK->EXTCLKCR = __EXTCLKCR;
 80004be:	4b51      	ldr	r3, [pc, #324]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004c0:	4a52      	ldr	r2, [pc, #328]	; (800060c <SystemCoreClockSetup+0x2b8>)
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004c4:	4a4b      	ldr	r2, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c6:	4b4b      	ldr	r3, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ce:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d0:	4b48      	ldr	r3, [pc, #288]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004d2:	4a4f      	ldr	r2, [pc, #316]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004d4:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_48MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_48MHZ);
 80004d6:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80004da:	f7ff fedf 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004de:	4b45      	ldr	r3, [pc, #276]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004e0:	4a4c      	ldr	r2, [pc, #304]	; (8000614 <SystemCoreClockSetup+0x2c0>)
 80004e2:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_72MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_72MHZ);
 80004e4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80004e8:	f7ff fed8 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004ec:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004ee:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <SystemCoreClockSetup+0x2c4>)
 80004f0:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_96MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_96MHZ);
 80004f2:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80004f6:	f7ff fed1 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004fa:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004fc:	4a47      	ldr	r2, [pc, #284]	; (800061c <SystemCoreClockSetup+0x2c8>)
 80004fe:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_120MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_120MHZ);
 8000500:	f241 7070 	movw	r0, #6000	; 0x1770
 8000504:	f7ff feca 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000508:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800050a:	4a45      	ldr	r2, [pc, #276]	; (8000620 <SystemCoreClockSetup+0x2cc>)
 800050c:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_144MHZ);
 800050e:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8000512:	f7ff fec3 	bl	800029c <delay>

#endif /* ENABLE_PLL */

#if ENABLE_USBPLL
  /* enable USB PLL first */
  SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000516:	4a37      	ldr	r2, [pc, #220]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000520:	f023 0302 	bic.w	r3, r3, #2
 8000524:	6153      	str	r3, [r2, #20]

  /* USB PLL uses as clock input the OSC_HP */
  /* check and if not already running enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000526:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d031      	beq.n	8000596 <SystemCoreClockSetup+0x242>
  {
    /* check if Main PLL is switched on for OSC WDG*/
    if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <SystemCoreClockSetup+0x2d0>)
 8000538:	4013      	ands	r3, r2
 800053a:	2b00      	cmp	r3, #0
 800053c:	d007      	beq.n	800054e <SystemCoreClockSetup+0x1fa>
    {
      /* enable PLL first */
      SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800053e:	4a2d      	ldr	r2, [pc, #180]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000548:	f023 0302 	bic.w	r3, r3, #2
 800054c:	6053      	str	r3, [r2, #4]
    }

    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800054e:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000558:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800055c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800055e:	f000 f8d3 	bl	8000708 <OSCHP_GetFrequency>
 8000562:	4602      	mov	r2, r0
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 8000566:	fba3 2302 	umull	r2, r3, r3, r2
 800056a:	0d1b      	lsrs	r3, r3, #20
 800056c:	3b01      	subs	r3, #1
 800056e:	041b      	lsls	r3, r3, #16
 8000570:	4921      	ldr	r1, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000572:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000574:	6852      	ldr	r2, [r2, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	604b      	str	r3, [r1, #4]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800057a:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000584:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000586:	bf00      	nop
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000590:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000594:	d1f8      	bne.n	8000588 <SystemCoreClockSetup+0x234>
    }
  }

  /* Setup USB PLL */
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b0:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <SystemCoreClockSetup+0x2d4>)
 80005b2:	615a      	str	r2, [r3, #20]
                        (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005be:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f023 0310 	bic.w	r3, r3, #16
 80005ca:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80005d8:	bf00      	nop
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005dc:	691b      	ldr	r3, [r3, #16]
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <SystemCoreClockSetup+0x286>
    /* wait for PLL Lock */
  }
#endif

  /* Enable selected clocks */
  SCU_CLK->CLKSET = __CLKSET;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	e01f      	b.n	800062c <SystemCoreClockSetup+0x2d8>
 80005ec:	50004200 	.word	0x50004200
 80005f0:	50004400 	.word	0x50004400
 80005f4:	50004710 	.word	0x50004710
 80005f8:	50004700 	.word	0x50004700
 80005fc:	6b5fca6b 	.word	0x6b5fca6b
 8000600:	010b2f00 	.word	0x010b2f00
 8000604:	50004600 	.word	0x50004600
 8000608:	00010005 	.word	0x00010005
 800060c:	01200003 	.word	0x01200003
 8000610:	01052f00 	.word	0x01052f00
 8000614:	01032f00 	.word	0x01032f00
 8000618:	01022f00 	.word	0x01022f00
 800061c:	01012f00 	.word	0x01012f00
 8000620:	01002f00 	.word	0x01002f00
 8000624:	00010002 	.word	0x00010002
 8000628:	02006300 	.word	0x02006300
 800062c:	605a      	str	r2, [r3, #4]
  PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif
#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800062e:	f000 f801 	bl	8000634 <SystemCoreClockUpdate>
}
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d03e      	beq.n	80006c4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e002      	b.n	800065e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000658:	f000 f856 	bl	8000708 <OSCHP_GetFrequency>
 800065c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	2b00      	cmp	r3, #0
 8000668:	d020      	beq.n	80006ac <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000672:	0e1b      	lsrs	r3, r3, #24
 8000674:	3301      	adds	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800068e:	0c1b      	lsrs	r3, r3, #16
 8000690:	3301      	adds	r3, #1
 8000692:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00d      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e001      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 80006c6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	3301      	adds	r3, #1
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <SystemCoreClockUpdate+0xd0>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	50004600 	.word	0x50004600
 80006fc:	50004710 	.word	0x50004710
 8000700:	016e3600 	.word	0x016e3600
 8000704:	2003ffc0 	.word	0x2003ffc0

08000708 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <OSCHP_GetFrequency+0x10>)
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	00b71b00 	.word	0x00b71b00

0800071c <_init>:
  }
}

/* Init */
void _init(void)
{}
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <ERU0_0_IRQHandler>:
 */
//int16_t timer_value_old = 0;

/*Interrupt function for Eru0 used with ENCZ component of encoder*/
void ERU0_0_IRQHandler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
//	set_output_blink_1();						//TOGGLE LED1
//	ERU0->EXICON[2] &= ~ERU0_EXICON0_FL_MSK;	//Reset Status Flag for ETLx
}
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <encoder_init>:

void encoder_init (void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
/*
 * Pin set up
 */
	/*Digital Pad activated*/
	PORT14->PDISC &= ~(PORTS_PDISC_5_MSK);
 8000738:	4a6b      	ldr	r2, [pc, #428]	; (80008e8 <encoder_init+0x1b4>)
 800073a:	4b6b      	ldr	r3, [pc, #428]	; (80008e8 <encoder_init+0x1b4>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	f023 0320 	bic.w	r3, r3, #32
 8000742:	6613      	str	r3, [r2, #96]	; 0x60
	PORT14->PDISC &= ~(PORTS_PDISC_6_MSK);
 8000744:	4a68      	ldr	r2, [pc, #416]	; (80008e8 <encoder_init+0x1b4>)
 8000746:	4b68      	ldr	r3, [pc, #416]	; (80008e8 <encoder_init+0x1b4>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800074e:	6613      	str	r3, [r2, #96]	; 0x60
	PORT14->PDISC &= ~(PORTS_PDISC_7_MSK);
 8000750:	4a65      	ldr	r2, [pc, #404]	; (80008e8 <encoder_init+0x1b4>)
 8000752:	4b65      	ldr	r3, [pc, #404]	; (80008e8 <encoder_init+0x1b4>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800075a:	6613      	str	r3, [r2, #96]	; 0x60

	/*POSIF Pins*/
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC5_POS);	//P14.5 ENCZ
 800075c:	4a62      	ldr	r2, [pc, #392]	; (80008e8 <encoder_init+0x1b4>)
 800075e:	4b62      	ldr	r3, [pc, #392]	; (80008e8 <encoder_init+0x1b4>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000766:	6153      	str	r3, [r2, #20]
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC6_POS);	//P14.6	ENCB
 8000768:	4a5f      	ldr	r2, [pc, #380]	; (80008e8 <encoder_init+0x1b4>)
 800076a:	4b5f      	ldr	r3, [pc, #380]	; (80008e8 <encoder_init+0x1b4>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000772:	6153      	str	r3, [r2, #20]
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC7_POS);	//P14.7	ENCA
 8000774:	4a5c      	ldr	r2, [pc, #368]	; (80008e8 <encoder_init+0x1b4>)
 8000776:	4b5c      	ldr	r3, [pc, #368]	; (80008e8 <encoder_init+0x1b4>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6153      	str	r3, [r2, #20]

/*
 * Configure CCU40
 */
	/* Reset CCU40*/
	SCU_RESET->PRSET0 |= (SCU_PRESET0_CCU40RS_MSK);
 8000780:	4a5a      	ldr	r2, [pc, #360]	; (80008ec <encoder_init+0x1b8>)
 8000782:	4b5a      	ldr	r3, [pc, #360]	; (80008ec <encoder_init+0x1b8>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6113      	str	r3, [r2, #16]

	/* Clear reset of CCU40 */
	SCU_RESET->PRCLR0 |= (SCU_PRCLR0_CCU40RS_MSK);
 800078c:	4a57      	ldr	r2, [pc, #348]	; (80008ec <encoder_init+0x1b8>)
 800078e:	4b57      	ldr	r3, [pc, #348]	; (80008ec <encoder_init+0x1b8>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6153      	str	r3, [r2, #20]

	/* Enable CCU4 via clkset */
	SCU_CLK->CLKSET |= SCU_CLKSET_CCUCEN_MSK;
 8000798:	4a55      	ldr	r2, [pc, #340]	; (80008f0 <encoder_init+0x1bc>)
 800079a:	4b55      	ldr	r3, [pc, #340]	; (80008f0 <encoder_init+0x1bc>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6053      	str	r3, [r2, #4]

	/* Enable prescaler */
	CCU40->GIDLC |= CCU4_GIDLC_SPRB_MSK;
 80007a4:	4a53      	ldr	r2, [pc, #332]	; (80008f4 <encoder_init+0x1c0>)
 80007a6:	4b53      	ldr	r3, [pc, #332]	; (80008f4 <encoder_init+0x1c0>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ae:	60d3      	str	r3, [r2, #12]

	/*Set clock as Module Clock*/
	CCU40->GCTRL &= ~(CCU4_GCTRL_PCIS_MOD_CLK_MSK << CCU4_GCTRL_PCIS_POS);
 80007b0:	4a50      	ldr	r2, [pc, #320]	; (80008f4 <encoder_init+0x1c0>)
 80007b2:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <encoder_init+0x1c0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007ba:	6013      	str	r3, [r2, #0]

	/*Set Counting Mode - Edge Aligned*/
	CCU40_CC40->TC &= ~(CCU4_TC_TCM_EDGE_MSK);
 80007bc:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <encoder_init+0x1c4>)
 80007be:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <encoder_init+0x1c4>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f023 0301 	bic.w	r3, r3, #1
 80007c6:	6153      	str	r3, [r2, #20]

	/*Period Value*/
	CCU40_CC40->PRS |= (CCU4_CC4_PRS_VALUE);
 80007c8:	4a4b      	ldr	r2, [pc, #300]	; (80008f8 <encoder_init+0x1c4>)
 80007ca:	4b4b      	ldr	r3, [pc, #300]	; (80008f8 <encoder_init+0x1c4>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80007d2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80007d6:	6353      	str	r3, [r2, #52]	; 0x34

	/*Shadow transfer for PR*/
	CCU40->GCSS |= (CCU4_GCSS_S0SE_MSK);
 80007d8:	4a46      	ldr	r2, [pc, #280]	; (80008f4 <encoder_init+0x1c0>)
 80007da:	4b46      	ldr	r3, [pc, #280]	; (80008f4 <encoder_init+0x1c0>)
 80007dc:	691b      	ldr	r3, [r3, #16]
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6113      	str	r3, [r2, #16]

/*
 * Configure POSIF0
 */
	/* Reset POSIF0*/
	SCU_RESET->PRSET0 |= (SCU_PRESET0_POSIF0RS_MSK);
 80007e4:	4a41      	ldr	r2, [pc, #260]	; (80008ec <encoder_init+0x1b8>)
 80007e6:	4b41      	ldr	r3, [pc, #260]	; (80008ec <encoder_init+0x1b8>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ee:	6113      	str	r3, [r2, #16]

	/* Clear reset of POSIF0*/
	SCU_RESET->PRCLR0 |= (SCU_PRCLR0_POSIF0RS_MSK);
 80007f0:	4a3e      	ldr	r2, [pc, #248]	; (80008ec <encoder_init+0x1b8>)
 80007f2:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <encoder_init+0x1b8>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fa:	6153      	str	r3, [r2, #20]

	/*Quadrature Decoder Mode enabled*/
	POSIF0->PCONF |= POSIF_PCONF_FSEL_QUAD_MSK;
 80007fc:	4a3f      	ldr	r2, [pc, #252]	; (80008fc <encoder_init+0x1c8>)
 80007fe:	4b3f      	ldr	r3, [pc, #252]	; (80008fc <encoder_init+0x1c8>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6013      	str	r3, [r2, #0]

	/*Phase/Hal selector as INxB for the used pins*/
	POSIF0->PCONF |= (POSIF_IN_B_MSK << POSIF_PCONF_INSEL0_POS);
 8000808:	4a3c      	ldr	r2, [pc, #240]	; (80008fc <encoder_init+0x1c8>)
 800080a:	4b3c      	ldr	r3, [pc, #240]	; (80008fc <encoder_init+0x1c8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000812:	6013      	str	r3, [r2, #0]
	POSIF0->PCONF |= (POSIF_IN_B_MSK << POSIF_PCONF_INSEL1_POS);
 8000814:	4a39      	ldr	r2, [pc, #228]	; (80008fc <encoder_init+0x1c8>)
 8000816:	4b39      	ldr	r3, [pc, #228]	; (80008fc <encoder_init+0x1c8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800081e:	6013      	str	r3, [r2, #0]
	POSIF0->PCONF |= (POSIF_IN_B_MSK << POSIF_PCONF_INSEL2_POS);
 8000820:	4a36      	ldr	r2, [pc, #216]	; (80008fc <encoder_init+0x1c8>)
 8000822:	4b36      	ldr	r3, [pc, #216]	; (80008fc <encoder_init+0x1c8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082a:	6013      	str	r3, [r2, #0]

	/*Low Pass filter configuration - 4 clock cycles*/
	POSIF0->PCONF |= (POSIF_LOW_PASS_4 << POSIF_PCONF_LPC_POS);
 800082c:	4a33      	ldr	r2, [pc, #204]	; (80008fc <encoder_init+0x1c8>)
 800082e:	4b33      	ldr	r3, [pc, #204]	; (80008fc <encoder_init+0x1c8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000836:	6013      	str	r3, [r2, #0]

/*
 * POSIF to CC40
 */
	/*Input selector configuration*/
	CCU40_CC40->INS |= (CCU4_IN_E_MSK << CCU4_INS_EV0IS_POS);	//Event 0 for Out0 on rising edge
 8000838:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <encoder_init+0x1c4>)
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <encoder_init+0x1c4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6013      	str	r3, [r2, #0]
	CCU40_CC40->INS |= (RISING_EDGE_ENC << CCU4_INS_EV0EM_POS);
 8000844:	4a2c      	ldr	r2, [pc, #176]	; (80008f8 <encoder_init+0x1c4>)
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <encoder_init+0x1c4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800084e:	6013      	str	r3, [r2, #0]
	CCU40_CC40->INS |= (CCU4_IN_F_MSK << CCU4_INS_EV1IS_POS);	//Event 1 for Out1 on low level
 8000850:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <encoder_init+0x1c4>)
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <encoder_init+0x1c4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800085a:	6013      	str	r3, [r2, #0]
//	CCU40_CC40->INS |= (RISING_EDGE_ENC << CCU4_INS_EV1EM_POS);
	CCU40_CC40->INS |= (0x1UL << CCU4_CC4_INS_EV1LM_Pos);
 800085c:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <encoder_init+0x1c4>)
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <encoder_init+0x1c4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000866:	6013      	str	r3, [r2, #0]


	/*Connection Matrix Control*/
	CCU40_CC40->CMC |= (CCU4_EVENT_0_MSK << CCU4_CMC_CNTS_POS);	//Event0 set up for Counting
 8000868:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <encoder_init+0x1c4>)
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <encoder_init+0x1c4>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6053      	str	r3, [r2, #4]
	CCU40_CC40->CMC |= (CCU4_EVENT_1_MSK << CCU4_CMC_UDS_POS);	//Event1 set up for Direction
 8000874:	4a20      	ldr	r2, [pc, #128]	; (80008f8 <encoder_init+0x1c4>)
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <encoder_init+0x1c4>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800087e:	6053      	str	r3, [r2, #4]
/*
 * Stop and Start POSIF/CC40
 */
	/*Stop and reset the state machine of the quadrature decoder and the current status of the Hall sensor - POSIF*/
	POSIF0->PRUNC |= POSIF_PRUNC_CRB_MSK;	//Stops POSIF
 8000880:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <encoder_init+0x1c8>)
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <encoder_init+0x1c8>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	60d3      	str	r3, [r2, #12]
	POSIF0->PRUNC |= POSIF_PRUNC_CSM_MSK;	//Resets POSIF
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <encoder_init+0x1c8>)
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <encoder_init+0x1c8>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	60d3      	str	r3, [r2, #12]

	/*Exit Idle CC40*/
	CCU40->GIDLC |= (CCU4_GIDLC_CS0I_MSK);
 8000898:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <encoder_init+0x1c0>)
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <encoder_init+0x1c0>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	60d3      	str	r3, [r2, #12]

	/*Stop and clear timer*/
	CCU40_CC40->TCCLR |= (uint32_t)(CCU4_CC4_TCCLR_TRBC_Msk);
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <encoder_init+0x1c4>)
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <encoder_init+0x1c4>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6113      	str	r3, [r2, #16]
	CCU40_CC40->TCCLR |= (uint32_t)(CCU4_CC4_TCCLR_TCC_Msk);
 80008b0:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <encoder_init+0x1c4>)
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <encoder_init+0x1c4>)
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	6113      	str	r3, [r2, #16]

	/*Start CCU40*/
	CCU40_CC40->TCSET |= (CCU4_TCSET_TRBS_MSK);
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <encoder_init+0x1c4>)
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <encoder_init+0x1c4>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	60d3      	str	r3, [r2, #12]

	/*Start POSIF0*/
	POSIF0->PRUNS |= (POSIF_PRUNS_SRB_MSK);
 80008c8:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <encoder_init+0x1c8>)
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <encoder_init+0x1c8>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6093      	str	r3, [r2, #8]

	/*Saves the first value of the timer*/
//	timer_value_old = CCU40_CC40->TIMER;
	timer_value_old_fast = CCU40_CC40->TIMER;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <encoder_init+0x1c4>)
 80008d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <encoder_init+0x1cc>)
 80008dc:	801a      	strh	r2, [r3, #0]

}
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	48028e00 	.word	0x48028e00
 80008ec:	50004400 	.word	0x50004400
 80008f0:	50004600 	.word	0x50004600
 80008f4:	4000c000 	.word	0x4000c000
 80008f8:	4000c100 	.word	0x4000c100
 80008fc:	40028000 	.word	0x40028000
 8000900:	1fff06da 	.word	0x1fff06da

08000904 <current_filter>:
/*
*	y = k*(x - y_last) + y_last
*	First order signal filter
*/
void current_filter (float filter_input)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	filter_output = k * (filter_input - filter_output_old) + filter_output_old;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <current_filter+0x44>)
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	ed97 7a01 	vldr	s14, [r7, #4]
 8000916:	ee37 7a67 	vsub.f32	s14, s14, s15
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <current_filter+0x48>)
 800091c:	edd3 7a00 	vldr	s15, [r3]
 8000920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <current_filter+0x44>)
 8000926:	edd3 7a00 	vldr	s15, [r3]
 800092a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <current_filter+0x4c>)
 8000930:	edc3 7a00 	vstr	s15, [r3]
	filter_output_old = filter_output;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <current_filter+0x4c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a03      	ldr	r2, [pc, #12]	; (8000948 <current_filter+0x44>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	1ffe8848 	.word	0x1ffe8848
 800094c:	1ffe8804 	.word	0x1ffe8804
 8000950:	1ffe8844 	.word	0x1ffe8844

08000954 <current_protection>:

/*
*	Stops current output if above i_prot for TIME_TRIGGER_FAIL time
*/
void current_protection (void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

	current_filter(i_alpha*i_alpha + i_beta*i_beta);
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <current_protection+0xa0>)
 800095a:	ed93 7a00 	vldr	s14, [r3]
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <current_protection+0xa0>)
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <current_protection+0xa4>)
 800096a:	edd3 6a00 	vldr	s13, [r3]
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <current_protection+0xa4>)
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097c:	ee17 0a90 	vmov	r0, s15
 8000980:	f7ff ffc0 	bl	8000904 <current_filter>
	if (filter_output > i_prot*i_prot)
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <current_protection+0xa8>)
 8000986:	ed93 7a00 	vldr	s14, [r3]
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <current_protection+0xa8>)
 800098c:	edd3 7a00 	vldr	s15, [r3]
 8000990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <current_protection+0xac>)
 8000996:	edd3 7a00 	vldr	s15, [r3]
 800099a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a2:	d522      	bpl.n	80009ea <current_protection+0x96>
	{
		counter_timer_prot++;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <current_protection+0xb0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <current_protection+0xb0>)
 80009ac:	6013      	str	r3, [r2, #0]

		if(counter_timer_prot > TIME_TRIGGER_FAIL)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <current_protection+0xb0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009b6:	d91b      	bls.n	80009f0 <current_protection+0x9c>
		{

		drive_disabled();
 80009b8:	f002 fdba 	bl	8003530 <drive_disabled>
		drive_status |= DRIVE_STATUS_PROT_MSK;			//set current_prot_flag
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <current_protection+0xb4>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80009c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <current_protection+0xb4>)
 80009cc:	801a      	strh	r2, [r3, #0]
		drive_status &= CLEAR_DRIVE_STATUS;				//set STATUS bits to 0 -> go to state 0
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <current_protection+0xb4>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	f023 030f 	bic.w	r3, r3, #15
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <current_protection+0xb4>)
 80009da:	801a      	strh	r2, [r3, #0]
		counter_timer_prot = 0;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <current_protection+0xb0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
		drive_command_old = 0;							//reset old status of drive_command
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <current_protection+0xb8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	801a      	strh	r2, [r3, #0]
 80009e8:	e002      	b.n	80009f0 <current_protection+0x9c>

		}
	}else
	{
		counter_timer_prot = 0;							
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <current_protection+0xb0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
	}
}
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	1fff0768 	.word	0x1fff0768
 80009f8:	1fff0780 	.word	0x1fff0780
 80009fc:	1ffe8800 	.word	0x1ffe8800
 8000a00:	1ffe8844 	.word	0x1ffe8844
 8000a04:	1ffe884c 	.word	0x1ffe884c
 8000a08:	1fff06ba 	.word	0x1fff06ba
 8000a0c:	1fff06be 	.word	0x1fff06be

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_EnableIRQ+0x34>)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	095b      	lsrs	r3, r3, #5
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	f002 021f 	and.w	r2, r2, #31
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0c      	blt.n	8000a74 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	4909      	ldr	r1, [pc, #36]	; (8000a80 <__NVIC_ClearPendingIRQ+0x38>)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	095b      	lsrs	r3, r3, #5
 8000a62:	79fa      	ldrb	r2, [r7, #7]
 8000a64:	f002 021f 	and.w	r2, r2, #31
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	3360      	adds	r3, #96	; 0x60
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	490d      	ldr	r1, [pc, #52]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	4909      	ldr	r1, [pc, #36]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
  }
}
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <adc_init>:

/*
 * Main VADC interrupts
 */
void adc_init (void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	/*Pin setup - P14.0 P14.3 P14.4*/
	PORT14->IOCR0 |= (INPUT_PULL_UP_MSK << PORT14_IOCR0_PC0_POS);	//P14.0 - G0CH0				-A
 8000adc:	4ac8      	ldr	r2, [pc, #800]	; (8000e00 <adc_init+0x328>)
 8000ade:	4bc8      	ldr	r3, [pc, #800]	; (8000e00 <adc_init+0x328>)
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	6113      	str	r3, [r2, #16]
	PORT14->IOCR0 |= (INPUT_PULL_UP_MSK << PORT14_IOCR0_PC3_POS);	//P14.3 - G1CH3(ALIAS CH0)	-B
 8000ae8:	4ac5      	ldr	r2, [pc, #788]	; (8000e00 <adc_init+0x328>)
 8000aea:	4bc5      	ldr	r3, [pc, #788]	; (8000e00 <adc_init+0x328>)
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af2:	6113      	str	r3, [r2, #16]
	PORT14->IOCR4 |= (INPUT_PULL_UP_MSK << PORT14_IOCR4_PC4_POS);	//P14.4 - G2CH0				-C
 8000af4:	4ac2      	ldr	r2, [pc, #776]	; (8000e00 <adc_init+0x328>)
 8000af6:	4bc2      	ldr	r3, [pc, #776]	; (8000e00 <adc_init+0x328>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	6153      	str	r3, [r2, #20]

	/*Disable Gating - enables the clock for VADC */
	SCU_CLK->CGATCLR0 |= SCU_CGATCLR0_VADC_MSK;
 8000b00:	4ac0      	ldr	r2, [pc, #768]	; (8000e04 <adc_init+0x32c>)
 8000b02:	4bc0      	ldr	r3, [pc, #768]	; (8000e04 <adc_init+0x32c>)
 8000b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6493      	str	r3, [r2, #72]	; 0x48

	/*Clear reset*/
//	SCU_RESET->PRSET0 |= SCU_PRCLR0_VADCRS_MSK
	SCU_RESET->PRCLR0 |= SCU_PRCLR0_VADCRS_MSK;
 8000b0c:	4abe      	ldr	r2, [pc, #760]	; (8000e08 <adc_init+0x330>)
 8000b0e:	4bbe      	ldr	r3, [pc, #760]	; (8000e08 <adc_init+0x330>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6153      	str	r3, [r2, #20]

	/*Enable Module Clock - write 0 to enable*/
	VADC->CLC &= ~VADC_CLC_DISR_MSK;
 8000b18:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f023 0301 	bic.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]

	/*Set Frequency to 36MHz by dividing the F_ADC/4 -> 144/4=36 --- NEED TO ALSO WRITE INTO ENABLE BIT*/
//	VADC->GLOBCFG = (uint32_t)((VADC_GLOBCGF_DIVA_4_MSK << VADC_GLOBCGF_DIVA_POS) | (VADC_GLOBCFG_DIVWC));

	/*Configure Conversion resolution - 12BITS  --- GLOBAL*/
	VADC->GLOBICLASS[0] &= ~(VADC_GLOBICLASS0_CMS_12_MSK << VADC_GLOBICLASS0_CMS_POS);
 8000b28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b38:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	/*Configure Sample and hold time - 5clocks --- GLOBAL*/
	VADC->GLOBICLASS[0] |= (VADC_GLOBICLASS0_STCS_5_MSK << VADC_GLOBICLASS0_STCS_POS);
 8000b3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b48:	f043 0305 	orr.w	r3, r3, #5
 8000b4c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	/*Power Up VADC G0/G1/G2 for calibration*/
	/*Enable all Analog Converters*/
	VADC_G0->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000b50:	4aae      	ldr	r2, [pc, #696]	; (8000e0c <adc_init+0x334>)
 8000b52:	4bae      	ldr	r3, [pc, #696]	; (8000e0c <adc_init+0x334>)
 8000b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b58:	f043 0303 	orr.w	r3, r3, #3
 8000b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G1->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000b60:	4aab      	ldr	r2, [pc, #684]	; (8000e10 <adc_init+0x338>)
 8000b62:	4bab      	ldr	r3, [pc, #684]	; (8000e10 <adc_init+0x338>)
 8000b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b68:	f043 0303 	orr.w	r3, r3, #3
 8000b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G2->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000b70:	4aa8      	ldr	r2, [pc, #672]	; (8000e14 <adc_init+0x33c>)
 8000b72:	4ba8      	ldr	r3, [pc, #672]	; (8000e14 <adc_init+0x33c>)
 8000b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b78:	f043 0303 	orr.w	r3, r3, #3
 8000b7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*StartUp Calibration*/
	VADC->GLOBCFG |= ENABLE << VADC_GLOBCFG_SUCAL_POS;
 8000b80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000b84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*Wait for calibration to finish*/
	while((VADC_G0->ARBCFG & VADC_ARBCFG_CAL_MSK) && (VADC_G1->ARBCFG & VADC_ARBCFG_CAL_MSK) && (VADC_G2->ARBCFG & VADC_ARBCFG_CAL_MSK))
 8000b94:	bf00      	nop
 8000b96:	4b9d      	ldr	r3, [pc, #628]	; (8000e0c <adc_init+0x334>)
 8000b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00d      	beq.n	8000bc0 <adc_init+0xe8>
 8000ba4:	4b9a      	ldr	r3, [pc, #616]	; (8000e10 <adc_init+0x338>)
 8000ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <adc_init+0xe8>
 8000bb2:	4b98      	ldr	r3, [pc, #608]	; (8000e14 <adc_init+0x33c>)
 8000bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1ea      	bne.n	8000b96 <adc_init+0xbe>

	/*Configure the conversion kernel*/

	/*Slave SetUp - G1/G2*/
	/*Disable arbitration*/
	VADC_G1->ARBPR &= ~(DISABLE << VADC_ARBPR_ASEN0_POS);
 8000bc0:	4a93      	ldr	r2, [pc, #588]	; (8000e10 <adc_init+0x338>)
 8000bc2:	4b93      	ldr	r3, [pc, #588]	; (8000e10 <adc_init+0x338>)
 8000bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bcc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR &= ~(DISABLE << VADC_ARBPR_ASEN0_POS);
 8000bd0:	4a90      	ldr	r2, [pc, #576]	; (8000e14 <adc_init+0x33c>)
 8000bd2:	4b90      	ldr	r3, [pc, #576]	; (8000e14 <adc_init+0x33c>)
 8000bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bdc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Set maximum priority */
	VADC_G1->ARBPR |= VADC_ARBPR_PRIO0_MAX_MSK;
 8000be0:	4a8b      	ldr	r2, [pc, #556]	; (8000e10 <adc_init+0x338>)
 8000be2:	4b8b      	ldr	r3, [pc, #556]	; (8000e10 <adc_init+0x338>)
 8000be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000be8:	f043 0303 	orr.w	r3, r3, #3
 8000bec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= VADC_ARBPR_PRIO0_MAX_MSK;
 8000bf0:	4a88      	ldr	r2, [pc, #544]	; (8000e14 <adc_init+0x33c>)
 8000bf2:	4b88      	ldr	r3, [pc, #544]	; (8000e14 <adc_init+0x33c>)
 8000bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bf8:	f043 0303 	orr.w	r3, r3, #3
 8000bfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
//	/*External Trigger Input Selection - Trigger on Input J (CCU80.SR3)*/
//	VADC_G1->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTSEL_J_MSK << VADC_QCTRL0_XTSEL_POS);
//	VADC_G2->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTSEL_J_MSK << VADC_QCTRL0_XTSEL_POS);

	/*Enable interruption of other running conversions*/
	VADC_G1->ARBPR |= VADC_ARBPR_CSM0_MSK;
 8000c00:	4a83      	ldr	r2, [pc, #524]	; (8000e10 <adc_init+0x338>)
 8000c02:	4b83      	ldr	r3, [pc, #524]	; (8000e10 <adc_init+0x338>)
 8000c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= VADC_ARBPR_CSM0_MSK;
 8000c10:	4a80      	ldr	r2, [pc, #512]	; (8000e14 <adc_init+0x33c>)
 8000c12:	4b80      	ldr	r3, [pc, #512]	; (8000e14 <adc_init+0x33c>)
 8000c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Enable arbitration*/
	VADC_G1->ARBPR |= (ENABLE << VADC_ARBPR_ASEN0_POS);
 8000c20:	4a7b      	ldr	r2, [pc, #492]	; (8000e10 <adc_init+0x338>)
 8000c22:	4b7b      	ldr	r3, [pc, #492]	; (8000e10 <adc_init+0x338>)
 8000c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= (ENABLE << VADC_ARBPR_ASEN0_POS);
 8000c30:	4a78      	ldr	r2, [pc, #480]	; (8000e14 <adc_init+0x33c>)
 8000c32:	4b78      	ldr	r3, [pc, #480]	; (8000e14 <adc_init+0x33c>)
 8000c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84


	/*Master SetUp - G0*/
	/*Disable arbitration*/
	VADC_G0->ARBPR &= ~(DISABLE << VADC_ARBPR_ASEN0_POS);
 8000c40:	4a72      	ldr	r2, [pc, #456]	; (8000e0c <adc_init+0x334>)
 8000c42:	4b72      	ldr	r3, [pc, #456]	; (8000e0c <adc_init+0x334>)
 8000c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Set maximum priority */
	VADC_G0->ARBPR |= VADC_ARBPR_PRIO0_MAX_MSK;
 8000c50:	4a6e      	ldr	r2, [pc, #440]	; (8000e0c <adc_init+0x334>)
 8000c52:	4b6e      	ldr	r3, [pc, #440]	; (8000e0c <adc_init+0x334>)
 8000c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c58:	f043 0303 	orr.w	r3, r3, #3
 8000c5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Enable writing in TMEN - Timer mode for equidistant sampling enabled*/
	VADC_G0->QCTRL0 |= (ENABLE << VADC_QCTRL0_TMWC_POS) | (ENABLE << VADC_QCTRL0_TMEN_POS);
 8000c60:	4a6a      	ldr	r2, [pc, #424]	; (8000e0c <adc_init+0x334>)
 8000c62:	4b6a      	ldr	r3, [pc, #424]	; (8000e0c <adc_init+0x334>)
 8000c64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c68:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 8000c6c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	/*Enable writing in XTMODE and XTSEL */
	/*Trigger Operating Mode - Trigger event upon any edge*/
	VADC_G0->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTMODE_ANY_MSK << VADC_QCTRL0_XTMODE_POS);
 8000c70:	4a66      	ldr	r2, [pc, #408]	; (8000e0c <adc_init+0x334>)
 8000c72:	4b66      	ldr	r3, [pc, #408]	; (8000e0c <adc_init+0x334>)
 8000c74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c78:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c7c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	/*External Trigger Input Selection - Trigger on Input J (CCU80.SR3)*/
	VADC_G0->QCTRL0 |= (ENABLE << VADC_QCTRL0_XTWC_POS) | (VADC_QCTRL0_XTSEL_J_MSK << VADC_QCTRL0_XTSEL_POS);
 8000c80:	4a62      	ldr	r2, [pc, #392]	; (8000e0c <adc_init+0x334>)
 8000c82:	4b62      	ldr	r3, [pc, #392]	; (8000e0c <adc_init+0x334>)
 8000c84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c88:	f443 4309 	orr.w	r3, r3, #35072	; 0x8900
 8000c8c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	/*Configure the Queue Mode*/
	/*Enable Gate - Conversion requests are issued if a valid conversion request is pending in the queue 0 register or in the backup register*/
	VADC_G0->QMR0 |= VADC_QMR0_ENGT_MSK;
 8000c90:	4a5e      	ldr	r2, [pc, #376]	; (8000e0c <adc_init+0x334>)
 8000c92:	4b5e      	ldr	r3, [pc, #376]	; (8000e0c <adc_init+0x334>)
 8000c94:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

	/*Enable External Trigger - The selected edge at the selected trigger input signal REQTR generates the trigger event*/
	VADC_G0->QMR0 |= VADC_QMR0_ENTR_MSK;
 8000ca0:	4a5a      	ldr	r2, [pc, #360]	; (8000e0c <adc_init+0x334>)
 8000ca2:	4b5a      	ldr	r3, [pc, #360]	; (8000e0c <adc_init+0x334>)
 8000ca4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

	/*Enable arbitration*/
	VADC_G0->ARBPR |= (ENABLE << VADC_ARBPR_ASEN0_POS);
 8000cb0:	4a56      	ldr	r2, [pc, #344]	; (8000e0c <adc_init+0x334>)
 8000cb2:	4b56      	ldr	r3, [pc, #344]	; (8000e0c <adc_init+0x334>)
 8000cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Channel configuration*/
	/*Set Channel 0 as priority channel*/
	VADC_G0->CHASS |= VADC_CHASS_ASSCH0_MSK;
 8000cc0:	4a52      	ldr	r2, [pc, #328]	; (8000e0c <adc_init+0x334>)
 8000cc2:	4b52      	ldr	r3, [pc, #328]	; (8000e0c <adc_init+0x334>)
 8000cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	VADC_G1->CHASS |= VADC_CHASS_ASSCH0_MSK;
 8000cd0:	4a4f      	ldr	r2, [pc, #316]	; (8000e10 <adc_init+0x338>)
 8000cd2:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <adc_init+0x338>)
 8000cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	VADC_G2->CHASS |= VADC_CHASS_ASSCH0_MSK;
 8000ce0:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <adc_init+0x33c>)
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <adc_init+0x33c>)
 8000ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/*Convert G1CH3 into CH0 with ALIAS*/
	VADC_G1->ALIAS |= 3U << VADC_ALIAS_ALIAS0_POS;
 8000cf0:	4a47      	ldr	r2, [pc, #284]	; (8000e10 <adc_init+0x338>)
 8000cf2:	4b47      	ldr	r3, [pc, #284]	; (8000e10 <adc_init+0x338>)
 8000cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000cf8:	f043 0303 	orr.w	r3, r3, #3
 8000cfc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	/*Channel Control - Request a synchronized conversion of this channel (only taken into account for a master)*/
	VADC_G0->CHCTR[0] |= VADC_CHCTR_SYNC_MSK;
 8000d00:	4a42      	ldr	r2, [pc, #264]	; (8000e0c <adc_init+0x334>)
 8000d02:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <adc_init+0x334>)
 8000d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Use GLOBAL class0 configuration*/
	VADC_G0->CHCTR[0] |= VADC_CHCTR_ICSEL_GLOBAL_0_MSK;
 8000d10:	4a3e      	ldr	r2, [pc, #248]	; (8000e0c <adc_init+0x334>)
 8000d12:	4b3e      	ldr	r3, [pc, #248]	; (8000e0c <adc_init+0x334>)
 8000d14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Register used to store results 0-15*/
	VADC_G0->CHCTR[0] |= (1U << VADC_G_CHCTR_RESREG_Pos);
 8000d20:	4a3a      	ldr	r2, [pc, #232]	; (8000e0c <adc_init+0x334>)
 8000d22:	4b3a      	ldr	r3, [pc, #232]	; (8000e0c <adc_init+0x334>)
 8000d24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	VADC_G1->CHCTR[0] |= (1U << VADC_G_CHCTR_RESREG_Pos);
 8000d30:	4a37      	ldr	r2, [pc, #220]	; (8000e10 <adc_init+0x338>)
 8000d32:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <adc_init+0x338>)
 8000d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	VADC_G2->CHCTR[0] |= (1U << VADC_G_CHCTR_RESREG_Pos);
 8000d40:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <adc_init+0x33c>)
 8000d42:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <adc_init+0x33c>)
 8000d44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/*----Channel to be converted*/
	/*Enable Source Interrupt - (x << VADC_G_QINR0_REQCHNR_Pos)*/
	/*External Trigger - VADC_QINR0_EXTR_MSK*/
	/*Automatic refill - VADC_QINR0_RF_MSK*/
	/*End of conversion trigger - VADC_QINR0_ENSI_MSK*/
	VADC_G0->QINR0 |= (0U << VADC_G_QINR0_REQCHNR_Pos) | VADC_QINR0_RF_MSK | VADC_QINR0_EXTR_MSK | VADC_QINR0_ENSI_MSK;;
 8000d50:	4a2e      	ldr	r2, [pc, #184]	; (8000e0c <adc_init+0x334>)
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <adc_init+0x334>)
 8000d54:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000d58:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000d5c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110

	/*Configure master and slave channels*/
	/*Power down the VADC */
	VADC_G0->ARBCFG &= ~VADC_ARBCFG_ANONC_MSK;
 8000d60:	4a2a      	ldr	r2, [pc, #168]	; (8000e0c <adc_init+0x334>)
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <adc_init+0x334>)
 8000d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d68:	f023 0303 	bic.w	r3, r3, #3
 8000d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G1->ARBCFG &= ~VADC_ARBCFG_ANONC_MSK;
 8000d70:	4a27      	ldr	r2, [pc, #156]	; (8000e10 <adc_init+0x338>)
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <adc_init+0x338>)
 8000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d78:	f023 0303 	bic.w	r3, r3, #3
 8000d7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VADC_G2->ARBCFG &= ~VADC_ARBCFG_ANONC_MSK;
 8000d80:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <adc_init+0x33c>)
 8000d82:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <adc_init+0x33c>)
 8000d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d88:	f023 0303 	bic.w	r3, r3, #3
 8000d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*G0 – master; G1, G2 – slaves */
	VADC_G1->SYNCTR |= VADC_SYNCTR_STSEL_CL1_MSK;
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <adc_init+0x338>)
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <adc_init+0x338>)
 8000d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	VADC_G2->SYNCTR |= VADC_SYNCTR_STSEL_CL1_MSK;
 8000da0:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <adc_init+0x33c>)
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <adc_init+0x33c>)
 8000da4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	/*Evaluate Ready Input Rx - EVALR1*/
	VADC_G0->SYNCTR |= VADC_SYNCTR_EVALR1_MSK;
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <adc_init+0x334>)
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <adc_init+0x334>)
 8000db4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	VADC_G1->SYNCTR |= VADC_SYNCTR_EVALR1_MSK;
 8000dc0:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <adc_init+0x338>)
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <adc_init+0x338>)
 8000dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
 8000dcc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	VADC_G2->SYNCTR |= VADC_SYNCTR_EVALR1_MSK;
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <adc_init+0x33c>)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <adc_init+0x33c>)
 8000dd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	/*Power on the VADC*/
	VADC_G0->ARBCFG |= VADC_ARBCFG_ANONC_MSK;
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <adc_init+0x334>)
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <adc_init+0x334>)
 8000de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000de8:	f043 0303 	orr.w	r3, r3, #3
 8000dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/*Result Register - Service Request Generation Enable*/
	VADC_G0->RCR[1] = VADC_GxRCRy_SRGEN_MSK;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <adc_init+0x334>)
 8000df2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000df6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284

	/*Routes the corresponding event trigger from RESULT group to G0_CH2*/
	VADC_G0->REVNP0 |= (VADC_REVNP0_REV0NP_L2G0_MSK << 4U);
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <adc_init+0x334>)
 8000dfc:	e00c      	b.n	8000e18 <adc_init+0x340>
 8000dfe:	bf00      	nop
 8000e00:	48028e00 	.word	0x48028e00
 8000e04:	50004600 	.word	0x50004600
 8000e08:	50004400 	.word	0x50004400
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40004800 	.word	0x40004800
 8000e14:	40004c00 	.word	0x40004c00
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <adc_init+0x418>)
 8000e1a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000e1e:	f043 0320 	orr.w	r3, r3, #32
 8000e22:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0


	/*AutoScan for V_mot & V_log*/

	/*Pin Set up*/
	PORT15->IOCR4 |= (INPUT_PULL_UP_MSK << PORT15_IOCR4_PC6_Pos);   //P15.6 - G2CH6				-Vmot
 8000e26:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <adc_init+0x41c>)
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <adc_init+0x41c>)
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e30:	6153      	str	r3, [r2, #20]
	PORT14->IOCR12 |=(INPUT_PULL_UP_MSK << PORT14_IOCR12_PC14_Pos);	//P14.14- G1CH6				-Vlog
 8000e32:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <adc_init+0x420>)
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <adc_init+0x420>)
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e3c:	61d3      	str	r3, [r2, #28]

	/*Channel Select*/
	VADC_G1->ASSEL |= (ENABLE << VADC_ASSEL_CHSEL6_POS);
 8000e3e:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <adc_init+0x424>)
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <adc_init+0x424>)
 8000e42:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	VADC_G2->ASSEL |= (ENABLE << VADC_ASSEL_CHSEL6_POS);
 8000e4e:	4a2c      	ldr	r2, [pc, #176]	; (8000f00 <adc_init+0x428>)
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <adc_init+0x428>)
 8000e52:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

	/*Define load event*/
	VADC_G1->ASMR |= VADC_ASMR_SCAN_MSK | VADC_ASMR_ENGT_MSK | VADC_ASMR_LDEV_MSK;
 8000e5e:	4a27      	ldr	r2, [pc, #156]	; (8000efc <adc_init+0x424>)
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <adc_init+0x424>)
 8000e62:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e66:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	VADC_G2->ASMR |= VADC_ASMR_SCAN_MSK | VADC_ASMR_ENGT_MSK | VADC_ASMR_LDEV_MSK;;
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <adc_init+0x428>)
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <adc_init+0x428>)
 8000e76:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e7a:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

	/*Conversion configuration to use global 0 settings*/
	VADC_G1->CHCTR[6] |= VADC_CHCTR_ICSEL_GLOBAL_0_MSK;
 8000e86:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <adc_init+0x424>)
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <adc_init+0x424>)
 8000e8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
	VADC_G2->CHCTR[6] |= VADC_CHCTR_ICSEL_GLOBAL_0_MSK;
 8000e96:	4a1a      	ldr	r2, [pc, #104]	; (8000f00 <adc_init+0x428>)
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <adc_init+0x428>)
 8000e9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

	/*Enable Arbitration*/
	VADC_G1->ARBPR |= (ENABLE << VADC_ARBPR_ASEN1_POS);
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <adc_init+0x424>)
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <adc_init+0x424>)
 8000eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VADC_G2->ARBPR |= (ENABLE << VADC_ARBPR_ASEN1_POS);
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <adc_init+0x428>)
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <adc_init+0x428>)
 8000eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	/*Registers to store results 0-15*/
	VADC_G1->CHCTR[6] |= (14U << VADC_G_CHCTR_RESREG_Pos);
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <adc_init+0x424>)
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <adc_init+0x424>)
 8000eca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000ece:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000ed2:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
	VADC_G2->CHCTR[6] |= (14U << VADC_G_CHCTR_RESREG_Pos);
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <adc_init+0x428>)
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <adc_init+0x428>)
 8000eda:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000ede:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000ee2:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

}
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40004400 	.word	0x40004400
 8000ef4:	48028f00 	.word	0x48028f00
 8000ef8:	48028e00 	.word	0x48028e00
 8000efc:	40004800 	.word	0x40004800
 8000f00:	40004c00 	.word	0x40004c00

08000f04 <interrupt_vadc_init>:

void interrupt_vadc_init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	/*  Reset CCU80 */
	SCU_RESET->PRSET0 |= SCU_RESET_PRSET0_CCU80RS_Msk ;
 8000f08:	4a3d      	ldr	r2, [pc, #244]	; (8001000 <interrupt_vadc_init+0xfc>)
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <interrupt_vadc_init+0xfc>)
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f12:	6113      	str	r3, [r2, #16]

	/* Clear reset of CCU80 */
	SCU_RESET->PRCLR0 |= SCU_RESET_PRCLR0_CCU80RS_Msk ;
 8000f14:	4a3a      	ldr	r2, [pc, #232]	; (8001000 <interrupt_vadc_init+0xfc>)
 8000f16:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <interrupt_vadc_init+0xfc>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1e:	6153      	str	r3, [r2, #20]

	/* Enable CCU8 via clkset */
	SCU_CLK->CLKSET |= SCU_CLK_CLKSET_CCUCEN_Msk ;
 8000f20:	4a38      	ldr	r2, [pc, #224]	; (8001004 <interrupt_vadc_init+0x100>)
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <interrupt_vadc_init+0x100>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6053      	str	r3, [r2, #4]

	/* Enable prescaler */
	CCU80->GIDLC |= CCU8_GIDLC_SPRB_Msk;
 8000f2c:	4a36      	ldr	r2, [pc, #216]	; (8001008 <interrupt_vadc_init+0x104>)
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <interrupt_vadc_init+0x104>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	60d3      	str	r3, [r2, #12]

	/*Set timer to center aligned mode */
	CCU80_CC83->TC |= (uint32_t)(CCU8_CC8_TC_TCM_Msk);
 8000f38:	4a34      	ldr	r2, [pc, #208]	; (800100c <interrupt_vadc_init+0x108>)
 8000f3a:	4b34      	ldr	r3, [pc, #208]	; (800100c <interrupt_vadc_init+0x108>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6153      	str	r3, [r2, #20]

	/*SHADOW:Define the period value of Compare Channel 1 */
	CCU80_CC83->PRS|= (uint32_t)(CCU8_CC8_PRS_PR_Value << CCU8_CC8_PR_PR_Pos);
 8000f44:	4a31      	ldr	r2, [pc, #196]	; (800100c <interrupt_vadc_init+0x108>)
 8000f46:	4b31      	ldr	r3, [pc, #196]	; (800100c <interrupt_vadc_init+0x108>)
 8000f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4a:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 8000f4e:	6353      	str	r3, [r2, #52]	; 0x34

	/*SHADOW:Define the compare value of Compare Channel 1 */
	CCU80_CC83->CR1S |= (uint32_t)(CCU80_CC83_CR_Value << CCU8_CC8_CR1_CR1_Pos);
 8000f50:	4a2e      	ldr	r2, [pc, #184]	; (800100c <interrupt_vadc_init+0x108>)
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <interrupt_vadc_init+0x108>)
 8000f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f56:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 8000f5a:	63d3      	str	r3, [r2, #60]	; 0x3c

	/*Request shadow transfer  */
	CCU80->GCSS |= (CCU8_GCSS_S3SE_Msk);
 8000f5c:	4a2a      	ldr	r2, [pc, #168]	; (8001008 <interrupt_vadc_init+0x104>)
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <interrupt_vadc_init+0x104>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f66:	6113      	str	r3, [r2, #16]

	/*Enable CC80*/
	CCU80->GIDLC |= (CCU8_GIDLC_CS3I_Msk) ;
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <interrupt_vadc_init+0x104>)
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <interrupt_vadc_init+0x104>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	60d3      	str	r3, [r2, #12]

	/*Clear the timer run bit(TRBC) and timer (TCC) */
	CCU80_CC83->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_Msk);
 8000f74:	4a25      	ldr	r2, [pc, #148]	; (800100c <interrupt_vadc_init+0x108>)
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <interrupt_vadc_init+0x108>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6113      	str	r3, [r2, #16]
	CCU80_CC83->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_Msk);
 8000f80:	4a22      	ldr	r2, [pc, #136]	; (800100c <interrupt_vadc_init+0x108>)
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <interrupt_vadc_init+0x108>)
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	6113      	str	r3, [r2, #16]

	/* Use IN_H for Event 0 on Rising edge
	 * Set start on EVENT 0 on Rising edge
	 */
	CCU80_CC83->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_Pos;
 8000f8c:	4a1f      	ldr	r2, [pc, #124]	; (800100c <interrupt_vadc_init+0x108>)
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <interrupt_vadc_init+0x108>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f043 0307 	orr.w	r3, r3, #7
 8000f96:	6013      	str	r3, [r2, #0]
	CCU80_CC83->INS |= ACTIVE_ON_RISING_EDGE << CCU8_CC8_INS_EV0EM_Pos;
 8000f98:	4a1c      	ldr	r2, [pc, #112]	; (800100c <interrupt_vadc_init+0x108>)
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <interrupt_vadc_init+0x108>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
	CCU80_CC83->CMC |= ENABLE << CCU8_CC8_CMC_STRTS_Pos;
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <interrupt_vadc_init+0x108>)
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <interrupt_vadc_init+0x108>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6053      	str	r3, [r2, #4]
//	CCU80_CC83->INS  |=  15 << CCU8_CC8_INS_EV2IS_Pos;   		//which input is used -> input CC80.IN3P
//	CCU80_CC83->INS  &=  ~CCU8_CC8_INS_EV2EM_Msk;	 			// clear event active on rising edge
//	CCU80_CC83->INS  |=  ENABLE  << CCU8_CC8_INS_EV2EM_Pos;	 	// set event active on rising edge

	/*Enables the Channel 1 compare match while counting down interrupt*/
	CCU80_CC83->INTE |= ENABLE << CCU8_CC8_INTE_CMD1E_Pos;
 8000fb0:	4a16      	ldr	r2, [pc, #88]	; (800100c <interrupt_vadc_init+0x108>)
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <interrupt_vadc_init+0x108>)
 8000fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

	/*The interrupt generated by compare match of channel 1 is forwarded to CC8ySR3*/
	CCU80_CC83->SRS  |= CCU8_SRS_CM1SR_SR3_MSK << CCU8_SRS_CM1SR_POS;
 8000fc0:	4a12      	ldr	r2, [pc, #72]	; (800100c <interrupt_vadc_init+0x108>)
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <interrupt_vadc_init+0x108>)
 8000fc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000fc8:	f043 030c 	orr.w	r3, r3, #12
 8000fcc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

	/*Enable the VADC G0 Line 2 interrupt*/
	NVIC_ClearPendingIRQ(VADC0_G0_2_IRQn);
 8000fd0:	2014      	movs	r0, #20
 8000fd2:	f7ff fd39 	bl	8000a48 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(VADC0_G0_2_IRQn);
 8000fd6:	2014      	movs	r0, #20
 8000fd8:	f7ff fd1a 	bl	8000a10 <__NVIC_EnableIRQ>

	/*Set priority level for VADC to 1(second highest)*/
	NVIC_SetPriority(VADC0_G0_2_IRQn, 1U);
 8000fdc:	2014      	movs	r0, #20
 8000fde:	2101      	movs	r1, #1
 8000fe0:	f7ff fd50 	bl	8000a84 <__NVIC_SetPriority>
//	NVIC_EnableIRQ(VADC0_G2_2_IRQn);
//
//	/*Set priority level for VADC to 1(second highest)*/
//	NVIC_SetPriority(VADC0_G2_2_IRQn, 10U);

	SCU_GENERAL->CCUCON |= SCU_GENERAL_CCUCON_GSC80_Msk;
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <interrupt_vadc_init+0x10c>)
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <interrupt_vadc_init+0x10c>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	64d3      	str	r3, [r2, #76]	; 0x4c
	SCU_GENERAL->CCUCON &= ~SCU_GENERAL_CCUCON_GSC80_Msk;
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <interrupt_vadc_init+0x10c>)
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <interrupt_vadc_init+0x10c>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ffa:	64d3      	str	r3, [r2, #76]	; 0x4c

}
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	50004400 	.word	0x50004400
 8001004:	50004600 	.word	0x50004600
 8001008:	40020000 	.word	0x40020000
 800100c:	40020400 	.word	0x40020400
 8001010:	50004000 	.word	0x50004000

08001014 <read_currents>:

void read_currents (void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	ia = (VADC_G0->RES[1] & 0xFFFF) * 16 - offset_ia;		//16 bit value -- INVERSED 
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <read_currents+0x94>)
 800101a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800101e:	b29b      	uxth	r3, r3
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <read_currents+0x98>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <read_currents+0x9c>)
 8001032:	801a      	strh	r2, [r3, #0]
	ib = (VADC_G1->RES[1] & 0xFFFF) * 16 - offset_ib;		//16 bit value
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <read_currents+0xa0>)
 8001036:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800103a:	b29b      	uxth	r3, r3
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <read_currents+0xa4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	b29b      	uxth	r3, r3
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <read_currents+0xa8>)
 800104e:	801a      	strh	r2, [r3, #0]
	ic = (VADC_G2->RES[1] & 0xFFFF) * 16 - offset_ic;		//16 bit value
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <read_currents+0xac>)
 8001052:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001056:	b29b      	uxth	r3, r3
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <read_currents+0xb0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	b29b      	uxth	r3, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <read_currents+0xb4>)
 800106a:	801a      	strh	r2, [r3, #0]
	ia = (-ib-ic);											//TOO NOISY
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <read_currents+0xa8>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	425b      	negs	r3, r3
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <read_currents+0xb4>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <read_currents+0x9c>)
 8001084:	801a      	strh	r2, [r3, #0]

	u_mot_dig = (VADC_G2->RES[14] & 0xFFFF);	//12 bit value
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <read_currents+0xac>)
 8001088:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800108c:	b29b      	uxth	r3, r3
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <read_currents+0xb8>)
 8001090:	6013      	str	r3, [r2, #0]
	u_log_dig = (VADC_G1->RES[14] & 0xFFFF);	//12 bit value
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <read_currents+0xa0>)
 8001094:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8001098:	b29b      	uxth	r3, r3
 800109a:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <read_currents+0xbc>)
 800109c:	6013      	str	r3, [r2, #0]

	// ia_32 = ia;
	// ib_32 = ib;
	// ic_32 = ic;
}
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	1fff0710 	.word	0x1fff0710
 80010b0:	1fff06f4 	.word	0x1fff06f4
 80010b4:	40004800 	.word	0x40004800
 80010b8:	1fff06e0 	.word	0x1fff06e0
 80010bc:	1fff06ec 	.word	0x1fff06ec
 80010c0:	40004c00 	.word	0x40004c00
 80010c4:	1fff06e8 	.word	0x1fff06e8
 80010c8:	1fff0714 	.word	0x1fff0714
 80010cc:	1fff0708 	.word	0x1fff0708
 80010d0:	1fff06f0 	.word	0x1fff06f0

080010d4 <current_offset>:
/**
 * Compute the current offset for every phase
 */
void current_offset (void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	offset_ia = 0;
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <current_offset+0xb0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
	offset_ib = 0;
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <current_offset+0xb4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
	offset_ic = 0;
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <current_offset+0xb8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 16; ++i){
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	e026      	b.n	8001140 <current_offset+0x6c>
		delay_t(3);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f002 fa74 	bl	80035e0 <delay_t>
		offset_ia += ((VADC_G0->RES[1] & 0xFFFF) * 16);
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <current_offset+0xbc>)
 80010fa:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80010fe:	b29b      	uxth	r3, r3
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <current_offset+0xb0>)
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4413      	add	r3, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <current_offset+0xb0>)
 800110c:	601a      	str	r2, [r3, #0]
		offset_ib += ((VADC_G1->RES[1] & 0xFFFF) * 16);
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <current_offset+0xc0>)
 8001110:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001114:	b29b      	uxth	r3, r3
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <current_offset+0xb4>)
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	4413      	add	r3, r2
 800111e:	461a      	mov	r2, r3
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <current_offset+0xb4>)
 8001122:	601a      	str	r2, [r3, #0]
		offset_ic += ((VADC_G2->RES[1] & 0xFFFF) * 16);
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <current_offset+0xc4>)
 8001126:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800112a:	b29b      	uxth	r3, r3
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <current_offset+0xb8>)
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	4413      	add	r3, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <current_offset+0xb8>)
 8001138:	601a      	str	r2, [r3, #0]
{
	offset_ia = 0;
	offset_ib = 0;
	offset_ic = 0;

	for(int i = 0; i < 16; ++i){
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	ddd5      	ble.n	80010f2 <current_offset+0x1e>
		offset_ib += ((VADC_G1->RES[1] & 0xFFFF) * 16);
		offset_ic += ((VADC_G2->RES[1] & 0xFFFF) * 16);

	}

	offset_ia = offset_ia/16;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <current_offset+0xb0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	da00      	bge.n	8001150 <current_offset+0x7c>
 800114e:	330f      	adds	r3, #15
 8001150:	111b      	asrs	r3, r3, #4
 8001152:	461a      	mov	r2, r3
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <current_offset+0xb0>)
 8001156:	601a      	str	r2, [r3, #0]
	offset_ib = offset_ib/16;
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <current_offset+0xb4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	da00      	bge.n	8001162 <current_offset+0x8e>
 8001160:	330f      	adds	r3, #15
 8001162:	111b      	asrs	r3, r3, #4
 8001164:	461a      	mov	r2, r3
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <current_offset+0xb4>)
 8001168:	601a      	str	r2, [r3, #0]
	offset_ic = offset_ic/16;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <current_offset+0xb8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	da00      	bge.n	8001174 <current_offset+0xa0>
 8001172:	330f      	adds	r3, #15
 8001174:	111b      	asrs	r3, r3, #4
 8001176:	461a      	mov	r2, r3
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <current_offset+0xb8>)
 800117a:	601a      	str	r2, [r3, #0]

}
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	1fff0710 	.word	0x1fff0710
 8001188:	1fff06e0 	.word	0x1fff06e0
 800118c:	1fff06e8 	.word	0x1fff06e8
 8001190:	40004400 	.word	0x40004400
 8001194:	40004800 	.word	0x40004800
 8001198:	40004c00 	.word	0x40004c00
 800119c:	00000000 	.word	0x00000000

080011a0 <compute_u_mot>:
 * Just for Micrium read
 * Compute the 12bit value of u_mot into volts
 * u_mot_max = 100V
 */
void compute_u_mot (void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	u_mot = u_mot_dig * 0.0245;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <compute_u_mot+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fbff 	bl	80049ac <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	a308      	add	r3, pc, #32	; (adr r3, 80011d8 <compute_u_mot+0x38>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f003 fc5c 	bl	8004a78 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f003 fe68 	bl	8004e9c <__aeabi_d2f>
 80011cc:	4602      	mov	r2, r0
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <compute_u_mot+0x44>)
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	f3af 8000 	nop.w
 80011d8:	2b020c4a 	.word	0x2b020c4a
 80011dc:	3f991687 	.word	0x3f991687
 80011e0:	1fff0708 	.word	0x1fff0708
 80011e4:	1fff0704 	.word	0x1fff0704

080011e8 <compute_u_log>:
 * Just for Micrium read
 * Compute the 12bit value of u_log into volts
 * u_log_max = 50V
 */
void compute_u_log (void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	u_log = u_log_dig * 0.01327;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <compute_u_log+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fbdb 	bl	80049ac <__aeabi_i2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	a308      	add	r3, pc, #32	; (adr r3, 8001220 <compute_u_log+0x38>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f003 fc38 	bl	8004a78 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f003 fe44 	bl	8004e9c <__aeabi_d2f>
 8001214:	4602      	mov	r2, r0
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <compute_u_log+0x44>)
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	bd80      	pop	{r7, pc}
 800121c:	f3af 8000 	nop.w
 8001220:	4024b33e 	.word	0x4024b33e
 8001224:	3f8b2d4d 	.word	0x3f8b2d4d
 8001228:	1fff06f0 	.word	0x1fff06f0
 800122c:	1fff06e4 	.word	0x1fff06e4

08001230 <compute_currents>:
/*
 * Just for Micrium read
 * I_pos = 40A | I_neg = -40A
 */
void compute_currents (void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	ia_a = (float)(ia+32768)/65535.0 * 80.0 - 40.0;
 8001234:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <compute_currents+0x198>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	b21b      	sxth	r3, r3
 800123a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	ee17 0a90 	vmov	r0, s15
 800124a:	f003 fbc1 	bl	80049d0 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	a35a      	add	r3, pc, #360	; (adr r3, 80013c0 <compute_currents+0x190>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f003 fd36 	bl	8004ccc <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <compute_currents+0x19c>)
 800126e:	f003 fc03 	bl	8004a78 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <compute_currents+0x1a0>)
 8001280:	f003 fa46 	bl	8004710 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f003 fe06 	bl	8004e9c <__aeabi_d2f>
 8001290:	4602      	mov	r2, r0
 8001292:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <compute_currents+0x1a4>)
 8001294:	601a      	str	r2, [r3, #0]
	ib_a = (float)(ib+32768)/65535.0 * 80.0 - 40.0;
 8001296:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <compute_currents+0x1a8>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b21b      	sxth	r3, r3
 800129c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	ee17 0a90 	vmov	r0, s15
 80012ac:	f003 fb90 	bl	80049d0 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	a341      	add	r3, pc, #260	; (adr r3, 80013c0 <compute_currents+0x190>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f003 fd05 	bl	8004ccc <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <compute_currents+0x19c>)
 80012d0:	f003 fbd2 	bl	8004a78 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <compute_currents+0x1a0>)
 80012e2:	f003 fa15 	bl	8004710 <__aeabi_dsub>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f003 fdd5 	bl	8004e9c <__aeabi_d2f>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <compute_currents+0x1ac>)
 80012f6:	601a      	str	r2, [r3, #0]
	ic_a = (float)(ic+32768)/65535.0 * 80.0 - 40.0;
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <compute_currents+0x1b0>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130a:	ee17 0a90 	vmov	r0, s15
 800130e:	f003 fb5f 	bl	80049d0 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	a329      	add	r3, pc, #164	; (adr r3, 80013c0 <compute_currents+0x190>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f003 fcd4 	bl	8004ccc <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <compute_currents+0x19c>)
 8001332:	f003 fba1 	bl	8004a78 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <compute_currents+0x1a0>)
 8001344:	f003 f9e4 	bl	8004710 <__aeabi_dsub>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f003 fda4 	bl	8004e9c <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <compute_currents+0x1b4>)
 8001358:	601a      	str	r2, [r3, #0]
	iq_a = (float)(i_q+32768)/65535.0 * 80.0 - 40.0;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <compute_currents+0x1b8>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80013ec <compute_currents+0x1bc>
 8001364:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001368:	ee17 0a90 	vmov	r0, s15
 800136c:	f003 fb30 	bl	80049d0 <__aeabi_f2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	a311      	add	r3, pc, #68	; (adr r3, 80013c0 <compute_currents+0x190>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f003 fca5 	bl	8004ccc <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <compute_currents+0x19c>)
 8001390:	f003 fb72 	bl	8004a78 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <compute_currents+0x1a0>)
 80013a2:	f003 f9b5 	bl	8004710 <__aeabi_dsub>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f003 fd75 	bl	8004e9c <__aeabi_d2f>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <compute_currents+0x1c0>)
 80013b6:	601a      	str	r2, [r3, #0]

}
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40efffe0 	.word	0x40efffe0
 80013c8:	1fff06f4 	.word	0x1fff06f4
 80013cc:	40540000 	.word	0x40540000
 80013d0:	40440000 	.word	0x40440000
 80013d4:	1fff0700 	.word	0x1fff0700
 80013d8:	1fff06ec 	.word	0x1fff06ec
 80013dc:	1fff070c 	.word	0x1fff070c
 80013e0:	1fff0714 	.word	0x1fff0714
 80013e4:	1fff06fc 	.word	0x1fff06fc
 80013e8:	1fff076c 	.word	0x1fff076c
 80013ec:	47000000 	.word	0x47000000
 80013f0:	1fff06f8 	.word	0x1fff06f8
 80013f4:	f3af 8000 	nop.w

080013f8 <pwm_init>:

int16_t pwm_value = 3600;			//PWM max Value
int16_t sat_pwm = 30000;		//Saturation Value for PWM

void pwm_init (void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
//	CCU80->GIDLC |= CCU8_GIDLC_SPRB_MSK;

/*
 * Counting Mode - center aligned(0->max->0)
 */
	CCU80_CC80->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 80013fc:	4a80      	ldr	r2, [pc, #512]	; (8001600 <pwm_init+0x208>)
 80013fe:	4b80      	ldr	r3, [pc, #512]	; (8001600 <pwm_init+0x208>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6153      	str	r3, [r2, #20]
	CCU80_CC81->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 8001408:	4a7e      	ldr	r2, [pc, #504]	; (8001604 <pwm_init+0x20c>)
 800140a:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <pwm_init+0x20c>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6153      	str	r3, [r2, #20]
	CCU80_CC82->TC |= (uint32_t)(CCU8_CC8_TC_TCM_MSK);
 8001414:	4a7c      	ldr	r2, [pc, #496]	; (8001608 <pwm_init+0x210>)
 8001416:	4b7c      	ldr	r3, [pc, #496]	; (8001608 <pwm_init+0x210>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6153      	str	r3, [r2, #20]

/*
 * Period&Compare channel 1 values configuration
 */
	CCU80_CC80->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);   //Shadow value to timer period PR
 8001420:	4a77      	ldr	r2, [pc, #476]	; (8001600 <pwm_init+0x208>)
 8001422:	4b77      	ldr	r3, [pc, #476]	; (8001600 <pwm_init+0x208>)
 8001424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001426:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 800142a:	6353      	str	r3, [r2, #52]	; 0x34
	CCU80_CC80->CR1S |=(uint32_t)(CCU8_CC8_CR1_CR1_VALUE);	//Shadow value to compare channel 1
 800142c:	4a74      	ldr	r2, [pc, #464]	; (8001600 <pwm_init+0x208>)
 800142e:	4b74      	ldr	r3, [pc, #464]	; (8001600 <pwm_init+0x208>)
 8001430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001432:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 8001436:	63d3      	str	r3, [r2, #60]	; 0x3c

	CCU80_CC81->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);
 8001438:	4a72      	ldr	r2, [pc, #456]	; (8001604 <pwm_init+0x20c>)
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <pwm_init+0x20c>)
 800143c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143e:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 8001442:	6353      	str	r3, [r2, #52]	; 0x34
	CCU80_CC81->CR1S |=(uint32_t)(CCU8_CC8_CR1_CR1_VALUE);
 8001444:	4a6f      	ldr	r2, [pc, #444]	; (8001604 <pwm_init+0x20c>)
 8001446:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <pwm_init+0x20c>)
 8001448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144a:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 800144e:	63d3      	str	r3, [r2, #60]	; 0x3c

	CCU80_CC82->PRS |= (uint32_t)(CCU8_CC8_PRS_PR_VALUE);
 8001450:	4a6d      	ldr	r2, [pc, #436]	; (8001608 <pwm_init+0x210>)
 8001452:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <pwm_init+0x210>)
 8001454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001456:	f443 6361 	orr.w	r3, r3, #3600	; 0xe10
 800145a:	6353      	str	r3, [r2, #52]	; 0x34
	CCU80_CC82->CR1S |=(uint32_t)(CCU8_CC8_CR1_CR1_VALUE);
 800145c:	4a6a      	ldr	r2, [pc, #424]	; (8001608 <pwm_init+0x210>)
 800145e:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <pwm_init+0x210>)
 8001460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001462:	f443 63e1 	orr.w	r3, r3, #1800	; 0x708
 8001466:	63d3      	str	r3, [r2, #60]	; 0x3c


/*
 *  Shadow transfer enable for CCU80_80/81/82    Request shadow transfer
 */
	CCU80->GCSS |= (CCU8_GCSS_S0SE_MSK | CCU8_GCSS_S1SE_MSK | CCU8_GCSS_S2SE_MSK);
 8001468:	4a68      	ldr	r2, [pc, #416]	; (800160c <pwm_init+0x214>)
 800146a:	4b68      	ldr	r3, [pc, #416]	; (800160c <pwm_init+0x214>)
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6113      	str	r3, [r2, #16]
 * Configure timers
 */
/*
 * Remove from IDLE 80-82
 */
	CCU80->GIDLC |= (CCU8_GIDLC_CS0I_MSK | CCU8_GIDLC_CS1I_MSK | CCU8_GIDLC_CS2I_MSK) ;
 8001478:	4a64      	ldr	r2, [pc, #400]	; (800160c <pwm_init+0x214>)
 800147a:	4b64      	ldr	r3, [pc, #400]	; (800160c <pwm_init+0x214>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f043 0307 	orr.w	r3, r3, #7
 8001482:	60d3      	str	r3, [r2, #12]

/*   Clear the timer run bit(TRBC) and timer (TCC) */
	CCU80_CC80->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 8001484:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <pwm_init+0x208>)
 8001486:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <pwm_init+0x208>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6113      	str	r3, [r2, #16]
	CCU80_CC80->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 8001490:	4a5b      	ldr	r2, [pc, #364]	; (8001600 <pwm_init+0x208>)
 8001492:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <pwm_init+0x208>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	6113      	str	r3, [r2, #16]

	CCU80_CC81->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 800149c:	4a59      	ldr	r2, [pc, #356]	; (8001604 <pwm_init+0x20c>)
 800149e:	4b59      	ldr	r3, [pc, #356]	; (8001604 <pwm_init+0x20c>)
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6113      	str	r3, [r2, #16]
	CCU80_CC81->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 80014a8:	4a56      	ldr	r2, [pc, #344]	; (8001604 <pwm_init+0x20c>)
 80014aa:	4b56      	ldr	r3, [pc, #344]	; (8001604 <pwm_init+0x20c>)
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	6113      	str	r3, [r2, #16]

	CCU80_CC82->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TRBC_MSK);
 80014b4:	4a54      	ldr	r2, [pc, #336]	; (8001608 <pwm_init+0x210>)
 80014b6:	4b54      	ldr	r3, [pc, #336]	; (8001608 <pwm_init+0x210>)
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6113      	str	r3, [r2, #16]
	CCU80_CC82->TCCLR |= (uint32_t)(CCU8_CC8_TCCLR_TCC_MSK);
 80014c0:	4a51      	ldr	r2, [pc, #324]	; (8001608 <pwm_init+0x210>)
 80014c2:	4b51      	ldr	r3, [pc, #324]	; (8001608 <pwm_init+0x210>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	6113      	str	r3, [r2, #16]

/*
 * Deadband config - enable for channel 1 and ST1
 */
	CCU80_CC80->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 80014cc:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <pwm_init+0x208>)
 80014ce:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <pwm_init+0x208>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f043 0305 	orr.w	r3, r3, #5
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
	CCU80_CC81->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 80014d8:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <pwm_init+0x20c>)
 80014da:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <pwm_init+0x20c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f043 0305 	orr.w	r3, r3, #5
 80014e2:	64d3      	str	r3, [r2, #76]	; 0x4c
	CCU80_CC82->DTC |= CCU8_CC8_DTC_DTE1_MSK | CCU8_CC8_DTC_DCEN1_MSK;
 80014e4:	4a48      	ldr	r2, [pc, #288]	; (8001608 <pwm_init+0x210>)
 80014e6:	4b48      	ldr	r3, [pc, #288]	; (8001608 <pwm_init+0x210>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f043 0305 	orr.w	r3, r3, #5
 80014ee:	64d3      	str	r3, [r2, #76]	; 0x4c

/*
 * Deadband value rising config - rising 50ns
 */
	CCU80_CC80->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 80014f0:	4a43      	ldr	r2, [pc, #268]	; (8001600 <pwm_init+0x208>)
 80014f2:	4b43      	ldr	r3, [pc, #268]	; (8001600 <pwm_init+0x208>)
 80014f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	6513      	str	r3, [r2, #80]	; 0x50
	CCU80_CC81->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 80014fc:	4a41      	ldr	r2, [pc, #260]	; (8001604 <pwm_init+0x20c>)
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <pwm_init+0x20c>)
 8001500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6513      	str	r3, [r2, #80]	; 0x50
	CCU80_CC82->DC1R |= CCU8_CC8_DC1R_Value << CCU8_CC8_DC1R_DT1R_POS;
 8001508:	4a3f      	ldr	r2, [pc, #252]	; (8001608 <pwm_init+0x210>)
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <pwm_init+0x210>)
 800150c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6513      	str	r3, [r2, #80]	; 0x50
 * Input selector & matrix
 * Use IN_H for Event 0 on Rising edge
 * Set start on EVENT 0 on Rising edge
 * Set stop on Event 1 on Falling edge
 */
	CCU80_CC80->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS;		//Set Event 0(system control) as rising edge
 8001514:	4a3a      	ldr	r2, [pc, #232]	; (8001600 <pwm_init+0x208>)
 8001516:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <pwm_init+0x208>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f043 0307 	orr.w	r3, r3, #7
 800151e:	6013      	str	r3, [r2, #0]
	CCU80_CC80->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 8001520:	4a37      	ldr	r2, [pc, #220]	; (8001600 <pwm_init+0x208>)
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <pwm_init+0x208>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
	CCU80_CC80->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS;		//Set Event 1(system control) as falling edge
 800152c:	4a34      	ldr	r2, [pc, #208]	; (8001600 <pwm_init+0x208>)
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <pwm_init+0x208>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001536:	6013      	str	r3, [r2, #0]
	CCU80_CC80->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 8001538:	4a31      	ldr	r2, [pc, #196]	; (8001600 <pwm_init+0x208>)
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <pwm_init+0x208>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001542:	6013      	str	r3, [r2, #0]

	CCU80_CC81->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS;
 8001544:	4a2f      	ldr	r2, [pc, #188]	; (8001604 <pwm_init+0x20c>)
 8001546:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <pwm_init+0x20c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f043 0307 	orr.w	r3, r3, #7
 800154e:	6013      	str	r3, [r2, #0]
	CCU80_CC81->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 8001550:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <pwm_init+0x20c>)
 8001552:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <pwm_init+0x20c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
	CCU80_CC81->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS;
 800155c:	4a29      	ldr	r2, [pc, #164]	; (8001604 <pwm_init+0x20c>)
 800155e:	4b29      	ldr	r3, [pc, #164]	; (8001604 <pwm_init+0x20c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001566:	6013      	str	r3, [r2, #0]
	CCU80_CC81->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 8001568:	4a26      	ldr	r2, [pc, #152]	; (8001604 <pwm_init+0x20c>)
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <pwm_init+0x20c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001572:	6013      	str	r3, [r2, #0]

	CCU80_CC82->INS |= CCU8_IN_H << CCU8_CC8_INS_EV0IS_POS;
 8001574:	4a24      	ldr	r2, [pc, #144]	; (8001608 <pwm_init+0x210>)
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <pwm_init+0x210>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f043 0307 	orr.w	r3, r3, #7
 800157e:	6013      	str	r3, [r2, #0]
	CCU80_CC82->INS |= RISING_EDGE << CCU8_CC8_INS_EV0EM_POS;
 8001580:	4a21      	ldr	r2, [pc, #132]	; (8001608 <pwm_init+0x210>)
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <pwm_init+0x210>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158a:	6013      	str	r3, [r2, #0]
	CCU80_CC82->INS |= CCU8_IN_H << CCU8_CC8_INS_EV1IS_POS;
 800158c:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <pwm_init+0x210>)
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <pwm_init+0x210>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001596:	6013      	str	r3, [r2, #0]
	CCU80_CC82->INS |= FALLING_EDGE << CCU8_CC8_INS_EV1EM_POS;
 8001598:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <pwm_init+0x210>)
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <pwm_init+0x210>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015a2:	6013      	str	r3, [r2, #0]

	CCU80_CC80->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS;	//Set Event 0 for start
 80015a4:	4a16      	ldr	r2, [pc, #88]	; (8001600 <pwm_init+0x208>)
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <pwm_init+0x208>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6053      	str	r3, [r2, #4]
	CCU80_CC81->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <pwm_init+0x20c>)
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <pwm_init+0x20c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6053      	str	r3, [r2, #4]
	CCU80_CC82->CMC |= CCU8_CC8_CMC_STRTS_EV0_MSK << CCU8_CC8_CMC_STRTS_POS;
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <pwm_init+0x210>)
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <pwm_init+0x210>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6053      	str	r3, [r2, #4]


	CCU80_CC80->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS;		//Set Event 1 for end
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <pwm_init+0x208>)
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <pwm_init+0x208>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6053      	str	r3, [r2, #4]
	CCU80_CC81->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS;
 80015d4:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <pwm_init+0x20c>)
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <pwm_init+0x20c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6053      	str	r3, [r2, #4]
	CCU80_CC82->CMC |= CCU8_CC8_CMC_ENDS_EV1_MSK << CCU8_CC8_CMC_ENDS_POS;
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <pwm_init+0x210>)
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <pwm_init+0x210>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6053      	str	r3, [r2, #4]

/*
 * Enable CCUCON Module
 */
	SCU_GENERAL->CCUCON |= SCU_GENERAL_CCUCON_GSC80_MSK;
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <pwm_init+0x218>)
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <pwm_init+0x218>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	64d3      	str	r3, [r2, #76]	; 0x4c
//	SCU_GENERAL->CCUCON &= ~SCU_GENERAL_CCUCON_GSC80_MSK; 		//Reset back to 0 if it needs to be re-enabled later
}
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40020100 	.word	0x40020100
 8001604:	40020200 	.word	0x40020200
 8001608:	40020300 	.word	0x40020300
 800160c:	40020000 	.word	0x40020000
 8001610:	50004000 	.word	0x50004000

08001614 <pwm_update>:
/*
 * Functions that updates the compare values in the PWM
 * Input type: int16_t
 */
void pwm_update (int16_t uaref,int16_t ubref,int16_t ucref)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	80fb      	strh	r3, [r7, #6]
 800161e:	460b      	mov	r3, r1
 8001620:	80bb      	strh	r3, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	807b      	strh	r3, [r7, #2]
	/*
	 * Keeps the voltage values between a range of max/min saturation
	 * We don't want the resulted PWM to be 0 or MAX
	 */
	if (uaref > sat_pwm)
 8001626:	4b50      	ldr	r3, [pc, #320]	; (8001768 <pwm_update+0x154>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800162e:	b21b      	sxth	r3, r3
 8001630:	429a      	cmp	r2, r3
 8001632:	dd03      	ble.n	800163c <pwm_update+0x28>
	{
		uaref = sat_pwm;
 8001634:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <pwm_update+0x154>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	80fb      	strh	r3, [r7, #6]
 800163a:	e00d      	b.n	8001658 <pwm_update+0x44>
	}
	else if (uaref < -sat_pwm)
 800163c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001640:	4b49      	ldr	r3, [pc, #292]	; (8001768 <pwm_update+0x154>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	b21b      	sxth	r3, r3
 8001646:	425b      	negs	r3, r3
 8001648:	429a      	cmp	r2, r3
 800164a:	da05      	bge.n	8001658 <pwm_update+0x44>
	{
		uaref = -sat_pwm;
 800164c:	4b46      	ldr	r3, [pc, #280]	; (8001768 <pwm_update+0x154>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	425b      	negs	r3, r3
 8001654:	b29b      	uxth	r3, r3
 8001656:	80fb      	strh	r3, [r7, #6]
	}

	if (ubref > sat_pwm)
 8001658:	4b43      	ldr	r3, [pc, #268]	; (8001768 <pwm_update+0x154>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001660:	b21b      	sxth	r3, r3
 8001662:	429a      	cmp	r2, r3
 8001664:	dd03      	ble.n	800166e <pwm_update+0x5a>
	{
		ubref = sat_pwm;
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <pwm_update+0x154>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	80bb      	strh	r3, [r7, #4]
 800166c:	e00d      	b.n	800168a <pwm_update+0x76>
	}
	else if (ubref < -sat_pwm)
 800166e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <pwm_update+0x154>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b21b      	sxth	r3, r3
 8001678:	425b      	negs	r3, r3
 800167a:	429a      	cmp	r2, r3
 800167c:	da05      	bge.n	800168a <pwm_update+0x76>
	{
		ubref = -sat_pwm;
 800167e:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <pwm_update+0x154>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	425b      	negs	r3, r3
 8001686:	b29b      	uxth	r3, r3
 8001688:	80bb      	strh	r3, [r7, #4]
	}

	if (ucref > sat_pwm)
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <pwm_update+0x154>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001692:	b21b      	sxth	r3, r3
 8001694:	429a      	cmp	r2, r3
 8001696:	dd03      	ble.n	80016a0 <pwm_update+0x8c>
	{
		ucref = sat_pwm;
 8001698:	4b33      	ldr	r3, [pc, #204]	; (8001768 <pwm_update+0x154>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	807b      	strh	r3, [r7, #2]
 800169e:	e00d      	b.n	80016bc <pwm_update+0xa8>
	}
	else if (ucref < -sat_pwm)
 80016a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <pwm_update+0x154>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	425b      	negs	r3, r3
 80016ac:	429a      	cmp	r2, r3
 80016ae:	da05      	bge.n	80016bc <pwm_update+0xa8>
	{
		ucref = -sat_pwm;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <pwm_update+0x154>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	425b      	negs	r3, r3
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	807b      	strh	r3, [r7, #2]
	}

	//New compare value
	CCU80_CC80->CR1S = (pwm_value/2 - pwm_value * uaref/65535);
 80016bc:	482b      	ldr	r0, [pc, #172]	; (800176c <pwm_update+0x158>)
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <pwm_update+0x15c>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	0fda      	lsrs	r2, r3, #31
 80016c6:	4413      	add	r3, r2
 80016c8:	105b      	asrs	r3, r3, #1
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <pwm_update+0x15c>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4925      	ldr	r1, [pc, #148]	; (8001774 <pwm_update+0x160>)
 80016de:	fb81 e103 	smull	lr, r1, r1, r3
 80016e2:	4419      	add	r1, r3
 80016e4:	13c9      	asrs	r1, r1, #15
 80016e6:	17db      	asrs	r3, r3, #31
 80016e8:	1acb      	subs	r3, r1, r3
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	63c3      	str	r3, [r0, #60]	; 0x3c
	CCU80_CC81->CR1S = (pwm_value/2 - pwm_value * ubref/65535);
 80016ee:	4822      	ldr	r0, [pc, #136]	; (8001778 <pwm_update+0x164>)
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <pwm_update+0x15c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	0fda      	lsrs	r2, r3, #31
 80016f8:	4413      	add	r3, r2
 80016fa:	105b      	asrs	r3, r3, #1
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b21a      	sxth	r2, r3
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <pwm_update+0x15c>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	b21b      	sxth	r3, r3
 8001706:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	4919      	ldr	r1, [pc, #100]	; (8001774 <pwm_update+0x160>)
 8001710:	fb81 e103 	smull	lr, r1, r1, r3
 8001714:	4419      	add	r1, r3
 8001716:	13c9      	asrs	r1, r1, #15
 8001718:	17db      	asrs	r3, r3, #31
 800171a:	1acb      	subs	r3, r1, r3
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	63c3      	str	r3, [r0, #60]	; 0x3c
	CCU80_CC82->CR1S = (pwm_value/2 - pwm_value * ucref/65535);
 8001720:	4816      	ldr	r0, [pc, #88]	; (800177c <pwm_update+0x168>)
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <pwm_update+0x15c>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b21b      	sxth	r3, r3
 8001728:	0fda      	lsrs	r2, r3, #31
 800172a:	4413      	add	r3, r2
 800172c:	105b      	asrs	r3, r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <pwm_update+0x15c>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b21b      	sxth	r3, r3
 8001738:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <pwm_update+0x160>)
 8001742:	fb81 e103 	smull	lr, r1, r1, r3
 8001746:	4419      	add	r1, r3
 8001748:	13c9      	asrs	r1, r1, #15
 800174a:	17db      	asrs	r3, r3, #31
 800174c:	1acb      	subs	r3, r1, r3
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	63c3      	str	r3, [r0, #60]	; 0x3c

	//Shadow transfer enabled for new compare value
	CCU80->GCSS |= (CCU8_GCSS_S0SE_MSK | CCU8_GCSS_S1SE_MSK | CCU8_GCSS_S2SE_MSK);
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <pwm_update+0x16c>)
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <pwm_update+0x16c>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6113      	str	r3, [r2, #16]
}
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	1ffe880a 	.word	0x1ffe880a
 800176c:	40020100 	.word	0x40020100
 8001770:	1ffe8808 	.word	0x1ffe8808
 8001774:	80008001 	.word	0x80008001
 8001778:	40020200 	.word	0x40020200
 800177c:	40020300 	.word	0x40020300
 8001780:	40020000 	.word	0x40020000

08001784 <motion_on>:

void motion_on (void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
/*
 * PWM pins configuration CCU80 - as alter function 3 - CCU80 OUTxy
 */
	PORT5->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT5_PC11_POS); 		// A_HIGH 	- P5.11 - OUT00
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <motion_on+0x54>)
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <motion_on+0x54>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f043 4318 	orr.w	r3, r3, #2550136832	; 0x98000000
 8001792:	6193      	str	r3, [r2, #24]
	PORT5->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT5_PC8_POS);			// A_LOW 	- P5.8  - OUT01
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <motion_on+0x54>)
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <motion_on+0x54>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 800179e:	6193      	str	r3, [r2, #24]

	PORT0->IOCR4 |= (GPIO_OUTPUT_ALTER_3 << PORT0_IOCR4_PC4_Pos);	// B_HIGH 	- P5.10 - OUT10 P0.4 alternative
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <motion_on+0x58>)
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <motion_on+0x58>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80017aa:	6153      	str	r3, [r2, #20]
	PORT2->IOCR12 |=(GPIO_OUTPUT_ALTER_3 << PORT2_PC15_POS);		// B_LOW 	- P2.15 - OUT11
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <motion_on+0x5c>)
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <motion_on+0x5c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f043 4318 	orr.w	r3, r3, #2550136832	; 0x98000000
 80017b6:	61d3      	str	r3, [r2, #28]

	PORT5->IOCR8 |= (GPIO_OUTPUT_ALTER_3 << PORT5_PC9_POS);			// C_HIGH 	- P5.9	- OUT20
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <motion_on+0x54>)
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <motion_on+0x54>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f443 4318 	orr.w	r3, r3, #38912	; 0x9800
 80017c2:	6193      	str	r3, [r2, #24]
	PORT2->IOCR12 |=(GPIO_OUTPUT_ALTER_3 << PORT2_PC14_POS);		// C_LOW 	- P2.14	- OUT21
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <motion_on+0x5c>)
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <motion_on+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f443 0318 	orr.w	r3, r3, #9961472	; 0x980000
 80017ce:	61d3      	str	r3, [r2, #28]
}
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	48028500 	.word	0x48028500
 80017dc:	48028000 	.word	0x48028000
 80017e0:	48028200 	.word	0x48028200

080017e4 <motion_off>:

void motion_off(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
/*
 * PWM pins configuration CCU80 - OFF
 */
	PORT5->IOCR8 &= ~(DISABLE_OUTPUT << PORT5_PC11_POS); 		// A_HIGH 	- P5.11 - OUT00
 80017e8:	4a13      	ldr	r2, [pc, #76]	; (8001838 <motion_off+0x54>)
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <motion_off+0x54>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80017f2:	6193      	str	r3, [r2, #24]
	PORT5->IOCR8 &= ~(DISABLE_OUTPUT << PORT5_PC8_POS);			// A_LOW 	- P5.8  - OUT01
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <motion_off+0x54>)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <motion_off+0x54>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017fe:	6193      	str	r3, [r2, #24]

	PORT0->IOCR4 &= ~(DISABLE_OUTPUT << PORT0_IOCR4_PC4_Pos);	// B_HIGH 	- P5.10 - OUT10 P0.4 alternative
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <motion_off+0x58>)
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <motion_off+0x58>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800180a:	6153      	str	r3, [r2, #20]
	PORT2->IOCR12 &=~(DISABLE_OUTPUT << PORT2_PC15_POS);		// B_LOW 	- P2.15 - OUT11
 800180c:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <motion_off+0x5c>)
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <motion_off+0x5c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001816:	61d3      	str	r3, [r2, #28]

	PORT5->IOCR8 &= ~(DISABLE_OUTPUT << PORT5_PC9_POS);			// C_HIGH 	- P5.9	- OUT20
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <motion_off+0x54>)
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <motion_off+0x54>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8001822:	6193      	str	r3, [r2, #24]
	PORT2->IOCR12 &=~(DISABLE_OUTPUT << PORT2_PC14_POS);		// C_LOW 	- P2.14	- OUT21
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <motion_off+0x5c>)
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <motion_off+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 800182e:	61d3      	str	r3, [r2, #28]

}
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	48028500 	.word	0x48028500
 800183c:	48028000 	.word	0x48028000
 8001840:	48028200 	.word	0x48028200

08001844 <VADC0_G0_2_IRQHandler>:
// float sin_increment_2_pi, cos_increment_2_pi;
// float sin_plus_cos;
/********************************************************************/

void VADC0_G0_2_IRQHandler (void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
	interrupt_counter_slow_loop++;
 800184a:	4b4c      	ldr	r3, [pc, #304]	; (800197c <VADC0_G0_2_IRQHandler+0x138>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b4a      	ldr	r3, [pc, #296]	; (800197c <VADC0_G0_2_IRQHandler+0x138>)
 8001854:	801a      	strh	r2, [r3, #0]
	interrupt_counter_fast_loop++;
 8001856:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <VADC0_G0_2_IRQHandler+0x13c>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b48      	ldr	r3, [pc, #288]	; (8001980 <VADC0_G0_2_IRQHandler+0x13c>)
 8001860:	801a      	strh	r2, [r3, #0]
	interrupt_counter_timer++;
 8001862:	4b48      	ldr	r3, [pc, #288]	; (8001984 <VADC0_G0_2_IRQHandler+0x140>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <VADC0_G0_2_IRQHandler+0x140>)
 800186c:	801a      	strh	r2, [r3, #0]
/*
 * Fast compute "loop"
 * Every 100us compute speed,mechanical/electrical position, field, dq_abc transformation
 */
	if (interrupt_counter_fast_loop == TIME_100_us)
 800186e:	4b44      	ldr	r3, [pc, #272]	; (8001980 <VADC0_G0_2_IRQHandler+0x13c>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d14f      	bne.n	8001916 <VADC0_G0_2_IRQHandler+0xd2>
	{

        //Read and compute into [SI] all currents
		read_currents();
 8001876:	f7ff fbcd 	bl	8001014 <read_currents>
		compute_currents();
 800187a:	f7ff fcd9 	bl	8001230 <compute_currents>
		compute_u_mot();
 800187e:	f7ff fc8f 	bl	80011a0 <compute_u_mot>
		compute_u_log();
 8001882:	f7ff fcb1 	bl	80011e8 <compute_u_log>

        //Compute all data for motor movement in Operation Enable
		if (motion_config)
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <VADC0_G0_2_IRQHandler+0x144>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d040      	beq.n	8001910 <VADC0_G0_2_IRQHandler+0xcc>
		{
		compute_fast_speed();
 800188e:	f001 ffed 	bl	800386c <compute_fast_speed>
		compute_fast_mechanical_position();
 8001892:	f002 f80d 	bl	80038b0 <compute_fast_mechanical_position>
		compute_fast_electrical_position();
 8001896:	f002 f81d 	bl	80038d4 <compute_fast_electrical_position>
		compute_fast_field();
 800189a:	f002 f843 	bl	8003924 <compute_fast_field>
		abc_dq();
 800189e:	f001 feb7 	bl	8003610 <abc_dq>
		current_protection();
 80018a2:	f7ff f857 	bl	8000954 <current_protection>

        //Add Fast Loop regulators
		if (loop_control == LOOP_CONTROL_ON)
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <VADC0_G0_2_IRQHandler+0x148>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d109      	bne.n	80018c2 <VADC0_G0_2_IRQHandler+0x7e>
		{
			if(LOOP_I_ENABLE)
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <VADC0_G0_2_IRQHandler+0x14c>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <VADC0_G0_2_IRQHandler+0x7e>
			{
			pi_regulator_i_d();
 80018ba:	f000 f9bf 	bl	8001c3c <pi_regulator_i_d>
			pi_regulator_i_q();
 80018be:	f000 f8d3 	bl	8001a68 <pi_regulator_i_q>
			}
		}

		dq_abc();
 80018c2:	f001 ff09 	bl	80036d8 <dq_abc>
		pwm_update(u_a_ref, u_b_ref, u_c_ref);
 80018c6:	4b33      	ldr	r3, [pc, #204]	; (8001994 <VADC0_G0_2_IRQHandler+0x150>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80018d4:	88bb      	ldrh	r3, [r7, #4]
 80018d6:	b299      	uxth	r1, r3
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <VADC0_G0_2_IRQHandler+0x154>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80018e6:	88bb      	ldrh	r3, [r7, #4]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b2c      	ldr	r3, [pc, #176]	; (800199c <VADC0_G0_2_IRQHandler+0x158>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80018f8:	88bb      	ldrh	r3, [r7, #4]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	b209      	sxth	r1, r1
 80018fe:	b212      	sxth	r2, r2
 8001900:	b21b      	sxth	r3, r3
 8001902:	4608      	mov	r0, r1
 8001904:	4611      	mov	r1, r2
 8001906:	461a      	mov	r2, r3
 8001908:	f7ff fe84 	bl	8001614 <pwm_update>

		ProbeScope_Sampling();      //For Micrium Osciloscope
 800190c:	f000 fd0e 	bl	800232c <ProbeScope_Sampling>

		}

		interrupt_counter_fast_loop = 0;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <VADC0_G0_2_IRQHandler+0x13c>)
 8001912:	2200      	movs	r2, #0
 8001914:	801a      	strh	r2, [r3, #0]
	}
/*
 * Slow compute loop
 * Every 1ms compute speed
 */
	if (interrupt_counter_slow_loop == TIME_1_ms)
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <VADC0_G0_2_IRQHandler+0x138>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	2b14      	cmp	r3, #20
 800191c:	d12b      	bne.n	8001976 <VADC0_G0_2_IRQHandler+0x132>
	{
        //Reference Generator function and timer
		if (ref_gen_status != STATUS_0_DISABLED)
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <VADC0_G0_2_IRQHandler+0x15c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <VADC0_G0_2_IRQHandler+0xf0>
		{
		interrupt_counter_ref_gen++;
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <VADC0_G0_2_IRQHandler+0x160>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <VADC0_G0_2_IRQHandler+0x160>)
 800192e:	6013      	str	r3, [r2, #0]
		reference_generator();
 8001930:	f001 fc32 	bl	8003198 <reference_generator>
		}

        //Slow loop regulators
		if((loop_control == LOOP_CONTROL_ON) && motion_config)
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <VADC0_G0_2_IRQHandler+0x148>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d113      	bne.n	8001964 <VADC0_G0_2_IRQHandler+0x120>
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <VADC0_G0_2_IRQHandler+0x144>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00f      	beq.n	8001964 <VADC0_G0_2_IRQHandler+0x120>
		{
			if(LOOP_POS_ENABLE)
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <VADC0_G0_2_IRQHandler+0x14c>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <VADC0_G0_2_IRQHandler+0x110>
			{
				pi_regulator_pos();
 8001950:	f000 fb4e 	bl	8001ff0 <pi_regulator_pos>

			}
			if(LOOP_SPD_ENABLE)
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <VADC0_G0_2_IRQHandler+0x14c>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <VADC0_G0_2_IRQHandler+0x120>
			{
				pi_regulator_speed();
 8001960:	f000 fa56 	bl	8001e10 <pi_regulator_speed>
			}
		}

        //Compute motor speed
		if (motion_config)
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <VADC0_G0_2_IRQHandler+0x144>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <VADC0_G0_2_IRQHandler+0x12c>
		{
            compute_speed();
 800196c:	f000 f864 	bl	8001a38 <compute_speed>
		}

		interrupt_counter_slow_loop = 0;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <VADC0_G0_2_IRQHandler+0x138>)
 8001972:	2200      	movs	r2, #0
 8001974:	801a      	strh	r2, [r3, #0]
	}
}
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	1ffe8850 	.word	0x1ffe8850
 8001980:	1ffe8852 	.word	0x1ffe8852
 8001984:	1ffe8854 	.word	0x1ffe8854
 8001988:	1fff06c2 	.word	0x1fff06c2
 800198c:	1fff06c0 	.word	0x1fff06c0
 8001990:	1fff06bc 	.word	0x1fff06bc
 8001994:	1fff0774 	.word	0x1fff0774
 8001998:	1fff0764 	.word	0x1fff0764
 800199c:	1fff0784 	.word	0x1fff0784
 80019a0:	1fff0690 	.word	0x1fff0690
 80019a4:	1fff068c 	.word	0x1fff068c

080019a8 <infinite_loop>:
#include "motor_data_update.h"
#include "state_machine.h"
#include "current_protection.h"

void infinite_loop (void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	state_machine();
 80019ac:	f001 fcc6 	bl	800333c <state_machine>

	// if ((drive_status & DRIVE_STATUS_PROT_MSK) == 1){
	// 	drive_status = STATE_0_DRIVE_DISABLED;
	// }
}
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop

080019b4 <main>:

int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	interrupt_vadc_init();		// Interrupts generated by the VADC - sets up the CCU80 - CC83
 80019b8:	f7ff faa4 	bl	8000f04 <interrupt_vadc_init>
	pwm_init();					// PWM & clock initialization - CC80/81/82
 80019bc:	f7ff fd1c 	bl	80013f8 <pwm_init>
	encoder_init();				// Encoder initialization
 80019c0:	f7fe feb8 	bl	8000734 <encoder_init>
	adc_init();					// VADC initialization
 80019c4:	f7ff f888 	bl	8000ad8 <adc_init>
	ProbeScope_Init(10000);		// Initialize Oscilloscope for Micrium - imported
 80019c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80019cc:	f000 fbfe 	bl	80021cc <ProbeScope_Init>
 80019d0:	b662      	cpsie	i


	while(1U)
	{
		/* Infinite loop */
		infinite_loop();
 80019d2:	f7ff ffe9 	bl	80019a8 <infinite_loop>
	}
 80019d6:	e7fc      	b.n	80019d2 <main+0x1e>

080019d8 <init_position>:
/**
 * Initialize position for motor
 * 
 */
void init_position (void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	motion_on();				//Enable PWM pins
 80019dc:	f7ff fed2 	bl	8001784 <motion_on>
	pwm_update(0, 4000, 0);		//Apply voltage on the B Phase
 80019e0:	2000      	movs	r0, #0
 80019e2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80019e6:	2200      	movs	r2, #0
 80019e8:	f7ff fe14 	bl	8001614 <pwm_update>
	delay_t(SECOND_1/2);		//Wait 0.5s
 80019ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80019f0:	f001 fdf6 	bl	80035e0 <delay_t>

	pwm_update(4000, 0, 0);		//Apply voltage on the A Phase
 80019f4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2200      	movs	r2, #0
 80019fc:	f7ff fe0a 	bl	8001614 <pwm_update>
	delay_t(SECOND_1/2);		//Wait 0.5s
 8001a00:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a04:	f001 fdec 	bl	80035e0 <delay_t>
	motion_off();				//Disable PWM pin
 8001a08:	f7ff feec 	bl	80017e4 <motion_off>

	theta_fast = 0;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <init_position+0x50>)
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
	mechanical_position_fast = 0;
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <init_position+0x54>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
	motor_spd = 0;
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <init_position+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
	mechanical_position_old = 0;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <init_position+0x5c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
}
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	1fff06c4 	.word	0x1fff06c4
 8001a2c:	1fff06c8 	.word	0x1fff06c8
 8001a30:	1ffe8858 	.word	0x1ffe8858
 8001a34:	1ffe885c 	.word	0x1ffe885c

08001a38 <compute_speed>:
/**
 * Compute current speed of motor
 * 
 */
void compute_speed (void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	motor_spd = mechanical_position_fast - mechanical_position_old;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <compute_speed+0x24>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <compute_speed+0x28>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <compute_speed+0x2c>)
 8001a48:	6013      	str	r3, [r2, #0]
	mechanical_position_old = mechanical_position_fast;
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <compute_speed+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <compute_speed+0x28>)
 8001a50:	6013      	str	r3, [r2, #0]
}
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	1fff06c8 	.word	0x1fff06c8
 8001a60:	1ffe885c 	.word	0x1ffe885c
 8001a64:	1ffe8858 	.word	0x1ffe8858

08001a68 <pi_regulator_i_q>:
int32_t sat_i_part_currents;
int32_t sat_i_part_spd;
int32_t sat_i_part_pos;

void pi_regulator_i_q (void)						//i_q -> u_q_ref
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	sat_i_part_currents = sat_out_currents/10;
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <pi_regulator_i_q+0x1a8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a68      	ldr	r2, [pc, #416]	; (8001c14 <pi_regulator_i_q+0x1ac>)
 8001a72:	fb82 1203 	smull	r1, r2, r2, r3
 8001a76:	1092      	asrs	r2, r2, #2
 8001a78:	17db      	asrs	r3, r3, #31
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	4a66      	ldr	r2, [pc, #408]	; (8001c18 <pi_regulator_i_q+0x1b0>)
 8001a7e:	6013      	str	r3, [r2, #0]
	error_i_q = i_q_ref - i_q;
 8001a80:	4b66      	ldr	r3, [pc, #408]	; (8001c1c <pi_regulator_i_q+0x1b4>)
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <pi_regulator_i_q+0x1b8>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a90:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <pi_regulator_i_q+0x1bc>)
 8001a92:	edc3 7a00 	vstr	s15, [r3]

	//Proportional part computation
	p_part_i_q = error_i_q*k_p_i;
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <pi_regulator_i_q+0x1bc>)
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <pi_regulator_i_q+0x1c0>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa6:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <pi_regulator_i_q+0x1c4>)
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
	if (p_part_i_q > sat_out_currents)
 8001aac:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <pi_regulator_i_q+0x1a8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab8:	4b5c      	ldr	r3, [pc, #368]	; (8001c2c <pi_regulator_i_q+0x1c4>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	d509      	bpl.n	8001adc <pi_regulator_i_q+0x74>
	{
		p_part_i_q = sat_out_currents;
 8001ac8:	4b51      	ldr	r3, [pc, #324]	; (8001c10 <pi_regulator_i_q+0x1a8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <pi_regulator_i_q+0x1c4>)
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
 8001ada:	e018      	b.n	8001b0e <pi_regulator_i_q+0xa6>
	}
	else if(p_part_i_q < -sat_out_currents)
 8001adc:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <pi_regulator_i_q+0x1a8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aea:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <pi_regulator_i_q+0x1c4>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af8:	dd09      	ble.n	8001b0e <pi_regulator_i_q+0xa6>
	{
		p_part_i_q = -sat_out_currents;
 8001afa:	4b45      	ldr	r3, [pc, #276]	; (8001c10 <pi_regulator_i_q+0x1a8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	425b      	negs	r3, r3
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b08:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <pi_regulator_i_q+0x1c4>)
 8001b0a:	edc3 7a00 	vstr	s15, [r3]
	}

	//Integral part computation
	i_part_i_q += error_i_q*k_i_i;
 8001b0e:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <pi_regulator_i_q+0x1bc>)
 8001b10:	ed93 7a00 	vldr	s14, [r3]
 8001b14:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <pi_regulator_i_q+0x1c8>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1e:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <pi_regulator_i_q+0x1cc>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <pi_regulator_i_q+0x1cc>)
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
	if (i_part_i_q > sat_i_part_currents)
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <pi_regulator_i_q+0x1b0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <pi_regulator_i_q+0x1cc>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	d509      	bpl.n	8001b5e <pi_regulator_i_q+0xf6>
	{
		i_part_i_q = sat_i_part_currents;
 8001b4a:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <pi_regulator_i_q+0x1b0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <pi_regulator_i_q+0x1cc>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]
 8001b5c:	e018      	b.n	8001b90 <pi_regulator_i_q+0x128>
	}
	else if(i_part_i_q < -sat_i_part_currents)
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <pi_regulator_i_q+0x1b0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	425b      	negs	r3, r3
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <pi_regulator_i_q+0x1cc>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	dd09      	ble.n	8001b90 <pi_regulator_i_q+0x128>
	{
		i_part_i_q = -sat_i_part_currents;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <pi_regulator_i_q+0x1b0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	425b      	negs	r3, r3
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <pi_regulator_i_q+0x1cc>)
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
	}

	//Output
	u_q_ref = p_part_i_q + i_part_i_q;
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <pi_regulator_i_q+0x1c4>)
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <pi_regulator_i_q+0x1cc>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <pi_regulator_i_q+0x1d0>)
 8001ba2:	edc3 7a00 	vstr	s15, [r3]

	if (u_q_ref > sat_out_currents)
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <pi_regulator_i_q+0x1a8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <pi_regulator_i_q+0x1d0>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d509      	bpl.n	8001bd6 <pi_regulator_i_q+0x16e>
	{
		u_q_ref = sat_out_currents;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <pi_regulator_i_q+0x1a8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <pi_regulator_i_q+0x1d0>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
 8001bd4:	e018      	b.n	8001c08 <pi_regulator_i_q+0x1a0>
	}
	else if(u_q_ref < -sat_out_currents)
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <pi_regulator_i_q+0x1a8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	425b      	negs	r3, r3
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <pi_regulator_i_q+0x1d0>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	dd09      	ble.n	8001c08 <pi_regulator_i_q+0x1a0>
	{
		u_q_ref = -sat_out_currents;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <pi_regulator_i_q+0x1a8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	425b      	negs	r3, r3
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <pi_regulator_i_q+0x1d0>)
 8001c04:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	1ffe8824 	.word	0x1ffe8824
 8001c14:	66666667 	.word	0x66666667
 8001c18:	1fff0724 	.word	0x1fff0724
 8001c1c:	1ffe8870 	.word	0x1ffe8870
 8001c20:	1fff076c 	.word	0x1fff076c
 8001c24:	1ffe8860 	.word	0x1ffe8860
 8001c28:	1ffe880c 	.word	0x1ffe880c
 8001c2c:	1ffe8884 	.word	0x1ffe8884
 8001c30:	1ffe8810 	.word	0x1ffe8810
 8001c34:	1ffe8894 	.word	0x1ffe8894
 8001c38:	1ffe8880 	.word	0x1ffe8880

08001c3c <pi_regulator_i_d>:

void pi_regulator_i_d (void)					//i_d -> u_d_ref
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
	sat_i_part_currents = sat_out_currents/10;
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <pi_regulator_i_d+0x1a8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a68      	ldr	r2, [pc, #416]	; (8001de8 <pi_regulator_i_d+0x1ac>)
 8001c46:	fb82 1203 	smull	r1, r2, r2, r3
 8001c4a:	1092      	asrs	r2, r2, #2
 8001c4c:	17db      	asrs	r3, r3, #31
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a66      	ldr	r2, [pc, #408]	; (8001dec <pi_regulator_i_d+0x1b0>)
 8001c52:	6013      	str	r3, [r2, #0]
	error_i_d = i_d_ref - i_d;
 8001c54:	4b66      	ldr	r3, [pc, #408]	; (8001df0 <pi_regulator_i_d+0x1b4>)
 8001c56:	ed93 7a00 	vldr	s14, [r3]
 8001c5a:	4b66      	ldr	r3, [pc, #408]	; (8001df4 <pi_regulator_i_d+0x1b8>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c64:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <pi_regulator_i_d+0x1bc>)
 8001c66:	edc3 7a00 	vstr	s15, [r3]

	//Proportional part computation
	p_part_i_d = error_i_d*k_p_i;
 8001c6a:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <pi_regulator_i_d+0x1bc>)
 8001c6c:	ed93 7a00 	vldr	s14, [r3]
 8001c70:	4b62      	ldr	r3, [pc, #392]	; (8001dfc <pi_regulator_i_d+0x1c0>)
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <pi_regulator_i_d+0x1c4>)
 8001c7c:	edc3 7a00 	vstr	s15, [r3]
	if (p_part_i_d > sat_out_currents)
 8001c80:	4b58      	ldr	r3, [pc, #352]	; (8001de4 <pi_regulator_i_d+0x1a8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8c:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <pi_regulator_i_d+0x1c4>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	d509      	bpl.n	8001cb0 <pi_regulator_i_d+0x74>
	{
		p_part_i_d = sat_out_currents;
 8001c9c:	4b51      	ldr	r3, [pc, #324]	; (8001de4 <pi_regulator_i_d+0x1a8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <pi_regulator_i_d+0x1c4>)
 8001caa:	edc3 7a00 	vstr	s15, [r3]
 8001cae:	e018      	b.n	8001ce2 <pi_regulator_i_d+0xa6>
	}
	else if(p_part_i_d < -sat_out_currents)
 8001cb0:	4b4c      	ldr	r3, [pc, #304]	; (8001de4 <pi_regulator_i_d+0x1a8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	425b      	negs	r3, r3
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <pi_regulator_i_d+0x1c4>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ccc:	dd09      	ble.n	8001ce2 <pi_regulator_i_d+0xa6>
	{
		p_part_i_d = -sat_out_currents;
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <pi_regulator_i_d+0x1a8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	425b      	negs	r3, r3
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cdc:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <pi_regulator_i_d+0x1c4>)
 8001cde:	edc3 7a00 	vstr	s15, [r3]
	}

	//Integral part computation
	i_part_i_d += error_i_d*k_i_i;
 8001ce2:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <pi_regulator_i_d+0x1bc>)
 8001ce4:	ed93 7a00 	vldr	s14, [r3]
 8001ce8:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <pi_regulator_i_d+0x1c8>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf2:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <pi_regulator_i_d+0x1cc>)
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <pi_regulator_i_d+0x1cc>)
 8001cfe:	edc3 7a00 	vstr	s15, [r3]
	if (i_part_i_d > sat_i_part_currents)
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <pi_regulator_i_d+0x1b0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <pi_regulator_i_d+0x1cc>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	d509      	bpl.n	8001d32 <pi_regulator_i_d+0xf6>
	{
		i_part_i_d = sat_i_part_currents;
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <pi_regulator_i_d+0x1b0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2a:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <pi_regulator_i_d+0x1cc>)
 8001d2c:	edc3 7a00 	vstr	s15, [r3]
 8001d30:	e018      	b.n	8001d64 <pi_regulator_i_d+0x128>
	}
	else if(i_part_i_d < -sat_i_part_currents)
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <pi_regulator_i_d+0x1b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	425b      	negs	r3, r3
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d40:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <pi_regulator_i_d+0x1cc>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	dd09      	ble.n	8001d64 <pi_regulator_i_d+0x128>
	{
		i_part_i_d = -sat_i_part_currents;
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <pi_regulator_i_d+0x1b0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	425b      	negs	r3, r3
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <pi_regulator_i_d+0x1cc>)
 8001d60:	edc3 7a00 	vstr	s15, [r3]
	}

	//Output
	u_d_ref = p_part_i_d + i_part_i_d;
 8001d64:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <pi_regulator_i_d+0x1c4>)
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <pi_regulator_i_d+0x1cc>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <pi_regulator_i_d+0x1d0>)
 8001d76:	edc3 7a00 	vstr	s15, [r3]

	if (u_d_ref > sat_out_currents)
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <pi_regulator_i_d+0x1a8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <pi_regulator_i_d+0x1d0>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	d509      	bpl.n	8001daa <pi_regulator_i_d+0x16e>
	{
		u_d_ref = sat_out_currents;
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <pi_regulator_i_d+0x1a8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <pi_regulator_i_d+0x1d0>)
 8001da4:	edc3 7a00 	vstr	s15, [r3]
 8001da8:	e018      	b.n	8001ddc <pi_regulator_i_d+0x1a0>
	}
	else if(u_d_ref < -sat_out_currents)
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <pi_regulator_i_d+0x1a8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	425b      	negs	r3, r3
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <pi_regulator_i_d+0x1d0>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc6:	dd09      	ble.n	8001ddc <pi_regulator_i_d+0x1a0>
	{
		u_d_ref = -sat_out_currents;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <pi_regulator_i_d+0x1a8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	425b      	negs	r3, r3
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <pi_regulator_i_d+0x1d0>)
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	1ffe8824 	.word	0x1ffe8824
 8001de8:	66666667 	.word	0x66666667
 8001dec:	1fff0724 	.word	0x1fff0724
 8001df0:	1ffe8874 	.word	0x1ffe8874
 8001df4:	1fff0770 	.word	0x1fff0770
 8001df8:	1ffe8864 	.word	0x1ffe8864
 8001dfc:	1ffe880c 	.word	0x1ffe880c
 8001e00:	1ffe8888 	.word	0x1ffe8888
 8001e04:	1ffe8810 	.word	0x1ffe8810
 8001e08:	1ffe8898 	.word	0x1ffe8898
 8001e0c:	1fff0720 	.word	0x1fff0720

08001e10 <pi_regulator_speed>:

void pi_regulator_speed (void)			//motor_spd -> i_q_ref
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
	sat_i_part_spd = sat_out_spd/10;
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <pi_regulator_speed+0x1b0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <pi_regulator_speed+0x1b4>)
 8001e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e1e:	1092      	asrs	r2, r2, #2
 8001e20:	17db      	asrs	r3, r3, #31
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a68      	ldr	r2, [pc, #416]	; (8001fc8 <pi_regulator_speed+0x1b8>)
 8001e26:	6013      	str	r3, [r2, #0]
	error_spd = spd_ref - motor_spd;
 8001e28:	4b68      	ldr	r3, [pc, #416]	; (8001fcc <pi_regulator_speed+0x1bc>)
 8001e2a:	ed93 7a00 	vldr	s14, [r3]
 8001e2e:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <pi_regulator_speed+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3e:	4b65      	ldr	r3, [pc, #404]	; (8001fd4 <pi_regulator_speed+0x1c4>)
 8001e40:	edc3 7a00 	vstr	s15, [r3]

	//Proportional part computation
	p_part_spd = error_spd*k_p_spd;
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <pi_regulator_speed+0x1c4>)
 8001e46:	ed93 7a00 	vldr	s14, [r3]
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <pi_regulator_speed+0x1c8>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <pi_regulator_speed+0x1cc>)
 8001e56:	edc3 7a00 	vstr	s15, [r3]
	if (p_part_spd > sat_out_spd)
 8001e5a:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <pi_regulator_speed+0x1b0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e66:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <pi_regulator_speed+0x1cc>)
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	d509      	bpl.n	8001e8a <pi_regulator_speed+0x7a>
	{
		p_part_spd = sat_out_spd;
 8001e76:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <pi_regulator_speed+0x1b0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e82:	4b56      	ldr	r3, [pc, #344]	; (8001fdc <pi_regulator_speed+0x1cc>)
 8001e84:	edc3 7a00 	vstr	s15, [r3]
 8001e88:	e018      	b.n	8001ebc <pi_regulator_speed+0xac>
	}
	else if(p_part_spd < -sat_out_spd)
 8001e8a:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <pi_regulator_speed+0x1b0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	425b      	negs	r3, r3
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e98:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <pi_regulator_speed+0x1cc>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	dd09      	ble.n	8001ebc <pi_regulator_speed+0xac>
	{
		p_part_spd = -sat_out_spd;
 8001ea8:	4b45      	ldr	r3, [pc, #276]	; (8001fc0 <pi_regulator_speed+0x1b0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	425b      	negs	r3, r3
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb6:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <pi_regulator_speed+0x1cc>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
	}

	//Integral part computation
	i_part_spd += error_spd*k_i_spd;
 8001ebc:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <pi_regulator_speed+0x1c4>)
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <pi_regulator_speed+0x1d0>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ecc:	4b45      	ldr	r3, [pc, #276]	; (8001fe4 <pi_regulator_speed+0x1d4>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed6:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <pi_regulator_speed+0x1d4>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
	if (i_part_spd > sat_i_part_spd)
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <pi_regulator_speed+0x1b8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <pi_regulator_speed+0x1d4>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	d509      	bpl.n	8001f0c <pi_regulator_speed+0xfc>
	{
		i_part_spd = sat_i_part_spd;
 8001ef8:	4b33      	ldr	r3, [pc, #204]	; (8001fc8 <pi_regulator_speed+0x1b8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f04:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <pi_regulator_speed+0x1d4>)
 8001f06:	edc3 7a00 	vstr	s15, [r3]
 8001f0a:	e018      	b.n	8001f3e <pi_regulator_speed+0x12e>
	}
	else if(i_part_spd < -sat_i_part_spd)
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <pi_regulator_speed+0x1b8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	425b      	negs	r3, r3
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <pi_regulator_speed+0x1d4>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f28:	dd09      	ble.n	8001f3e <pi_regulator_speed+0x12e>
	{
		i_part_spd = -sat_i_part_spd;
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <pi_regulator_speed+0x1b8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	425b      	negs	r3, r3
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <pi_regulator_speed+0x1d4>)
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
	}

	//Output
	i_q_ref = p_part_spd + i_part_spd;
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <pi_regulator_speed+0x1cc>)
 8001f40:	ed93 7a00 	vldr	s14, [r3]
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <pi_regulator_speed+0x1d4>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <pi_regulator_speed+0x1d8>)
 8001f50:	edc3 7a00 	vstr	s15, [r3]

	if (i_q_ref > sat_out_spd)
 8001f54:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <pi_regulator_speed+0x1b0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <pi_regulator_speed+0x1d8>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	d509      	bpl.n	8001f84 <pi_regulator_speed+0x174>
	{
		i_q_ref = sat_out_spd;
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <pi_regulator_speed+0x1b0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <pi_regulator_speed+0x1d8>)
 8001f7e:	edc3 7a00 	vstr	s15, [r3]
 8001f82:	e018      	b.n	8001fb6 <pi_regulator_speed+0x1a6>
	}
	else if(u_q_ref < -sat_out_spd)
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <pi_regulator_speed+0x1b0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	425b      	negs	r3, r3
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <pi_regulator_speed+0x1dc>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	dd09      	ble.n	8001fb6 <pi_regulator_speed+0x1a6>
	{
		i_q_ref = -sat_out_spd;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <pi_regulator_speed+0x1b0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	425b      	negs	r3, r3
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <pi_regulator_speed+0x1d8>)
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	1ffe8828 	.word	0x1ffe8828
 8001fc4:	66666667 	.word	0x66666667
 8001fc8:	1fff0718 	.word	0x1fff0718
 8001fcc:	1ffe887c 	.word	0x1ffe887c
 8001fd0:	1ffe8858 	.word	0x1ffe8858
 8001fd4:	1ffe8868 	.word	0x1ffe8868
 8001fd8:	1ffe8814 	.word	0x1ffe8814
 8001fdc:	1ffe888c 	.word	0x1ffe888c
 8001fe0:	1ffe8818 	.word	0x1ffe8818
 8001fe4:	1ffe889c 	.word	0x1ffe889c
 8001fe8:	1ffe8870 	.word	0x1ffe8870
 8001fec:	1ffe8880 	.word	0x1ffe8880

08001ff0 <pi_regulator_pos>:
void pi_regulator_pos (void)				//mechanical_position_fast -> spd_ref
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
	sat_i_part_pos = sat_out_pos/10;
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <pi_regulator_pos+0x1b0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a6a      	ldr	r2, [pc, #424]	; (80021a4 <pi_regulator_pos+0x1b4>)
 8001ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8001ffe:	1092      	asrs	r2, r2, #2
 8002000:	17db      	asrs	r3, r3, #31
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4a68      	ldr	r2, [pc, #416]	; (80021a8 <pi_regulator_pos+0x1b8>)
 8002006:	6013      	str	r3, [r2, #0]
	error_pos = pos_ref - mechanical_position_fast;
 8002008:	4b68      	ldr	r3, [pc, #416]	; (80021ac <pi_regulator_pos+0x1bc>)
 800200a:	ed93 7a00 	vldr	s14, [r3]
 800200e:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <pi_regulator_pos+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201e:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <pi_regulator_pos+0x1c4>)
 8002020:	edc3 7a00 	vstr	s15, [r3]

	//Proportional part computation
	p_part_pos = error_pos*k_p_pos;
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <pi_regulator_pos+0x1c4>)
 8002026:	ed93 7a00 	vldr	s14, [r3]
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <pi_regulator_pos+0x1c8>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002034:	4b61      	ldr	r3, [pc, #388]	; (80021bc <pi_regulator_pos+0x1cc>)
 8002036:	edc3 7a00 	vstr	s15, [r3]
	if (p_part_pos > sat_out_pos)
 800203a:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <pi_regulator_pos+0x1b0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <pi_regulator_pos+0x1cc>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002054:	d509      	bpl.n	800206a <pi_regulator_pos+0x7a>
	{
		p_part_pos = sat_out_pos;
 8002056:	4b52      	ldr	r3, [pc, #328]	; (80021a0 <pi_regulator_pos+0x1b0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002062:	4b56      	ldr	r3, [pc, #344]	; (80021bc <pi_regulator_pos+0x1cc>)
 8002064:	edc3 7a00 	vstr	s15, [r3]
 8002068:	e018      	b.n	800209c <pi_regulator_pos+0xac>
	}
	else if(p_part_pos < -sat_out_pos)
 800206a:	4b4d      	ldr	r3, [pc, #308]	; (80021a0 <pi_regulator_pos+0x1b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	425b      	negs	r3, r3
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <pi_regulator_pos+0x1cc>)
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	dd09      	ble.n	800209c <pi_regulator_pos+0xac>
	{
		p_part_pos = -sat_out_pos;
 8002088:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <pi_regulator_pos+0x1b0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	425b      	negs	r3, r3
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002096:	4b49      	ldr	r3, [pc, #292]	; (80021bc <pi_regulator_pos+0x1cc>)
 8002098:	edc3 7a00 	vstr	s15, [r3]
	}

	//Integral part computation
	i_part_pos += error_pos*k_i_pos;
 800209c:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <pi_regulator_pos+0x1c4>)
 800209e:	ed93 7a00 	vldr	s14, [r3]
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <pi_regulator_pos+0x1d0>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ac:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <pi_regulator_pos+0x1d4>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b6:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <pi_regulator_pos+0x1d4>)
 80020b8:	edc3 7a00 	vstr	s15, [r3]
	if (i_part_pos > sat_i_part_pos)
 80020bc:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <pi_regulator_pos+0x1b8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c8:	4b3e      	ldr	r3, [pc, #248]	; (80021c4 <pi_regulator_pos+0x1d4>)
 80020ca:	edd3 7a00 	vldr	s15, [r3]
 80020ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	d509      	bpl.n	80020ec <pi_regulator_pos+0xfc>
	{
		i_part_pos = sat_i_part_pos;
 80020d8:	4b33      	ldr	r3, [pc, #204]	; (80021a8 <pi_regulator_pos+0x1b8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <pi_regulator_pos+0x1d4>)
 80020e6:	edc3 7a00 	vstr	s15, [r3]
 80020ea:	e018      	b.n	800211e <pi_regulator_pos+0x12e>
	}
	else if(i_part_pos < -sat_i_part_pos)
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <pi_regulator_pos+0x1b8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	425b      	negs	r3, r3
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020fa:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <pi_regulator_pos+0x1d4>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	dd09      	ble.n	800211e <pi_regulator_pos+0x12e>
	{
		i_part_pos = -sat_i_part_pos;
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <pi_regulator_pos+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	425b      	negs	r3, r3
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <pi_regulator_pos+0x1d4>)
 800211a:	edc3 7a00 	vstr	s15, [r3]
	}

	//Output
		spd_ref = p_part_pos + i_part_pos;
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <pi_regulator_pos+0x1cc>)
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <pi_regulator_pos+0x1d4>)
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <pi_regulator_pos+0x1d8>)
 8002130:	edc3 7a00 	vstr	s15, [r3]

		if (spd_ref > sat_out_pos)
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <pi_regulator_pos+0x1b0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <pi_regulator_pos+0x1d8>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214e:	d509      	bpl.n	8002164 <pi_regulator_pos+0x174>
		{
			spd_ref = sat_out_pos;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <pi_regulator_pos+0x1b0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	ee07 3a90 	vmov	s15, r3
 8002158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <pi_regulator_pos+0x1d8>)
 800215e:	edc3 7a00 	vstr	s15, [r3]
 8002162:	e018      	b.n	8002196 <pi_regulator_pos+0x1a6>
		}
		else if(spd_ref < -sat_out_pos)
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <pi_regulator_pos+0x1b0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	425b      	negs	r3, r3
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <pi_regulator_pos+0x1d8>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002180:	dd09      	ble.n	8002196 <pi_regulator_pos+0x1a6>
		{
			spd_ref = -sat_out_pos;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <pi_regulator_pos+0x1b0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	425b      	negs	r3, r3
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <pi_regulator_pos+0x1d8>)
 8002192:	edc3 7a00 	vstr	s15, [r3]
		}

}
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	1ffe882c 	.word	0x1ffe882c
 80021a4:	66666667 	.word	0x66666667
 80021a8:	1fff071c 	.word	0x1fff071c
 80021ac:	1ffe8878 	.word	0x1ffe8878
 80021b0:	1fff06c8 	.word	0x1fff06c8
 80021b4:	1ffe886c 	.word	0x1ffe886c
 80021b8:	1ffe881c 	.word	0x1ffe881c
 80021bc:	1ffe8890 	.word	0x1ffe8890
 80021c0:	1ffe8820 	.word	0x1ffe8820
 80021c4:	1ffe88a0 	.word	0x1ffe88a0
 80021c8:	1ffe887c 	.word	0x1ffe887c

080021cc <ProbeScope_Init>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Init (uint32_t  sampling_clk_hz)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    static  CPU_INT32U  temp = 0;


    ProbeScope_Ch1.En             = 0;
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <ProbeScope_Init+0xe8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
#if PROBE_SCOPE_MAX_CH >= 2       
    ProbeScope_Ch2.En             = 0;
 80021da:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <ProbeScope_Init+0xec>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 3       
    ProbeScope_Ch3.En             = 0;
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <ProbeScope_Init+0xf0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 4       
    ProbeScope_Ch4.En             = 0;
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <ProbeScope_Init+0xf4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 5       
    ProbeScope_Ch5.En             = 0;
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <ProbeScope_Init+0xf8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 6       
    ProbeScope_Ch6.En             = 0;
 80021f2:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <ProbeScope_Init+0xfc>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 7       
    ProbeScope_Ch7.En             = 0;
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <ProbeScope_Init+0x100>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 8       
    ProbeScope_Ch8.En             = 0;
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <ProbeScope_Init+0x104>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
#endif

    ProbeScope_Mode               = PROBE_SCOPE_MODE_OFF;
 8002204:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <ProbeScope_Init+0x108>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
    ProbeScope_State              = PROBE_SCOPE_STATE_START;
 800220a:	4b33      	ldr	r3, [pc, #204]	; (80022d8 <ProbeScope_Init+0x10c>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
    ProbeScope_TrigChSel          = PROBE_SCOPE_CH1;                         // Default trigger channel
 8002210:	4b32      	ldr	r3, [pc, #200]	; (80022dc <ProbeScope_Init+0x110>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
    ProbeScope_SampleIxPrev       = 0;
 8002216:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <ProbeScope_Init+0x114>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
    ProbeScope_SampleIxCur        = 0;
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <ProbeScope_Init+0x118>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigFlag           = 0;
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <ProbeScope_Init+0x11c>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigDispPos        = 0;
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <ProbeScope_Init+0x120>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOff        = 0;
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <ProbeScope_Init+0x124>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOffCtr     = 0;
 8002234:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <ProbeScope_Init+0x128>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
    ProbeScope_DataRdyFlag        = 0;
 800223a:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <ProbeScope_Init+0x12c>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
    ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <ProbeScope_Init+0x120>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <ProbeScope_Init+0x130>)
 8002246:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES;
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <ProbeScope_Init+0x134>)
 800224a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800224e:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigSlope          = PROBE_SCOPE_TRIG_POS;                    // We assume a positive going signal by default
 8002250:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <ProbeScope_Init+0x138>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]
    temp                          = ProbeScopeDbg_MaxSamples;
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <ProbeScope_Init+0x13c>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <ProbeScope_Init+0x140>)
 8002260:	601a      	str	r2, [r3, #0]
    temp                         += ProbeScopeDbg_MaxCh;
 8002262:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <ProbeScope_Init+0x144>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <ProbeScope_Init+0x140>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a26      	ldr	r2, [pc, #152]	; (800230c <ProbeScope_Init+0x140>)
 8002272:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_16BitEn;
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <ProbeScope_Init+0x148>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <ProbeScope_Init+0x140>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4413      	add	r3, r2
 800227e:	4a23      	ldr	r2, [pc, #140]	; (800230c <ProbeScope_Init+0x140>)
 8002280:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_32BitEn;
 8002282:	4b25      	ldr	r3, [pc, #148]	; (8002318 <ProbeScope_Init+0x14c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <ProbeScope_Init+0x140>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <ProbeScope_Init+0x140>)
 800228e:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplingClkDiv     =    1;
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <ProbeScope_Init+0x150>)
 8002292:	2201      	movs	r2, #1
 8002294:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkDivCtr  =    0;
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <ProbeScope_Init+0x154>)
 8002298:	2200      	movs	r2, #0
 800229a:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkHz      = sampling_clk_hz;
 800229c:	4a21      	ldr	r2, [pc, #132]	; (8002324 <ProbeScope_Init+0x158>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
    ProbeScope_InitFlag           =    1;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <ProbeScope_Init+0x15c>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
}
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	1ffe88a4 	.word	0x1ffe88a4
 80022b8:	1ffe985c 	.word	0x1ffe985c
 80022bc:	1ffea814 	.word	0x1ffea814
 80022c0:	1ffeb7cc 	.word	0x1ffeb7cc
 80022c4:	1ffec784 	.word	0x1ffec784
 80022c8:	1ffed73c 	.word	0x1ffed73c
 80022cc:	1ffee6f4 	.word	0x1ffee6f4
 80022d0:	1ffef6ac 	.word	0x1ffef6ac
 80022d4:	1fff0664 	.word	0x1fff0664
 80022d8:	1fff0684 	.word	0x1fff0684
 80022dc:	1fff0665 	.word	0x1fff0665
 80022e0:	1fff0670 	.word	0x1fff0670
 80022e4:	1fff0674 	.word	0x1fff0674
 80022e8:	1fff0728 	.word	0x1fff0728
 80022ec:	1fff0734 	.word	0x1fff0734
 80022f0:	1fff0738 	.word	0x1fff0738
 80022f4:	1fff0668 	.word	0x1fff0668
 80022f8:	1fff0740 	.word	0x1fff0740
 80022fc:	1fff0678 	.word	0x1fff0678
 8002300:	1fff067c 	.word	0x1fff067c
 8002304:	1fff066c 	.word	0x1fff066c
 8002308:	1ffe8830 	.word	0x1ffe8830
 800230c:	1fff0688 	.word	0x1fff0688
 8002310:	1ffe8832 	.word	0x1ffe8832
 8002314:	1ffe8834 	.word	0x1ffe8834
 8002318:	1ffe8838 	.word	0x1ffe8838
 800231c:	1fff0680 	.word	0x1fff0680
 8002320:	1fff0682 	.word	0x1fff0682
 8002324:	1fff072c 	.word	0x1fff072c
 8002328:	1fff073c 	.word	0x1fff073c

0800232c <ProbeScope_Sampling>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Sampling (void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
    switch (ProbeScope_Mode) {
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <ProbeScope_Sampling+0x40>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d817      	bhi.n	8002368 <ProbeScope_Sampling+0x3c>
 8002338:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <ProbeScope_Sampling+0x14>)
 800233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233e:	bf00      	nop
 8002340:	08002351 	.word	0x08002351
 8002344:	08002357 	.word	0x08002357
 8002348:	0800235d 	.word	0x0800235d
 800234c:	08002363 	.word	0x08002363
        case PROBE_SCOPE_MODE_OFF:
             ProbeScope_ModeOff();
 8002350:	f000 f80e 	bl	8002370 <ProbeScope_ModeOff>
             break;
 8002354:	e008      	b.n	8002368 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_SINGLE:
             ProbeScope_ModeTrig();
 8002356:	f000 f85d 	bl	8002414 <ProbeScope_ModeTrig>
             break;
 800235a:	e005      	b.n	8002368 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_CONTINUOUS:
             ProbeScope_ModeContinuous();
 800235c:	f000 f81c 	bl	8002398 <ProbeScope_ModeContinuous>
             break;
 8002360:	e002      	b.n	8002368 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_TRIG:
             ProbeScope_ModeTrig(); 
 8002362:	f000 f857 	bl	8002414 <ProbeScope_ModeTrig>
             break;
 8002366:	bf00      	nop
    }
}
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	1fff0664 	.word	0x1fff0664

08002370 <ProbeScope_ModeOff>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeOff (void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                // Force Triggered mode state to START
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <ProbeScope_ModeOff+0x20>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
    if (ProbeScope_SamplingClkDiv == 0) {
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <ProbeScope_ModeOff+0x24>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <ProbeScope_ModeOff+0x18>
        ProbeScope_SamplingClkDiv =  1;
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <ProbeScope_ModeOff+0x24>)
 8002384:	2201      	movs	r2, #1
 8002386:	801a      	strh	r2, [r3, #0]
    }
}
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	1fff0684 	.word	0x1fff0684
 8002394:	1fff0680 	.word	0x1fff0680

08002398 <ProbeScope_ModeContinuous>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeContinuous (void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
    if (ProbeScope_DataRdyFlag == 0) {                                          // Read one buffer's worth of data
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <ProbeScope_ModeContinuous+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d126      	bne.n	80023f2 <ProbeScope_ModeContinuous+0x5a>
        ProbeScope_TrigFlag = 0;
 80023a4:	4b16      	ldr	r3, [pc, #88]	; (8002400 <ProbeScope_ModeContinuous+0x68>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
        if (ProbeScope_SamplingClkDivCtr > 1) {
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <ProbeScope_ModeContinuous+0x6c>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d906      	bls.n	80023c0 <ProbeScope_ModeContinuous+0x28>
            ProbeScope_SamplingClkDivCtr--;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <ProbeScope_ModeContinuous+0x6c>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <ProbeScope_ModeContinuous+0x6c>)
 80023bc:	801a      	strh	r2, [r3, #0]
 80023be:	e018      	b.n	80023f2 <ProbeScope_ModeContinuous+0x5a>
        } else {
            if (ProbeScope_SamplingClkDiv == 0) {                               // Make sure clock divider is not 0
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <ProbeScope_ModeContinuous+0x70>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <ProbeScope_ModeContinuous+0x36>
                ProbeScope_SamplingClkDiv =  1;
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <ProbeScope_ModeContinuous+0x70>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	801a      	strh	r2, [r3, #0]
            }
            ProbeScope_SamplingClkDivCtr  = ProbeScope_SamplingClkDiv;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <ProbeScope_ModeContinuous+0x70>)
 80023d0:	881a      	ldrh	r2, [r3, #0]
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <ProbeScope_ModeContinuous+0x6c>)
 80023d4:	801a      	strh	r2, [r3, #0]
            ProbeScope_SampleChAll();                                           // Get the first sample to create a 'previous' value for triggering
 80023d6:	f000 f8e5 	bl	80025a4 <ProbeScope_SampleChAll>
            ProbeScope_SamplePosNext();                                         // Position to next sample
 80023da:	f000 fa0b 	bl	80027f4 <ProbeScope_SamplePosNext>
            if (ProbeScope_SampleIxCur == 0) {                                  // Read one buffer's worth of data
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <ProbeScope_ModeContinuous+0x74>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <ProbeScope_ModeContinuous+0x5a>
                ProbeScope_DataRdyFlag = 1;   
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <ProbeScope_ModeContinuous+0x64>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
                ProbeScope_TrigFlag    = 1;
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <ProbeScope_ModeContinuous+0x68>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
            }
        }
    }
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                 // Force Triggered mode state to START
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <ProbeScope_ModeContinuous+0x78>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
}
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	1fff0740 	.word	0x1fff0740
 8002400:	1fff0728 	.word	0x1fff0728
 8002404:	1fff0682 	.word	0x1fff0682
 8002408:	1fff0680 	.word	0x1fff0680
 800240c:	1fff0674 	.word	0x1fff0674
 8002410:	1fff0684 	.word	0x1fff0684

08002414 <ProbeScope_ModeTrig>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeTrig (void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
    if (ProbeScope_SamplingClkDivCtr > 1) {
 8002418:	4b55      	ldr	r3, [pc, #340]	; (8002570 <ProbeScope_ModeTrig+0x15c>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d906      	bls.n	800242e <ProbeScope_ModeTrig+0x1a>
        ProbeScope_SamplingClkDivCtr--;
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <ProbeScope_ModeTrig+0x15c>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	4b51      	ldr	r3, [pc, #324]	; (8002570 <ProbeScope_ModeTrig+0x15c>)
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	e09e      	b.n	800256c <ProbeScope_ModeTrig+0x158>
    } else { 
        if (ProbeScope_SamplingClkDiv == 0) {                                        // Make sure clock divider is not 0
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <ProbeScope_ModeTrig+0x160>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <ProbeScope_ModeTrig+0x28>
            ProbeScope_SamplingClkDiv =  1;
 8002436:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <ProbeScope_ModeTrig+0x160>)
 8002438:	2201      	movs	r2, #1
 800243a:	801a      	strh	r2, [r3, #0]
        }
        ProbeScope_SamplingClkDivCtr = ProbeScope_SamplingClkDiv;
 800243c:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <ProbeScope_ModeTrig+0x160>)
 800243e:	881a      	ldrh	r2, [r3, #0]
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <ProbeScope_ModeTrig+0x15c>)
 8002442:	801a      	strh	r2, [r3, #0]
        switch (ProbeScope_State) {
 8002444:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <ProbeScope_ModeTrig+0x164>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b03      	cmp	r3, #3
 800244a:	f200 808b 	bhi.w	8002564 <ProbeScope_ModeTrig+0x150>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <ProbeScope_ModeTrig+0x40>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	08002465 	.word	0x08002465
 8002458:	080024a1 	.word	0x080024a1
 800245c:	080024e1 	.word	0x080024e1
 8002460:	08002529 	.word	0x08002529
            case PROBE_SCOPE_STATE_START:
                 ProbeScope_DataRdyFlag        = 0;
 8002464:	4b45      	ldr	r3, [pc, #276]	; (800257c <ProbeScope_ModeTrig+0x168>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigFlag           = 0;
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <ProbeScope_ModeTrig+0x16c>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxPrev       = 0;
 8002470:	4b44      	ldr	r3, [pc, #272]	; (8002584 <ProbeScope_ModeTrig+0x170>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxCur        = 0;
 8002476:	4b44      	ldr	r3, [pc, #272]	; (8002588 <ProbeScope_ModeTrig+0x174>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigHoldOffCtr     = 0;
 800247c:	4b43      	ldr	r3, [pc, #268]	; (800258c <ProbeScope_ModeTrig+0x178>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPostTrigCtr = 0;
 8002482:	4b43      	ldr	r3, [pc, #268]	; (8002590 <ProbeScope_ModeTrig+0x17c>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;            // Minimum number of samples pre-trigger
 8002488:	4b42      	ldr	r3, [pc, #264]	; (8002594 <ProbeScope_ModeTrig+0x180>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a42      	ldr	r2, [pc, #264]	; (8002598 <ProbeScope_ModeTrig+0x184>)
 800248e:	6013      	str	r3, [r2, #0]
                 ProbeScope_SampleChAll();                                          // Get the first sample to create a 'previous' value for triggering
 8002490:	f000 f888 	bl	80025a4 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 8002494:	f000 f9ae 	bl	80027f4 <ProbeScope_SamplePosNext>
                 ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 8002498:	4b37      	ldr	r3, [pc, #220]	; (8002578 <ProbeScope_ModeTrig+0x164>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
                 break;
 800249e:	e065      	b.n	800256c <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 80024a0:	f000 f880 	bl	80025a4 <ProbeScope_SampleChAll>
                 if (ProbeScope_SamplesPreTrigCtr > 0) {                            // We need a minimum number of samples before the trigger
 80024a4:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <ProbeScope_ModeTrig+0x184>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <ProbeScope_ModeTrig+0xa4>
                     ProbeScope_SamplesPreTrigCtr--;                               
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <ProbeScope_ModeTrig+0x184>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	4a39      	ldr	r2, [pc, #228]	; (8002598 <ProbeScope_ModeTrig+0x184>)
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e001      	b.n	80024bc <ProbeScope_ModeTrig+0xa8>
                 } else {
                     ProbeScope_IsTrig();                                           // See if we detected the trigger
 80024b8:	f000 f9b8 	bl	800282c <ProbeScope_IsTrig>
                 }
                 ProbeScope_SamplePosNext();
 80024bc:	f000 f99a 	bl	80027f4 <ProbeScope_SamplePosNext>
                 if (ProbeScope_TrigFlag == 1) {                                    // Remaining number of samples to collect before data available
 80024c0:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <ProbeScope_ModeTrig+0x16c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10a      	bne.n	80024de <ProbeScope_ModeTrig+0xca>
                     ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES - ProbeScope_TrigDispPos - 2;  
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <ProbeScope_ModeTrig+0x180>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 80024d0:	3302      	adds	r3, #2
 80024d2:	4a2f      	ldr	r2, [pc, #188]	; (8002590 <ProbeScope_ModeTrig+0x17c>)
 80024d4:	6013      	str	r3, [r2, #0]
                     ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_POST_TRIG;
 80024d6:	4b28      	ldr	r3, [pc, #160]	; (8002578 <ProbeScope_ModeTrig+0x164>)
 80024d8:	2202      	movs	r2, #2
 80024da:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 80024dc:	e046      	b.n	800256c <ProbeScope_ModeTrig+0x158>
 80024de:	e045      	b.n	800256c <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_POST_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 80024e0:	f000 f860 	bl	80025a4 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 80024e4:	f000 f986 	bl	80027f4 <ProbeScope_SamplePosNext>
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
 80024e8:	4b29      	ldr	r3, [pc, #164]	; (8002590 <ProbeScope_ModeTrig+0x17c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <ProbeScope_ModeTrig+0xe8>
                     ProbeScope_SamplesPostTrigCtr--;
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <ProbeScope_ModeTrig+0x17c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4a26      	ldr	r2, [pc, #152]	; (8002590 <ProbeScope_ModeTrig+0x17c>)
 80024f8:	6013      	str	r3, [r2, #0]
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
                 }                                                                  
                 break;                                                             
 80024fa:	e037      	b.n	800256c <ProbeScope_ModeTrig+0x158>
                 ProbeScope_SampleChAll();                                          // Get the next sample
                 ProbeScope_SamplePosNext();
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
                     ProbeScope_SamplesPostTrigCtr--;
                 } else {
                     if (ProbeScope_Mode == PROBE_SCOPE_MODE_SINGLE) {
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <ProbeScope_ModeTrig+0x188>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <ProbeScope_ModeTrig+0xfe>
                         ProbeScope_Mode           = PROBE_SCOPE_MODE_OFF;
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <ProbeScope_ModeTrig+0x188>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_START;
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <ProbeScope_ModeTrig+0x164>)
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e006      	b.n	8002520 <ProbeScope_ModeTrig+0x10c>
                     } else {
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <ProbeScope_ModeTrig+0x18c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1d      	ldr	r2, [pc, #116]	; (800258c <ProbeScope_ModeTrig+0x178>)
 8002518:	6013      	str	r3, [r2, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <ProbeScope_ModeTrig+0x164>)
 800251c:	2203      	movs	r2, #3
 800251e:	701a      	strb	r2, [r3, #0]
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <ProbeScope_ModeTrig+0x168>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]
                 }                                                                  
                 break;                                                             
 8002526:	e021      	b.n	800256c <ProbeScope_ModeTrig+0x158>
                                                                                    
            case PROBE_SCOPE_STATE_DATA_RDY:                                        
                 if (ProbeScope_TrigHoldOffCtr > 0) {                               // Hold-off before beeing able to re-trigger
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <ProbeScope_ModeTrig+0x178>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <ProbeScope_ModeTrig+0x128>
                     ProbeScope_TrigHoldOffCtr--;                                   
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <ProbeScope_ModeTrig+0x178>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3b01      	subs	r3, #1
 8002536:	4a15      	ldr	r2, [pc, #84]	; (800258c <ProbeScope_ModeTrig+0x178>)
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e012      	b.n	8002562 <ProbeScope_ModeTrig+0x14e>
                 } else {                                                           
                     if (ProbeScope_DataRdyFlag == 0) {                             // Give Probe time to collect and display the waveform(s)
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <ProbeScope_ModeTrig+0x168>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10e      	bne.n	8002562 <ProbeScope_ModeTrig+0x14e>
                         ProbeScope_TrigFlag          = 0;
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <ProbeScope_ModeTrig+0x16c>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
                         ProbeScope_SamplesPreTrigCtr = ProbeScope_TrigDispPos;     // Minimum number of samples pre-trigger
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <ProbeScope_ModeTrig+0x180>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <ProbeScope_ModeTrig+0x184>)
 8002550:	6013      	str	r3, [r2, #0]
                         ProbeScope_State             = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <ProbeScope_ModeTrig+0x164>)
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
                         ProbeScope_SampleChAll();                                  // Get the first sample to create a 'previous' value for triggering
 8002558:	f000 f824 	bl	80025a4 <ProbeScope_SampleChAll>
                         ProbeScope_SamplePosNext();
 800255c:	f000 f94a 	bl	80027f4 <ProbeScope_SamplePosNext>
                     }
                 }
                 break;
 8002560:	e004      	b.n	800256c <ProbeScope_ModeTrig+0x158>
 8002562:	e003      	b.n	800256c <ProbeScope_ModeTrig+0x158>
                 
            default:
                 ProbeScope_State = PROBE_SCOPE_STATE_START;
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <ProbeScope_ModeTrig+0x164>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
                 break;
 800256a:	bf00      	nop
        }
    }
}
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	1fff0682 	.word	0x1fff0682
 8002574:	1fff0680 	.word	0x1fff0680
 8002578:	1fff0684 	.word	0x1fff0684
 800257c:	1fff0740 	.word	0x1fff0740
 8002580:	1fff0728 	.word	0x1fff0728
 8002584:	1fff0670 	.word	0x1fff0670
 8002588:	1fff0674 	.word	0x1fff0674
 800258c:	1fff0668 	.word	0x1fff0668
 8002590:	1fff067c 	.word	0x1fff067c
 8002594:	1fff0734 	.word	0x1fff0734
 8002598:	1fff0678 	.word	0x1fff0678
 800259c:	1fff0664 	.word	0x1fff0664
 80025a0:	1fff0738 	.word	0x1fff0738

080025a4 <ProbeScope_SampleChAll>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleChAll (void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
    ProbeScope_SampleCh(&ProbeScope_Ch1);
 80025a8:	480c      	ldr	r0, [pc, #48]	; (80025dc <ProbeScope_SampleChAll+0x38>)
 80025aa:	f000 f827 	bl	80025fc <ProbeScope_SampleCh>

#if PROBE_SCOPE_MAX_CH >= 2
    ProbeScope_SampleCh(&ProbeScope_Ch2);
 80025ae:	480c      	ldr	r0, [pc, #48]	; (80025e0 <ProbeScope_SampleChAll+0x3c>)
 80025b0:	f000 f824 	bl	80025fc <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 3                     
    ProbeScope_SampleCh(&ProbeScope_Ch3);
 80025b4:	480b      	ldr	r0, [pc, #44]	; (80025e4 <ProbeScope_SampleChAll+0x40>)
 80025b6:	f000 f821 	bl	80025fc <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 4                     
    ProbeScope_SampleCh(&ProbeScope_Ch4);
 80025ba:	480b      	ldr	r0, [pc, #44]	; (80025e8 <ProbeScope_SampleChAll+0x44>)
 80025bc:	f000 f81e 	bl	80025fc <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 5
    ProbeScope_SampleCh(&ProbeScope_Ch5);
 80025c0:	480a      	ldr	r0, [pc, #40]	; (80025ec <ProbeScope_SampleChAll+0x48>)
 80025c2:	f000 f81b 	bl	80025fc <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 6                     
    ProbeScope_SampleCh(&ProbeScope_Ch6);
 80025c6:	480a      	ldr	r0, [pc, #40]	; (80025f0 <ProbeScope_SampleChAll+0x4c>)
 80025c8:	f000 f818 	bl	80025fc <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 7                     
    ProbeScope_SampleCh(&ProbeScope_Ch7);
 80025cc:	4809      	ldr	r0, [pc, #36]	; (80025f4 <ProbeScope_SampleChAll+0x50>)
 80025ce:	f000 f815 	bl	80025fc <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 8                     
    ProbeScope_SampleCh(&ProbeScope_Ch8);
 80025d2:	4809      	ldr	r0, [pc, #36]	; (80025f8 <ProbeScope_SampleChAll+0x54>)
 80025d4:	f000 f812 	bl	80025fc <ProbeScope_SampleCh>
#endif                     
}
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	1ffe88a4 	.word	0x1ffe88a4
 80025e0:	1ffe985c 	.word	0x1ffe985c
 80025e4:	1ffea814 	.word	0x1ffea814
 80025e8:	1ffeb7cc 	.word	0x1ffeb7cc
 80025ec:	1ffec784 	.word	0x1ffec784
 80025f0:	1ffed73c 	.word	0x1ffed73c
 80025f4:	1ffee6f4 	.word	0x1ffee6f4
 80025f8:	1ffef6ac 	.word	0x1ffef6ac

080025fc <ProbeScope_SampleCh>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleCh (PROBE_SCOPE_CH  *p_ch)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
    PROBE_SCOPE_CH_SAMPLE   msk;                                    // Mask used to select desired bit when in bit mode.
    PROBE_SCOPE_CH_SAMPLE  *p_sample;                               // Pointer to where the sample will be stored


    if (p_ch->En == 1) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	f040 80eb 	bne.w	80027e4 <ProbeScope_SampleCh+0x1e8>
        p_sample = &p_ch->Samples[ProbeScope_SampleIxCur];          // Point to current position in sampling buffer
 800260e:	4b78      	ldr	r3, [pc, #480]	; (80027f0 <ProbeScope_SampleCh+0x1f4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3306      	adds	r3, #6
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
        switch (p_ch->DataType) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	791b      	ldrb	r3, [r3, #4]
 8002620:	2b06      	cmp	r3, #6
 8002622:	f200 80df 	bhi.w	80027e4 <ProbeScope_SampleCh+0x1e8>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <ProbeScope_SampleCh+0x30>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002649 	.word	0x08002649
 8002630:	0800268d 	.word	0x0800268d
 8002634:	080026d1 	.word	0x080026d1
 8002638:	08002715 	.word	0x08002715
 800263c:	08002759 	.word	0x08002759
 8002640:	08002799 	.word	0x08002799
 8002644:	080027d9 	.word	0x080027d9
            case PROBE_SCOPE_INT08U:
                 if (p_ch->BitEn == 0) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <ProbeScope_SampleCh+0x60>
                     p_sample->Val08U     = *(CPU_INT08U *)p_ch->DataAddr;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e016      	b.n	800268a <ProbeScope_SampleCh+0x8e>
                 } else {
                     msk.Val08U           =  (CPU_INT08U)1 << p_ch->BitSel;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7b1b      	ldrb	r3, [r3, #12]
 8002660:	461a      	mov	r2, r3
 8002662:	2301      	movs	r3, #1
 8002664:	4093      	lsls	r3, r2
 8002666:	b2db      	uxtb	r3, r3
 8002668:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08U *)p_ch->DataAddr & msk.Val08U) {
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	7a3b      	ldrb	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <ProbeScope_SampleCh+0x86>
                         p_sample->Val08U = 1;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e003      	b.n	800268a <ProbeScope_SampleCh+0x8e>
                     } else {
                         p_sample->Val08U = 0;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 8002688:	e0ac      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
 800268a:	e0ab      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT08S:
                 if (p_ch->BitEn == 0) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <ProbeScope_SampleCh+0xa4>
                     p_sample->Val08S     = *(CPU_INT08S *)p_ch->DataAddr;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e016      	b.n	80026ce <ProbeScope_SampleCh+0xd2>
                 } else {
                     msk.Val08S           =  (CPU_INT08S)1 << p_ch->BitSel;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7b1b      	ldrb	r3, [r3, #12]
 80026a4:	461a      	mov	r2, r3
 80026a6:	2301      	movs	r3, #1
 80026a8:	4093      	lsls	r3, r2
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08S *)p_ch->DataAddr & msk.Val08S) {
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	7a3b      	ldrb	r3, [r7, #8]
 80026b6:	4013      	ands	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <ProbeScope_SampleCh+0xca>
                         p_sample->Val08S = 1;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e003      	b.n	80026ce <ProbeScope_SampleCh+0xd2>
                     } else {
                         p_sample->Val08S = 0;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 80026cc:	e08a      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
 80026ce:	e089      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
                                  
#if PROBE_SCOPE_16_BIT_EN > 0                                   
            case PROBE_SCOPE_INT16U:
                 if (p_ch->BitEn == 0) {
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <ProbeScope_SampleCh+0xe8>
                     p_sample->Val16U     = *(CPU_INT16U *)p_ch->DataAddr;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	e016      	b.n	8002712 <ProbeScope_SampleCh+0x116>
                 } else {
                     msk.Val16U           =  (CPU_INT16U)1 << p_ch->BitSel;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7b1b      	ldrb	r3, [r3, #12]
 80026e8:	461a      	mov	r2, r3
 80026ea:	2301      	movs	r3, #1
 80026ec:	4093      	lsls	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16U *)p_ch->DataAddr & msk.Val16U) {
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	893b      	ldrh	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <ProbeScope_SampleCh+0x10e>
                         p_sample->Val16U = 1;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	801a      	strh	r2, [r3, #0]
 8002708:	e003      	b.n	8002712 <ProbeScope_SampleCh+0x116>
                     } else {
                         p_sample->Val16U = 0;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8002710:	e068      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
 8002712:	e067      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT16S:
                 if (p_ch->BitEn == 0) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <ProbeScope_SampleCh+0x12c>
                     p_sample->Val16S     = *(CPU_INT16S *)p_ch->DataAddr;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	e016      	b.n	8002756 <ProbeScope_SampleCh+0x15a>
                 } else {
                     msk.Val16S           =  (CPU_INT16S)1 << p_ch->BitSel;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7b1b      	ldrb	r3, [r3, #12]
 800272c:	461a      	mov	r2, r3
 800272e:	2301      	movs	r3, #1
 8002730:	4093      	lsls	r3, r2
 8002732:	b29b      	uxth	r3, r3
 8002734:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16S *)p_ch->DataAddr & msk.Val16S) {
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	893b      	ldrh	r3, [r7, #8]
 800273e:	4013      	ands	r3, r2
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <ProbeScope_SampleCh+0x152>
                         p_sample->Val16S = 1;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	e003      	b.n	8002756 <ProbeScope_SampleCh+0x15a>
                     } else {
                         p_sample->Val16S = 0;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8002754:	e046      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
 8002756:	e045      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
            case PROBE_SCOPE_INT32U:
                 if (p_ch->BitEn == 0) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <ProbeScope_SampleCh+0x170>
                     p_sample->Val32U     = *(CPU_INT32U *)p_ch->DataAddr;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e014      	b.n	8002796 <ProbeScope_SampleCh+0x19a>
                 } else {
                     msk.Val32U           =  (CPU_INT32U)1 << p_ch->BitSel;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7b1b      	ldrb	r3, [r3, #12]
 8002770:	461a      	mov	r2, r3
 8002772:	2301      	movs	r3, #1
 8002774:	4093      	lsls	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32U *)p_ch->DataAddr & msk.Val32U) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <ProbeScope_SampleCh+0x192>
                         p_sample->Val32U = 1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e003      	b.n	8002796 <ProbeScope_SampleCh+0x19a>
                     } else {
                         p_sample->Val32U = 0;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8002794:	e026      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
 8002796:	e025      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT32S:
                 if (p_ch->BitEn == 0) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <ProbeScope_SampleCh+0x1b0>
                     p_sample->Val32S     = *(CPU_INT32S *)p_ch->DataAddr;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e014      	b.n	80027d6 <ProbeScope_SampleCh+0x1da>
                 } else {
                     msk.Val32S           =  (CPU_INT32S)1 << p_ch->BitSel;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7b1b      	ldrb	r3, [r3, #12]
 80027b0:	461a      	mov	r2, r3
 80027b2:	2301      	movs	r3, #1
 80027b4:	4093      	lsls	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32S *)p_ch->DataAddr & msk.Val32S) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <ProbeScope_SampleCh+0x1d2>
                         p_sample->Val32S = 1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e003      	b.n	80027d6 <ProbeScope_SampleCh+0x1da>
                     } else {
                         p_sample->Val32S = 0;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 80027d4:	e006      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
 80027d6:	e005      	b.n	80027e4 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_FP32:
                 p_sample->ValFP32  = *(CPU_FP32   *)p_ch->DataAddr;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]
                 break;
 80027e2:	bf00      	nop
#endif
        }                          
    }
}
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	1fff0674 	.word	0x1fff0674

080027f4 <ProbeScope_SamplePosNext>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SamplePosNext (void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
    ProbeScope_SampleIxPrev = ProbeScope_SampleIxCur;              // Update the position of the previous sample
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <ProbeScope_SamplePosNext+0x30>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <ProbeScope_SamplePosNext+0x34>)
 80027fe:	6013      	str	r3, [r2, #0]
    ProbeScope_SampleIxCur++;                                      // Position to where next sample will be placed
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <ProbeScope_SamplePosNext+0x30>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	4a07      	ldr	r2, [pc, #28]	; (8002824 <ProbeScope_SamplePosNext+0x30>)
 8002808:	6013      	str	r3, [r2, #0]
    if (ProbeScope_SampleIxCur >= PROBE_SCOPE_MAX_SAMPLES) {       // See if we need to wrap around
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <ProbeScope_SamplePosNext+0x30>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002812:	d302      	bcc.n	800281a <ProbeScope_SamplePosNext+0x26>
        ProbeScope_SampleIxCur = 0;                                // yes
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <ProbeScope_SamplePosNext+0x30>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
    }
}
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	1fff0674 	.word	0x1fff0674
 8002828:	1fff0670 	.word	0x1fff0670

0800282c <ProbeScope_IsTrig>:
*              Sets ProbeScope_TrigFlag to 0 when no trigger is detected
************************************************************************************************************************
*/

static  void  ProbeScope_IsTrig (void)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
    PROBE_SCOPE_CH          *p_ch;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_prev;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_cur;
    

    switch (ProbeScope_TrigChSel) {
 8002832:	4b90      	ldr	r3, [pc, #576]	; (8002a74 <ProbeScope_IsTrig+0x248>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3b01      	subs	r3, #1
 8002838:	2b07      	cmp	r3, #7
 800283a:	d82b      	bhi.n	8002894 <ProbeScope_IsTrig+0x68>
 800283c:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <ProbeScope_IsTrig+0x18>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002865 	.word	0x08002865
 8002848:	0800286b 	.word	0x0800286b
 800284c:	08002871 	.word	0x08002871
 8002850:	08002877 	.word	0x08002877
 8002854:	0800287d 	.word	0x0800287d
 8002858:	08002883 	.word	0x08002883
 800285c:	08002889 	.word	0x08002889
 8002860:	0800288f 	.word	0x0800288f
        case PROBE_SCOPE_CH1:
             p_ch = &ProbeScope_Ch1;
 8002864:	4b84      	ldr	r3, [pc, #528]	; (8002a78 <ProbeScope_IsTrig+0x24c>)
 8002866:	60fb      	str	r3, [r7, #12]
             break;
 8002868:	e01a      	b.n	80028a0 <ProbeScope_IsTrig+0x74>
             
#if PROBE_SCOPE_MAX_CH >= 2
        case PROBE_SCOPE_CH2:
             p_ch = &ProbeScope_Ch2;
 800286a:	4b84      	ldr	r3, [pc, #528]	; (8002a7c <ProbeScope_IsTrig+0x250>)
 800286c:	60fb      	str	r3, [r7, #12]
             break;
 800286e:	e017      	b.n	80028a0 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 3
        case PROBE_SCOPE_CH3:
             p_ch = &ProbeScope_Ch3;
 8002870:	4b83      	ldr	r3, [pc, #524]	; (8002a80 <ProbeScope_IsTrig+0x254>)
 8002872:	60fb      	str	r3, [r7, #12]
             break;
 8002874:	e014      	b.n	80028a0 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 4
        case PROBE_SCOPE_CH4:
             p_ch = &ProbeScope_Ch4;
 8002876:	4b83      	ldr	r3, [pc, #524]	; (8002a84 <ProbeScope_IsTrig+0x258>)
 8002878:	60fb      	str	r3, [r7, #12]
             break;
 800287a:	e011      	b.n	80028a0 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 5
        case PROBE_SCOPE_CH5:
             p_ch = &ProbeScope_Ch5;
 800287c:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <ProbeScope_IsTrig+0x25c>)
 800287e:	60fb      	str	r3, [r7, #12]
             break;
 8002880:	e00e      	b.n	80028a0 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 6
        case PROBE_SCOPE_CH6:
             p_ch = &ProbeScope_Ch6;
 8002882:	4b82      	ldr	r3, [pc, #520]	; (8002a8c <ProbeScope_IsTrig+0x260>)
 8002884:	60fb      	str	r3, [r7, #12]
             break;
 8002886:	e00b      	b.n	80028a0 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 7
        case PROBE_SCOPE_CH7:
             p_ch = &ProbeScope_Ch7;
 8002888:	4b81      	ldr	r3, [pc, #516]	; (8002a90 <ProbeScope_IsTrig+0x264>)
 800288a:	60fb      	str	r3, [r7, #12]
             break;
 800288c:	e008      	b.n	80028a0 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 8
        case PROBE_SCOPE_CH8:
             p_ch = &ProbeScope_Ch8;
 800288e:	4b81      	ldr	r3, [pc, #516]	; (8002a94 <ProbeScope_IsTrig+0x268>)
 8002890:	60fb      	str	r3, [r7, #12]
             break;
 8002892:	e005      	b.n	80028a0 <ProbeScope_IsTrig+0x74>
#endif
             
        default:
             p_ch                 = &ProbeScope_Ch1;
 8002894:	4b78      	ldr	r3, [pc, #480]	; (8002a78 <ProbeScope_IsTrig+0x24c>)
 8002896:	60fb      	str	r3, [r7, #12]
             ProbeScope_TrigChSel = PROBE_SCOPE_CH1;
 8002898:	4b76      	ldr	r3, [pc, #472]	; (8002a74 <ProbeScope_IsTrig+0x248>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
             break;
 800289e:	bf00      	nop
    }         
    ProbeScope_TrigFlag = 0;
 80028a0:	4b7d      	ldr	r3, [pc, #500]	; (8002a98 <ProbeScope_IsTrig+0x26c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
    if (p_ch->En == 1) {
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 8308 	bne.w	8002ec0 <ProbeScope_IsTrig+0x694>
        p_sample_prev = &p_ch->Samples[ProbeScope_SampleIxPrev];          // Point to previous position in sampling buffer
 80028b0:	4b7a      	ldr	r3, [pc, #488]	; (8002a9c <ProbeScope_IsTrig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3306      	adds	r3, #6
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	60bb      	str	r3, [r7, #8]
        p_sample_cur  = &p_ch->Samples[ProbeScope_SampleIxCur];           // Point to current  position in sampling buffer
 80028be:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <ProbeScope_IsTrig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3306      	adds	r3, #6
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	607b      	str	r3, [r7, #4]
        if (ProbeScope_TrigSlope == PROBE_SCOPE_TRIG_POS) {
 80028cc:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <ProbeScope_IsTrig+0x278>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	f040 8187 	bne.w	8002be4 <ProbeScope_IsTrig+0x3b8>
            switch (p_ch->DataType) {
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	791b      	ldrb	r3, [r3, #4]
 80028da:	2b06      	cmp	r3, #6
 80028dc:	f200 82f0 	bhi.w	8002ec0 <ProbeScope_IsTrig+0x694>
 80028e0:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <ProbeScope_IsTrig+0xbc>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	08002905 	.word	0x08002905
 80028ec:	08002963 	.word	0x08002963
 80028f0:	080029cd 	.word	0x080029cd
 80028f4:	08002a2b 	.word	0x08002a2b
 80028f8:	08002acf 	.word	0x08002acf
 80028fc:	08002b2d 	.word	0x08002b2d
 8002900:	08002b8b 	.word	0x08002b8b
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d119      	bne.n	8002940 <ProbeScope_IsTrig+0x114>
                         if (p_sample_prev->Val08U < p_sample_cur->Val08U) {
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d223      	bcs.n	8002960 <ProbeScope_IsTrig+0x134>
                             if (p_sample_prev->Val08U <= p_ch->TrigLevel.Val08U) {
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	7d1b      	ldrb	r3, [r3, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	d81d      	bhi.n	8002960 <ProbeScope_IsTrig+0x134>
                                 if (p_sample_cur->Val08U >= p_ch->TrigLevel.Val08U) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	7d1b      	ldrb	r3, [r3, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	d317      	bcc.n	8002960 <ProbeScope_IsTrig+0x134>
                                     ProbeScope_TrigFlag = 1;
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <ProbeScope_IsTrig+0x26c>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002936:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <ProbeScope_IsTrig+0x274>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a5b      	ldr	r2, [pc, #364]	; (8002aa8 <ProbeScope_IsTrig+0x27c>)
 800293c:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800293e:	e150      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U == 0) {
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10b      	bne.n	8002960 <ProbeScope_IsTrig+0x134>
                             if (p_sample_cur->Val08U != 0) { 
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <ProbeScope_IsTrig+0x134>
                                 ProbeScope_TrigFlag = 1;
 8002950:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <ProbeScope_IsTrig+0x26c>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002956:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <ProbeScope_IsTrig+0x274>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a53      	ldr	r2, [pc, #332]	; (8002aa8 <ProbeScope_IsTrig+0x27c>)
 800295c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800295e:	e140      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
 8002960:	e13f      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d11f      	bne.n	80029aa <ProbeScope_IsTrig+0x17e>
                         if (p_sample_prev->Val08S < p_sample_cur->Val08S) {
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b252      	sxtb	r2, r2
 8002974:	b25b      	sxtb	r3, r3
 8002976:	429a      	cmp	r2, r3
 8002978:	da27      	bge.n	80029ca <ProbeScope_IsTrig+0x19e>
                             if (p_sample_prev->Val08S <= p_ch->TrigLevel.Val08S) {
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	7d1b      	ldrb	r3, [r3, #20]
 8002982:	b252      	sxtb	r2, r2
 8002984:	b25b      	sxtb	r3, r3
 8002986:	429a      	cmp	r2, r3
 8002988:	dc1f      	bgt.n	80029ca <ProbeScope_IsTrig+0x19e>
                                 if (p_sample_cur->Val08S >= p_ch->TrigLevel.Val08S) {
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	7d1b      	ldrb	r3, [r3, #20]
 8002992:	b252      	sxtb	r2, r2
 8002994:	b25b      	sxtb	r3, r3
 8002996:	429a      	cmp	r2, r3
 8002998:	db17      	blt.n	80029ca <ProbeScope_IsTrig+0x19e>
                                     ProbeScope_TrigFlag = 1;
 800299a:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <ProbeScope_IsTrig+0x26c>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80029a0:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <ProbeScope_IsTrig+0x274>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a40      	ldr	r2, [pc, #256]	; (8002aa8 <ProbeScope_IsTrig+0x27c>)
 80029a6:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80029a8:	e11b      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S == 0) {
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10b      	bne.n	80029ca <ProbeScope_IsTrig+0x19e>
                             if (p_sample_cur->Val08S != 0) { 
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <ProbeScope_IsTrig+0x19e>
                                 ProbeScope_TrigFlag = 1;
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <ProbeScope_IsTrig+0x26c>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <ProbeScope_IsTrig+0x274>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <ProbeScope_IsTrig+0x27c>)
 80029c6:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80029c8:	e10b      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
 80029ca:	e10a      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>

#if PROBE_SCOPE_16_BIT_EN > 0                                    
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d119      	bne.n	8002a08 <ProbeScope_IsTrig+0x1dc>
                         if (p_sample_prev->Val16U < p_sample_cur->Val16U) {
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d223      	bcs.n	8002a28 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_prev->Val16U <= p_ch->TrigLevel.Val16U) {
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	881a      	ldrh	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8a9b      	ldrh	r3, [r3, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d81d      	bhi.n	8002a28 <ProbeScope_IsTrig+0x1fc>
                                 if (p_sample_cur->Val16U >= p_ch->TrigLevel.Val16U) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	881a      	ldrh	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8a9b      	ldrh	r3, [r3, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d317      	bcc.n	8002a28 <ProbeScope_IsTrig+0x1fc>
                                     ProbeScope_TrigFlag = 1;
 80029f8:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <ProbeScope_IsTrig+0x26c>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80029fe:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <ProbeScope_IsTrig+0x274>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <ProbeScope_IsTrig+0x27c>)
 8002a04:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002a06:	e0ec      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U == 0) {
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_cur->Val16U != 0) { 
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <ProbeScope_IsTrig+0x1fc>
                                 ProbeScope_TrigFlag = 1;
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <ProbeScope_IsTrig+0x26c>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <ProbeScope_IsTrig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <ProbeScope_IsTrig+0x27c>)
 8002a24:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002a26:	e0dc      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
 8002a28:	e0db      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d13c      	bne.n	8002aac <ProbeScope_IsTrig+0x280>
                         if (p_sample_prev->Val16S < p_sample_cur->Val16S) {
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b212      	sxth	r2, r2
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	da44      	bge.n	8002acc <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_prev->Val16S <= p_ch->TrigLevel.Val16S) {
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8a9b      	ldrh	r3, [r3, #20]
 8002a4a:	b212      	sxth	r2, r2
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	dc3c      	bgt.n	8002acc <ProbeScope_IsTrig+0x2a0>
                                 if (p_sample_cur->Val16S >= p_ch->TrigLevel.Val16S) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8a9b      	ldrh	r3, [r3, #20]
 8002a5a:	b212      	sxth	r2, r2
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	db34      	blt.n	8002acc <ProbeScope_IsTrig+0x2a0>
                                     ProbeScope_TrigFlag = 1;
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <ProbeScope_IsTrig+0x26c>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <ProbeScope_IsTrig+0x274>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <ProbeScope_IsTrig+0x27c>)
 8002a6e:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002a70:	e0b7      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
 8002a72:	bf00      	nop
 8002a74:	1fff0665 	.word	0x1fff0665
 8002a78:	1ffe88a4 	.word	0x1ffe88a4
 8002a7c:	1ffe985c 	.word	0x1ffe985c
 8002a80:	1ffea814 	.word	0x1ffea814
 8002a84:	1ffeb7cc 	.word	0x1ffeb7cc
 8002a88:	1ffec784 	.word	0x1ffec784
 8002a8c:	1ffed73c 	.word	0x1ffed73c
 8002a90:	1ffee6f4 	.word	0x1ffee6f4
 8002a94:	1ffef6ac 	.word	0x1ffef6ac
 8002a98:	1fff0728 	.word	0x1fff0728
 8002a9c:	1fff0670 	.word	0x1fff0670
 8002aa0:	1fff0674 	.word	0x1fff0674
 8002aa4:	1fff066c 	.word	0x1fff066c
 8002aa8:	1fff0730 	.word	0x1fff0730
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S == 0) {
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_cur->Val16S != 0) { 
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <ProbeScope_IsTrig+0x2a0>
                                 ProbeScope_TrigFlag = 1;
 8002abc:	4b86      	ldr	r3, [pc, #536]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002ac2:	4b86      	ldr	r3, [pc, #536]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a86      	ldr	r2, [pc, #536]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002ac8:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002aca:	e08a      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
 8002acc:	e089      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d119      	bne.n	8002b0a <ProbeScope_IsTrig+0x2de>
                         if (p_sample_prev->Val32U < p_sample_cur->Val32U) {
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d223      	bcs.n	8002b2a <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_prev->Val32U <= p_ch->TrigLevel.Val32U) {
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d81d      	bhi.n	8002b2a <ProbeScope_IsTrig+0x2fe>
                                 if (p_sample_cur->Val32U >= p_ch->TrigLevel.Val32U) {
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d317      	bcc.n	8002b2a <ProbeScope_IsTrig+0x2fe>
                                     ProbeScope_TrigFlag = 1;
 8002afa:	4b77      	ldr	r3, [pc, #476]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002b00:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a76      	ldr	r2, [pc, #472]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002b06:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002b08:	e06b      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U == 0) {
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10b      	bne.n	8002b2a <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_cur->Val32U != 0) {
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <ProbeScope_IsTrig+0x2fe>
                                 ProbeScope_TrigFlag = 1;
 8002b1a:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002b20:	4b6e      	ldr	r3, [pc, #440]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6e      	ldr	r2, [pc, #440]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002b26:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002b28:	e05b      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
 8002b2a:	e05a      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d119      	bne.n	8002b68 <ProbeScope_IsTrig+0x33c>
                         if (p_sample_prev->Val32S < p_sample_cur->Val32S) {
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	da23      	bge.n	8002b88 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_prev->Val32S <= p_ch->TrigLevel.Val32S) {
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	dc1d      	bgt.n	8002b88 <ProbeScope_IsTrig+0x35c>
                                 if (p_sample_cur->Val32S >= p_ch->TrigLevel.Val32S) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	db17      	blt.n	8002b88 <ProbeScope_IsTrig+0x35c>
                                     ProbeScope_TrigFlag = 1;
 8002b58:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002b5e:	4b5f      	ldr	r3, [pc, #380]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a5f      	ldr	r2, [pc, #380]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002b64:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002b66:	e03c      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S == 0) {
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10b      	bne.n	8002b88 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_cur->Val32S != 0) {
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <ProbeScope_IsTrig+0x35c>
                                 ProbeScope_TrigFlag = 1;
 8002b78:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002b7e:	4b57      	ldr	r3, [pc, #348]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a57      	ldr	r2, [pc, #348]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002b84:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002b86:	e02c      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
 8002b88:	e02b      	b.n	8002be2 <ProbeScope_IsTrig+0x3b6>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	ed93 7a00 	vldr	s14, [r3]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	d400      	bmi.n	8002ba2 <ProbeScope_IsTrig+0x376>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002ba0:	e01e      	b.n	8002be0 <ProbeScope_IsTrig+0x3b4>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d900      	bls.n	8002bba <ProbeScope_IsTrig+0x38e>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002bb8:	e012      	b.n	8002be0 <ProbeScope_IsTrig+0x3b4>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	ed93 7a00 	vldr	s14, [r3]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	da00      	bge.n	8002bd2 <ProbeScope_IsTrig+0x3a6>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002bd0:	e006      	b.n	8002be0 <ProbeScope_IsTrig+0x3b4>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002bd8:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a40      	ldr	r2, [pc, #256]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002bde:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002be0:	bf00      	nop
 8002be2:	e16d      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
#endif
            }
        } else {
            switch (p_ch->DataType) {
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	791b      	ldrb	r3, [r3, #4]
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	f200 8169 	bhi.w	8002ec0 <ProbeScope_IsTrig+0x694>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <ProbeScope_IsTrig+0x3c8>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c11 	.word	0x08002c11
 8002bf8:	08002c6f 	.word	0x08002c6f
 8002bfc:	08002ce5 	.word	0x08002ce5
 8002c00:	08002d43 	.word	0x08002d43
 8002c04:	08002dad 	.word	0x08002dad
 8002c08:	08002e0b 	.word	0x08002e0b
 8002c0c:	08002e69 	.word	0x08002e69
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d119      	bne.n	8002c4c <ProbeScope_IsTrig+0x420>
                         if (p_sample_prev->Val08U > p_sample_cur->Val08U) {
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d923      	bls.n	8002c6c <ProbeScope_IsTrig+0x440>
                             if (p_sample_prev->Val08U >= p_ch->TrigLevel.Val08U) {
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	7d1b      	ldrb	r3, [r3, #20]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d31d      	bcc.n	8002c6c <ProbeScope_IsTrig+0x440>
                                 if (p_sample_cur->Val08U <= p_ch->TrigLevel.Val08U) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	7d1b      	ldrb	r3, [r3, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d817      	bhi.n	8002c6c <ProbeScope_IsTrig+0x440>
                                     ProbeScope_TrigFlag = 1;
 8002c3c:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002c48:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002c4a:	e139      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U != 0) {
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <ProbeScope_IsTrig+0x440>
                             if (p_sample_cur->Val08U == 0) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <ProbeScope_IsTrig+0x440>
                                 ProbeScope_TrigFlag = 1;
 8002c5c:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002c62:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002c68:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002c6a:	e129      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
 8002c6c:	e128      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11f      	bne.n	8002cb6 <ProbeScope_IsTrig+0x48a>
                         if (p_sample_prev->Val08S > p_sample_cur->Val08S) {
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b252      	sxtb	r2, r2
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	429a      	cmp	r2, r3
 8002c84:	dd27      	ble.n	8002cd6 <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_prev->Val08S >= p_ch->TrigLevel.Val08S) {
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	7d1b      	ldrb	r3, [r3, #20]
 8002c8e:	b252      	sxtb	r2, r2
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	429a      	cmp	r2, r3
 8002c94:	db1f      	blt.n	8002cd6 <ProbeScope_IsTrig+0x4aa>
                                 if (p_sample_cur->Val08S <= p_ch->TrigLevel.Val08S) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	7d1b      	ldrb	r3, [r3, #20]
 8002c9e:	b252      	sxtb	r2, r2
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	dc17      	bgt.n	8002cd6 <ProbeScope_IsTrig+0x4aa>
                                     ProbeScope_TrigFlag = 1;
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002cb2:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002cb4:	e104      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S != 0) {
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_cur->Val08S == 0) {
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d107      	bne.n	8002cd6 <ProbeScope_IsTrig+0x4aa>
                                 ProbeScope_TrigFlag = 1;
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <ProbeScope_IsTrig+0x4ac>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <ProbeScope_IsTrig+0x4b0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <ProbeScope_IsTrig+0x4b4>)
 8002cd2:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002cd4:	e0f4      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
 8002cd6:	e0f3      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
 8002cd8:	1fff0728 	.word	0x1fff0728
 8002cdc:	1fff0674 	.word	0x1fff0674
 8002ce0:	1fff0730 	.word	0x1fff0730
                                    
#if PROBE_SCOPE_16_BIT_EN > 0                                   
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d119      	bne.n	8002d20 <ProbeScope_IsTrig+0x4f4>
                         if (p_sample_prev->Val16U > p_sample_cur->Val16U) {
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	881a      	ldrh	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d923      	bls.n	8002d40 <ProbeScope_IsTrig+0x514>
                             if (p_sample_prev->Val16U >= p_ch->TrigLevel.Val16U) {
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8a9b      	ldrh	r3, [r3, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d31d      	bcc.n	8002d40 <ProbeScope_IsTrig+0x514>
                                 if (p_sample_cur->Val16U <= p_ch->TrigLevel.Val16U) {
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8a9b      	ldrh	r3, [r3, #20]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d817      	bhi.n	8002d40 <ProbeScope_IsTrig+0x514>
                                     ProbeScope_TrigFlag = 1;
 8002d10:	4b6e      	ldr	r3, [pc, #440]	; (8002ecc <ProbeScope_IsTrig+0x6a0>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002d16:	4b6e      	ldr	r3, [pc, #440]	; (8002ed0 <ProbeScope_IsTrig+0x6a4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6e      	ldr	r2, [pc, #440]	; (8002ed4 <ProbeScope_IsTrig+0x6a8>)
 8002d1c:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002d1e:	e0cf      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U != 0) {
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <ProbeScope_IsTrig+0x514>
                             if (p_sample_cur->Val16U == 0) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <ProbeScope_IsTrig+0x514>
                                 ProbeScope_TrigFlag = 1;
 8002d30:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <ProbeScope_IsTrig+0x6a0>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002d36:	4b66      	ldr	r3, [pc, #408]	; (8002ed0 <ProbeScope_IsTrig+0x6a4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a66      	ldr	r2, [pc, #408]	; (8002ed4 <ProbeScope_IsTrig+0x6a8>)
 8002d3c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002d3e:	e0bf      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
 8002d40:	e0be      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11f      	bne.n	8002d8a <ProbeScope_IsTrig+0x55e>
                         if (p_sample_prev->Val16S > p_sample_cur->Val16S) {
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b212      	sxth	r2, r2
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	429a      	cmp	r2, r3
 8002d58:	dd27      	ble.n	8002daa <ProbeScope_IsTrig+0x57e>
                             if (p_sample_prev->Val16S >= p_ch->TrigLevel.Val16S) {
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	881a      	ldrh	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8a9b      	ldrh	r3, [r3, #20]
 8002d62:	b212      	sxth	r2, r2
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	429a      	cmp	r2, r3
 8002d68:	db1f      	blt.n	8002daa <ProbeScope_IsTrig+0x57e>
                                 if (p_sample_cur->Val16S <= p_ch->TrigLevel.Val16S) {
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	881a      	ldrh	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8a9b      	ldrh	r3, [r3, #20]
 8002d72:	b212      	sxth	r2, r2
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	429a      	cmp	r2, r3
 8002d78:	dc17      	bgt.n	8002daa <ProbeScope_IsTrig+0x57e>
                                     ProbeScope_TrigFlag = 1;
 8002d7a:	4b54      	ldr	r3, [pc, #336]	; (8002ecc <ProbeScope_IsTrig+0x6a0>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <ProbeScope_IsTrig+0x6a4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a53      	ldr	r2, [pc, #332]	; (8002ed4 <ProbeScope_IsTrig+0x6a8>)
 8002d86:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002d88:	e09a      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S != 0) {
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <ProbeScope_IsTrig+0x57e>
                             if (p_sample_cur->Val16S == 0) {
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <ProbeScope_IsTrig+0x57e>
                                 ProbeScope_TrigFlag = 1;
 8002d9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <ProbeScope_IsTrig+0x6a0>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002da0:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <ProbeScope_IsTrig+0x6a4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a4b      	ldr	r2, [pc, #300]	; (8002ed4 <ProbeScope_IsTrig+0x6a8>)
 8002da6:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002da8:	e08a      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
 8002daa:	e089      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                                                     
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d119      	bne.n	8002de8 <ProbeScope_IsTrig+0x5bc>
                         if (p_sample_prev->Val32U > p_sample_cur->Val32U) {                  
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d923      	bls.n	8002e08 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_prev->Val32U >= p_ch->TrigLevel.Val32U) {
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d31d      	bcc.n	8002e08 <ProbeScope_IsTrig+0x5dc>
                                 if (p_sample_cur->Val32U <= p_ch->TrigLevel.Val32U) {
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d817      	bhi.n	8002e08 <ProbeScope_IsTrig+0x5dc>
                                     ProbeScope_TrigFlag = 1;
 8002dd8:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <ProbeScope_IsTrig+0x6a0>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002dde:	4b3c      	ldr	r3, [pc, #240]	; (8002ed0 <ProbeScope_IsTrig+0x6a4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a3c      	ldr	r2, [pc, #240]	; (8002ed4 <ProbeScope_IsTrig+0x6a8>)
 8002de4:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002de6:	e06b      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U != 0) {
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00b      	beq.n	8002e08 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_cur->Val32U == 0) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <ProbeScope_IsTrig+0x5dc>
                                 ProbeScope_TrigFlag = 1;
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <ProbeScope_IsTrig+0x6a0>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002dfe:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <ProbeScope_IsTrig+0x6a4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a34      	ldr	r2, [pc, #208]	; (8002ed4 <ProbeScope_IsTrig+0x6a8>)
 8002e04:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002e06:	e05b      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
 8002e08:	e05a      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d119      	bne.n	8002e46 <ProbeScope_IsTrig+0x61a>
                         if (p_sample_prev->Val32S > p_sample_cur->Val32S) {
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	dd23      	ble.n	8002e66 <ProbeScope_IsTrig+0x63a>
                             if (p_sample_prev->Val32S >= p_ch->TrigLevel.Val32S) {
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	db1d      	blt.n	8002e66 <ProbeScope_IsTrig+0x63a>
                                 if (p_sample_cur->Val32S <= p_ch->TrigLevel.Val32S) {
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	dc17      	bgt.n	8002e66 <ProbeScope_IsTrig+0x63a>
                                     ProbeScope_TrigFlag = 1;
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <ProbeScope_IsTrig+0x6a0>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002e3c:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <ProbeScope_IsTrig+0x6a4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <ProbeScope_IsTrig+0x6a8>)
 8002e42:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002e44:	e03c      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S != 0) {
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <ProbeScope_IsTrig+0x63a>
                             if (p_sample_cur->Val32S == 0) {
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <ProbeScope_IsTrig+0x63a>
                                 ProbeScope_TrigFlag = 1;
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <ProbeScope_IsTrig+0x6a0>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002e5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <ProbeScope_IsTrig+0x6a4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1c      	ldr	r2, [pc, #112]	; (8002ed4 <ProbeScope_IsTrig+0x6a8>)
 8002e62:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002e64:	e02c      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
 8002e66:	e02b      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	ed93 7a00 	vldr	s14, [r3]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	dc00      	bgt.n	8002e80 <ProbeScope_IsTrig+0x654>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002e7e:	e01f      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	ed93 7a00 	vldr	s14, [r3]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e94:	da00      	bge.n	8002e98 <ProbeScope_IsTrig+0x66c>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002e96:	e013      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	ed93 7a00 	vldr	s14, [r3]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	d900      	bls.n	8002eb0 <ProbeScope_IsTrig+0x684>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8002eae:	e007      	b.n	8002ec0 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <ProbeScope_IsTrig+0x6a0>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <ProbeScope_IsTrig+0x6a4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a06      	ldr	r2, [pc, #24]	; (8002ed4 <ProbeScope_IsTrig+0x6a8>)
 8002ebc:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8002ebe:	bf00      	nop
#endif                     
            }                          
        }
    }
}
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	1fff0728 	.word	0x1fff0728
 8002ed0:	1fff0674 	.word	0x1fff0674
 8002ed4:	1fff0730 	.word	0x1fff0730

08002ed8 <reference_generator_compute>:

ref_type ref_type_select = 0;


void reference_generator_compute (void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
	switch (ref_type_select)
 8002edc:	4b97      	ldr	r3, [pc, #604]	; (800313c <reference_generator_compute+0x264>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	f200 8106 	bhi.w	80030f2 <reference_generator_compute+0x21a>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <reference_generator_compute+0x14>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f81 	.word	0x08002f81
 8002ef4:	08003003 	.word	0x08003003
 8002ef8:	08003077 	.word	0x08003077
	{
	case(REF_POS):
			high_level = rotation_input * 2000;
 8002efc:	4b90      	ldr	r3, [pc, #576]	; (8003140 <reference_generator_compute+0x268>)
 8002efe:	edd3 7a00 	vldr	s15, [r3]
 8002f02:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003144 <reference_generator_compute+0x26c>
 8002f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f0e:	ee17 2a90 	vmov	r2, s15
 8002f12:	4b8d      	ldr	r3, [pc, #564]	; (8003148 <reference_generator_compute+0x270>)
 8002f14:	601a      	str	r2, [r3, #0]
			high_level_time = time_high_input_s * 1000;
 8002f16:	4b8d      	ldr	r3, [pc, #564]	; (800314c <reference_generator_compute+0x274>)
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003150 <reference_generator_compute+0x278>
 8002f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f28:	ee17 2a90 	vmov	r2, s15
 8002f2c:	4b89      	ldr	r3, [pc, #548]	; (8003154 <reference_generator_compute+0x27c>)
 8002f2e:	601a      	str	r2, [r3, #0]
			low_level_time = time_low_input_s * 1000;
 8002f30:	4b89      	ldr	r3, [pc, #548]	; (8003158 <reference_generator_compute+0x280>)
 8002f32:	edd3 7a00 	vldr	s15, [r3]
 8002f36:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003150 <reference_generator_compute+0x278>
 8002f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f42:	ee17 2a90 	vmov	r2, s15
 8002f46:	4b85      	ldr	r3, [pc, #532]	; (800315c <reference_generator_compute+0x284>)
 8002f48:	601a      	str	r2, [r3, #0]
			rise_time = time_rise_input_s * 1000;
 8002f4a:	4b85      	ldr	r3, [pc, #532]	; (8003160 <reference_generator_compute+0x288>)
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003150 <reference_generator_compute+0x278>
 8002f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f5c:	ee17 2a90 	vmov	r2, s15
 8002f60:	4b80      	ldr	r3, [pc, #512]	; (8003164 <reference_generator_compute+0x28c>)
 8002f62:	601a      	str	r2, [r3, #0]
			fall_time = time_fall_input_s * 1000;
 8002f64:	4b80      	ldr	r3, [pc, #512]	; (8003168 <reference_generator_compute+0x290>)
 8002f66:	edd3 7a00 	vldr	s15, [r3]
 8002f6a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003150 <reference_generator_compute+0x278>
 8002f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f76:	ee17 2a90 	vmov	r2, s15
 8002f7a:	4b7c      	ldr	r3, [pc, #496]	; (800316c <reference_generator_compute+0x294>)
 8002f7c:	601a      	str	r2, [r3, #0]
			break;
 8002f7e:	e0b9      	b.n	80030f4 <reference_generator_compute+0x21c>
	case(REF_SPD):
			rise_time = time_rise_input_s * 1000;
 8002f80:	4b77      	ldr	r3, [pc, #476]	; (8003160 <reference_generator_compute+0x288>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003150 <reference_generator_compute+0x278>
 8002f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f92:	ee17 2a90 	vmov	r2, s15
 8002f96:	4b73      	ldr	r3, [pc, #460]	; (8003164 <reference_generator_compute+0x28c>)
 8002f98:	601a      	str	r2, [r3, #0]
			fall_time = rise_time;
 8002f9a:	4b72      	ldr	r3, [pc, #456]	; (8003164 <reference_generator_compute+0x28c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a73      	ldr	r2, [pc, #460]	; (800316c <reference_generator_compute+0x294>)
 8002fa0:	6013      	str	r3, [r2, #0]
			high_level = rpm_input/30 * rise_time;
 8002fa2:	4b73      	ldr	r3, [pc, #460]	; (8003170 <reference_generator_compute+0x298>)
 8002fa4:	edd3 7a00 	vldr	s15, [r3]
 8002fa8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x3e
 8002fac:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8002fb0:	4b6c      	ldr	r3, [pc, #432]	; (8003164 <reference_generator_compute+0x28c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc4:	ee17 2a90 	vmov	r2, s15
 8002fc8:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <reference_generator_compute+0x270>)
 8002fca:	601a      	str	r2, [r3, #0]
			high_level_time = time_high_input_s * 1000;
 8002fcc:	4b5f      	ldr	r3, [pc, #380]	; (800314c <reference_generator_compute+0x274>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003150 <reference_generator_compute+0x278>
 8002fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fde:	ee17 2a90 	vmov	r2, s15
 8002fe2:	4b5c      	ldr	r3, [pc, #368]	; (8003154 <reference_generator_compute+0x27c>)
 8002fe4:	601a      	str	r2, [r3, #0]
			low_level_time = time_low_input_s * 1000;
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <reference_generator_compute+0x280>)
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003150 <reference_generator_compute+0x278>
 8002ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ff8:	ee17 2a90 	vmov	r2, s15
 8002ffc:	4b57      	ldr	r3, [pc, #348]	; (800315c <reference_generator_compute+0x284>)
 8002ffe:	601a      	str	r2, [r3, #0]
			break;
 8003000:	e078      	b.n	80030f4 <reference_generator_compute+0x21c>
	case(REF_I):
			high_level = current_input;
 8003002:	4b5c      	ldr	r3, [pc, #368]	; (8003174 <reference_generator_compute+0x29c>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b21b      	sxth	r3, r3
 8003008:	4a4f      	ldr	r2, [pc, #316]	; (8003148 <reference_generator_compute+0x270>)
 800300a:	6013      	str	r3, [r2, #0]
			high_level_time = time_high_input_s * 1000;
 800300c:	4b4f      	ldr	r3, [pc, #316]	; (800314c <reference_generator_compute+0x274>)
 800300e:	edd3 7a00 	vldr	s15, [r3]
 8003012:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003150 <reference_generator_compute+0x278>
 8003016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800301a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800301e:	ee17 2a90 	vmov	r2, s15
 8003022:	4b4c      	ldr	r3, [pc, #304]	; (8003154 <reference_generator_compute+0x27c>)
 8003024:	601a      	str	r2, [r3, #0]
			low_level_time = time_low_input_s * 1000;
 8003026:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <reference_generator_compute+0x280>)
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003150 <reference_generator_compute+0x278>
 8003030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003038:	ee17 2a90 	vmov	r2, s15
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <reference_generator_compute+0x284>)
 800303e:	601a      	str	r2, [r3, #0]
			rise_time = time_rise_input_s * 1000;
 8003040:	4b47      	ldr	r3, [pc, #284]	; (8003160 <reference_generator_compute+0x288>)
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003150 <reference_generator_compute+0x278>
 800304a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800304e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003052:	ee17 2a90 	vmov	r2, s15
 8003056:	4b43      	ldr	r3, [pc, #268]	; (8003164 <reference_generator_compute+0x28c>)
 8003058:	601a      	str	r2, [r3, #0]
			fall_time = time_fall_input_s * 1000;
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <reference_generator_compute+0x290>)
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003150 <reference_generator_compute+0x278>
 8003064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800306c:	ee17 2a90 	vmov	r2, s15
 8003070:	4b3e      	ldr	r3, [pc, #248]	; (800316c <reference_generator_compute+0x294>)
 8003072:	601a      	str	r2, [r3, #0]
			break;
 8003074:	e03e      	b.n	80030f4 <reference_generator_compute+0x21c>
	case(REF_U):
			high_level = voltage_input;
 8003076:	4b40      	ldr	r3, [pc, #256]	; (8003178 <reference_generator_compute+0x2a0>)
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b21b      	sxth	r3, r3
 800307c:	4a32      	ldr	r2, [pc, #200]	; (8003148 <reference_generator_compute+0x270>)
 800307e:	6013      	str	r3, [r2, #0]
			high_level_time = time_high_input_s * 1000;
 8003080:	4b32      	ldr	r3, [pc, #200]	; (800314c <reference_generator_compute+0x274>)
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003150 <reference_generator_compute+0x278>
 800308a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003092:	ee17 2a90 	vmov	r2, s15
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <reference_generator_compute+0x27c>)
 8003098:	601a      	str	r2, [r3, #0]
			low_level_time = time_low_input_s * 1000;
 800309a:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <reference_generator_compute+0x280>)
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003150 <reference_generator_compute+0x278>
 80030a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ac:	ee17 2a90 	vmov	r2, s15
 80030b0:	4b2a      	ldr	r3, [pc, #168]	; (800315c <reference_generator_compute+0x284>)
 80030b2:	601a      	str	r2, [r3, #0]
			rise_time = time_rise_input_s * 1000;
 80030b4:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <reference_generator_compute+0x288>)
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003150 <reference_generator_compute+0x278>
 80030be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c6:	ee17 2a90 	vmov	r2, s15
 80030ca:	4b26      	ldr	r3, [pc, #152]	; (8003164 <reference_generator_compute+0x28c>)
 80030cc:	601a      	str	r2, [r3, #0]
			fall_time = time_fall_input_s * 1000;
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <reference_generator_compute+0x290>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003150 <reference_generator_compute+0x278>
 80030d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e0:	ee17 2a90 	vmov	r2, s15
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <reference_generator_compute+0x294>)
 80030e6:	601a      	str	r2, [r3, #0]
			u_q_ref = reference;
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <reference_generator_compute+0x2a4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a24      	ldr	r2, [pc, #144]	; (8003180 <reference_generator_compute+0x2a8>)
 80030ee:	6013      	str	r3, [r2, #0]
			break;
 80030f0:	e000      	b.n	80030f4 <reference_generator_compute+0x21c>
	default:
		break;
 80030f2:	bf00      	nop
	}

	rise_increment = high_level/rise_time;
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <reference_generator_compute+0x270>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <reference_generator_compute+0x28c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8003100:	4a20      	ldr	r2, [pc, #128]	; (8003184 <reference_generator_compute+0x2ac>)
 8003102:	6013      	str	r3, [r2, #0]
	fall_decrement = high_level/fall_time;
 8003104:	4b10      	ldr	r3, [pc, #64]	; (8003148 <reference_generator_compute+0x270>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <reference_generator_compute+0x294>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <reference_generator_compute+0x2b0>)
 8003112:	6013      	str	r3, [r2, #0]
	reference = 0;
 8003114:	4b19      	ldr	r3, [pc, #100]	; (800317c <reference_generator_compute+0x2a4>)
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
	reference_old = 0;
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <reference_generator_compute+0x2b4>)
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003124:	b672      	cpsid	i



	//************************************* Move it to drive_commands
	__disable_irq();
	interrupt_counter_ref_gen = 0;
 8003126:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <reference_generator_compute+0x2b8>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800312c:	b662      	cpsie	i
	__enable_irq();
	ref_gen_status = STATUS_1_RISE;
 800312e:	4b19      	ldr	r3, [pc, #100]	; (8003194 <reference_generator_compute+0x2bc>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
	//*************************************
}
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	1fff06b8 	.word	0x1fff06b8
 8003140:	1fff06ac 	.word	0x1fff06ac
 8003144:	44fa0000 	.word	0x44fa0000
 8003148:	1fff0758 	.word	0x1fff0758
 800314c:	1fff069c 	.word	0x1fff069c
 8003150:	447a0000 	.word	0x447a0000
 8003154:	1fff0748 	.word	0x1fff0748
 8003158:	1fff06a0 	.word	0x1fff06a0
 800315c:	1fff0754 	.word	0x1fff0754
 8003160:	1fff0694 	.word	0x1fff0694
 8003164:	1fff0750 	.word	0x1fff0750
 8003168:	1fff0698 	.word	0x1fff0698
 800316c:	1fff0760 	.word	0x1fff0760
 8003170:	1fff06a8 	.word	0x1fff06a8
 8003174:	1fff06a4 	.word	0x1fff06a4
 8003178:	1fff06a6 	.word	0x1fff06a6
 800317c:	1fff06b0 	.word	0x1fff06b0
 8003180:	1ffe8880 	.word	0x1ffe8880
 8003184:	1fff0744 	.word	0x1fff0744
 8003188:	1fff075c 	.word	0x1fff075c
 800318c:	1fff06b4 	.word	0x1fff06b4
 8003190:	1fff068c 	.word	0x1fff068c
 8003194:	1fff0690 	.word	0x1fff0690

08003198 <reference_generator>:

void reference_generator (void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
	switch(ref_gen_status)
 800319c:	4b57      	ldr	r3, [pc, #348]	; (80032fc <reference_generator+0x164>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d876      	bhi.n	8003294 <reference_generator+0xfc>
 80031a6:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <reference_generator+0x14>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031bd 	.word	0x080031bd
 80031b0:	080031f5 	.word	0x080031f5
 80031b4:	08003213 	.word	0x08003213
 80031b8:	0800324b 	.word	0x0800324b
	{
	case (STATUS_1_RISE):
			if (interrupt_counter_ref_gen >= rise_time)
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <reference_generator+0x168>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b50      	ldr	r3, [pc, #320]	; (8003304 <reference_generator+0x16c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d805      	bhi.n	80031d6 <reference_generator+0x3e>
			{
				ref_gen_status = STATUS_2_HIGH_LEVEL;
 80031ca:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <reference_generator+0x164>)
 80031cc:	2202      	movs	r2, #2
 80031ce:	701a      	strb	r2, [r3, #0]
				interrupt_counter_ref_gen = 0;
 80031d0:	4b4c      	ldr	r3, [pc, #304]	; (8003304 <reference_generator+0x16c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
			}
				reference += rise_increment;
 80031d6:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <reference_generator+0x170>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031e2:	4b4a      	ldr	r3, [pc, #296]	; (800330c <reference_generator+0x174>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	4b47      	ldr	r3, [pc, #284]	; (800330c <reference_generator+0x174>)
 80031ee:	edc3 7a00 	vstr	s15, [r3]

			break;
 80031f2:	e050      	b.n	8003296 <reference_generator+0xfe>

	case (STATUS_2_HIGH_LEVEL):
			if (interrupt_counter_ref_gen >= high_level_time)
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <reference_generator+0x178>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b42      	ldr	r3, [pc, #264]	; (8003304 <reference_generator+0x16c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d806      	bhi.n	8003210 <reference_generator+0x78>
			{
				ref_gen_status = STATUS_3_FALL;
 8003202:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <reference_generator+0x164>)
 8003204:	2203      	movs	r2, #3
 8003206:	701a      	strb	r2, [r3, #0]
				interrupt_counter_ref_gen = 0;
 8003208:	4b3e      	ldr	r3, [pc, #248]	; (8003304 <reference_generator+0x16c>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
			}
			break;
 800320e:	e042      	b.n	8003296 <reference_generator+0xfe>
 8003210:	e041      	b.n	8003296 <reference_generator+0xfe>

	case (STATUS_3_FALL):
			if (interrupt_counter_ref_gen >= fall_time)
 8003212:	4b40      	ldr	r3, [pc, #256]	; (8003314 <reference_generator+0x17c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <reference_generator+0x16c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d805      	bhi.n	800322c <reference_generator+0x94>
			{
				ref_gen_status = STATUS_4_LOW_LEVEL;
 8003220:	4b36      	ldr	r3, [pc, #216]	; (80032fc <reference_generator+0x164>)
 8003222:	2204      	movs	r2, #4
 8003224:	701a      	strb	r2, [r3, #0]
				interrupt_counter_ref_gen = 0;
 8003226:	4b37      	ldr	r3, [pc, #220]	; (8003304 <reference_generator+0x16c>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
			}
				reference -= fall_decrement;
 800322c:	4b37      	ldr	r3, [pc, #220]	; (800330c <reference_generator+0x174>)
 800322e:	ed93 7a00 	vldr	s14, [r3]
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <reference_generator+0x180>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800323e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003242:	4b32      	ldr	r3, [pc, #200]	; (800330c <reference_generator+0x174>)
 8003244:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003248:	e025      	b.n	8003296 <reference_generator+0xfe>

	case (STATUS_4_LOW_LEVEL):
			if ((interrupt_counter_ref_gen >= low_level_time) && (repeat_motion == 0))
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <reference_generator+0x184>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <reference_generator+0x16c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d80a      	bhi.n	800326e <reference_generator+0xd6>
 8003258:	4b31      	ldr	r3, [pc, #196]	; (8003320 <reference_generator+0x188>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <reference_generator+0xd6>
			{
				ref_gen_status = STATUS_0_DISABLED;
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <reference_generator+0x164>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
				interrupt_counter_ref_gen = 0;
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <reference_generator+0x16c>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e011      	b.n	8003292 <reference_generator+0xfa>
			}
			else if ((interrupt_counter_ref_gen >= low_level_time) && (repeat_motion == 1))
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <reference_generator+0x184>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <reference_generator+0x16c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d80a      	bhi.n	8003292 <reference_generator+0xfa>
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <reference_generator+0x188>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d106      	bne.n	8003292 <reference_generator+0xfa>
			{
				ref_gen_status = STATUS_1_RISE;
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <reference_generator+0x164>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
				interrupt_counter_ref_gen = 0;
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <reference_generator+0x16c>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
			}
			break;
 8003290:	e001      	b.n	8003296 <reference_generator+0xfe>
 8003292:	e000      	b.n	8003296 <reference_generator+0xfe>

	default:
		break;
 8003294:	bf00      	nop
	}

	switch (ref_type_select)
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <reference_generator+0x18c>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d829      	bhi.n	80032f2 <reference_generator+0x15a>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <reference_generator+0x10c>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032b5 	.word	0x080032b5
 80032a8:	080032bf 	.word	0x080032bf
 80032ac:	080032df 	.word	0x080032df
 80032b0:	080032e9 	.word	0x080032e9
	{
	case(REF_POS):
			pos_ref = reference;
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <reference_generator+0x174>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <reference_generator+0x190>)
 80032ba:	6013      	str	r3, [r2, #0]
			break;
 80032bc:	e01a      	b.n	80032f4 <reference_generator+0x15c>
	case(REF_SPD):
			spd_ref = reference - reference_old;
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <reference_generator+0x174>)
 80032c0:	ed93 7a00 	vldr	s14, [r3]
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <reference_generator+0x194>)
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ce:	4b18      	ldr	r3, [pc, #96]	; (8003330 <reference_generator+0x198>)
 80032d0:	edc3 7a00 	vstr	s15, [r3]
			reference_old = reference;
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <reference_generator+0x174>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <reference_generator+0x194>)
 80032da:	6013      	str	r3, [r2, #0]
			break;
 80032dc:	e00a      	b.n	80032f4 <reference_generator+0x15c>
	case(REF_I):
			i_q_ref = reference;
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <reference_generator+0x174>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a14      	ldr	r2, [pc, #80]	; (8003334 <reference_generator+0x19c>)
 80032e4:	6013      	str	r3, [r2, #0]
			break;
 80032e6:	e005      	b.n	80032f4 <reference_generator+0x15c>
	case(REF_U):
			u_q_ref = reference;
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <reference_generator+0x174>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <reference_generator+0x1a0>)
 80032ee:	6013      	str	r3, [r2, #0]
			break;
 80032f0:	e000      	b.n	80032f4 <reference_generator+0x15c>
	default:
		break;
 80032f2:	bf00      	nop
	}

}
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	1fff0690 	.word	0x1fff0690
 8003300:	1fff0750 	.word	0x1fff0750
 8003304:	1fff068c 	.word	0x1fff068c
 8003308:	1fff0744 	.word	0x1fff0744
 800330c:	1fff06b0 	.word	0x1fff06b0
 8003310:	1fff0748 	.word	0x1fff0748
 8003314:	1fff0760 	.word	0x1fff0760
 8003318:	1fff075c 	.word	0x1fff075c
 800331c:	1fff0754 	.word	0x1fff0754
 8003320:	1ffe883c 	.word	0x1ffe883c
 8003324:	1fff06b8 	.word	0x1fff06b8
 8003328:	1ffe8878 	.word	0x1ffe8878
 800332c:	1fff06b4 	.word	0x1fff06b4
 8003330:	1ffe887c 	.word	0x1ffe887c
 8003334:	1ffe8870 	.word	0x1ffe8870
 8003338:	1ffe8880 	.word	0x1ffe8880

0800333c <state_machine>:
uint8_t loop_control = LOOP_CONTROL_OFF;
uint8_t tune_test_control = OFF;
uint8_t motion_config = OFF;

void state_machine (void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
	switch(DRIVE_STATUS_MSK)
 8003340:	4b76      	ldr	r3, [pc, #472]	; (800351c <state_machine+0x1e0>)
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	2b01      	cmp	r3, #1
 800334a:	d026      	beq.n	800339a <state_machine+0x5e>
 800334c:	2b01      	cmp	r3, #1
 800334e:	d302      	bcc.n	8003356 <state_machine+0x1a>
 8003350:	2b02      	cmp	r3, #2
 8003352:	d061      	beq.n	8003418 <state_machine+0xdc>
			drive_command_old = drive_command;
		}
	}
			break;
	default:
		break;
 8003354:	e0e1      	b.n	800351a <state_machine+0x1de>
{
	switch(DRIVE_STATUS_MSK)
	{
	case (STATE_0_DRIVE_DISABLED):
		//Transition 0->1
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_0_DRIVE_DISABLED) && (DRIVE_COMMAND_STATE_MSK == STATE_1_DRIVE_ON))
 8003356:	4b72      	ldr	r3, [pc, #456]	; (8003520 <state_machine+0x1e4>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11a      	bne.n	8003398 <state_machine+0x5c>
 8003362:	4b70      	ldr	r3, [pc, #448]	; (8003524 <state_machine+0x1e8>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	2b01      	cmp	r3, #1
 800336c:	d114      	bne.n	8003398 <state_machine+0x5c>
			{
				drive_on();
 800336e:	f000 f8f9 	bl	8003564 <drive_on>
				drive_status &= DRIVE_STATUS_CLEAR;
 8003372:	4b6a      	ldr	r3, [pc, #424]	; (800351c <state_machine+0x1e0>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	f023 030f 	bic.w	r3, r3, #15
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b67      	ldr	r3, [pc, #412]	; (800351c <state_machine+0x1e0>)
 800337e:	801a      	strh	r2, [r3, #0]
				drive_status |= STATE_1_DRIVE_ON;
 8003380:	4b66      	ldr	r3, [pc, #408]	; (800351c <state_machine+0x1e0>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	4b64      	ldr	r3, [pc, #400]	; (800351c <state_machine+0x1e0>)
 800338c:	801a      	strh	r2, [r3, #0]
				drive_command_old = drive_command;
 800338e:	4b65      	ldr	r3, [pc, #404]	; (8003524 <state_machine+0x1e8>)
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	4b63      	ldr	r3, [pc, #396]	; (8003520 <state_machine+0x1e4>)
 8003394:	801a      	strh	r2, [r3, #0]
			}
			break;
 8003396:	e0c0      	b.n	800351a <state_machine+0x1de>
 8003398:	e0bf      	b.n	800351a <state_machine+0x1de>

	case (STATE_1_DRIVE_ON):
		//Transition 1->2
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_1_DRIVE_ON) && (DRIVE_COMMAND_STATE_MSK == STATE_2_OPERATION_ENABLED))
 800339a:	4b61      	ldr	r3, [pc, #388]	; (8003520 <state_machine+0x1e4>)
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d119      	bne.n	80033da <state_machine+0x9e>
 80033a6:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <state_machine+0x1e8>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d113      	bne.n	80033da <state_machine+0x9e>
			{
				operation_enabled();
 80033b2:	f000 f8fb 	bl	80035ac <operation_enabled>
				drive_status &= DRIVE_STATUS_CLEAR;
 80033b6:	4b59      	ldr	r3, [pc, #356]	; (800351c <state_machine+0x1e0>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	f023 030f 	bic.w	r3, r3, #15
 80033be:	b29a      	uxth	r2, r3
 80033c0:	4b56      	ldr	r3, [pc, #344]	; (800351c <state_machine+0x1e0>)
 80033c2:	801a      	strh	r2, [r3, #0]
				drive_status |= STATE_2_OPERATION_ENABLED;
 80033c4:	4b55      	ldr	r3, [pc, #340]	; (800351c <state_machine+0x1e0>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	4b53      	ldr	r3, [pc, #332]	; (800351c <state_machine+0x1e0>)
 80033d0:	801a      	strh	r2, [r3, #0]
				drive_command_old = drive_command;
 80033d2:	4b54      	ldr	r3, [pc, #336]	; (8003524 <state_machine+0x1e8>)
 80033d4:	881a      	ldrh	r2, [r3, #0]
 80033d6:	4b52      	ldr	r3, [pc, #328]	; (8003520 <state_machine+0x1e4>)
 80033d8:	801a      	strh	r2, [r3, #0]
			}
		//Transition 1->0
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_1_DRIVE_ON) && (DRIVE_COMMAND_STATE_MSK == STATE_0_DRIVE_DISABLED))
 80033da:	4b51      	ldr	r3, [pc, #324]	; (8003520 <state_machine+0x1e4>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d117      	bne.n	8003416 <state_machine+0xda>
 80033e6:	4b4f      	ldr	r3, [pc, #316]	; (8003524 <state_machine+0x1e8>)
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d111      	bne.n	8003416 <state_machine+0xda>
			{
			drive_disabled();
 80033f2:	f000 f89d 	bl	8003530 <drive_disabled>
			drive_status &= DRIVE_STATUS_CLEAR;
 80033f6:	4b49      	ldr	r3, [pc, #292]	; (800351c <state_machine+0x1e0>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	f023 030f 	bic.w	r3, r3, #15
 80033fe:	b29a      	uxth	r2, r3
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <state_machine+0x1e0>)
 8003402:	801a      	strh	r2, [r3, #0]
			drive_status |= STATE_0_DRIVE_DISABLED;
 8003404:	4b45      	ldr	r3, [pc, #276]	; (800351c <state_machine+0x1e0>)
 8003406:	881a      	ldrh	r2, [r3, #0]
 8003408:	4b44      	ldr	r3, [pc, #272]	; (800351c <state_machine+0x1e0>)
 800340a:	801a      	strh	r2, [r3, #0]
			drive_command_old = drive_command;
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <state_machine+0x1e8>)
 800340e:	881a      	ldrh	r2, [r3, #0]
 8003410:	4b43      	ldr	r3, [pc, #268]	; (8003520 <state_machine+0x1e4>)
 8003412:	801a      	strh	r2, [r3, #0]
			}
			break;
 8003414:	e081      	b.n	800351a <state_machine+0x1de>
 8003416:	e080      	b.n	800351a <state_machine+0x1de>

	case (STATE_2_OPERATION_ENABLED):
	{
		//Transition 2->1
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_2_OPERATION_ENABLED) && (DRIVE_COMMAND_STATE_MSK == STATE_1_DRIVE_ON))
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <state_machine+0x1e4>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	2b02      	cmp	r3, #2
 8003422:	d119      	bne.n	8003458 <state_machine+0x11c>
 8003424:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <state_machine+0x1e8>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2b01      	cmp	r3, #1
 800342e:	d113      	bne.n	8003458 <state_machine+0x11c>
			{
				drive_on();
 8003430:	f000 f898 	bl	8003564 <drive_on>
				drive_status &= DRIVE_STATUS_CLEAR;
 8003434:	4b39      	ldr	r3, [pc, #228]	; (800351c <state_machine+0x1e0>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	f023 030f 	bic.w	r3, r3, #15
 800343c:	b29a      	uxth	r2, r3
 800343e:	4b37      	ldr	r3, [pc, #220]	; (800351c <state_machine+0x1e0>)
 8003440:	801a      	strh	r2, [r3, #0]
				drive_status |= STATE_1_DRIVE_ON;
 8003442:	4b36      	ldr	r3, [pc, #216]	; (800351c <state_machine+0x1e0>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	4b33      	ldr	r3, [pc, #204]	; (800351c <state_machine+0x1e0>)
 800344e:	801a      	strh	r2, [r3, #0]
				drive_command_old = drive_command;
 8003450:	4b34      	ldr	r3, [pc, #208]	; (8003524 <state_machine+0x1e8>)
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <state_machine+0x1e4>)
 8003456:	801a      	strh	r2, [r3, #0]
			}
		//Transition 2->0
		if ((DRIVE_COMMAND_OLD_STATE_MSK == STATE_2_OPERATION_ENABLED) && (DRIVE_COMMAND_STATE_MSK == STATE_0_DRIVE_DISABLED))
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <state_machine+0x1e4>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	2b02      	cmp	r3, #2
 8003462:	d116      	bne.n	8003492 <state_machine+0x156>
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <state_machine+0x1e8>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	2b00      	cmp	r3, #0
 800346e:	d110      	bne.n	8003492 <state_machine+0x156>
			{
				drive_disabled();
 8003470:	f000 f85e 	bl	8003530 <drive_disabled>
				drive_status &= DRIVE_STATUS_CLEAR;
 8003474:	4b29      	ldr	r3, [pc, #164]	; (800351c <state_machine+0x1e0>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	f023 030f 	bic.w	r3, r3, #15
 800347c:	b29a      	uxth	r2, r3
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <state_machine+0x1e0>)
 8003480:	801a      	strh	r2, [r3, #0]
				drive_status |= STATE_0_DRIVE_DISABLED;
 8003482:	4b26      	ldr	r3, [pc, #152]	; (800351c <state_machine+0x1e0>)
 8003484:	881a      	ldrh	r2, [r3, #0]
 8003486:	4b25      	ldr	r3, [pc, #148]	; (800351c <state_machine+0x1e0>)
 8003488:	801a      	strh	r2, [r3, #0]
				drive_command_old = drive_command;
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <state_machine+0x1e8>)
 800348c:	881a      	ldrh	r2, [r3, #0]
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <state_machine+0x1e4>)
 8003490:	801a      	strh	r2, [r3, #0]
			}
		//Check for update
		if((!(DRIVE_COMMAND_UPDATE_OLD_MSK & UPDATE_MSK) && (DRIVE_COMMAND_UPDATE_MSK & UPDATE_MSK)) && (DRIVE_COMMAND_STATE_MSK == STATE_2_OPERATION_ENABLED))
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <state_machine+0x1e4>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d13c      	bne.n	8003518 <state_machine+0x1dc>
 800349e:	4b21      	ldr	r3, [pc, #132]	; (8003524 <state_machine+0x1e8>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d036      	beq.n	8003518 <state_machine+0x1dc>
 80034aa:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <state_machine+0x1e8>)
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d130      	bne.n	8003518 <state_machine+0x1dc>
		{
			//Check for reference generator output (Priority list: POS > SPD > I > U)
			if(DRIVE_COMMAND_REF_MSK & REF_POS_MSK)
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <state_machine+0x1e8>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <state_machine+0x18e>
			{
				//POS REF
				ref_type_select = REF_POS;
 80034c2:	4b19      	ldr	r3, [pc, #100]	; (8003528 <state_machine+0x1ec>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e01f      	b.n	800350a <state_machine+0x1ce>
			}
			else if(DRIVE_COMMAND_REF_MSK & REF_SPD_MSK)
 80034ca:	4b16      	ldr	r3, [pc, #88]	; (8003524 <state_machine+0x1e8>)
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <state_machine+0x1a2>
			{
				//SPD REF
				ref_type_select = REF_SPD;
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <state_machine+0x1ec>)
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e015      	b.n	800350a <state_machine+0x1ce>
			}
			else if(DRIVE_COMMAND_REF_MSK & REF_I_MSK)
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <state_machine+0x1e8>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00c      	beq.n	8003504 <state_machine+0x1c8>
			{
				//I REFF
				ref_type_select = REF_I;
 80034ea:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <state_machine+0x1ec>)
 80034ec:	2202      	movs	r2, #2
 80034ee:	701a      	strb	r2, [r3, #0]
				if(DRIVE_COMMAND_TEST_MSK & TUNE_TEST)
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <state_machine+0x1e8>)
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	b21b      	sxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da06      	bge.n	800350a <state_machine+0x1ce>
				{
					tune_test_control = ON;
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <state_machine+0x1f0>)
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	e002      	b.n	800350a <state_machine+0x1ce>
				}
			}
			else
			{
				//U REF
				ref_type_select = REF_U;
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <state_machine+0x1ec>)
 8003506:	2203      	movs	r2, #3
 8003508:	701a      	strb	r2, [r3, #0]
			}
			compute_motion();
 800350a:	f000 f85f 	bl	80035cc <compute_motion>
			drive_command_old = drive_command;
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <state_machine+0x1e8>)
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	4b03      	ldr	r3, [pc, #12]	; (8003520 <state_machine+0x1e4>)
 8003514:	801a      	strh	r2, [r3, #0]
		}
	}
			break;
 8003516:	e7ff      	b.n	8003518 <state_machine+0x1dc>
 8003518:	bf00      	nop
	default:
		break;
	}
}
 800351a:	bd80      	pop	{r7, pc}
 800351c:	1fff06ba 	.word	0x1fff06ba
 8003520:	1fff06be 	.word	0x1fff06be
 8003524:	1fff06bc 	.word	0x1fff06bc
 8003528:	1fff06b8 	.word	0x1fff06b8
 800352c:	1fff06c1 	.word	0x1fff06c1

08003530 <drive_disabled>:

void drive_disabled (void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
	motion_off();						//PWM off
 8003534:	f7fe f956 	bl	80017e4 <motion_off>
	loop_control = LOOP_CONTROL_OFF;	//control_loop_off
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <drive_disabled+0x24>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
	ref_gen_status = STATUS_0_DISABLED;
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <drive_disabled+0x28>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
	tune_test_control = OFF;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <drive_disabled+0x2c>)
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
	motion_config = OFF;
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <drive_disabled+0x30>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
}
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	1fff06c0 	.word	0x1fff06c0
 8003558:	1fff0690 	.word	0x1fff0690
 800355c:	1fff06c1 	.word	0x1fff06c1
 8003560:	1fff06c2 	.word	0x1fff06c2

08003564 <drive_on>:

void drive_on (void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
	motion_off();						//PWM off
 8003568:	f7fe f93c 	bl	80017e4 <motion_off>
	current_offset();
 800356c:	f7fd fdb2 	bl	80010d4 <current_offset>
	init_position();
 8003570:	f7fe fa32 	bl	80019d8 <init_position>
	pwm_update(0, 0, 0);				//pwm_on_50%
 8003574:	2000      	movs	r0, #0
 8003576:	2100      	movs	r1, #0
 8003578:	2200      	movs	r2, #0
 800357a:	f7fe f84b 	bl	8001614 <pwm_update>
	motion_on();
 800357e:	f7fe f901 	bl	8001784 <motion_on>
	loop_control = LOOP_CONTROL_OFF;	//control_loop_off
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <drive_on+0x38>)
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
	ref_gen_status = STATUS_0_DISABLED;
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <drive_on+0x3c>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
	tune_test_control = OFF;
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <drive_on+0x40>)
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
	motion_config = OFF;
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <drive_on+0x44>)
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
}
 800359a:	bd80      	pop	{r7, pc}
 800359c:	1fff06c0 	.word	0x1fff06c0
 80035a0:	1fff0690 	.word	0x1fff0690
 80035a4:	1fff06c1 	.word	0x1fff06c1
 80035a8:	1fff06c2 	.word	0x1fff06c2

080035ac <operation_enabled>:

void operation_enabled (void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	loop_control = LOOP_CONTROL_ON;		//control_loop_on
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <operation_enabled+0x18>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
	ref_gen_status = STATUS_0_DISABLED;
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <operation_enabled+0x1c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]

}
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	1fff06c0 	.word	0x1fff06c0
 80035c8:	1fff0690 	.word	0x1fff0690

080035cc <compute_motion>:

void compute_motion (void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	reference_generator_compute();
 80035d0:	f7ff fc82 	bl	8002ed8 <reference_generator_compute>
	motion_config = ON;
 80035d4:	4b01      	ldr	r3, [pc, #4]	; (80035dc <compute_motion+0x10>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
}
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	1fff06c2 	.word	0x1fff06c2

080035e0 <delay_t>:

/*
 * Wait for time*50us
 */
void delay_t (uint32_t time)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e8:	b672      	cpsid	i
	__disable_irq();
	interrupt_counter_timer = 0;
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <delay_t+0x2c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	801a      	strh	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80035f0:	b662      	cpsie	i
	__enable_irq();
	while (interrupt_counter_timer < time)
 80035f2:	bf00      	nop
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <delay_t+0x2c>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3f9      	bcc.n	80035f4 <delay_t+0x14>
	{
		// NO_ACTION
	};
}
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	1ffe8854 	.word	0x1ffe8854

08003610 <abc_dq>:

/*
 * Function to convert three-phase electrical signals from time-domain to dq0-reference frame
 */
void abc_dq (void)
{	
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
	 //The Clarke Transformation
	i_alpha = ia;
 8003614:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <abc_dq+0xa4>)
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b21b      	sxth	r3, r3
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003622:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <abc_dq+0xa8>)
 8003624:	edc3 7a00 	vstr	s15, [r3]
	i_beta = 1/sqrtf(3) * (float)(ia + (float)(2*ib));
 8003628:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <abc_dq+0xa4>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b21b      	sxth	r3, r3
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <abc_dq+0xac>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b21b      	sxth	r3, r3
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80036c0 <abc_dq+0xb0>
 800364e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <abc_dq+0xb4>)
 8003654:	edc3 7a00 	vstr	s15, [r3]

	//The Park Transformation
	i_d = i_alpha*cos_theta_fast + i_beta*sin_theta_fast;
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <abc_dq+0xa8>)
 800365a:	ed93 7a00 	vldr	s14, [r3]
 800365e:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <abc_dq+0xb8>)
 8003660:	edd3 7a00 	vldr	s15, [r3]
 8003664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003668:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <abc_dq+0xb4>)
 800366a:	edd3 6a00 	vldr	s13, [r3]
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <abc_dq+0xbc>)
 8003670:	edd3 7a00 	vldr	s15, [r3]
 8003674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <abc_dq+0xc0>)
 800367e:	edc3 7a00 	vstr	s15, [r3]
	i_q = i_beta*cos_theta_fast - i_alpha*sin_theta_fast;
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <abc_dq+0xb4>)
 8003684:	ed93 7a00 	vldr	s14, [r3]
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <abc_dq+0xb8>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <abc_dq+0xa8>)
 8003694:	edd3 6a00 	vldr	s13, [r3]
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <abc_dq+0xbc>)
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <abc_dq+0xc4>)
 80036a8:	edc3 7a00 	vstr	s15, [r3]

}
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	1fff06f4 	.word	0x1fff06f4
 80036b8:	1fff0768 	.word	0x1fff0768
 80036bc:	1fff06ec 	.word	0x1fff06ec
 80036c0:	3f13cd3a 	.word	0x3f13cd3a
 80036c4:	1fff0780 	.word	0x1fff0780
 80036c8:	1fff06d4 	.word	0x1fff06d4
 80036cc:	1fff06d0 	.word	0x1fff06d0
 80036d0:	1fff0770 	.word	0x1fff0770
 80036d4:	1fff076c 	.word	0x1fff076c

080036d8 <dq_abc>:

/*
 * Function to convert two-phase balanced sinusoidal signals to three-phase electrical signals
 */
void dq_abc(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0

 	//The Inverse Park Transformation
	u_alpha = u_d_ref*cos_theta_fast - u_q_ref*sin_theta_fast;
 80036dc:	4b56      	ldr	r3, [pc, #344]	; (8003838 <dq_abc+0x160>)
 80036de:	ed93 7a00 	vldr	s14, [r3]
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <dq_abc+0x164>)
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ec:	4b54      	ldr	r3, [pc, #336]	; (8003840 <dq_abc+0x168>)
 80036ee:	edd3 6a00 	vldr	s13, [r3]
 80036f2:	4b54      	ldr	r3, [pc, #336]	; (8003844 <dq_abc+0x16c>)
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003700:	4b51      	ldr	r3, [pc, #324]	; (8003848 <dq_abc+0x170>)
 8003702:	edc3 7a00 	vstr	s15, [r3]
	u_beta = u_q_ref*cos_theta_fast + u_d_ref*sin_theta_fast;
 8003706:	4b4e      	ldr	r3, [pc, #312]	; (8003840 <dq_abc+0x168>)
 8003708:	ed93 7a00 	vldr	s14, [r3]
 800370c:	4b4b      	ldr	r3, [pc, #300]	; (800383c <dq_abc+0x164>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003716:	4b48      	ldr	r3, [pc, #288]	; (8003838 <dq_abc+0x160>)
 8003718:	edd3 6a00 	vldr	s13, [r3]
 800371c:	4b49      	ldr	r3, [pc, #292]	; (8003844 <dq_abc+0x16c>)
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372a:	4b48      	ldr	r3, [pc, #288]	; (800384c <dq_abc+0x174>)
 800372c:	edc3 7a00 	vstr	s15, [r3]

	//The Inverse Clarke Transformation
	u_a_ref = u_alpha;
 8003730:	4b45      	ldr	r3, [pc, #276]	; (8003848 <dq_abc+0x170>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a46      	ldr	r2, [pc, #280]	; (8003850 <dq_abc+0x178>)
 8003736:	6013      	str	r3, [r2, #0]
	u_b_ref = (-u_alpha+sqrtf(3)*u_beta)/2;
 8003738:	4b44      	ldr	r3, [pc, #272]	; (800384c <dq_abc+0x174>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003854 <dq_abc+0x17c>
 8003742:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003746:	4b40      	ldr	r3, [pc, #256]	; (8003848 <dq_abc+0x170>)
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003750:	eeb0 7a00 	vmov.f32	s14, #0
 8003754:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8003758:	4b3f      	ldr	r3, [pc, #252]	; (8003858 <dq_abc+0x180>)
 800375a:	edc3 7a00 	vstr	s15, [r3]
	u_c_ref = (-u_alpha-sqrtf(3)*u_beta)/2;
 800375e:	4b3a      	ldr	r3, [pc, #232]	; (8003848 <dq_abc+0x170>)
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	eeb1 7a67 	vneg.f32	s14, s15
 8003768:	4b38      	ldr	r3, [pc, #224]	; (800384c <dq_abc+0x174>)
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003854 <dq_abc+0x17c>
 8003772:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800377a:	eeb0 7a00 	vmov.f32	s14, #0
 800377e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <dq_abc+0x184>)
 8003784:	edc3 7a00 	vstr	s15, [r3]

	/*
	 * Keeps the values in range of int16_t
	 * Later on the Float values will be casted into Int
	 */
	if (u_a_ref > MAX_UINT_16)
 8003788:	4b31      	ldr	r3, [pc, #196]	; (8003850 <dq_abc+0x178>)
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003860 <dq_abc+0x188>
 8003792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	dd03      	ble.n	80037a4 <dq_abc+0xcc>
	{
		u_a_ref = MAX_UINT_16;
 800379c:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <dq_abc+0x178>)
 800379e:	4a31      	ldr	r2, [pc, #196]	; (8003864 <dq_abc+0x18c>)
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e00d      	b.n	80037c0 <dq_abc+0xe8>
	}
	else if (u_a_ref < MIN_UINT_16)
 80037a4:	4b2a      	ldr	r3, [pc, #168]	; (8003850 <dq_abc+0x178>)
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003868 <dq_abc+0x190>
 80037ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b6:	d503      	bpl.n	80037c0 <dq_abc+0xe8>
	{
		u_a_ref = MIN_UINT_16;
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <dq_abc+0x178>)
 80037ba:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 80037be:	601a      	str	r2, [r3, #0]
	}

	if (u_b_ref > MAX_UINT_16)
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <dq_abc+0x180>)
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003860 <dq_abc+0x188>
 80037ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d2:	dd03      	ble.n	80037dc <dq_abc+0x104>
	{
		u_b_ref = MAX_UINT_16;
 80037d4:	4b20      	ldr	r3, [pc, #128]	; (8003858 <dq_abc+0x180>)
 80037d6:	4a23      	ldr	r2, [pc, #140]	; (8003864 <dq_abc+0x18c>)
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e00d      	b.n	80037f8 <dq_abc+0x120>
	}
	else if (u_b_ref < MIN_UINT_16)
 80037dc:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <dq_abc+0x180>)
 80037de:	edd3 7a00 	vldr	s15, [r3]
 80037e2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003868 <dq_abc+0x190>
 80037e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	d503      	bpl.n	80037f8 <dq_abc+0x120>
	{
		u_a_ref = MIN_UINT_16;
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <dq_abc+0x178>)
 80037f2:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 80037f6:	601a      	str	r2, [r3, #0]
	}

	if (u_c_ref > MAX_UINT_16)
 80037f8:	4b18      	ldr	r3, [pc, #96]	; (800385c <dq_abc+0x184>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003860 <dq_abc+0x188>
 8003802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380a:	dd03      	ble.n	8003814 <dq_abc+0x13c>
	{
		u_a_ref = MAX_UINT_16;
 800380c:	4b10      	ldr	r3, [pc, #64]	; (8003850 <dq_abc+0x178>)
 800380e:	4a15      	ldr	r2, [pc, #84]	; (8003864 <dq_abc+0x18c>)
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e00d      	b.n	8003830 <dq_abc+0x158>
	}
	else if (u_c_ref < MIN_UINT_16)
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <dq_abc+0x184>)
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003868 <dq_abc+0x190>
 800381e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	d503      	bpl.n	8003830 <dq_abc+0x158>
	{
		u_c_ref = MIN_UINT_16;
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <dq_abc+0x184>)
 800382a:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 800382e:	601a      	str	r2, [r3, #0]
	}

}
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	1fff0720 	.word	0x1fff0720
 800383c:	1fff06d4 	.word	0x1fff06d4
 8003840:	1ffe8880 	.word	0x1ffe8880
 8003844:	1fff06d0 	.word	0x1fff06d0
 8003848:	1fff077c 	.word	0x1fff077c
 800384c:	1fff0778 	.word	0x1fff0778
 8003850:	1fff0774 	.word	0x1fff0774
 8003854:	3fddb3d7 	.word	0x3fddb3d7
 8003858:	1fff0764 	.word	0x1fff0764
 800385c:	1fff0784 	.word	0x1fff0784
 8003860:	46fffe00 	.word	0x46fffe00
 8003864:	46fffe00 	.word	0x46fffe00
 8003868:	c7000000 	.word	0xc7000000

0800386c <compute_fast_speed>:

/*
 * Compute the speed based on the encoder increments, read from CCU40 Timer
 */
void compute_fast_speed (void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
	timer_value_fast = CCU40_CC40->TIMER;
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <compute_fast_speed+0x34>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	b29a      	uxth	r2, r3
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <compute_fast_speed+0x38>)
 8003878:	801a      	strh	r2, [r3, #0]
	speed_value_fast = timer_value_fast - timer_value_old_fast;
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <compute_fast_speed+0x38>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29a      	uxth	r2, r3
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <compute_fast_speed+0x3c>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	b29b      	uxth	r3, r3
 800388a:	b29a      	uxth	r2, r3
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <compute_fast_speed+0x40>)
 800388e:	801a      	strh	r2, [r3, #0]
	//FOR TESTING I SET A CONSTANT SPEED VALUE
//	speed_value_fast = -1;
	timer_value_old_fast = timer_value_fast;
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <compute_fast_speed+0x38>)
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <compute_fast_speed+0x3c>)
 8003896:	801a      	strh	r2, [r3, #0]

}
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	4000c100 	.word	0x4000c100
 80038a4:	1fff06d8 	.word	0x1fff06d8
 80038a8:	1fff06da 	.word	0x1fff06da
 80038ac:	1fff06dc 	.word	0x1fff06dc

080038b0 <compute_fast_mechanical_position>:
/*
 * Compute the mechanical position based on the speed value
 */
void compute_fast_mechanical_position (void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
	mechanical_position_fast += speed_value_fast;
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <compute_fast_mechanical_position+0x1c>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b21a      	sxth	r2, r3
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <compute_fast_mechanical_position+0x20>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <compute_fast_mechanical_position+0x20>)
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	1fff06dc 	.word	0x1fff06dc
 80038d0:	1fff06c8 	.word	0x1fff06c8

080038d4 <compute_fast_electrical_position>:

/*
 * Compute the module of the electrical position based on the mechanical position
 */
void compute_fast_electrical_position (void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
	electrical_resolution = encoder_resolution/pp;
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <compute_fast_electrical_position+0x3c>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b21a      	sxth	r2, r3
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <compute_fast_electrical_position+0x40>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b25b      	sxtb	r3, r3
 80038e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <compute_fast_electrical_position+0x44>)
 80038ec:	801a      	strh	r2, [r3, #0]
	electrical_position_modulo_fast = mechanical_position_fast % electrical_resolution;
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <compute_fast_electrical_position+0x48>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a09      	ldr	r2, [pc, #36]	; (8003918 <compute_fast_electrical_position+0x44>)
 80038f4:	8812      	ldrh	r2, [r2, #0]
 80038f6:	b212      	sxth	r2, r2
 80038f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80038fc:	fb02 f201 	mul.w	r2, r2, r1
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <compute_fast_electrical_position+0x4c>)
 8003904:	6013      	str	r3, [r2, #0]
}
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	1ffe883e 	.word	0x1ffe883e
 8003914:	1ffe8840 	.word	0x1ffe8840
 8003918:	1fff06de 	.word	0x1fff06de
 800391c:	1fff06c8 	.word	0x1fff06c8
 8003920:	1fff06cc 	.word	0x1fff06cc

08003924 <compute_fast_field>:
/*
 * Compute the electrical angle based on the electrical position
 * Compute the sin&cos of theta
 */
void compute_fast_field (void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
	theta_fast = electrical_position_modulo_fast*(2*Pi)/electrical_resolution;
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <compute_fast_field+0x50>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	ee07 3a90 	vmov	s15, r3
 8003930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003934:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003978 <compute_fast_field+0x54>
 8003938:	ee27 7a87 	vmul.f32	s14, s15, s14
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <compute_fast_field+0x58>)
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b21b      	sxth	r3, r3
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800394a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <compute_fast_field+0x5c>)
 8003950:	edc3 7a00 	vstr	s15, [r3]
	sincosf(theta_fast, &sin_theta_fast, &cos_theta_fast);
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <compute_fast_field+0x5c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	490a      	ldr	r1, [pc, #40]	; (8003984 <compute_fast_field+0x60>)
 800395c:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <compute_fast_field+0x64>)
 800395e:	f000 f817 	bl	8003990 <sincosf>
	if(tune_test_control)
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <compute_fast_field+0x68>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <compute_fast_field+0x4e>
	{
		theta_fast = 0;
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <compute_fast_field+0x5c>)
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
	}
}
 8003972:	bd80      	pop	{r7, pc}
 8003974:	1fff06cc 	.word	0x1fff06cc
 8003978:	40c90fd0 	.word	0x40c90fd0
 800397c:	1fff06de 	.word	0x1fff06de
 8003980:	1fff06c4 	.word	0x1fff06c4
 8003984:	1fff06d0 	.word	0x1fff06d0
 8003988:	1fff06d4 	.word	0x1fff06d4
 800398c:	1fff06c1 	.word	0x1fff06c1

08003990 <sincosf>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	460e      	mov	r6, r1
 8003994:	4614      	mov	r4, r2
 8003996:	4605      	mov	r5, r0
 8003998:	f000 f84c 	bl	8003a34 <sinf>
 800399c:	6030      	str	r0, [r6, #0]
 800399e:	4628      	mov	r0, r5
 80039a0:	f000 f802 	bl	80039a8 <cosf>
 80039a4:	6020      	str	r0, [r4, #0]
 80039a6:	bd70      	pop	{r4, r5, r6, pc}

080039a8 <cosf>:
 80039a8:	b500      	push	{lr}
 80039aa:	b085      	sub	sp, #20
 80039ac:	4a20      	ldr	r2, [pc, #128]	; (8003a30 <cosf+0x88>)
 80039ae:	9001      	str	r0, [sp, #4]
 80039b0:	9b01      	ldr	r3, [sp, #4]
 80039b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039b6:	4293      	cmp	r3, r2
 80039b8:	dd1d      	ble.n	80039f6 <cosf+0x4e>
 80039ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80039be:	db08      	blt.n	80039d2 <cosf+0x2a>
 80039c0:	eddd 7a01 	vldr	s15, [sp, #4]
 80039c4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80039c8:	ee17 0a90 	vmov	r0, s15
 80039cc:	b005      	add	sp, #20
 80039ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80039d2:	a902      	add	r1, sp, #8
 80039d4:	f000 f87c 	bl	8003ad0 <__ieee754_rem_pio2f>
 80039d8:	f000 0203 	and.w	r2, r0, #3
 80039dc:	2a01      	cmp	r2, #1
 80039de:	9802      	ldr	r0, [sp, #8]
 80039e0:	9903      	ldr	r1, [sp, #12]
 80039e2:	d019      	beq.n	8003a18 <cosf+0x70>
 80039e4:	2a02      	cmp	r2, #2
 80039e6:	d010      	beq.n	8003a0a <cosf+0x62>
 80039e8:	b1ea      	cbz	r2, 8003a26 <cosf+0x7e>
 80039ea:	2201      	movs	r2, #1
 80039ec:	f000 fd5a 	bl	80044a4 <__kernel_sinf>
 80039f0:	ee07 0a90 	vmov	s15, r0
 80039f4:	e7e8      	b.n	80039c8 <cosf+0x20>
 80039f6:	2100      	movs	r1, #0
 80039f8:	f000 f9b6 	bl	8003d68 <__kernel_cosf>
 80039fc:	ee07 0a90 	vmov	s15, r0
 8003a00:	ee17 0a90 	vmov	r0, s15
 8003a04:	b005      	add	sp, #20
 8003a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a0a:	f000 f9ad 	bl	8003d68 <__kernel_cosf>
 8003a0e:	ee07 0a90 	vmov	s15, r0
 8003a12:	eef1 7a67 	vneg.f32	s15, s15
 8003a16:	e7d7      	b.n	80039c8 <cosf+0x20>
 8003a18:	f000 fd44 	bl	80044a4 <__kernel_sinf>
 8003a1c:	ee07 0a90 	vmov	s15, r0
 8003a20:	eef1 7a67 	vneg.f32	s15, s15
 8003a24:	e7d0      	b.n	80039c8 <cosf+0x20>
 8003a26:	f000 f99f 	bl	8003d68 <__kernel_cosf>
 8003a2a:	ee07 0a90 	vmov	s15, r0
 8003a2e:	e7cb      	b.n	80039c8 <cosf+0x20>
 8003a30:	3f490fd8 	.word	0x3f490fd8

08003a34 <sinf>:
 8003a34:	b500      	push	{lr}
 8003a36:	b085      	sub	sp, #20
 8003a38:	4a24      	ldr	r2, [pc, #144]	; (8003acc <sinf+0x98>)
 8003a3a:	9001      	str	r0, [sp, #4]
 8003a3c:	9b01      	ldr	r3, [sp, #4]
 8003a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a42:	4293      	cmp	r3, r2
 8003a44:	dd1e      	ble.n	8003a84 <sinf+0x50>
 8003a46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003a4a:	db08      	blt.n	8003a5e <sinf+0x2a>
 8003a4c:	eddd 7a01 	vldr	s15, [sp, #4]
 8003a50:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003a54:	ee17 0a90 	vmov	r0, s15
 8003a58:	b005      	add	sp, #20
 8003a5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a5e:	a902      	add	r1, sp, #8
 8003a60:	f000 f836 	bl	8003ad0 <__ieee754_rem_pio2f>
 8003a64:	f000 0003 	and.w	r0, r0, #3
 8003a68:	2801      	cmp	r0, #1
 8003a6a:	d020      	beq.n	8003aae <sinf+0x7a>
 8003a6c:	2802      	cmp	r0, #2
 8003a6e:	d014      	beq.n	8003a9a <sinf+0x66>
 8003a70:	b320      	cbz	r0, 8003abc <sinf+0x88>
 8003a72:	9802      	ldr	r0, [sp, #8]
 8003a74:	9903      	ldr	r1, [sp, #12]
 8003a76:	f000 f977 	bl	8003d68 <__kernel_cosf>
 8003a7a:	ee07 0a90 	vmov	s15, r0
 8003a7e:	eef1 7a67 	vneg.f32	s15, s15
 8003a82:	e7e7      	b.n	8003a54 <sinf+0x20>
 8003a84:	2100      	movs	r1, #0
 8003a86:	2200      	movs	r2, #0
 8003a88:	f000 fd0c 	bl	80044a4 <__kernel_sinf>
 8003a8c:	ee07 0a90 	vmov	s15, r0
 8003a90:	ee17 0a90 	vmov	r0, s15
 8003a94:	b005      	add	sp, #20
 8003a96:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a9a:	9802      	ldr	r0, [sp, #8]
 8003a9c:	9903      	ldr	r1, [sp, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f000 fd00 	bl	80044a4 <__kernel_sinf>
 8003aa4:	ee07 0a90 	vmov	s15, r0
 8003aa8:	eef1 7a67 	vneg.f32	s15, s15
 8003aac:	e7d2      	b.n	8003a54 <sinf+0x20>
 8003aae:	9802      	ldr	r0, [sp, #8]
 8003ab0:	9903      	ldr	r1, [sp, #12]
 8003ab2:	f000 f959 	bl	8003d68 <__kernel_cosf>
 8003ab6:	ee07 0a90 	vmov	s15, r0
 8003aba:	e7cb      	b.n	8003a54 <sinf+0x20>
 8003abc:	9802      	ldr	r0, [sp, #8]
 8003abe:	9903      	ldr	r1, [sp, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f000 fcef 	bl	80044a4 <__kernel_sinf>
 8003ac6:	ee07 0a90 	vmov	s15, r0
 8003aca:	e7c3      	b.n	8003a54 <sinf+0x20>
 8003acc:	3f490fd8 	.word	0x3f490fd8

08003ad0 <__ieee754_rem_pio2f>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4a97      	ldr	r2, [pc, #604]	; (8003d30 <__ieee754_rem_pio2f+0x260>)
 8003ad4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003ad8:	4294      	cmp	r4, r2
 8003ada:	b086      	sub	sp, #24
 8003adc:	4606      	mov	r6, r0
 8003ade:	460d      	mov	r5, r1
 8003ae0:	dd68      	ble.n	8003bb4 <__ieee754_rem_pio2f+0xe4>
 8003ae2:	4a94      	ldr	r2, [pc, #592]	; (8003d34 <__ieee754_rem_pio2f+0x264>)
 8003ae4:	4294      	cmp	r4, r2
 8003ae6:	dc1c      	bgt.n	8003b22 <__ieee754_rem_pio2f+0x52>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	eddf 7a93 	vldr	s15, [pc, #588]	; 8003d38 <__ieee754_rem_pio2f+0x268>
 8003aee:	4a93      	ldr	r2, [pc, #588]	; (8003d3c <__ieee754_rem_pio2f+0x26c>)
 8003af0:	f024 040f 	bic.w	r4, r4, #15
 8003af4:	ee07 0a10 	vmov	s14, r0
 8003af8:	f340 80e2 	ble.w	8003cc0 <__ieee754_rem_pio2f+0x1f0>
 8003afc:	4294      	cmp	r4, r2
 8003afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b02:	d067      	beq.n	8003bd4 <__ieee754_rem_pio2f+0x104>
 8003b04:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003d40 <__ieee754_rem_pio2f+0x270>
 8003b08:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003b12:	edc1 6a00 	vstr	s13, [r1]
 8003b16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b1a:	edc1 7a01 	vstr	s15, [r1, #4]
 8003b1e:	b006      	add	sp, #24
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
 8003b22:	4a88      	ldr	r2, [pc, #544]	; (8003d44 <__ieee754_rem_pio2f+0x274>)
 8003b24:	4294      	cmp	r4, r2
 8003b26:	dd67      	ble.n	8003bf8 <__ieee754_rem_pio2f+0x128>
 8003b28:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003b2c:	da48      	bge.n	8003bc0 <__ieee754_rem_pio2f+0xf0>
 8003b2e:	15e2      	asrs	r2, r4, #23
 8003b30:	3a86      	subs	r2, #134	; 0x86
 8003b32:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003b36:	ee07 3a10 	vmov	s14, r3
 8003b3a:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8003b3e:	eddf 7a82 	vldr	s15, [pc, #520]	; 8003d48 <__ieee754_rem_pio2f+0x278>
 8003b42:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003b46:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003b4a:	edcd 6a03 	vstr	s13, [sp, #12]
 8003b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b52:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8003b56:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003b5a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003b5e:	edcd 6a04 	vstr	s13, [sp, #16]
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6e:	edcd 7a05 	vstr	s15, [sp, #20]
 8003b72:	f040 80b8 	bne.w	8003ce6 <__ieee754_rem_pio2f+0x216>
 8003b76:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7e:	bf14      	ite	ne
 8003b80:	2302      	movne	r3, #2
 8003b82:	2301      	moveq	r3, #1
 8003b84:	4971      	ldr	r1, [pc, #452]	; (8003d4c <__ieee754_rem_pio2f+0x27c>)
 8003b86:	2002      	movs	r0, #2
 8003b88:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003b8c:	a803      	add	r0, sp, #12
 8003b8e:	4629      	mov	r1, r5
 8003b90:	f000 f974 	bl	8003e7c <__kernel_rem_pio2f>
 8003b94:	2e00      	cmp	r6, #0
 8003b96:	da11      	bge.n	8003bbc <__ieee754_rem_pio2f+0xec>
 8003b98:	ed95 7a00 	vldr	s14, [r5]
 8003b9c:	edd5 7a01 	vldr	s15, [r5, #4]
 8003ba0:	eeb1 7a47 	vneg.f32	s14, s14
 8003ba4:	eef1 7a67 	vneg.f32	s15, s15
 8003ba8:	4240      	negs	r0, r0
 8003baa:	ed85 7a00 	vstr	s14, [r5]
 8003bae:	edc5 7a01 	vstr	s15, [r5, #4]
 8003bb2:	e003      	b.n	8003bbc <__ieee754_rem_pio2f+0xec>
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	6028      	str	r0, [r5, #0]
 8003bb8:	604a      	str	r2, [r1, #4]
 8003bba:	2000      	movs	r0, #0
 8003bbc:	b006      	add	sp, #24
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	ee07 0a90 	vmov	s15, r0
 8003bc4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003bc8:	2000      	movs	r0, #0
 8003bca:	edc1 7a01 	vstr	s15, [r1, #4]
 8003bce:	edc1 7a00 	vstr	s15, [r1]
 8003bd2:	e7f3      	b.n	8003bbc <__ieee754_rem_pio2f+0xec>
 8003bd4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003d50 <__ieee754_rem_pio2f+0x280>
 8003bd8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003d54 <__ieee754_rem_pio2f+0x284>
 8003bdc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003be0:	2001      	movs	r0, #1
 8003be2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003be6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003bea:	edc1 6a00 	vstr	s13, [r1]
 8003bee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bf2:	edc1 7a01 	vstr	s15, [r1, #4]
 8003bf6:	e7e1      	b.n	8003bbc <__ieee754_rem_pio2f+0xec>
 8003bf8:	f000 fca2 	bl	8004540 <fabsf>
 8003bfc:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8003d58 <__ieee754_rem_pio2f+0x288>
 8003c00:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 8003d38 <__ieee754_rem_pio2f+0x268>
 8003c04:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003d40 <__ieee754_rem_pio2f+0x270>
 8003c08:	ee07 0a10 	vmov	s14, r0
 8003c0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8003c10:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c18:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003c1c:	ee17 0a90 	vmov	r0, s15
 8003c20:	eef1 5a46 	vneg.f32	s11, s12
 8003c24:	eef0 7a47 	vmov.f32	s15, s14
 8003c28:	281f      	cmp	r0, #31
 8003c2a:	eee5 7a85 	vfma.f32	s15, s11, s10
 8003c2e:	ee26 7a26 	vmul.f32	s14, s12, s13
 8003c32:	dc1d      	bgt.n	8003c70 <__ieee754_rem_pio2f+0x1a0>
 8003c34:	4a49      	ldr	r2, [pc, #292]	; (8003d5c <__ieee754_rem_pio2f+0x28c>)
 8003c36:	1e41      	subs	r1, r0, #1
 8003c38:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8003c3c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d015      	beq.n	8003c70 <__ieee754_rem_pio2f+0x1a0>
 8003c44:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003c48:	edc5 6a00 	vstr	s13, [r5]
 8003c4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c50:	2e00      	cmp	r6, #0
 8003c52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c56:	edc5 7a01 	vstr	s15, [r5, #4]
 8003c5a:	daaf      	bge.n	8003bbc <__ieee754_rem_pio2f+0xec>
 8003c5c:	eef1 6a66 	vneg.f32	s13, s13
 8003c60:	eef1 7a67 	vneg.f32	s15, s15
 8003c64:	edc5 6a00 	vstr	s13, [r5]
 8003c68:	edc5 7a01 	vstr	s15, [r5, #4]
 8003c6c:	4240      	negs	r0, r0
 8003c6e:	e7a5      	b.n	8003bbc <__ieee754_rem_pio2f+0xec>
 8003c70:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003c74:	15e4      	asrs	r4, r4, #23
 8003c76:	ee16 3a90 	vmov	r3, s13
 8003c7a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8003c7e:	1ae3      	subs	r3, r4, r3
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	dde1      	ble.n	8003c48 <__ieee754_rem_pio2f+0x178>
 8003c84:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003d50 <__ieee754_rem_pio2f+0x280>
 8003c88:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003d54 <__ieee754_rem_pio2f+0x284>
 8003c8c:	eeb0 5a67 	vmov.f32	s10, s15
 8003c90:	eea5 5a87 	vfma.f32	s10, s11, s14
 8003c94:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003c98:	eee5 7a87 	vfma.f32	s15, s11, s14
 8003c9c:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8003ca0:	ee75 6a67 	vsub.f32	s13, s10, s15
 8003ca4:	eeb0 7a67 	vmov.f32	s14, s15
 8003ca8:	ee16 3a90 	vmov	r3, s13
 8003cac:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8003cb0:	1ae4      	subs	r4, r4, r3
 8003cb2:	2c19      	cmp	r4, #25
 8003cb4:	dc2c      	bgt.n	8003d10 <__ieee754_rem_pio2f+0x240>
 8003cb6:	edc5 6a00 	vstr	s13, [r5]
 8003cba:	eef0 7a45 	vmov.f32	s15, s10
 8003cbe:	e7c5      	b.n	8003c4c <__ieee754_rem_pio2f+0x17c>
 8003cc0:	4294      	cmp	r4, r2
 8003cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc6:	d010      	beq.n	8003cea <__ieee754_rem_pio2f+0x21a>
 8003cc8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003d40 <__ieee754_rem_pio2f+0x270>
 8003ccc:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003cd8:	edc1 6a00 	vstr	s13, [r1]
 8003cdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ce0:	edc1 7a01 	vstr	s15, [r1, #4]
 8003ce4:	e76a      	b.n	8003bbc <__ieee754_rem_pio2f+0xec>
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e74c      	b.n	8003b84 <__ieee754_rem_pio2f+0xb4>
 8003cea:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003d50 <__ieee754_rem_pio2f+0x280>
 8003cee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003d54 <__ieee754_rem_pio2f+0x284>
 8003cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003cfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d02:	edc1 6a00 	vstr	s13, [r1]
 8003d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d0a:	edc1 7a01 	vstr	s15, [r1, #4]
 8003d0e:	e755      	b.n	8003bbc <__ieee754_rem_pio2f+0xec>
 8003d10:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003d60 <__ieee754_rem_pio2f+0x290>
 8003d14:	eddf 4a13 	vldr	s9, [pc, #76]	; 8003d64 <__ieee754_rem_pio2f+0x294>
 8003d18:	eef0 7a45 	vmov.f32	s15, s10
 8003d1c:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8003d20:	ee35 7a67 	vsub.f32	s14, s10, s15
 8003d24:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8003d28:	ee96 7a24 	vfnms.f32	s14, s12, s9
 8003d2c:	e78a      	b.n	8003c44 <__ieee754_rem_pio2f+0x174>
 8003d2e:	bf00      	nop
 8003d30:	3f490fd8 	.word	0x3f490fd8
 8003d34:	4016cbe3 	.word	0x4016cbe3
 8003d38:	3fc90f80 	.word	0x3fc90f80
 8003d3c:	3fc90fd0 	.word	0x3fc90fd0
 8003d40:	37354443 	.word	0x37354443
 8003d44:	43490f80 	.word	0x43490f80
 8003d48:	43800000 	.word	0x43800000
 8003d4c:	0800500c 	.word	0x0800500c
 8003d50:	37354400 	.word	0x37354400
 8003d54:	2e85a308 	.word	0x2e85a308
 8003d58:	3f22f984 	.word	0x3f22f984
 8003d5c:	08004f8c 	.word	0x08004f8c
 8003d60:	2e85a300 	.word	0x2e85a300
 8003d64:	248d3132 	.word	0x248d3132

08003d68 <__kernel_cosf>:
 8003d68:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003d6c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003d70:	ee06 0a10 	vmov	s12, r0
 8003d74:	ee06 1a90 	vmov	s13, r1
 8003d78:	da2e      	bge.n	8003dd8 <__kernel_cosf+0x70>
 8003d7a:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8003d7e:	ee17 3a90 	vmov	r3, s15
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d064      	beq.n	8003e50 <__kernel_cosf+0xe8>
 8003d86:	ee26 7a06 	vmul.f32	s14, s12, s12
 8003d8a:	eddf 3a34 	vldr	s7, [pc, #208]	; 8003e5c <__kernel_cosf+0xf4>
 8003d8e:	ed9f 4a34 	vldr	s8, [pc, #208]	; 8003e60 <__kernel_cosf+0xf8>
 8003d92:	eddf 4a34 	vldr	s9, [pc, #208]	; 8003e64 <__kernel_cosf+0xfc>
 8003d96:	ed9f 5a34 	vldr	s10, [pc, #208]	; 8003e68 <__kernel_cosf+0x100>
 8003d9a:	eddf 7a34 	vldr	s15, [pc, #208]	; 8003e6c <__kernel_cosf+0x104>
 8003d9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e70 <__kernel_cosf+0x108>
 8003da2:	eea7 4a23 	vfma.f32	s8, s14, s7
 8003da6:	eee4 4a07 	vfma.f32	s9, s8, s14
 8003daa:	eea4 5a87 	vfma.f32	s10, s9, s14
 8003dae:	eee5 7a07 	vfma.f32	s15, s10, s14
 8003db2:	eee7 5a87 	vfma.f32	s11, s15, s14
 8003db6:	ee65 5a87 	vmul.f32	s11, s11, s14
 8003dba:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8003dbe:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8003dc2:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003dc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8003dca:	eed7 6a06 	vfnms.f32	s13, s14, s12
 8003dce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003dd2:	ee17 0a90 	vmov	r0, s15
 8003dd6:	4770      	bx	lr
 8003dd8:	ee26 7a06 	vmul.f32	s14, s12, s12
 8003ddc:	eddf 3a1f 	vldr	s7, [pc, #124]	; 8003e5c <__kernel_cosf+0xf4>
 8003de0:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 8003e60 <__kernel_cosf+0xf8>
 8003de4:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8003e64 <__kernel_cosf+0xfc>
 8003de8:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8003e68 <__kernel_cosf+0x100>
 8003dec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003e6c <__kernel_cosf+0x104>
 8003df0:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8003e70 <__kernel_cosf+0x108>
 8003df4:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <__kernel_cosf+0x10c>)
 8003df6:	eea7 4a23 	vfma.f32	s8, s14, s7
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	eee4 4a07 	vfma.f32	s9, s8, s14
 8003e00:	eea4 5a87 	vfma.f32	s10, s9, s14
 8003e04:	eee5 7a07 	vfma.f32	s15, s10, s14
 8003e08:	eee7 5a87 	vfma.f32	s11, s15, s14
 8003e0c:	ee65 5a87 	vmul.f32	s11, s11, s14
 8003e10:	ddd3      	ble.n	8003dba <__kernel_cosf+0x52>
 8003e12:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <__kernel_cosf+0x110>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	dc16      	bgt.n	8003e46 <__kernel_cosf+0xde>
 8003e18:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eeb7 5a00 	vmov.f32	s10, #112	; 0x70
 8003e24:	ee35 5a67 	vsub.f32	s10, s10, s15
 8003e28:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8003e2c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8003e30:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003e34:	eed7 7a06 	vfnms.f32	s15, s14, s12
 8003e38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e3c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003e40:	ee17 0a90 	vmov	r0, s15
 8003e44:	4770      	bx	lr
 8003e46:	eeb6 5a07 	vmov.f32	s10, #103	; 0x67
 8003e4a:	eef5 7a02 	vmov.f32	s15, #82	; 0x52
 8003e4e:	e7eb      	b.n	8003e28 <__kernel_cosf+0xc0>
 8003e50:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8003e54:	ee17 0a90 	vmov	r0, s15
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	ad47d74e 	.word	0xad47d74e
 8003e60:	310f74f6 	.word	0x310f74f6
 8003e64:	b493f27c 	.word	0xb493f27c
 8003e68:	37d00d01 	.word	0x37d00d01
 8003e6c:	bab60b61 	.word	0xbab60b61
 8003e70:	3d2aaaab 	.word	0x3d2aaaab
 8003e74:	3e999999 	.word	0x3e999999
 8003e78:	3f480000 	.word	0x3f480000

08003e7c <__kernel_rem_pio2f>:
 8003e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e80:	ed2d 8b04 	vpush	{d8-d9}
 8003e84:	b0d7      	sub	sp, #348	; 0x15c
 8003e86:	1e5e      	subs	r6, r3, #1
 8003e88:	4ca5      	ldr	r4, [pc, #660]	; (8004120 <__kernel_rem_pio2f+0x2a4>)
 8003e8a:	9d64      	ldr	r5, [sp, #400]	; 0x190
 8003e8c:	9302      	str	r3, [sp, #8]
 8003e8e:	1ed3      	subs	r3, r2, #3
 8003e90:	bf48      	it	mi
 8003e92:	1d13      	addmi	r3, r2, #4
 8003e94:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8003e98:	9101      	str	r1, [sp, #4]
 8003e9a:	10db      	asrs	r3, r3, #3
 8003e9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003ea0:	ea6f 0a03 	mvn.w	sl, r3
 8003ea4:	1971      	adds	r1, r6, r5
 8003ea6:	9303      	str	r3, [sp, #12]
 8003ea8:	4681      	mov	r9, r0
 8003eaa:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 8003eae:	eba3 0306 	sub.w	r3, r3, r6
 8003eb2:	d414      	bmi.n	8003ede <__kernel_rem_pio2f+0x62>
 8003eb4:	4419      	add	r1, r3
 8003eb6:	9865      	ldr	r0, [sp, #404]	; 0x194
 8003eb8:	3101      	adds	r1, #1
 8003eba:	aa1a      	add	r2, sp, #104	; 0x68
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bfaa      	itet	ge
 8003ec0:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8003ec4:	eddf 7a97 	vldrlt	s15, [pc, #604]	; 8004124 <__kernel_rem_pio2f+0x2a8>
 8003ec8:	ee07 4a90 	vmovge	s15, r4
 8003ecc:	f103 0301 	add.w	r3, r3, #1
 8003ed0:	bfa8      	it	ge
 8003ed2:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8003ed6:	428b      	cmp	r3, r1
 8003ed8:	ece2 7a01 	vstmia	r2!, {s15}
 8003edc:	d1ee      	bne.n	8003ebc <__kernel_rem_pio2f+0x40>
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	db1a      	blt.n	8003f18 <__kernel_rem_pio2f+0x9c>
 8003ee2:	9b02      	ldr	r3, [sp, #8]
 8003ee4:	a91a      	add	r1, sp, #104	; 0x68
 8003ee6:	1c6c      	adds	r4, r5, #1
 8003ee8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8003eec:	a842      	add	r0, sp, #264	; 0x108
 8003eee:	009f      	lsls	r7, r3, #2
 8003ef0:	2e00      	cmp	r6, #0
 8003ef2:	f2c0 81ce 	blt.w	8004292 <__kernel_rem_pio2f+0x416>
 8003ef6:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8004124 <__kernel_rem_pio2f+0x2a8>
 8003efa:	464a      	mov	r2, r9
 8003efc:	19cb      	adds	r3, r1, r7
 8003efe:	ed33 7a01 	vldmdb	r3!, {s14}
 8003f02:	ecf2 6a01 	vldmia	r2!, {s13}
 8003f06:	4299      	cmp	r1, r3
 8003f08:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003f0c:	d1f7      	bne.n	8003efe <__kernel_rem_pio2f+0x82>
 8003f0e:	3104      	adds	r1, #4
 8003f10:	42a1      	cmp	r1, r4
 8003f12:	ece0 7a01 	vstmia	r0!, {s15}
 8003f16:	d1eb      	bne.n	8003ef0 <__kernel_rem_pio2f+0x74>
 8003f18:	9a02      	ldr	r2, [sp, #8]
 8003f1a:	eddf 8a84 	vldr	s17, [pc, #528]	; 800412c <__kernel_rem_pio2f+0x2b0>
 8003f1e:	ed9f 8a82 	vldr	s16, [pc, #520]	; 8004128 <__kernel_rem_pio2f+0x2ac>
 8003f22:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8003f26:	3b01      	subs	r3, #1
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	ebc2 7882 	rsb	r8, r2, r2, lsl #30
 8003f2e:	aa06      	add	r2, sp, #24
 8003f30:	1d1f      	adds	r7, r3, #4
 8003f32:	4413      	add	r3, r2
 8003f34:	4417      	add	r7, r2
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8003f3c:	462c      	mov	r4, r5
 8003f3e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003f42:	ab56      	add	r3, sp, #344	; 0x158
 8003f44:	445b      	add	r3, fp
 8003f46:	2c00      	cmp	r4, #0
 8003f48:	ed53 6a14 	vldr	s13, [r3, #-80]	; 0xffffffb0
 8003f4c:	dd19      	ble.n	8003f82 <__kernel_rem_pio2f+0x106>
 8003f4e:	a942      	add	r1, sp, #264	; 0x108
 8003f50:	eb01 030b 	add.w	r3, r1, fp
 8003f54:	aa05      	add	r2, sp, #20
 8003f56:	ee66 7aa8 	vmul.f32	s15, s13, s17
 8003f5a:	eeb0 7a66 	vmov.f32	s14, s13
 8003f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f62:	ed33 6a01 	vldmdb	r3!, {s12}
 8003f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f6a:	428b      	cmp	r3, r1
 8003f6c:	eea7 7ac8 	vfms.f32	s14, s15, s16
 8003f70:	ee77 6a86 	vadd.f32	s13, s15, s12
 8003f74:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003f78:	ee17 0a10 	vmov	r0, s14
 8003f7c:	f842 0f04 	str.w	r0, [r2, #4]!
 8003f80:	d1e9      	bne.n	8003f56 <__kernel_rem_pio2f+0xda>
 8003f82:	ee16 0a90 	vmov	r0, s13
 8003f86:	4651      	mov	r1, sl
 8003f88:	f000 fb38 	bl	80045fc <scalbnf>
 8003f8c:	ee09 0a10 	vmov	s18, r0
 8003f90:	eef4 7a00 	vmov.f32	s15, #64	; 0x40
 8003f94:	ee69 7a27 	vmul.f32	s15, s18, s15
 8003f98:	ee17 0a90 	vmov	r0, s15
 8003f9c:	f000 fad4 	bl	8004548 <floorf>
 8003fa0:	ee07 0a10 	vmov	s14, r0
 8003fa4:	eef2 7a00 	vmov.f32	s15, #32
 8003fa8:	eea7 9a67 	vfms.f32	s18, s14, s15
 8003fac:	f1ba 0f00 	cmp.w	sl, #0
 8003fb0:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 8003fb4:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8003fb8:	ee39 9a67 	vsub.f32	s18, s18, s15
 8003fbc:	f340 814d 	ble.w	800425a <__kernel_rem_pio2f+0x3de>
 8003fc0:	1e61      	subs	r1, r4, #1
 8003fc2:	aa06      	add	r2, sp, #24
 8003fc4:	f1ca 0308 	rsb	r3, sl, #8
 8003fc8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8003fcc:	fa40 f203 	asr.w	r2, r0, r3
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	f10d 0e18 	add.w	lr, sp, #24
 8003fd8:	1ac3      	subs	r3, r0, r3
 8003fda:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 8003fde:	ee19 1a90 	vmov	r1, s19
 8003fe2:	4411      	add	r1, r2
 8003fe4:	f1ca 0007 	rsb	r0, sl, #7
 8003fe8:	ee09 1a90 	vmov	s19, r1
 8003fec:	fa43 fc00 	asr.w	ip, r3, r0
 8003ff0:	f1bc 0f00 	cmp.w	ip, #0
 8003ff4:	dd37      	ble.n	8004066 <__kernel_rem_pio2f+0x1ea>
 8003ff6:	ee19 3a90 	vmov	r3, s19
 8003ffa:	2c00      	cmp	r4, #0
 8003ffc:	f103 0301 	add.w	r3, r3, #1
 8004000:	ee09 3a90 	vmov	s19, r3
 8004004:	f340 81de 	ble.w	80043c4 <__kernel_rem_pio2f+0x548>
 8004008:	2200      	movs	r2, #0
 800400a:	4610      	mov	r0, r2
 800400c:	a905      	add	r1, sp, #20
 800400e:	e008      	b.n	8004022 <__kernel_rem_pio2f+0x1a6>
 8004010:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8004014:	b113      	cbz	r3, 800401c <__kernel_rem_pio2f+0x1a0>
 8004016:	f8c1 e000 	str.w	lr, [r1]
 800401a:	2001      	movs	r0, #1
 800401c:	3201      	adds	r2, #1
 800401e:	4294      	cmp	r4, r2
 8004020:	dd0b      	ble.n	800403a <__kernel_rem_pio2f+0x1be>
 8004022:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8004026:	2800      	cmp	r0, #0
 8004028:	d0f2      	beq.n	8004010 <__kernel_rem_pio2f+0x194>
 800402a:	3201      	adds	r2, #1
 800402c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004030:	4294      	cmp	r4, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	f04f 0001 	mov.w	r0, #1
 8004038:	dcf3      	bgt.n	8004022 <__kernel_rem_pio2f+0x1a6>
 800403a:	f1ba 0f00 	cmp.w	sl, #0
 800403e:	dd0f      	ble.n	8004060 <__kernel_rem_pio2f+0x1e4>
 8004040:	f1ba 0f01 	cmp.w	sl, #1
 8004044:	f000 8111 	beq.w	800426a <__kernel_rem_pio2f+0x3ee>
 8004048:	f1ba 0f02 	cmp.w	sl, #2
 800404c:	d108      	bne.n	8004060 <__kernel_rem_pio2f+0x1e4>
 800404e:	1e62      	subs	r2, r4, #1
 8004050:	ab06      	add	r3, sp, #24
 8004052:	a906      	add	r1, sp, #24
 8004054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800405c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004060:	f1bc 0f02 	cmp.w	ip, #2
 8004064:	d064      	beq.n	8004130 <__kernel_rem_pio2f+0x2b4>
 8004066:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	d177      	bne.n	8004160 <__kernel_rem_pio2f+0x2e4>
 8004070:	1e63      	subs	r3, r4, #1
 8004072:	429d      	cmp	r5, r3
 8004074:	dc0b      	bgt.n	800408e <__kernel_rem_pio2f+0x212>
 8004076:	aa06      	add	r2, sp, #24
 8004078:	4493      	add	fp, r2
 800407a:	2200      	movs	r2, #0
 800407c:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8004080:	45bb      	cmp	fp, r7
 8004082:	ea42 0201 	orr.w	r2, r2, r1
 8004086:	d1f9      	bne.n	800407c <__kernel_rem_pio2f+0x200>
 8004088:	2a00      	cmp	r2, #0
 800408a:	f040 8185 	bne.w	8004398 <__kernel_rem_pio2f+0x51c>
 800408e:	1e6b      	subs	r3, r5, #1
 8004090:	aa06      	add	r2, sp, #24
 8004092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 8191 	bne.w	80043be <__kernel_rem_pio2f+0x542>
 800409c:	9b04      	ldr	r3, [sp, #16]
 800409e:	f04f 0c01 	mov.w	ip, #1
 80040a2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80040a6:	f10c 0c01 	add.w	ip, ip, #1
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	d0f9      	beq.n	80040a2 <__kernel_rem_pio2f+0x226>
 80040ae:	44a4      	add	ip, r4
 80040b0:	1c63      	adds	r3, r4, #1
 80040b2:	4563      	cmp	r3, ip
 80040b4:	dc31      	bgt.n	800411a <__kernel_rem_pio2f+0x29e>
 80040b6:	9a03      	ldr	r2, [sp, #12]
 80040b8:	eb03 0e02 	add.w	lr, r3, r2
 80040bc:	9a02      	ldr	r2, [sp, #8]
 80040be:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80040c2:	18a0      	adds	r0, r4, r2
 80040c4:	eb0c 0b02 	add.w	fp, ip, r2
 80040c8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80040ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80040ce:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80040d2:	aa1a      	add	r2, sp, #104	; 0x68
 80040d4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80040d8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80040dc:	aa42      	add	r2, sp, #264	; 0x108
 80040de:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 80040e2:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	ece0 7a01 	vstmia	r0!, {s15}
 80040f4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004124 <__kernel_rem_pio2f+0x2a8>
 80040f8:	db0b      	blt.n	8004112 <__kernel_rem_pio2f+0x296>
 80040fa:	464a      	mov	r2, r9
 80040fc:	eb00 0108 	add.w	r1, r0, r8
 8004100:	4603      	mov	r3, r0
 8004102:	ed33 7a01 	vldmdb	r3!, {s14}
 8004106:	ecf2 6a01 	vldmia	r2!, {s13}
 800410a:	428b      	cmp	r3, r1
 800410c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004110:	d1f7      	bne.n	8004102 <__kernel_rem_pio2f+0x286>
 8004112:	4558      	cmp	r0, fp
 8004114:	ece4 7a01 	vstmia	r4!, {s15}
 8004118:	d1e3      	bne.n	80040e2 <__kernel_rem_pio2f+0x266>
 800411a:	4664      	mov	r4, ip
 800411c:	e70f      	b.n	8003f3e <__kernel_rem_pio2f+0xc2>
 800411e:	bf00      	nop
 8004120:	08005324 	.word	0x08005324
 8004124:	00000000 	.word	0x00000000
 8004128:	43800000 	.word	0x43800000
 800412c:	3b800000 	.word	0x3b800000
 8004130:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004134:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8004138:	2800      	cmp	r0, #0
 800413a:	d094      	beq.n	8004066 <__kernel_rem_pio2f+0x1ea>
 800413c:	ee17 0a90 	vmov	r0, s15
 8004140:	4651      	mov	r1, sl
 8004142:	f8cd c014 	str.w	ip, [sp, #20]
 8004146:	f000 fa59 	bl	80045fc <scalbnf>
 800414a:	ee07 0a90 	vmov	s15, r0
 800414e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8004152:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004156:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	d087      	beq.n	8004070 <__kernel_rem_pio2f+0x1f4>
 8004160:	ee19 0a10 	vmov	r0, s18
 8004164:	f1ca 0100 	rsb	r1, sl, #0
 8004168:	f8cd c008 	str.w	ip, [sp, #8]
 800416c:	f000 fa46 	bl	80045fc <scalbnf>
 8004170:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 8004128 <__kernel_rem_pio2f+0x2ac>
 8004174:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004178:	ee07 0a10 	vmov	s14, r0
 800417c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	f2c0 8181 	blt.w	800448a <__kernel_rem_pio2f+0x60e>
 8004188:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 800412c <__kernel_rem_pio2f+0x2b0>
 800418c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004190:	a906      	add	r1, sp, #24
 8004192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004196:	1c63      	adds	r3, r4, #1
 8004198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419c:	f10a 0a08 	add.w	sl, sl, #8
 80041a0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80041a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80041ac:	ee17 2a10 	vmov	r2, s14
 80041b0:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80041b4:	ee17 2a90 	vmov	r2, s15
 80041b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80041bc:	4651      	mov	r1, sl
 80041be:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80041c2:	9303      	str	r3, [sp, #12]
 80041c4:	f8cd c008 	str.w	ip, [sp, #8]
 80041c8:	f000 fa18 	bl	80045fc <scalbnf>
 80041cc:	9b03      	ldr	r3, [sp, #12]
 80041ce:	f8dd c008 	ldr.w	ip, [sp, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	ee07 0a10 	vmov	s14, r0
 80041d8:	f2c0 80c2 	blt.w	8004360 <__kernel_rem_pio2f+0x4e4>
 80041dc:	1c5f      	adds	r7, r3, #1
 80041de:	00ba      	lsls	r2, r7, #2
 80041e0:	a842      	add	r0, sp, #264	; 0x108
 80041e2:	a906      	add	r1, sp, #24
 80041e4:	ed5f 6a2f 	vldr	s13, [pc, #-188]	; 800412c <__kernel_rem_pio2f+0x2b0>
 80041e8:	4411      	add	r1, r2
 80041ea:	1886      	adds	r6, r0, r2
 80041ec:	ed71 7a01 	vldmdb	r1!, {s15}
 80041f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80041fc:	ed66 7a01 	vstmdb	r6!, {s15}
 8004200:	4286      	cmp	r6, r0
 8004202:	d1f3      	bne.n	80041ec <__kernel_rem_pio2f+0x370>
 8004204:	3a04      	subs	r2, #4
 8004206:	4416      	add	r6, r2
 8004208:	2400      	movs	r4, #0
 800420a:	2d00      	cmp	r5, #0
 800420c:	f2c0 80a5 	blt.w	800435a <__kernel_rem_pio2f+0x4de>
 8004210:	2c00      	cmp	r4, #0
 8004212:	f2c0 80a2 	blt.w	800435a <__kernel_rem_pio2f+0x4de>
 8004216:	48a1      	ldr	r0, [pc, #644]	; (800449c <__kernel_rem_pio2f+0x620>)
 8004218:	eddf 7aa1 	vldr	s15, [pc, #644]	; 80044a0 <__kernel_rem_pio2f+0x624>
 800421c:	4631      	mov	r1, r6
 800421e:	2200      	movs	r2, #0
 8004220:	e001      	b.n	8004226 <__kernel_rem_pio2f+0x3aa>
 8004222:	42a2      	cmp	r2, r4
 8004224:	dc08      	bgt.n	8004238 <__kernel_rem_pio2f+0x3bc>
 8004226:	ecf0 6a01 	vldmia	r0!, {s13}
 800422a:	ecb1 7a01 	vldmia	r1!, {s14}
 800422e:	3201      	adds	r2, #1
 8004230:	4295      	cmp	r5, r2
 8004232:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004236:	daf4      	bge.n	8004222 <__kernel_rem_pio2f+0x3a6>
 8004238:	aa56      	add	r2, sp, #344	; 0x158
 800423a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800423e:	3401      	adds	r4, #1
 8004240:	42bc      	cmp	r4, r7
 8004242:	f1a6 0604 	sub.w	r6, r6, #4
 8004246:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800424a:	d1de      	bne.n	800420a <__kernel_rem_pio2f+0x38e>
 800424c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800424e:	2a03      	cmp	r2, #3
 8004250:	d865      	bhi.n	800431e <__kernel_rem_pio2f+0x4a2>
 8004252:	e8df f002 	tbb	[pc, r2]
 8004256:	3a6d      	.short	0x3a6d
 8004258:	b93a      	.short	0xb93a
 800425a:	d110      	bne.n	800427e <__kernel_rem_pio2f+0x402>
 800425c:	1e63      	subs	r3, r4, #1
 800425e:	aa06      	add	r2, sp, #24
 8004260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004264:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8004268:	e6c2      	b.n	8003ff0 <__kernel_rem_pio2f+0x174>
 800426a:	1e62      	subs	r2, r4, #1
 800426c:	ab06      	add	r3, sp, #24
 800426e:	a906      	add	r1, sp, #24
 8004270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004278:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800427c:	e6f0      	b.n	8004060 <__kernel_rem_pio2f+0x1e4>
 800427e:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8004282:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8004286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428a:	da0b      	bge.n	80042a4 <__kernel_rem_pio2f+0x428>
 800428c:	f04f 0c00 	mov.w	ip, #0
 8004290:	e6e9      	b.n	8004066 <__kernel_rem_pio2f+0x1ea>
 8004292:	eddf 7a83 	vldr	s15, [pc, #524]	; 80044a0 <__kernel_rem_pio2f+0x624>
 8004296:	3104      	adds	r1, #4
 8004298:	42a1      	cmp	r1, r4
 800429a:	ece0 7a01 	vstmia	r0!, {s15}
 800429e:	f47f ae27 	bne.w	8003ef0 <__kernel_rem_pio2f+0x74>
 80042a2:	e639      	b.n	8003f18 <__kernel_rem_pio2f+0x9c>
 80042a4:	ee19 3a90 	vmov	r3, s19
 80042a8:	2c00      	cmp	r4, #0
 80042aa:	f103 0301 	add.w	r3, r3, #1
 80042ae:	ee09 3a90 	vmov	s19, r3
 80042b2:	bfc8      	it	gt
 80042b4:	f04f 0c02 	movgt.w	ip, #2
 80042b8:	f73f aea6 	bgt.w	8004008 <__kernel_rem_pio2f+0x18c>
 80042bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80042c0:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80042c4:	f04f 0c02 	mov.w	ip, #2
 80042c8:	e6cd      	b.n	8004066 <__kernel_rem_pio2f+0x1ea>
 80042ca:	aa2e      	add	r2, sp, #184	; 0xb8
 80042cc:	eddf 7a74 	vldr	s15, [pc, #464]	; 80044a0 <__kernel_rem_pio2f+0x624>
 80042d0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80042d4:	ed37 7a01 	vldmdb	r7!, {s14}
 80042d8:	4297      	cmp	r7, r2
 80042da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042de:	d1f9      	bne.n	80042d4 <__kernel_rem_pio2f+0x458>
 80042e0:	f1bc 0f00 	cmp.w	ip, #0
 80042e4:	d048      	beq.n	8004378 <__kernel_rem_pio2f+0x4fc>
 80042e6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80042ea:	9a01      	ldr	r2, [sp, #4]
 80042ec:	eeb1 7a67 	vneg.f32	s14, s15
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80042f6:	ed82 7a00 	vstr	s14, [r2]
 80042fa:	dd0b      	ble.n	8004314 <__kernel_rem_pio2f+0x498>
 80042fc:	a92f      	add	r1, sp, #188	; 0xbc
 80042fe:	2201      	movs	r2, #1
 8004300:	ecb1 7a01 	vldmia	r1!, {s14}
 8004304:	3201      	adds	r2, #1
 8004306:	4293      	cmp	r3, r2
 8004308:	ee77 7a87 	vadd.f32	s15, s15, s14
 800430c:	daf8      	bge.n	8004300 <__kernel_rem_pio2f+0x484>
 800430e:	f1bc 0f00 	cmp.w	ip, #0
 8004312:	d001      	beq.n	8004318 <__kernel_rem_pio2f+0x49c>
 8004314:	eef1 7a67 	vneg.f32	s15, s15
 8004318:	9b01      	ldr	r3, [sp, #4]
 800431a:	edc3 7a01 	vstr	s15, [r3, #4]
 800431e:	ee19 3a90 	vmov	r3, s19
 8004322:	f003 0007 	and.w	r0, r3, #7
 8004326:	b057      	add	sp, #348	; 0x15c
 8004328:	ecbd 8b04 	vpop	{d8-d9}
 800432c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004330:	aa2e      	add	r2, sp, #184	; 0xb8
 8004332:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80044a0 <__kernel_rem_pio2f+0x624>
 8004336:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800433a:	ed37 7a01 	vldmdb	r7!, {s14}
 800433e:	3b01      	subs	r3, #1
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004346:	d1f8      	bne.n	800433a <__kernel_rem_pio2f+0x4be>
 8004348:	f1bc 0f00 	cmp.w	ip, #0
 800434c:	d001      	beq.n	8004352 <__kernel_rem_pio2f+0x4d6>
 800434e:	eef1 7a67 	vneg.f32	s15, s15
 8004352:	9b01      	ldr	r3, [sp, #4]
 8004354:	edc3 7a00 	vstr	s15, [r3]
 8004358:	e7e1      	b.n	800431e <__kernel_rem_pio2f+0x4a2>
 800435a:	eddf 7a51 	vldr	s15, [pc, #324]	; 80044a0 <__kernel_rem_pio2f+0x624>
 800435e:	e76b      	b.n	8004238 <__kernel_rem_pio2f+0x3bc>
 8004360:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004362:	2a03      	cmp	r2, #3
 8004364:	d8db      	bhi.n	800431e <__kernel_rem_pio2f+0x4a2>
 8004366:	e8df f002 	tbb	[pc, r2]
 800436a:	0214      	.short	0x0214
 800436c:	8302      	.short	0x8302
 800436e:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80044a0 <__kernel_rem_pio2f+0x624>
 8004372:	f1bc 0f00 	cmp.w	ip, #0
 8004376:	d1b6      	bne.n	80042e6 <__kernel_rem_pio2f+0x46a>
 8004378:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 800437c:	9a01      	ldr	r2, [sp, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	edc2 7a00 	vstr	s15, [r2]
 8004384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004388:	dcb8      	bgt.n	80042fc <__kernel_rem_pio2f+0x480>
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	edc3 7a01 	vstr	s15, [r3, #4]
 8004390:	e7c5      	b.n	800431e <__kernel_rem_pio2f+0x4a2>
 8004392:	eddf 7a43 	vldr	s15, [pc, #268]	; 80044a0 <__kernel_rem_pio2f+0x624>
 8004396:	e7d7      	b.n	8004348 <__kernel_rem_pio2f+0x4cc>
 8004398:	aa06      	add	r2, sp, #24
 800439a:	f1aa 0a08 	sub.w	sl, sl, #8
 800439e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80043a2:	2a00      	cmp	r2, #0
 80043a4:	f47f af0a 	bne.w	80041bc <__kernel_rem_pio2f+0x340>
 80043a8:	aa06      	add	r2, sp, #24
 80043aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80043ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80043b2:	3b01      	subs	r3, #1
 80043b4:	f1aa 0a08 	sub.w	sl, sl, #8
 80043b8:	2900      	cmp	r1, #0
 80043ba:	d0f8      	beq.n	80043ae <__kernel_rem_pio2f+0x532>
 80043bc:	e6fe      	b.n	80041bc <__kernel_rem_pio2f+0x340>
 80043be:	f04f 0c01 	mov.w	ip, #1
 80043c2:	e674      	b.n	80040ae <__kernel_rem_pio2f+0x232>
 80043c4:	2000      	movs	r0, #0
 80043c6:	e638      	b.n	800403a <__kernel_rem_pio2f+0x1be>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	dd51      	ble.n	8004470 <__kernel_rem_pio2f+0x5f4>
 80043cc:	009a      	lsls	r2, r3, #2
 80043ce:	a956      	add	r1, sp, #344	; 0x158
 80043d0:	4411      	add	r1, r2
 80043d2:	ac2e      	add	r4, sp, #184	; 0xb8
 80043d4:	1d10      	adds	r0, r2, #4
 80043d6:	ed11 7a28 	vldr	s14, [r1, #-160]	; 0xffffff60
 80043da:	4420      	add	r0, r4
 80043dc:	18a1      	adds	r1, r4, r2
 80043de:	ed71 7a01 	vldmdb	r1!, {s15}
 80043e2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80043e6:	42a1      	cmp	r1, r4
 80043e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80043ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f0:	eeb0 7a66 	vmov.f32	s14, s13
 80043f4:	ed60 7a01 	vstmdb	r0!, {s15}
 80043f8:	edc1 6a00 	vstr	s13, [r1]
 80043fc:	d1ef      	bne.n	80043de <__kernel_rem_pio2f+0x562>
 80043fe:	2b01      	cmp	r3, #1
 8004400:	dd36      	ble.n	8004470 <__kernel_rem_pio2f+0x5f4>
 8004402:	1d13      	adds	r3, r2, #4
 8004404:	a856      	add	r0, sp, #344	; 0x158
 8004406:	4410      	add	r0, r2
 8004408:	440b      	add	r3, r1
 800440a:	ed10 7a28 	vldr	s14, [r0, #-160]	; 0xffffff60
 800440e:	440a      	add	r2, r1
 8004410:	a82f      	add	r0, sp, #188	; 0xbc
 8004412:	4619      	mov	r1, r3
 8004414:	ed72 7a01 	vldmdb	r2!, {s15}
 8004418:	ee77 6a87 	vadd.f32	s13, s15, s14
 800441c:	4282      	cmp	r2, r0
 800441e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004426:	eeb0 7a66 	vmov.f32	s14, s13
 800442a:	ed61 7a01 	vstmdb	r1!, {s15}
 800442e:	edc2 6a00 	vstr	s13, [r2]
 8004432:	d1ef      	bne.n	8004414 <__kernel_rem_pio2f+0x598>
 8004434:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80044a0 <__kernel_rem_pio2f+0x624>
 8004438:	aa30      	add	r2, sp, #192	; 0xc0
 800443a:	ed33 7a01 	vldmdb	r3!, {s14}
 800443e:	4293      	cmp	r3, r2
 8004440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004444:	d1f9      	bne.n	800443a <__kernel_rem_pio2f+0x5be>
 8004446:	f1bc 0f00 	cmp.w	ip, #0
 800444a:	d016      	beq.n	800447a <__kernel_rem_pio2f+0x5fe>
 800444c:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8004450:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8004454:	9a01      	ldr	r2, [sp, #4]
 8004456:	eef1 7a67 	vneg.f32	s15, s15
 800445a:	eef1 6a66 	vneg.f32	s13, s13
 800445e:	eeb1 7a47 	vneg.f32	s14, s14
 8004462:	edc2 7a02 	vstr	s15, [r2, #8]
 8004466:	edc2 6a00 	vstr	s13, [r2]
 800446a:	ed82 7a01 	vstr	s14, [r2, #4]
 800446e:	e756      	b.n	800431e <__kernel_rem_pio2f+0x4a2>
 8004470:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80044a0 <__kernel_rem_pio2f+0x624>
 8004474:	f1bc 0f00 	cmp.w	ip, #0
 8004478:	d1e8      	bne.n	800444c <__kernel_rem_pio2f+0x5d0>
 800447a:	9801      	ldr	r0, [sp, #4]
 800447c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800447e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8004480:	edc0 7a02 	vstr	s15, [r0, #8]
 8004484:	6002      	str	r2, [r0, #0]
 8004486:	6043      	str	r3, [r0, #4]
 8004488:	e749      	b.n	800431e <__kernel_rem_pio2f+0x4a2>
 800448a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800448e:	a906      	add	r1, sp, #24
 8004490:	ee17 2a10 	vmov	r2, s14
 8004494:	4623      	mov	r3, r4
 8004496:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800449a:	e68f      	b.n	80041bc <__kernel_rem_pio2f+0x340>
 800449c:	08005330 	.word	0x08005330
 80044a0:	00000000 	.word	0x00000000

080044a4 <__kernel_sinf>:
 80044a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80044a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80044ac:	ee07 0a90 	vmov	s15, r0
 80044b0:	ee06 1a10 	vmov	s12, r1
 80044b4:	da04      	bge.n	80044c0 <__kernel_sinf+0x1c>
 80044b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80044ba:	ee17 3a10 	vmov	r3, s14
 80044be:	b323      	cbz	r3, 800450a <__kernel_sinf+0x66>
 80044c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80044c4:	ed9f 4a17 	vldr	s8, [pc, #92]	; 8004524 <__kernel_sinf+0x80>
 80044c8:	eddf 4a17 	vldr	s9, [pc, #92]	; 8004528 <__kernel_sinf+0x84>
 80044cc:	ed9f 5a17 	vldr	s10, [pc, #92]	; 800452c <__kernel_sinf+0x88>
 80044d0:	eddf 5a17 	vldr	s11, [pc, #92]	; 8004530 <__kernel_sinf+0x8c>
 80044d4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004534 <__kernel_sinf+0x90>
 80044d8:	eee7 4a04 	vfma.f32	s9, s14, s8
 80044dc:	ee27 4a27 	vmul.f32	s8, s14, s15
 80044e0:	eea4 5a87 	vfma.f32	s10, s9, s14
 80044e4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80044e8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80044ec:	b182      	cbz	r2, 8004510 <__kernel_sinf+0x6c>
 80044ee:	ee66 6ac4 	vnmul.f32	s13, s13, s8
 80044f2:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 80044f6:	eee6 6a25 	vfma.f32	s13, s12, s11
 80044fa:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8004538 <__kernel_sinf+0x94>
 80044fe:	ee96 6a87 	vfnms.f32	s12, s13, s14
 8004502:	eea4 6a25 	vfma.f32	s12, s8, s11
 8004506:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800450a:	ee17 0a90 	vmov	r0, s15
 800450e:	4770      	bx	lr
 8004510:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 800453c <__kernel_sinf+0x98>
 8004514:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004518:	eee6 7a04 	vfma.f32	s15, s12, s8
 800451c:	ee17 0a90 	vmov	r0, s15
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	2f2ec9d3 	.word	0x2f2ec9d3
 8004528:	b2d72f34 	.word	0xb2d72f34
 800452c:	3638ef1b 	.word	0x3638ef1b
 8004530:	b9500d01 	.word	0xb9500d01
 8004534:	3c088889 	.word	0x3c088889
 8004538:	3e2aaaab 	.word	0x3e2aaaab
 800453c:	be2aaaab 	.word	0xbe2aaaab

08004540 <fabsf>:
 8004540:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop

08004548 <floorf>:
 8004548:	b410      	push	{r4}
 800454a:	b083      	sub	sp, #12
 800454c:	9001      	str	r0, [sp, #4]
 800454e:	9a01      	ldr	r2, [sp, #4]
 8004550:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004554:	0dcb      	lsrs	r3, r1, #23
 8004556:	3b7f      	subs	r3, #127	; 0x7f
 8004558:	2b16      	cmp	r3, #22
 800455a:	dc19      	bgt.n	8004590 <floorf+0x48>
 800455c:	2b00      	cmp	r3, #0
 800455e:	4614      	mov	r4, r2
 8004560:	db28      	blt.n	80045b4 <floorf+0x6c>
 8004562:	4824      	ldr	r0, [pc, #144]	; (80045f4 <floorf+0xac>)
 8004564:	4118      	asrs	r0, r3
 8004566:	4210      	tst	r0, r2
 8004568:	d015      	beq.n	8004596 <floorf+0x4e>
 800456a:	eddf 7a23 	vldr	s15, [pc, #140]	; 80045f8 <floorf+0xb0>
 800456e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457e:	dd28      	ble.n	80045d2 <floorf+0x8a>
 8004580:	2a00      	cmp	r2, #0
 8004582:	db29      	blt.n	80045d8 <floorf+0x90>
 8004584:	ea24 0000 	bic.w	r0, r4, r0
 8004588:	b003      	add	sp, #12
 800458a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004594:	d204      	bcs.n	80045a0 <floorf+0x58>
 8004596:	9801      	ldr	r0, [sp, #4]
 8004598:	b003      	add	sp, #12
 800459a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	eddd 7a01 	vldr	s15, [sp, #4]
 80045a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045a8:	ee17 0a90 	vmov	r0, s15
 80045ac:	b003      	add	sp, #12
 80045ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80045f8 <floorf+0xb0>
 80045b8:	ee07 0a10 	vmov	s14, r0
 80045bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c8:	dde5      	ble.n	8004596 <floorf+0x4e>
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	db0a      	blt.n	80045e4 <floorf+0x9c>
 80045ce:	2000      	movs	r0, #0
 80045d0:	e7e2      	b.n	8004598 <floorf+0x50>
 80045d2:	ee17 0a10 	vmov	r0, s14
 80045d6:	e7df      	b.n	8004598 <floorf+0x50>
 80045d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045dc:	fa42 f303 	asr.w	r3, r2, r3
 80045e0:	441c      	add	r4, r3
 80045e2:	e7cf      	b.n	8004584 <floorf+0x3c>
 80045e4:	2900      	cmp	r1, #0
 80045e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 80045ea:	bf18      	it	ne
 80045ec:	ee17 0a90 	vmovne	r0, s15
 80045f0:	e7d2      	b.n	8004598 <floorf+0x50>
 80045f2:	bf00      	nop
 80045f4:	007fffff 	.word	0x007fffff
 80045f8:	7149f2ca 	.word	0x7149f2ca

080045fc <scalbnf>:
 80045fc:	b500      	push	{lr}
 80045fe:	ed2d 8b02 	vpush	{d8}
 8004602:	b083      	sub	sp, #12
 8004604:	9001      	str	r0, [sp, #4]
 8004606:	9b01      	ldr	r3, [sp, #4]
 8004608:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800460c:	d023      	beq.n	8004656 <scalbnf+0x5a>
 800460e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004612:	d215      	bcs.n	8004640 <scalbnf+0x44>
 8004614:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004618:	d326      	bcc.n	8004668 <scalbnf+0x6c>
 800461a:	0dd2      	lsrs	r2, r2, #23
 800461c:	440a      	add	r2, r1
 800461e:	2afe      	cmp	r2, #254	; 0xfe
 8004620:	dc3c      	bgt.n	800469c <scalbnf+0xa0>
 8004622:	2a00      	cmp	r2, #0
 8004624:	dd30      	ble.n	8004688 <scalbnf+0x8c>
 8004626:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800462a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	ee17 0a90 	vmov	r0, s15
 8004636:	b003      	add	sp, #12
 8004638:	ecbd 8b02 	vpop	{d8}
 800463c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004640:	ee07 0a90 	vmov	s15, r0
 8004644:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004648:	ee17 0a90 	vmov	r0, s15
 800464c:	b003      	add	sp, #12
 800464e:	ecbd 8b02 	vpop	{d8}
 8004652:	f85d fb04 	ldr.w	pc, [sp], #4
 8004656:	eddd 7a01 	vldr	s15, [sp, #4]
 800465a:	ee17 0a90 	vmov	r0, s15
 800465e:	b003      	add	sp, #12
 8004660:	ecbd 8b02 	vpop	{d8}
 8004664:	f85d fb04 	ldr.w	pc, [sp], #4
 8004668:	ed9d 7a01 	vldr	s14, [sp, #4]
 800466c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80046e8 <scalbnf+0xec>
 8004670:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <scalbnf+0xf0>)
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	4299      	cmp	r1, r3
 8004678:	edcd 7a01 	vstr	s15, [sp, #4]
 800467c:	db20      	blt.n	80046c0 <scalbnf+0xc4>
 800467e:	9b01      	ldr	r3, [sp, #4]
 8004680:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004684:	3a19      	subs	r2, #25
 8004686:	e7c9      	b.n	800461c <scalbnf+0x20>
 8004688:	f112 0f16 	cmn.w	r2, #22
 800468c:	da1f      	bge.n	80046ce <scalbnf+0xd2>
 800468e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004692:	4299      	cmp	r1, r3
 8004694:	dc02      	bgt.n	800469c <scalbnf+0xa0>
 8004696:	ed9f 8a16 	vldr	s16, [pc, #88]	; 80046f0 <scalbnf+0xf4>
 800469a:	e001      	b.n	80046a0 <scalbnf+0xa4>
 800469c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80046f4 <scalbnf+0xf8>
 80046a0:	9901      	ldr	r1, [sp, #4]
 80046a2:	ee18 0a10 	vmov	r0, s16
 80046a6:	f000 f829 	bl	80046fc <copysignf>
 80046aa:	ee07 0a90 	vmov	s15, r0
 80046ae:	ee67 7a88 	vmul.f32	s15, s15, s16
 80046b2:	ee17 0a90 	vmov	r0, s15
 80046b6:	b003      	add	sp, #12
 80046b8:	ecbd 8b02 	vpop	{d8}
 80046bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80046c0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80046f0 <scalbnf+0xf4>
 80046c4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80046c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046cc:	e7bc      	b.n	8004648 <scalbnf+0x4c>
 80046ce:	3219      	adds	r2, #25
 80046d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80046d4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80046d8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80046f8 <scalbnf+0xfc>
 80046dc:	ee07 3a90 	vmov	s15, r3
 80046e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046e4:	e7b0      	b.n	8004648 <scalbnf+0x4c>
 80046e6:	bf00      	nop
 80046e8:	4c000000 	.word	0x4c000000
 80046ec:	ffff3cb0 	.word	0xffff3cb0
 80046f0:	0da24260 	.word	0x0da24260
 80046f4:	7149f2ca 	.word	0x7149f2ca
 80046f8:	33000000 	.word	0x33000000

080046fc <copysignf>:
 80046fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004700:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004704:	4308      	orrs	r0, r1
 8004706:	4770      	bx	lr

08004708 <__aeabi_drsub>:
 8004708:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800470c:	e002      	b.n	8004714 <__adddf3>
 800470e:	bf00      	nop

08004710 <__aeabi_dsub>:
 8004710:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004714 <__adddf3>:
 8004714:	b530      	push	{r4, r5, lr}
 8004716:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800471a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800471e:	ea94 0f05 	teq	r4, r5
 8004722:	bf08      	it	eq
 8004724:	ea90 0f02 	teqeq	r0, r2
 8004728:	bf1f      	itttt	ne
 800472a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800472e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004732:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004736:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800473a:	f000 80e2 	beq.w	8004902 <__adddf3+0x1ee>
 800473e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004742:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004746:	bfb8      	it	lt
 8004748:	426d      	neglt	r5, r5
 800474a:	dd0c      	ble.n	8004766 <__adddf3+0x52>
 800474c:	442c      	add	r4, r5
 800474e:	ea80 0202 	eor.w	r2, r0, r2
 8004752:	ea81 0303 	eor.w	r3, r1, r3
 8004756:	ea82 0000 	eor.w	r0, r2, r0
 800475a:	ea83 0101 	eor.w	r1, r3, r1
 800475e:	ea80 0202 	eor.w	r2, r0, r2
 8004762:	ea81 0303 	eor.w	r3, r1, r3
 8004766:	2d36      	cmp	r5, #54	; 0x36
 8004768:	bf88      	it	hi
 800476a:	bd30      	pophi	{r4, r5, pc}
 800476c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004774:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004778:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800477c:	d002      	beq.n	8004784 <__adddf3+0x70>
 800477e:	4240      	negs	r0, r0
 8004780:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004784:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800478c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004790:	d002      	beq.n	8004798 <__adddf3+0x84>
 8004792:	4252      	negs	r2, r2
 8004794:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004798:	ea94 0f05 	teq	r4, r5
 800479c:	f000 80a7 	beq.w	80048ee <__adddf3+0x1da>
 80047a0:	f1a4 0401 	sub.w	r4, r4, #1
 80047a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80047a8:	db0d      	blt.n	80047c6 <__adddf3+0xb2>
 80047aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80047ae:	fa22 f205 	lsr.w	r2, r2, r5
 80047b2:	1880      	adds	r0, r0, r2
 80047b4:	f141 0100 	adc.w	r1, r1, #0
 80047b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80047bc:	1880      	adds	r0, r0, r2
 80047be:	fa43 f305 	asr.w	r3, r3, r5
 80047c2:	4159      	adcs	r1, r3
 80047c4:	e00e      	b.n	80047e4 <__adddf3+0xd0>
 80047c6:	f1a5 0520 	sub.w	r5, r5, #32
 80047ca:	f10e 0e20 	add.w	lr, lr, #32
 80047ce:	2a01      	cmp	r2, #1
 80047d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80047d4:	bf28      	it	cs
 80047d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80047da:	fa43 f305 	asr.w	r3, r3, r5
 80047de:	18c0      	adds	r0, r0, r3
 80047e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80047e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80047e8:	d507      	bpl.n	80047fa <__adddf3+0xe6>
 80047ea:	f04f 0e00 	mov.w	lr, #0
 80047ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80047f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80047f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80047fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80047fe:	d31b      	bcc.n	8004838 <__adddf3+0x124>
 8004800:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004804:	d30c      	bcc.n	8004820 <__adddf3+0x10c>
 8004806:	0849      	lsrs	r1, r1, #1
 8004808:	ea5f 0030 	movs.w	r0, r0, rrx
 800480c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004810:	f104 0401 	add.w	r4, r4, #1
 8004814:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004818:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800481c:	f080 809a 	bcs.w	8004954 <__adddf3+0x240>
 8004820:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004824:	bf08      	it	eq
 8004826:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800482a:	f150 0000 	adcs.w	r0, r0, #0
 800482e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004832:	ea41 0105 	orr.w	r1, r1, r5
 8004836:	bd30      	pop	{r4, r5, pc}
 8004838:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800483c:	4140      	adcs	r0, r0
 800483e:	eb41 0101 	adc.w	r1, r1, r1
 8004842:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004846:	f1a4 0401 	sub.w	r4, r4, #1
 800484a:	d1e9      	bne.n	8004820 <__adddf3+0x10c>
 800484c:	f091 0f00 	teq	r1, #0
 8004850:	bf04      	itt	eq
 8004852:	4601      	moveq	r1, r0
 8004854:	2000      	moveq	r0, #0
 8004856:	fab1 f381 	clz	r3, r1
 800485a:	bf08      	it	eq
 800485c:	3320      	addeq	r3, #32
 800485e:	f1a3 030b 	sub.w	r3, r3, #11
 8004862:	f1b3 0220 	subs.w	r2, r3, #32
 8004866:	da0c      	bge.n	8004882 <__adddf3+0x16e>
 8004868:	320c      	adds	r2, #12
 800486a:	dd08      	ble.n	800487e <__adddf3+0x16a>
 800486c:	f102 0c14 	add.w	ip, r2, #20
 8004870:	f1c2 020c 	rsb	r2, r2, #12
 8004874:	fa01 f00c 	lsl.w	r0, r1, ip
 8004878:	fa21 f102 	lsr.w	r1, r1, r2
 800487c:	e00c      	b.n	8004898 <__adddf3+0x184>
 800487e:	f102 0214 	add.w	r2, r2, #20
 8004882:	bfd8      	it	le
 8004884:	f1c2 0c20 	rsble	ip, r2, #32
 8004888:	fa01 f102 	lsl.w	r1, r1, r2
 800488c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004890:	bfdc      	itt	le
 8004892:	ea41 010c 	orrle.w	r1, r1, ip
 8004896:	4090      	lslle	r0, r2
 8004898:	1ae4      	subs	r4, r4, r3
 800489a:	bfa2      	ittt	ge
 800489c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80048a0:	4329      	orrge	r1, r5
 80048a2:	bd30      	popge	{r4, r5, pc}
 80048a4:	ea6f 0404 	mvn.w	r4, r4
 80048a8:	3c1f      	subs	r4, #31
 80048aa:	da1c      	bge.n	80048e6 <__adddf3+0x1d2>
 80048ac:	340c      	adds	r4, #12
 80048ae:	dc0e      	bgt.n	80048ce <__adddf3+0x1ba>
 80048b0:	f104 0414 	add.w	r4, r4, #20
 80048b4:	f1c4 0220 	rsb	r2, r4, #32
 80048b8:	fa20 f004 	lsr.w	r0, r0, r4
 80048bc:	fa01 f302 	lsl.w	r3, r1, r2
 80048c0:	ea40 0003 	orr.w	r0, r0, r3
 80048c4:	fa21 f304 	lsr.w	r3, r1, r4
 80048c8:	ea45 0103 	orr.w	r1, r5, r3
 80048cc:	bd30      	pop	{r4, r5, pc}
 80048ce:	f1c4 040c 	rsb	r4, r4, #12
 80048d2:	f1c4 0220 	rsb	r2, r4, #32
 80048d6:	fa20 f002 	lsr.w	r0, r0, r2
 80048da:	fa01 f304 	lsl.w	r3, r1, r4
 80048de:	ea40 0003 	orr.w	r0, r0, r3
 80048e2:	4629      	mov	r1, r5
 80048e4:	bd30      	pop	{r4, r5, pc}
 80048e6:	fa21 f004 	lsr.w	r0, r1, r4
 80048ea:	4629      	mov	r1, r5
 80048ec:	bd30      	pop	{r4, r5, pc}
 80048ee:	f094 0f00 	teq	r4, #0
 80048f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80048f6:	bf06      	itte	eq
 80048f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80048fc:	3401      	addeq	r4, #1
 80048fe:	3d01      	subne	r5, #1
 8004900:	e74e      	b.n	80047a0 <__adddf3+0x8c>
 8004902:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004906:	bf18      	it	ne
 8004908:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800490c:	d029      	beq.n	8004962 <__adddf3+0x24e>
 800490e:	ea94 0f05 	teq	r4, r5
 8004912:	bf08      	it	eq
 8004914:	ea90 0f02 	teqeq	r0, r2
 8004918:	d005      	beq.n	8004926 <__adddf3+0x212>
 800491a:	ea54 0c00 	orrs.w	ip, r4, r0
 800491e:	bf04      	itt	eq
 8004920:	4619      	moveq	r1, r3
 8004922:	4610      	moveq	r0, r2
 8004924:	bd30      	pop	{r4, r5, pc}
 8004926:	ea91 0f03 	teq	r1, r3
 800492a:	bf1e      	ittt	ne
 800492c:	2100      	movne	r1, #0
 800492e:	2000      	movne	r0, #0
 8004930:	bd30      	popne	{r4, r5, pc}
 8004932:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004936:	d105      	bne.n	8004944 <__adddf3+0x230>
 8004938:	0040      	lsls	r0, r0, #1
 800493a:	4149      	adcs	r1, r1
 800493c:	bf28      	it	cs
 800493e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004942:	bd30      	pop	{r4, r5, pc}
 8004944:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004948:	bf3c      	itt	cc
 800494a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800494e:	bd30      	popcc	{r4, r5, pc}
 8004950:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004954:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800495c:	f04f 0000 	mov.w	r0, #0
 8004960:	bd30      	pop	{r4, r5, pc}
 8004962:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004966:	bf1a      	itte	ne
 8004968:	4619      	movne	r1, r3
 800496a:	4610      	movne	r0, r2
 800496c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004970:	bf1c      	itt	ne
 8004972:	460b      	movne	r3, r1
 8004974:	4602      	movne	r2, r0
 8004976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800497a:	bf06      	itte	eq
 800497c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004980:	ea91 0f03 	teqeq	r1, r3
 8004984:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004988:	bd30      	pop	{r4, r5, pc}
 800498a:	bf00      	nop

0800498c <__aeabi_ui2d>:
 800498c:	f090 0f00 	teq	r0, #0
 8004990:	bf04      	itt	eq
 8004992:	2100      	moveq	r1, #0
 8004994:	4770      	bxeq	lr
 8004996:	b530      	push	{r4, r5, lr}
 8004998:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800499c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80049a0:	f04f 0500 	mov.w	r5, #0
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	e750      	b.n	800484c <__adddf3+0x138>
 80049aa:	bf00      	nop

080049ac <__aeabi_i2d>:
 80049ac:	f090 0f00 	teq	r0, #0
 80049b0:	bf04      	itt	eq
 80049b2:	2100      	moveq	r1, #0
 80049b4:	4770      	bxeq	lr
 80049b6:	b530      	push	{r4, r5, lr}
 80049b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80049bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80049c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80049c4:	bf48      	it	mi
 80049c6:	4240      	negmi	r0, r0
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	e73e      	b.n	800484c <__adddf3+0x138>
 80049ce:	bf00      	nop

080049d0 <__aeabi_f2d>:
 80049d0:	0042      	lsls	r2, r0, #1
 80049d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80049d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80049da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80049de:	bf1f      	itttt	ne
 80049e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80049e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80049e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80049ec:	4770      	bxne	lr
 80049ee:	f092 0f00 	teq	r2, #0
 80049f2:	bf14      	ite	ne
 80049f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80049f8:	4770      	bxeq	lr
 80049fa:	b530      	push	{r4, r5, lr}
 80049fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004a00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004a04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004a08:	e720      	b.n	800484c <__adddf3+0x138>
 8004a0a:	bf00      	nop

08004a0c <__aeabi_ul2d>:
 8004a0c:	ea50 0201 	orrs.w	r2, r0, r1
 8004a10:	bf08      	it	eq
 8004a12:	4770      	bxeq	lr
 8004a14:	b530      	push	{r4, r5, lr}
 8004a16:	f04f 0500 	mov.w	r5, #0
 8004a1a:	e00a      	b.n	8004a32 <__aeabi_l2d+0x16>

08004a1c <__aeabi_l2d>:
 8004a1c:	ea50 0201 	orrs.w	r2, r0, r1
 8004a20:	bf08      	it	eq
 8004a22:	4770      	bxeq	lr
 8004a24:	b530      	push	{r4, r5, lr}
 8004a26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004a2a:	d502      	bpl.n	8004a32 <__aeabi_l2d+0x16>
 8004a2c:	4240      	negs	r0, r0
 8004a2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004a32:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004a36:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004a3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004a3e:	f43f aedc 	beq.w	80047fa <__adddf3+0xe6>
 8004a42:	f04f 0203 	mov.w	r2, #3
 8004a46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004a4a:	bf18      	it	ne
 8004a4c:	3203      	addne	r2, #3
 8004a4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004a52:	bf18      	it	ne
 8004a54:	3203      	addne	r2, #3
 8004a56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004a5a:	f1c2 0320 	rsb	r3, r2, #32
 8004a5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8004a62:	fa20 f002 	lsr.w	r0, r0, r2
 8004a66:	fa01 fe03 	lsl.w	lr, r1, r3
 8004a6a:	ea40 000e 	orr.w	r0, r0, lr
 8004a6e:	fa21 f102 	lsr.w	r1, r1, r2
 8004a72:	4414      	add	r4, r2
 8004a74:	e6c1      	b.n	80047fa <__adddf3+0xe6>
 8004a76:	bf00      	nop

08004a78 <__aeabi_dmul>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004a7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004a82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004a86:	bf1d      	ittte	ne
 8004a88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004a8c:	ea94 0f0c 	teqne	r4, ip
 8004a90:	ea95 0f0c 	teqne	r5, ip
 8004a94:	f000 f8de 	bleq	8004c54 <__aeabi_dmul+0x1dc>
 8004a98:	442c      	add	r4, r5
 8004a9a:	ea81 0603 	eor.w	r6, r1, r3
 8004a9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004aa2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004aa6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004aaa:	bf18      	it	ne
 8004aac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004ab0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab8:	d038      	beq.n	8004b2c <__aeabi_dmul+0xb4>
 8004aba:	fba0 ce02 	umull	ip, lr, r0, r2
 8004abe:	f04f 0500 	mov.w	r5, #0
 8004ac2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004ac6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004aca:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004ace:	f04f 0600 	mov.w	r6, #0
 8004ad2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004ad6:	f09c 0f00 	teq	ip, #0
 8004ada:	bf18      	it	ne
 8004adc:	f04e 0e01 	orrne.w	lr, lr, #1
 8004ae0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004ae4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004ae8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004aec:	d204      	bcs.n	8004af8 <__aeabi_dmul+0x80>
 8004aee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004af2:	416d      	adcs	r5, r5
 8004af4:	eb46 0606 	adc.w	r6, r6, r6
 8004af8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004afc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004b00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004b04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004b08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004b0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004b10:	bf88      	it	hi
 8004b12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004b16:	d81e      	bhi.n	8004b56 <__aeabi_dmul+0xde>
 8004b18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004b1c:	bf08      	it	eq
 8004b1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004b22:	f150 0000 	adcs.w	r0, r0, #0
 8004b26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004b30:	ea46 0101 	orr.w	r1, r6, r1
 8004b34:	ea40 0002 	orr.w	r0, r0, r2
 8004b38:	ea81 0103 	eor.w	r1, r1, r3
 8004b3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004b40:	bfc2      	ittt	gt
 8004b42:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004b46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004b4a:	bd70      	popgt	{r4, r5, r6, pc}
 8004b4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b50:	f04f 0e00 	mov.w	lr, #0
 8004b54:	3c01      	subs	r4, #1
 8004b56:	f300 80ab 	bgt.w	8004cb0 <__aeabi_dmul+0x238>
 8004b5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004b5e:	bfde      	ittt	le
 8004b60:	2000      	movle	r0, #0
 8004b62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004b66:	bd70      	pople	{r4, r5, r6, pc}
 8004b68:	f1c4 0400 	rsb	r4, r4, #0
 8004b6c:	3c20      	subs	r4, #32
 8004b6e:	da35      	bge.n	8004bdc <__aeabi_dmul+0x164>
 8004b70:	340c      	adds	r4, #12
 8004b72:	dc1b      	bgt.n	8004bac <__aeabi_dmul+0x134>
 8004b74:	f104 0414 	add.w	r4, r4, #20
 8004b78:	f1c4 0520 	rsb	r5, r4, #32
 8004b7c:	fa00 f305 	lsl.w	r3, r0, r5
 8004b80:	fa20 f004 	lsr.w	r0, r0, r4
 8004b84:	fa01 f205 	lsl.w	r2, r1, r5
 8004b88:	ea40 0002 	orr.w	r0, r0, r2
 8004b8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004b90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004b94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004b98:	fa21 f604 	lsr.w	r6, r1, r4
 8004b9c:	eb42 0106 	adc.w	r1, r2, r6
 8004ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004ba4:	bf08      	it	eq
 8004ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	f1c4 040c 	rsb	r4, r4, #12
 8004bb0:	f1c4 0520 	rsb	r5, r4, #32
 8004bb4:	fa00 f304 	lsl.w	r3, r0, r4
 8004bb8:	fa20 f005 	lsr.w	r0, r0, r5
 8004bbc:	fa01 f204 	lsl.w	r2, r1, r4
 8004bc0:	ea40 0002 	orr.w	r0, r0, r2
 8004bc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004bc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004bcc:	f141 0100 	adc.w	r1, r1, #0
 8004bd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004bd4:	bf08      	it	eq
 8004bd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f1c4 0520 	rsb	r5, r4, #32
 8004be0:	fa00 f205 	lsl.w	r2, r0, r5
 8004be4:	ea4e 0e02 	orr.w	lr, lr, r2
 8004be8:	fa20 f304 	lsr.w	r3, r0, r4
 8004bec:	fa01 f205 	lsl.w	r2, r1, r5
 8004bf0:	ea43 0302 	orr.w	r3, r3, r2
 8004bf4:	fa21 f004 	lsr.w	r0, r1, r4
 8004bf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004bfc:	fa21 f204 	lsr.w	r2, r1, r4
 8004c00:	ea20 0002 	bic.w	r0, r0, r2
 8004c04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004c08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004c0c:	bf08      	it	eq
 8004c0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f094 0f00 	teq	r4, #0
 8004c18:	d10f      	bne.n	8004c3a <__aeabi_dmul+0x1c2>
 8004c1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004c1e:	0040      	lsls	r0, r0, #1
 8004c20:	eb41 0101 	adc.w	r1, r1, r1
 8004c24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004c28:	bf08      	it	eq
 8004c2a:	3c01      	subeq	r4, #1
 8004c2c:	d0f7      	beq.n	8004c1e <__aeabi_dmul+0x1a6>
 8004c2e:	ea41 0106 	orr.w	r1, r1, r6
 8004c32:	f095 0f00 	teq	r5, #0
 8004c36:	bf18      	it	ne
 8004c38:	4770      	bxne	lr
 8004c3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004c3e:	0052      	lsls	r2, r2, #1
 8004c40:	eb43 0303 	adc.w	r3, r3, r3
 8004c44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004c48:	bf08      	it	eq
 8004c4a:	3d01      	subeq	r5, #1
 8004c4c:	d0f7      	beq.n	8004c3e <__aeabi_dmul+0x1c6>
 8004c4e:	ea43 0306 	orr.w	r3, r3, r6
 8004c52:	4770      	bx	lr
 8004c54:	ea94 0f0c 	teq	r4, ip
 8004c58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004c5c:	bf18      	it	ne
 8004c5e:	ea95 0f0c 	teqne	r5, ip
 8004c62:	d00c      	beq.n	8004c7e <__aeabi_dmul+0x206>
 8004c64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004c68:	bf18      	it	ne
 8004c6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004c6e:	d1d1      	bne.n	8004c14 <__aeabi_dmul+0x19c>
 8004c70:	ea81 0103 	eor.w	r1, r1, r3
 8004c74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004c78:	f04f 0000 	mov.w	r0, #0
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
 8004c7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004c82:	bf06      	itte	eq
 8004c84:	4610      	moveq	r0, r2
 8004c86:	4619      	moveq	r1, r3
 8004c88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004c8c:	d019      	beq.n	8004cc2 <__aeabi_dmul+0x24a>
 8004c8e:	ea94 0f0c 	teq	r4, ip
 8004c92:	d102      	bne.n	8004c9a <__aeabi_dmul+0x222>
 8004c94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004c98:	d113      	bne.n	8004cc2 <__aeabi_dmul+0x24a>
 8004c9a:	ea95 0f0c 	teq	r5, ip
 8004c9e:	d105      	bne.n	8004cac <__aeabi_dmul+0x234>
 8004ca0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004ca4:	bf1c      	itt	ne
 8004ca6:	4610      	movne	r0, r2
 8004ca8:	4619      	movne	r1, r3
 8004caa:	d10a      	bne.n	8004cc2 <__aeabi_dmul+0x24a>
 8004cac:	ea81 0103 	eor.w	r1, r1, r3
 8004cb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004cb4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004cb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cbc:	f04f 0000 	mov.w	r0, #0
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
 8004cc2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004cc6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8004cca:	bd70      	pop	{r4, r5, r6, pc}

08004ccc <__aeabi_ddiv>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004cd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004cd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004cda:	bf1d      	ittte	ne
 8004cdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004ce0:	ea94 0f0c 	teqne	r4, ip
 8004ce4:	ea95 0f0c 	teqne	r5, ip
 8004ce8:	f000 f8a7 	bleq	8004e3a <__aeabi_ddiv+0x16e>
 8004cec:	eba4 0405 	sub.w	r4, r4, r5
 8004cf0:	ea81 0e03 	eor.w	lr, r1, r3
 8004cf4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004cf8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004cfc:	f000 8088 	beq.w	8004e10 <__aeabi_ddiv+0x144>
 8004d00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004d04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004d08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004d0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004d10:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004d14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004d18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004d1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004d20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004d24:	429d      	cmp	r5, r3
 8004d26:	bf08      	it	eq
 8004d28:	4296      	cmpeq	r6, r2
 8004d2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004d2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004d32:	d202      	bcs.n	8004d3a <__aeabi_ddiv+0x6e>
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	ea4f 0232 	mov.w	r2, r2, rrx
 8004d3a:	1ab6      	subs	r6, r6, r2
 8004d3c:	eb65 0503 	sbc.w	r5, r5, r3
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	ea4f 0232 	mov.w	r2, r2, rrx
 8004d46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004d4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004d4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004d52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004d56:	bf22      	ittt	cs
 8004d58:	1ab6      	subcs	r6, r6, r2
 8004d5a:	4675      	movcs	r5, lr
 8004d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	ea4f 0232 	mov.w	r2, r2, rrx
 8004d66:	ebb6 0e02 	subs.w	lr, r6, r2
 8004d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004d6e:	bf22      	ittt	cs
 8004d70:	1ab6      	subcs	r6, r6, r2
 8004d72:	4675      	movcs	r5, lr
 8004d74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8004d7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004d82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004d86:	bf22      	ittt	cs
 8004d88:	1ab6      	subcs	r6, r6, r2
 8004d8a:	4675      	movcs	r5, lr
 8004d8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	ea4f 0232 	mov.w	r2, r2, rrx
 8004d96:	ebb6 0e02 	subs.w	lr, r6, r2
 8004d9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004d9e:	bf22      	ittt	cs
 8004da0:	1ab6      	subcs	r6, r6, r2
 8004da2:	4675      	movcs	r5, lr
 8004da4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004da8:	ea55 0e06 	orrs.w	lr, r5, r6
 8004dac:	d018      	beq.n	8004de0 <__aeabi_ddiv+0x114>
 8004dae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004db2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004db6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8004dba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004dbe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004dc2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004dc6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8004dca:	d1c0      	bne.n	8004d4e <__aeabi_ddiv+0x82>
 8004dcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004dd0:	d10b      	bne.n	8004dea <__aeabi_ddiv+0x11e>
 8004dd2:	ea41 0100 	orr.w	r1, r1, r0
 8004dd6:	f04f 0000 	mov.w	r0, #0
 8004dda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004dde:	e7b6      	b.n	8004d4e <__aeabi_ddiv+0x82>
 8004de0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004de4:	bf04      	itt	eq
 8004de6:	4301      	orreq	r1, r0
 8004de8:	2000      	moveq	r0, #0
 8004dea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004dee:	bf88      	it	hi
 8004df0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004df4:	f63f aeaf 	bhi.w	8004b56 <__aeabi_dmul+0xde>
 8004df8:	ebb5 0c03 	subs.w	ip, r5, r3
 8004dfc:	bf04      	itt	eq
 8004dfe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004e02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004e06:	f150 0000 	adcs.w	r0, r0, #0
 8004e0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004e14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004e18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004e1c:	bfc2      	ittt	gt
 8004e1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004e22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004e26:	bd70      	popgt	{r4, r5, r6, pc}
 8004e28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004e2c:	f04f 0e00 	mov.w	lr, #0
 8004e30:	3c01      	subs	r4, #1
 8004e32:	e690      	b.n	8004b56 <__aeabi_dmul+0xde>
 8004e34:	ea45 0e06 	orr.w	lr, r5, r6
 8004e38:	e68d      	b.n	8004b56 <__aeabi_dmul+0xde>
 8004e3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004e3e:	ea94 0f0c 	teq	r4, ip
 8004e42:	bf08      	it	eq
 8004e44:	ea95 0f0c 	teqeq	r5, ip
 8004e48:	f43f af3b 	beq.w	8004cc2 <__aeabi_dmul+0x24a>
 8004e4c:	ea94 0f0c 	teq	r4, ip
 8004e50:	d10a      	bne.n	8004e68 <__aeabi_ddiv+0x19c>
 8004e52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004e56:	f47f af34 	bne.w	8004cc2 <__aeabi_dmul+0x24a>
 8004e5a:	ea95 0f0c 	teq	r5, ip
 8004e5e:	f47f af25 	bne.w	8004cac <__aeabi_dmul+0x234>
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	e72c      	b.n	8004cc2 <__aeabi_dmul+0x24a>
 8004e68:	ea95 0f0c 	teq	r5, ip
 8004e6c:	d106      	bne.n	8004e7c <__aeabi_ddiv+0x1b0>
 8004e6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004e72:	f43f aefd 	beq.w	8004c70 <__aeabi_dmul+0x1f8>
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	e722      	b.n	8004cc2 <__aeabi_dmul+0x24a>
 8004e7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004e80:	bf18      	it	ne
 8004e82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004e86:	f47f aec5 	bne.w	8004c14 <__aeabi_dmul+0x19c>
 8004e8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8004e8e:	f47f af0d 	bne.w	8004cac <__aeabi_dmul+0x234>
 8004e92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004e96:	f47f aeeb 	bne.w	8004c70 <__aeabi_dmul+0x1f8>
 8004e9a:	e712      	b.n	8004cc2 <__aeabi_dmul+0x24a>

08004e9c <__aeabi_d2f>:
 8004e9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004ea0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004ea4:	bf24      	itt	cs
 8004ea6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004eaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004eae:	d90d      	bls.n	8004ecc <__aeabi_d2f+0x30>
 8004eb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004eb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004eb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004ebc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004ec0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004ec4:	bf08      	it	eq
 8004ec6:	f020 0001 	biceq.w	r0, r0, #1
 8004eca:	4770      	bx	lr
 8004ecc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004ed0:	d121      	bne.n	8004f16 <__aeabi_d2f+0x7a>
 8004ed2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004ed6:	bfbc      	itt	lt
 8004ed8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004edc:	4770      	bxlt	lr
 8004ede:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004ee2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004ee6:	f1c2 0218 	rsb	r2, r2, #24
 8004eea:	f1c2 0c20 	rsb	ip, r2, #32
 8004eee:	fa10 f30c 	lsls.w	r3, r0, ip
 8004ef2:	fa20 f002 	lsr.w	r0, r0, r2
 8004ef6:	bf18      	it	ne
 8004ef8:	f040 0001 	orrne.w	r0, r0, #1
 8004efc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004f00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004f04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004f08:	ea40 000c 	orr.w	r0, r0, ip
 8004f0c:	fa23 f302 	lsr.w	r3, r3, r2
 8004f10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004f14:	e7cc      	b.n	8004eb0 <__aeabi_d2f+0x14>
 8004f16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004f1a:	d107      	bne.n	8004f2c <__aeabi_d2f+0x90>
 8004f1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004f20:	bf1e      	ittt	ne
 8004f22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004f26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004f2a:	4770      	bxne	lr
 8004f2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004f30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004f34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop

08004f3c <__libc_init_array>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	4e0f      	ldr	r6, [pc, #60]	; (8004f7c <__libc_init_array+0x40>)
 8004f40:	4d0f      	ldr	r5, [pc, #60]	; (8004f80 <__libc_init_array+0x44>)
 8004f42:	1b76      	subs	r6, r6, r5
 8004f44:	10b6      	asrs	r6, r6, #2
 8004f46:	bf18      	it	ne
 8004f48:	2400      	movne	r4, #0
 8004f4a:	d005      	beq.n	8004f58 <__libc_init_array+0x1c>
 8004f4c:	3401      	adds	r4, #1
 8004f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f52:	4798      	blx	r3
 8004f54:	42a6      	cmp	r6, r4
 8004f56:	d1f9      	bne.n	8004f4c <__libc_init_array+0x10>
 8004f58:	4e0a      	ldr	r6, [pc, #40]	; (8004f84 <__libc_init_array+0x48>)
 8004f5a:	4d0b      	ldr	r5, [pc, #44]	; (8004f88 <__libc_init_array+0x4c>)
 8004f5c:	1b76      	subs	r6, r6, r5
 8004f5e:	f7fb fbdd 	bl	800071c <_init>
 8004f62:	10b6      	asrs	r6, r6, #2
 8004f64:	bf18      	it	ne
 8004f66:	2400      	movne	r4, #0
 8004f68:	d006      	beq.n	8004f78 <__libc_init_array+0x3c>
 8004f6a:	3401      	adds	r4, #1
 8004f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f70:	4798      	blx	r3
 8004f72:	42a6      	cmp	r6, r4
 8004f74:	d1f9      	bne.n	8004f6a <__libc_init_array+0x2e>
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
 8004f7a:	bf00      	nop
 8004f7c:	1ffe8844 	.word	0x1ffe8844
 8004f80:	1ffe8844 	.word	0x1ffe8844
 8004f84:	1ffe8844 	.word	0x1ffe8844
 8004f88:	1ffe8844 	.word	0x1ffe8844

08004f8c <npio2_hw>:
 8004f8c:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8004f9c:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8004fac:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 8004fbc:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 8004fcc:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 8004fdc:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 8004fec:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 8004ffc:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0800500c <two_over_pi>:
 800500c:	000000a2 000000f9 00000083 0000006e     ............n...
 800501c:	0000004e 00000044 00000015 00000029     N...D.......)...
 800502c:	000000fc 00000027 00000057 000000d1     ....'...W.......
 800503c:	000000f5 00000034 000000dd 000000c0     ....4...........
 800504c:	000000db 00000062 00000095 00000099     ....b...........
 800505c:	0000003c 00000043 00000090 00000041     <...C.......A...
 800506c:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 800507c:	000000de 000000bb 000000c5 00000061     ............a...
 800508c:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 800509c:	00000042 0000004d 000000d2 000000e0     B...M...........
 80050ac:	00000006 00000049 0000002e 000000ea     ....I...........
 80050bc:	00000009 000000d1 00000092 0000001c     ................
 80050cc:	000000fe 0000001d 000000eb 0000001c     ................
 80050dc:	000000b1 00000029 000000a7 0000003e     ....).......>...
 80050ec:	000000e8 00000082 00000035 000000f5     ........5.......
 80050fc:	0000002e 000000bb 00000044 00000084     ........D.......
 800510c:	000000e9 0000009c 00000070 00000026     ........p...&...
 800511c:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 800512c:	00000039 00000091 000000d6 00000039     9...........9...
 800513c:	00000083 00000053 00000039 000000f4     ....S...9.......
 800514c:	0000009c 00000084 0000005f 0000008b     ........_.......
 800515c:	000000bd 000000f9 00000028 0000003b     ........(...;...
 800516c:	0000001f 000000f8 00000097 000000ff     ................
 800517c:	000000de 00000005 00000098 0000000f     ................
 800518c:	000000ef 0000002f 00000011 0000008b     ..../...........
 800519c:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 80051ac:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 80051bc:	00000027 000000cb 00000009 000000b7     '...............
 80051cc:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 80051dc:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 80051ec:	00000075 00000027 000000ba 000000c7     u...'...........
 80051fc:	000000eb 000000e5 000000f1 0000007b     ............{...
 800520c:	0000003d 00000007 00000039 000000f7     =.......9.......
 800521c:	0000008a 00000052 00000092 000000ea     ....R...........
 800522c:	0000006b 000000fb 0000005f 000000b1     k......._.......
 800523c:	0000001f 0000008d 0000005d 00000008     ........].......
 800524c:	00000056 00000003 00000030 00000046     V.......0...F...
 800525c:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 800526c:	000000f0 000000cf 000000bc 00000020     ............ ...
 800527c:	0000009a 000000f4 00000036 0000001d     ........6.......
 800528c:	000000a9 000000e3 00000091 00000061     ............a...
 800529c:	0000005e 000000e6 0000001b 00000008     ^...............
 80052ac:	00000065 00000099 00000085 0000005f     e..........._...
 80052bc:	00000014 000000a0 00000068 00000040     ........h...@...
 80052cc:	0000008d 000000ff 000000d8 00000080     ................
 80052dc:	0000004d 00000073 00000027 00000031     M...s...'...1...
 80052ec:	00000006 00000006 00000015 00000056     ............V...
 80052fc:	000000ca 00000073 000000a8 000000c9     ....s...........
 800530c:	00000060 000000e2 0000007b 000000c0     `.......{.......
 800531c:	0000008c 0000006b                       ....k...

08005324 <init_jk>:
 8005324:	00000004 00000007 00000009              ............

08005330 <PIo2>:
 8005330:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8005340:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8005350:	1fc40000 1bc60000 17440000              ..........D.
