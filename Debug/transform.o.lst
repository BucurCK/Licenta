   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "transform.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm CCU8_CC8_CR1_CR1_Value,4,4
  20              	 .global mechanical_position_fast
  21              	 .section .bss.mechanical_position_fast,"aw",%nobits
  22              	 .align 2
  25              	mechanical_position_fast:
  26 0000 00000000 	 .space 4
  27              	 .global electrical_position_modulo_fast
  28              	 .section .bss.electrical_position_modulo_fast,"aw",%nobits
  29              	 .align 2
  32              	electrical_position_modulo_fast:
  33 0000 00000000 	 .space 4
  34              	 .global theta_fast
  35              	 .section .bss.theta_fast,"aw",%nobits
  36              	 .align 2
  39              	theta_fast:
  40 0000 00000000 	 .space 4
  41              	 .global sin_theta_fast
  42              	 .section .bss.sin_theta_fast,"aw",%nobits
  43              	 .align 2
  46              	sin_theta_fast:
  47 0000 00000000 	 .space 4
  48              	 .global cos_theta_fast
  49              	 .section .bss.cos_theta_fast,"aw",%nobits
  50              	 .align 2
  53              	cos_theta_fast:
  54 0000 00000000 	 .space 4
  55              	 .global timer_value_fast
  56              	 .section .bss.timer_value_fast,"aw",%nobits
  57              	 .align 1
  60              	timer_value_fast:
  61 0000 0000     	 .space 2
  62              	 .global timer_value_old_fast
  63              	 .section .bss.timer_value_old_fast,"aw",%nobits
  64              	 .align 1
  67              	timer_value_old_fast:
  68 0000 0000     	 .space 2
  69              	 .global speed_value_fast
  70              	 .section .bss.speed_value_fast,"aw",%nobits
  71              	 .align 1
  74              	speed_value_fast:
  75 0000 0000     	 .space 2
  76              	 .global encoder_resolution
  77              	 .section .data.encoder_resolution,"aw",%progbits
  78              	 .align 1
  81              	encoder_resolution:
  82 0000 D007     	 .short 2000
  83              	 .global pp
  84              	 .section .data.pp,"aw",%progbits
  87              	pp:
  88 0000 04       	 .byte 4
  89              	 .global electrical_resolution
  90              	 .section .bss.electrical_resolution,"aw",%nobits
  91              	 .align 1
  94              	electrical_resolution:
  95 0000 0000     	 .space 2
  96              	 .comm u_a_ref,4,4
  97              	 .comm u_b_ref,4,4
  98              	 .comm u_c_ref,4,4
  99              	 .comm i_d,4,4
 100              	 .comm i_q,4,4
 101              	 .comm i_alpha,4,4
 102              	 .comm i_beta,4,4
 103              	 .comm u_alpha,4,4
 104              	 .comm u_beta,4,4
 105              	 .section .text.abc_dq,"ax",%progbits
 106              	 .align 2
 107              	 .global abc_dq
 108              	 .thumb
 109              	 .thumb_func
 111              	abc_dq:
 112              	.LFB196:
 113              	 .file 1 "../transform.c"
   1:../transform.c **** #include <stdint.h>
   2:../transform.c **** #include <stdbool.h>
   3:../transform.c **** #include <xmc_common.h>
   4:../transform.c **** #include "driver_pwm.h"
   5:../transform.c **** #include "motor_data_update.h"
   6:../transform.c **** #include "transform.h"
   7:../transform.c **** #include "main.h"
   8:../transform.c **** #include <math.h>
   9:../transform.c **** #include "Encoder.h"
  10:../transform.c **** #include "driver_adc.h"
  11:../transform.c **** #include "pi_regulator.h"
  12:../transform.c **** #include "state_machine.h"
  13:../transform.c **** #include <math.h>
  14:../transform.c **** 
  15:../transform.c **** int32_t mechanical_position_fast = 0;		 // compute the mechanical position of the motor based on sp
  16:../transform.c **** int32_t electrical_position_modulo_fast = 0; // the module of electrical position based on electric
  17:../transform.c **** float_t theta_fast = 0;						 // electric angle
  18:../transform.c **** float_t sin_theta_fast = 0;					 // sin(theta)
  19:../transform.c **** float_t cos_theta_fast = 0;					 // cos(theta)
  20:../transform.c **** uint16_t timer_value_fast = 0;				 // Stored value of CCU40 timer for encoder
  21:../transform.c **** uint16_t timer_value_old_fast = 0;			 //*Last* read of timer value for speed computation
  22:../transform.c **** int16_t speed_value_fast = 0;				 // Speed value based on 2 timer values
  23:../transform.c **** int16_t encoder_resolution = 2000;			 // Resolution of encoder | 4*500
  24:../transform.c **** int8_t pp = 4;								 // Number of electric poles
  25:../transform.c **** int16_t electrical_resolution = 0;			 // Electrical resolution based on encoder resolution and numb
  26:../transform.c **** float_t u_a_ref, u_b_ref, u_c_ref;			 // abc voltage | -32768 -- 32,767
  27:../transform.c **** float_t i_d, i_q;							 // dq voltage																   *
  28:../transform.c **** float_t i_alpha, i_beta;					 // currents for dq computation
  29:../transform.c **** float_t u_alpha, u_beta;					 // voltage for abc computation
  30:../transform.c **** 
  31:../transform.c **** /*
  32:../transform.c ****  * Convert three-phase electrical signals from time-domain to dq0-reference frame
  33:../transform.c ****  */
  34:../transform.c **** void abc_dq(void)
  35:../transform.c **** {
 114              	 .loc 1 35 0
 115              	 .cfi_startproc
 116              	 
 117              	 
 118              	 
 119 0000 80B4     	 push {r7}
 120              	.LCFI0:
 121              	 .cfi_def_cfa_offset 4
 122              	 .cfi_offset 7,-4
 123 0002 00AF     	 add r7,sp,#0
 124              	.LCFI1:
 125              	 .cfi_def_cfa_register 7
  36:../transform.c **** 	// The Clarke Transformation
  37:../transform.c **** 	i_alpha = ia;
 126              	 .loc 1 37 0
 127 0004 274B     	 ldr r3,.L2
 128 0006 1B88     	 ldrh r3,[r3]
 129 0008 1BB2     	 sxth r3,r3
 130 000a 07EE903A 	 fmsr s15,r3
 131 000e F8EEE77A 	 fsitos s15,s15
 132 0012 254B     	 ldr r3,.L2+4
 133 0014 C3ED007A 	 fsts s15,[r3]
  38:../transform.c **** 	i_beta = F_1_SQRT_3 * (float_t)(ia + (float_t)(2 * ib));
 134              	 .loc 1 38 0
 135 0018 224B     	 ldr r3,.L2
 136 001a 1B88     	 ldrh r3,[r3]
 137 001c 1BB2     	 sxth r3,r3
 138 001e 07EE903A 	 fmsr s15,r3
 139 0022 B8EEE77A 	 fsitos s14,s15
 140 0026 214B     	 ldr r3,.L2+8
 141 0028 1B88     	 ldrh r3,[r3]
 142 002a 1BB2     	 sxth r3,r3
 143 002c 5B00     	 lsls r3,r3,#1
 144 002e 07EE903A 	 fmsr s15,r3
 145 0032 F8EEE77A 	 fsitos s15,s15
 146 0036 77EE277A 	 fadds s15,s14,s15
 147 003a 9FED1D7A 	 flds s14,.L2+12
 148 003e 67EE877A 	 fmuls s15,s15,s14
 149 0042 1C4B     	 ldr r3,.L2+16
 150 0044 C3ED007A 	 fsts s15,[r3]
  39:../transform.c **** 
  40:../transform.c **** 	// The Park Transformation
  41:../transform.c **** 	i_d = i_alpha * cos_theta_fast + i_beta * sin_theta_fast;
 151              	 .loc 1 41 0
 152 0048 174B     	 ldr r3,.L2+4
 153 004a 93ED007A 	 flds s14,[r3]
 154 004e 1A4B     	 ldr r3,.L2+20
 155 0050 D3ED007A 	 flds s15,[r3]
 156 0054 27EE277A 	 fmuls s14,s14,s15
 157 0058 164B     	 ldr r3,.L2+16
 158 005a D3ED006A 	 flds s13,[r3]
 159 005e 174B     	 ldr r3,.L2+24
 160 0060 D3ED007A 	 flds s15,[r3]
 161 0064 66EEA77A 	 fmuls s15,s13,s15
 162 0068 77EE277A 	 fadds s15,s14,s15
 163 006c 144B     	 ldr r3,.L2+28
 164 006e C3ED007A 	 fsts s15,[r3]
  42:../transform.c **** 	i_q = i_beta * cos_theta_fast - i_alpha * sin_theta_fast;
 165              	 .loc 1 42 0
 166 0072 104B     	 ldr r3,.L2+16
 167 0074 93ED007A 	 flds s14,[r3]
 168 0078 0F4B     	 ldr r3,.L2+20
 169 007a D3ED007A 	 flds s15,[r3]
 170 007e 27EE277A 	 fmuls s14,s14,s15
 171 0082 094B     	 ldr r3,.L2+4
 172 0084 D3ED006A 	 flds s13,[r3]
 173 0088 0C4B     	 ldr r3,.L2+24
 174 008a D3ED007A 	 flds s15,[r3]
 175 008e 66EEA77A 	 fmuls s15,s13,s15
 176 0092 77EE677A 	 fsubs s15,s14,s15
 177 0096 0B4B     	 ldr r3,.L2+32
 178 0098 C3ED007A 	 fsts s15,[r3]
  43:../transform.c **** }
 179              	 .loc 1 43 0
 180 009c BD46     	 mov sp,r7
 181              	.LCFI2:
 182              	 .cfi_def_cfa_register 13
 183              	 
 184 009e 5DF8047B 	 ldr r7,[sp],#4
 185              	.LCFI3:
 186              	 .cfi_restore 7
 187              	 .cfi_def_cfa_offset 0
 188 00a2 7047     	 bx lr
 189              	.L3:
 190              	 .align 2
 191              	.L2:
 192 00a4 00000000 	 .word ia
 193 00a8 00000000 	 .word i_alpha
 194 00ac 00000000 	 .word ib
 195 00b0 39CD133F 	 .word 1058262329
 196 00b4 00000000 	 .word i_beta
 197 00b8 00000000 	 .word cos_theta_fast
 198 00bc 00000000 	 .word sin_theta_fast
 199 00c0 00000000 	 .word i_d
 200 00c4 00000000 	 .word i_q
 201              	 .cfi_endproc
 202              	.LFE196:
 204              	 .section .text.dq_abc,"ax",%progbits
 205              	 .align 2
 206              	 .global dq_abc
 207              	 .thumb
 208              	 .thumb_func
 210              	dq_abc:
 211              	.LFB197:
  44:../transform.c **** 
  45:../transform.c **** /*
  46:../transform.c ****  * Convert two-phase balanced sinusoidal signals to three-phase electrical signals
  47:../transform.c ****  */
  48:../transform.c **** void dq_abc(void)
  49:../transform.c **** {
 212              	 .loc 1 49 0
 213              	 .cfi_startproc
 214              	 
 215              	 
 216              	 
 217 0000 80B4     	 push {r7}
 218              	.LCFI4:
 219              	 .cfi_def_cfa_offset 4
 220              	 .cfi_offset 7,-4
 221 0002 00AF     	 add r7,sp,#0
 222              	.LCFI5:
 223              	 .cfi_def_cfa_register 7
  50:../transform.c **** 
  51:../transform.c **** 	// The Inverse Park Transformation
  52:../transform.c **** 	u_alpha = u_d_ref * cos_theta_fast - u_q_ref * sin_theta_fast;
 224              	 .loc 1 52 0
 225 0004 564B     	 ldr r3,.L26
 226 0006 93ED007A 	 flds s14,[r3]
 227 000a 564B     	 ldr r3,.L26+4
 228 000c D3ED007A 	 flds s15,[r3]
 229 0010 27EE277A 	 fmuls s14,s14,s15
 230 0014 544B     	 ldr r3,.L26+8
 231 0016 D3ED006A 	 flds s13,[r3]
 232 001a 544B     	 ldr r3,.L26+12
 233 001c D3ED007A 	 flds s15,[r3]
 234 0020 66EEA77A 	 fmuls s15,s13,s15
 235 0024 77EE677A 	 fsubs s15,s14,s15
 236 0028 514B     	 ldr r3,.L26+16
 237 002a C3ED007A 	 fsts s15,[r3]
  53:../transform.c **** 	u_beta = u_q_ref * cos_theta_fast + u_d_ref * sin_theta_fast;
 238              	 .loc 1 53 0
 239 002e 4E4B     	 ldr r3,.L26+8
 240 0030 93ED007A 	 flds s14,[r3]
 241 0034 4B4B     	 ldr r3,.L26+4
 242 0036 D3ED007A 	 flds s15,[r3]
 243 003a 27EE277A 	 fmuls s14,s14,s15
 244 003e 484B     	 ldr r3,.L26
 245 0040 D3ED006A 	 flds s13,[r3]
 246 0044 494B     	 ldr r3,.L26+12
 247 0046 D3ED007A 	 flds s15,[r3]
 248 004a 66EEA77A 	 fmuls s15,s13,s15
 249 004e 77EE277A 	 fadds s15,s14,s15
 250 0052 484B     	 ldr r3,.L26+20
 251 0054 C3ED007A 	 fsts s15,[r3]
  54:../transform.c **** 
  55:../transform.c **** 	// The Inverse Clarke Transformation
  56:../transform.c **** 	u_a_ref = u_alpha;
 252              	 .loc 1 56 0
 253 0058 454B     	 ldr r3,.L26+16
 254 005a 1B68     	 ldr r3,[r3]
 255 005c 464A     	 ldr r2,.L26+24
 256 005e 1360     	 str r3,[r2]
  57:../transform.c **** 	u_b_ref = (-u_alpha + SQRT_3 * u_beta) / 2;
 257              	 .loc 1 57 0
 258 0060 444B     	 ldr r3,.L26+20
 259 0062 D3ED007A 	 flds s15,[r3]
 260 0066 9FED457A 	 flds s14,.L26+28
 261 006a 27EE877A 	 fmuls s14,s15,s14
 262 006e 404B     	 ldr r3,.L26+16
 263 0070 D3ED007A 	 flds s15,[r3]
 264 0074 77EE677A 	 fsubs s15,s14,s15
 265 0078 B0EE007A 	 fconsts s14,#0
 266 007c C7EE877A 	 fdivs s15,s15,s14
 267 0080 3F4B     	 ldr r3,.L26+32
 268 0082 C3ED007A 	 fsts s15,[r3]
  58:../transform.c **** 	u_c_ref = (-u_alpha - SQRT_3 * u_beta) / 2;
 269              	 .loc 1 58 0
 270 0086 3A4B     	 ldr r3,.L26+16
 271 0088 D3ED007A 	 flds s15,[r3]
 272 008c B1EE677A 	 fnegs s14,s15
 273 0090 384B     	 ldr r3,.L26+20
 274 0092 D3ED007A 	 flds s15,[r3]
 275 0096 DFED396A 	 flds s13,.L26+28
 276 009a 67EEA67A 	 fmuls s15,s15,s13
 277 009e 77EE677A 	 fsubs s15,s14,s15
 278 00a2 B0EE007A 	 fconsts s14,#0
 279 00a6 C7EE877A 	 fdivs s15,s15,s14
 280 00aa 364B     	 ldr r3,.L26+36
 281 00ac C3ED007A 	 fsts s15,[r3]
  59:../transform.c **** 
  60:../transform.c **** 	/*
  61:../transform.c **** 	 * Keeps the values in range of int16_t
  62:../transform.c **** 	 * Later on the Float values will be casted into Int
  63:../transform.c **** 	 */
  64:../transform.c **** 	if (u_a_ref > MAX_UINT_16)
 282              	 .loc 1 64 0
 283 00b0 314B     	 ldr r3,.L26+24
 284 00b2 D3ED007A 	 flds s15,[r3]
 285 00b6 9FED347A 	 flds s14,.L26+40
 286 00ba F4EEC77A 	 fcmpes s15,s14
 287 00be F1EE10FA 	 fmstat
 288 00c2 03DD     	 ble .L23
  65:../transform.c **** 	{
  66:../transform.c **** 		u_a_ref = MAX_UINT_16;
 289              	 .loc 1 66 0
 290 00c4 2C4B     	 ldr r3,.L26+24
 291 00c6 314A     	 ldr r2,.L26+44
 292 00c8 1A60     	 str r2,[r3]
 293 00ca 0DE0     	 b .L7
 294              	.L23:
  67:../transform.c **** 	}
  68:../transform.c **** 	else if (u_a_ref < MIN_UINT_16)
 295              	 .loc 1 68 0
 296 00cc 2A4B     	 ldr r3,.L26+24
 297 00ce D3ED007A 	 flds s15,[r3]
 298 00d2 9FED2F7A 	 flds s14,.L26+48
 299 00d6 F4EEC77A 	 fcmpes s15,s14
 300 00da F1EE10FA 	 fmstat
 301 00de 03D5     	 bpl .L7
  69:../transform.c **** 	{
  70:../transform.c **** 		u_a_ref = MIN_UINT_16;
 302              	 .loc 1 70 0
 303 00e0 254B     	 ldr r3,.L26+24
 304 00e2 4FF04742 	 mov r2,#-956301312
 305 00e6 1A60     	 str r2,[r3]
 306              	.L7:
  71:../transform.c **** 	}
  72:../transform.c **** 
  73:../transform.c **** 	if (u_b_ref > MAX_UINT_16)
 307              	 .loc 1 73 0
 308 00e8 254B     	 ldr r3,.L26+32
 309 00ea D3ED007A 	 flds s15,[r3]
 310 00ee 9FED267A 	 flds s14,.L26+40
 311 00f2 F4EEC77A 	 fcmpes s15,s14
 312 00f6 F1EE10FA 	 fmstat
 313 00fa 03DD     	 ble .L24
  74:../transform.c **** 	{
  75:../transform.c **** 		u_b_ref = MAX_UINT_16;
 314              	 .loc 1 75 0
 315 00fc 204B     	 ldr r3,.L26+32
 316 00fe 234A     	 ldr r2,.L26+44
 317 0100 1A60     	 str r2,[r3]
 318 0102 0DE0     	 b .L11
 319              	.L24:
  76:../transform.c **** 	}
  77:../transform.c **** 	else if (u_b_ref < MIN_UINT_16)
 320              	 .loc 1 77 0
 321 0104 1E4B     	 ldr r3,.L26+32
 322 0106 D3ED007A 	 flds s15,[r3]
 323 010a 9FED217A 	 flds s14,.L26+48
 324 010e F4EEC77A 	 fcmpes s15,s14
 325 0112 F1EE10FA 	 fmstat
 326 0116 03D5     	 bpl .L11
  78:../transform.c **** 	{
  79:../transform.c **** 		u_a_ref = MIN_UINT_16;
 327              	 .loc 1 79 0
 328 0118 174B     	 ldr r3,.L26+24
 329 011a 4FF04742 	 mov r2,#-956301312
 330 011e 1A60     	 str r2,[r3]
 331              	.L11:
  80:../transform.c **** 	}
  81:../transform.c **** 
  82:../transform.c **** 	if (u_c_ref > MAX_UINT_16)
 332              	 .loc 1 82 0
 333 0120 184B     	 ldr r3,.L26+36
 334 0122 D3ED007A 	 flds s15,[r3]
 335 0126 9FED187A 	 flds s14,.L26+40
 336 012a F4EEC77A 	 fcmpes s15,s14
 337 012e F1EE10FA 	 fmstat
 338 0132 03DD     	 ble .L25
  83:../transform.c **** 	{
  84:../transform.c **** 		u_a_ref = MAX_UINT_16;
 339              	 .loc 1 84 0
 340 0134 104B     	 ldr r3,.L26+24
 341 0136 154A     	 ldr r2,.L26+44
 342 0138 1A60     	 str r2,[r3]
 343 013a 0DE0     	 b .L4
 344              	.L25:
  85:../transform.c **** 	}
  86:../transform.c **** 	else if (u_c_ref < MIN_UINT_16)
 345              	 .loc 1 86 0
 346 013c 114B     	 ldr r3,.L26+36
 347 013e D3ED007A 	 flds s15,[r3]
 348 0142 9FED137A 	 flds s14,.L26+48
 349 0146 F4EEC77A 	 fcmpes s15,s14
 350 014a F1EE10FA 	 fmstat
 351 014e 03D5     	 bpl .L4
  87:../transform.c **** 	{
  88:../transform.c **** 		u_c_ref = MIN_UINT_16;
 352              	 .loc 1 88 0
 353 0150 0C4B     	 ldr r3,.L26+36
 354 0152 4FF04742 	 mov r2,#-956301312
 355 0156 1A60     	 str r2,[r3]
 356              	.L4:
  89:../transform.c **** 	}
  90:../transform.c **** }
 357              	 .loc 1 90 0
 358 0158 BD46     	 mov sp,r7
 359              	.LCFI6:
 360              	 .cfi_def_cfa_register 13
 361              	 
 362 015a 5DF8047B 	 ldr r7,[sp],#4
 363              	.LCFI7:
 364              	 .cfi_restore 7
 365              	 .cfi_def_cfa_offset 0
 366 015e 7047     	 bx lr
 367              	.L27:
 368              	 .align 2
 369              	.L26:
 370 0160 00000000 	 .word u_d_ref
 371 0164 00000000 	 .word cos_theta_fast
 372 0168 00000000 	 .word u_q_ref
 373 016c 00000000 	 .word sin_theta_fast
 374 0170 00000000 	 .word u_alpha
 375 0174 00000000 	 .word u_beta
 376 0178 00000000 	 .word u_a_ref
 377 017c D7B3DD3F 	 .word 1071494103
 378 0180 00000000 	 .word u_b_ref
 379 0184 00000000 	 .word u_c_ref
 380 0188 00FEFF46 	 .word 1191181824
 381 018c 00FEFF46 	 .word 1191181824
 382 0190 000000C7 	 .word -956301312
 383              	 .cfi_endproc
 384              	.LFE197:
 386              	 .section .text.compute_fast_speed,"ax",%progbits
 387              	 .align 2
 388              	 .global compute_fast_speed
 389              	 .thumb
 390              	 .thumb_func
 392              	compute_fast_speed:
 393              	.LFB198:
  91:../transform.c **** 
  92:../transform.c **** /*
  93:../transform.c ****  * Compute the speed based on the encoder increments, read from CCU40 Timer
  94:../transform.c ****  */
  95:../transform.c **** void compute_fast_speed(void)
  96:../transform.c **** {
 394              	 .loc 1 96 0
 395              	 .cfi_startproc
 396              	 
 397              	 
 398              	 
 399 0000 80B4     	 push {r7}
 400              	.LCFI8:
 401              	 .cfi_def_cfa_offset 4
 402              	 .cfi_offset 7,-4
 403 0002 00AF     	 add r7,sp,#0
 404              	.LCFI9:
 405              	 .cfi_def_cfa_register 7
  97:../transform.c **** 	timer_value_fast = CCU40_CC40->TIMER;
 406              	 .loc 1 97 0
 407 0004 0A4B     	 ldr r3,.L29
 408 0006 1B6F     	 ldr r3,[r3,#112]
 409 0008 9AB2     	 uxth r2,r3
 410 000a 0A4B     	 ldr r3,.L29+4
 411 000c 1A80     	 strh r2,[r3]
  98:../transform.c **** 	speed_value_fast = timer_value_fast - timer_value_old_fast;
 412              	 .loc 1 98 0
 413 000e 094B     	 ldr r3,.L29+4
 414 0010 1A88     	 ldrh r2,[r3]
 415 0012 094B     	 ldr r3,.L29+8
 416 0014 1B88     	 ldrh r3,[r3]
 417 0016 D31A     	 subs r3,r2,r3
 418 0018 9BB2     	 uxth r3,r3
 419 001a 9AB2     	 uxth r2,r3
 420 001c 074B     	 ldr r3,.L29+12
 421 001e 1A80     	 strh r2,[r3]
  99:../transform.c **** 	timer_value_old_fast = timer_value_fast;
 422              	 .loc 1 99 0
 423 0020 044B     	 ldr r3,.L29+4
 424 0022 1A88     	 ldrh r2,[r3]
 425 0024 044B     	 ldr r3,.L29+8
 426 0026 1A80     	 strh r2,[r3]
 100:../transform.c **** }
 427              	 .loc 1 100 0
 428 0028 BD46     	 mov sp,r7
 429              	.LCFI10:
 430              	 .cfi_def_cfa_register 13
 431              	 
 432 002a 5DF8047B 	 ldr r7,[sp],#4
 433              	.LCFI11:
 434              	 .cfi_restore 7
 435              	 .cfi_def_cfa_offset 0
 436 002e 7047     	 bx lr
 437              	.L30:
 438              	 .align 2
 439              	.L29:
 440 0030 00C10040 	 .word 1073791232
 441 0034 00000000 	 .word timer_value_fast
 442 0038 00000000 	 .word timer_value_old_fast
 443 003c 00000000 	 .word speed_value_fast
 444              	 .cfi_endproc
 445              	.LFE198:
 447              	 .section .text.compute_fast_mechanical_position,"ax",%progbits
 448              	 .align 2
 449              	 .global compute_fast_mechanical_position
 450              	 .thumb
 451              	 .thumb_func
 453              	compute_fast_mechanical_position:
 454              	.LFB199:
 101:../transform.c **** /*
 102:../transform.c ****  * Compute the mechanical position based on the speed value
 103:../transform.c ****  */
 104:../transform.c **** void compute_fast_mechanical_position(void)
 105:../transform.c **** {
 455              	 .loc 1 105 0
 456              	 .cfi_startproc
 457              	 
 458              	 
 459              	 
 460 0000 80B4     	 push {r7}
 461              	.LCFI12:
 462              	 .cfi_def_cfa_offset 4
 463              	 .cfi_offset 7,-4
 464 0002 00AF     	 add r7,sp,#0
 465              	.LCFI13:
 466              	 .cfi_def_cfa_register 7
 106:../transform.c **** 	mechanical_position_fast += speed_value_fast;
 467              	 .loc 1 106 0
 468 0004 054B     	 ldr r3,.L32
 469 0006 1B88     	 ldrh r3,[r3]
 470 0008 1AB2     	 sxth r2,r3
 471 000a 054B     	 ldr r3,.L32+4
 472 000c 1B68     	 ldr r3,[r3]
 473 000e 1344     	 add r3,r3,r2
 474 0010 034A     	 ldr r2,.L32+4
 475 0012 1360     	 str r3,[r2]
 107:../transform.c **** }
 476              	 .loc 1 107 0
 477 0014 BD46     	 mov sp,r7
 478              	.LCFI14:
 479              	 .cfi_def_cfa_register 13
 480              	 
 481 0016 5DF8047B 	 ldr r7,[sp],#4
 482              	.LCFI15:
 483              	 .cfi_restore 7
 484              	 .cfi_def_cfa_offset 0
 485 001a 7047     	 bx lr
 486              	.L33:
 487              	 .align 2
 488              	.L32:
 489 001c 00000000 	 .word speed_value_fast
 490 0020 00000000 	 .word mechanical_position_fast
 491              	 .cfi_endproc
 492              	.LFE199:
 494              	 .section .text.compute_fast_electrical_position,"ax",%progbits
 495              	 .align 2
 496              	 .global compute_fast_electrical_position
 497              	 .thumb
 498              	 .thumb_func
 500              	compute_fast_electrical_position:
 501              	.LFB200:
 108:../transform.c **** 
 109:../transform.c **** /*
 110:../transform.c ****  * Compute the module of the electrical position based on the mechanical position
 111:../transform.c ****  */
 112:../transform.c **** void compute_fast_electrical_position(void)
 113:../transform.c **** {
 502              	 .loc 1 113 0
 503              	 .cfi_startproc
 504              	 
 505              	 
 506              	 
 507 0000 80B4     	 push {r7}
 508              	.LCFI16:
 509              	 .cfi_def_cfa_offset 4
 510              	 .cfi_offset 7,-4
 511 0002 00AF     	 add r7,sp,#0
 512              	.LCFI17:
 513              	 .cfi_def_cfa_register 7
 114:../transform.c **** 	electrical_resolution = encoder_resolution / pp;
 514              	 .loc 1 114 0
 515 0004 0D4B     	 ldr r3,.L35
 516 0006 1B88     	 ldrh r3,[r3]
 517 0008 1AB2     	 sxth r2,r3
 518 000a 0D4B     	 ldr r3,.L35+4
 519 000c 1B78     	 ldrb r3,[r3]
 520 000e 5BB2     	 sxtb r3,r3
 521 0010 92FBF3F3 	 sdiv r3,r2,r3
 522 0014 9AB2     	 uxth r2,r3
 523 0016 0B4B     	 ldr r3,.L35+8
 524 0018 1A80     	 strh r2,[r3]
 115:../transform.c **** 	electrical_position_modulo_fast = mechanical_position_fast % electrical_resolution;
 525              	 .loc 1 115 0
 526 001a 0B4B     	 ldr r3,.L35+12
 527 001c 1B68     	 ldr r3,[r3]
 528 001e 094A     	 ldr r2,.L35+8
 529 0020 1288     	 ldrh r2,[r2]
 530 0022 12B2     	 sxth r2,r2
 531 0024 93FBF2F1 	 sdiv r1,r3,r2
 532 0028 02FB01F2 	 mul r2,r2,r1
 533 002c 9B1A     	 subs r3,r3,r2
 534 002e 074A     	 ldr r2,.L35+16
 535 0030 1360     	 str r3,[r2]
 116:../transform.c **** }
 536              	 .loc 1 116 0
 537 0032 BD46     	 mov sp,r7
 538              	.LCFI18:
 539              	 .cfi_def_cfa_register 13
 540              	 
 541 0034 5DF8047B 	 ldr r7,[sp],#4
 542              	.LCFI19:
 543              	 .cfi_restore 7
 544              	 .cfi_def_cfa_offset 0
 545 0038 7047     	 bx lr
 546              	.L36:
 547 003a 00BF     	 .align 2
 548              	.L35:
 549 003c 00000000 	 .word encoder_resolution
 550 0040 00000000 	 .word pp
 551 0044 00000000 	 .word electrical_resolution
 552 0048 00000000 	 .word mechanical_position_fast
 553 004c 00000000 	 .word electrical_position_modulo_fast
 554              	 .cfi_endproc
 555              	.LFE200:
 557              	 .section .text.compute_fast_field,"ax",%progbits
 558              	 .align 2
 559              	 .global compute_fast_field
 560              	 .thumb
 561              	 .thumb_func
 563              	compute_fast_field:
 564              	.LFB201:
 117:../transform.c **** 
 118:../transform.c **** /*
 119:../transform.c ****  * Compute the electrical angle based on the electrical position
 120:../transform.c ****  * Compute the sin&cos of theta
 121:../transform.c ****  */
 122:../transform.c **** void compute_fast_field(void)
 123:../transform.c **** {
 565              	 .loc 1 123 0
 566              	 .cfi_startproc
 567              	 
 568              	 
 569 0000 80B5     	 push {r7,lr}
 570              	.LCFI20:
 571              	 .cfi_def_cfa_offset 8
 572              	 .cfi_offset 7,-8
 573              	 .cfi_offset 14,-4
 574 0002 00AF     	 add r7,sp,#0
 575              	.LCFI21:
 576              	 .cfi_def_cfa_register 7
 124:../transform.c **** 	theta_fast = electrical_position_modulo_fast * (2 * Pi) / electrical_resolution;
 577              	 .loc 1 124 0
 578 0004 134B     	 ldr r3,.L39
 579 0006 1B68     	 ldr r3,[r3]
 580 0008 07EE903A 	 fmsr s15,r3
 581 000c F8EEE77A 	 fsitos s15,s15
 582 0010 9FED117A 	 flds s14,.L39+4
 583 0014 27EE877A 	 fmuls s14,s15,s14
 584 0018 104B     	 ldr r3,.L39+8
 585 001a 1B88     	 ldrh r3,[r3]
 586 001c 1BB2     	 sxth r3,r3
 587 001e 07EE903A 	 fmsr s15,r3
 588 0022 F8EEE77A 	 fsitos s15,s15
 589 0026 C7EE277A 	 fdivs s15,s14,s15
 590 002a 0D4B     	 ldr r3,.L39+12
 591 002c C3ED007A 	 fsts s15,[r3]
 125:../transform.c **** 	if (loop_control & TUNE_REF_LOOP_MSK)
 592              	 .loc 1 125 0
 593 0030 0C4B     	 ldr r3,.L39+16
 594 0032 1B78     	 ldrb r3,[r3]
 595 0034 DBB2     	 uxtb r3,r3
 596 0036 5BB2     	 sxtb r3,r3
 597 0038 002B     	 cmp r3,#0
 598 003a 03DA     	 bge .L38
 126:../transform.c **** 	{
 127:../transform.c **** 		theta_fast = 0;
 599              	 .loc 1 127 0
 600 003c 084B     	 ldr r3,.L39+12
 601 003e 4FF00002 	 mov r2,#0
 602 0042 1A60     	 str r2,[r3]
 603              	.L38:
 128:../transform.c **** 	}
 129:../transform.c **** 	sincosf(theta_fast, &sin_theta_fast, &cos_theta_fast);
 604              	 .loc 1 129 0
 605 0044 064B     	 ldr r3,.L39+12
 606 0046 1B68     	 ldr r3,[r3]
 607 0048 1846     	 mov r0,r3
 608 004a 0749     	 ldr r1,.L39+20
 609 004c 074A     	 ldr r2,.L39+24
 610 004e FFF7FEFF 	 bl sincosf
 130:../transform.c **** }
 611              	 .loc 1 130 0
 612 0052 80BD     	 pop {r7,pc}
 613              	.L40:
 614              	 .align 2
 615              	.L39:
 616 0054 00000000 	 .word electrical_position_modulo_fast
 617 0058 D00FC940 	 .word 1086918608
 618 005c 00000000 	 .word electrical_resolution
 619 0060 00000000 	 .word theta_fast
 620 0064 00000000 	 .word loop_control
 621 0068 00000000 	 .word sin_theta_fast
 622 006c 00000000 	 .word cos_theta_fast
 623              	 .cfi_endproc
 624              	.LFE201:
 626              	 .text
 627              	.Letext0:
 628              	 .file 2 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 629              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 630              	 .file 4 "C:/GitHub/Stepper_drive/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 631              	 .file 5 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\math.h"
 632              	 .file 6 "C:/GitHub/Stepper_drive/Libraries/CMSIS/Include/core_cm4.h"
 633              	 .file 7 "../main.h"
 634              	 .file 8 "../driver_adc.h"
 635              	 .file 9 "../pi_regulator.h"
 636              	 .file 10 "../state_machine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 transform.c
                            *COM*:00000004 CCU8_CC8_CR1_CR1_Value
    {standard input}:25     .bss.mechanical_position_fast:00000000 mechanical_position_fast
    {standard input}:22     .bss.mechanical_position_fast:00000000 $d
    {standard input}:32     .bss.electrical_position_modulo_fast:00000000 electrical_position_modulo_fast
    {standard input}:29     .bss.electrical_position_modulo_fast:00000000 $d
    {standard input}:39     .bss.theta_fast:00000000 theta_fast
    {standard input}:36     .bss.theta_fast:00000000 $d
    {standard input}:46     .bss.sin_theta_fast:00000000 sin_theta_fast
    {standard input}:43     .bss.sin_theta_fast:00000000 $d
    {standard input}:53     .bss.cos_theta_fast:00000000 cos_theta_fast
    {standard input}:50     .bss.cos_theta_fast:00000000 $d
    {standard input}:60     .bss.timer_value_fast:00000000 timer_value_fast
    {standard input}:57     .bss.timer_value_fast:00000000 $d
    {standard input}:67     .bss.timer_value_old_fast:00000000 timer_value_old_fast
    {standard input}:64     .bss.timer_value_old_fast:00000000 $d
    {standard input}:74     .bss.speed_value_fast:00000000 speed_value_fast
    {standard input}:71     .bss.speed_value_fast:00000000 $d
    {standard input}:81     .data.encoder_resolution:00000000 encoder_resolution
    {standard input}:78     .data.encoder_resolution:00000000 $d
    {standard input}:87     .data.pp:00000000 pp
    {standard input}:94     .bss.electrical_resolution:00000000 electrical_resolution
    {standard input}:91     .bss.electrical_resolution:00000000 $d
                            *COM*:00000004 u_a_ref
                            *COM*:00000004 u_b_ref
                            *COM*:00000004 u_c_ref
                            *COM*:00000004 i_d
                            *COM*:00000004 i_q
                            *COM*:00000004 i_alpha
                            *COM*:00000004 i_beta
                            *COM*:00000004 u_alpha
                            *COM*:00000004 u_beta
    {standard input}:106    .text.abc_dq:00000000 $t
    {standard input}:111    .text.abc_dq:00000000 abc_dq
    {standard input}:192    .text.abc_dq:000000a4 $d
    {standard input}:205    .text.dq_abc:00000000 $t
    {standard input}:210    .text.dq_abc:00000000 dq_abc
    {standard input}:370    .text.dq_abc:00000160 $d
    {standard input}:387    .text.compute_fast_speed:00000000 $t
    {standard input}:392    .text.compute_fast_speed:00000000 compute_fast_speed
    {standard input}:440    .text.compute_fast_speed:00000030 $d
    {standard input}:448    .text.compute_fast_mechanical_position:00000000 $t
    {standard input}:453    .text.compute_fast_mechanical_position:00000000 compute_fast_mechanical_position
    {standard input}:489    .text.compute_fast_mechanical_position:0000001c $d
    {standard input}:495    .text.compute_fast_electrical_position:00000000 $t
    {standard input}:500    .text.compute_fast_electrical_position:00000000 compute_fast_electrical_position
    {standard input}:549    .text.compute_fast_electrical_position:0000003c $d
    {standard input}:558    .text.compute_fast_field:00000000 $t
    {standard input}:563    .text.compute_fast_field:00000000 compute_fast_field
    {standard input}:616    .text.compute_fast_field:00000054 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ia
ib
u_d_ref
u_q_ref
sincosf
loop_control
