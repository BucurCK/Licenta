   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "transform.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm CCU8_CC8_CR1_CR1_Value,4,4
  20              	 .global mechanical_position_fast
  21              	 .section .bss.mechanical_position_fast,"aw",%nobits
  22              	 .align 2
  25              	mechanical_position_fast:
  26 0000 00000000 	 .space 4
  27              	 .global electrical_position_modulo_fast
  28              	 .section .bss.electrical_position_modulo_fast,"aw",%nobits
  29              	 .align 2
  32              	electrical_position_modulo_fast:
  33 0000 00000000 	 .space 4
  34              	 .global theta_fast
  35              	 .section .bss.theta_fast,"aw",%nobits
  36              	 .align 2
  39              	theta_fast:
  40 0000 00000000 	 .space 4
  41              	 .global sin_theta_fast
  42              	 .section .bss.sin_theta_fast,"aw",%nobits
  43              	 .align 2
  46              	sin_theta_fast:
  47 0000 00000000 	 .space 4
  48              	 .global cos_theta_fast
  49              	 .section .bss.cos_theta_fast,"aw",%nobits
  50              	 .align 2
  53              	cos_theta_fast:
  54 0000 00000000 	 .space 4
  55              	 .global timer_value_fast
  56              	 .section .bss.timer_value_fast,"aw",%nobits
  57              	 .align 1
  60              	timer_value_fast:
  61 0000 0000     	 .space 2
  62              	 .global timer_value_old_fast
  63              	 .section .bss.timer_value_old_fast,"aw",%nobits
  64              	 .align 1
  67              	timer_value_old_fast:
  68 0000 0000     	 .space 2
  69              	 .global speed_value_fast
  70              	 .section .bss.speed_value_fast,"aw",%nobits
  71              	 .align 1
  74              	speed_value_fast:
  75 0000 0000     	 .space 2
  76              	 .global encoder_resolution
  77              	 .section .data.encoder_resolution,"aw",%progbits
  78              	 .align 1
  81              	encoder_resolution:
  82 0000 A00F     	 .short 4000
  83              	 .global pp
  84              	 .section .data.pp,"aw",%progbits
  87              	pp:
  88 0000 19       	 .byte 25
  89              	 .global electrical_resolution
  90              	 .section .bss.electrical_resolution,"aw",%nobits
  91              	 .align 1
  94              	electrical_resolution:
  95 0000 0000     	 .space 2
  96              	 .comm u_a_ref,4,4
  97              	 .comm u_b_ref,4,4
  98              	 .comm u_c_ref,4,4
  99              	 .comm i_d,4,4
 100              	 .comm i_q,4,4
 101              	 .comm i_alpha,4,4
 102              	 .comm i_beta,4,4
 103              	 .comm u_alpha,4,4
 104              	 .comm u_beta,4,4
 105              	 .section .text.abc_dq,"ax",%progbits
 106              	 .align 2
 107              	 .global abc_dq
 108              	 .thumb
 109              	 .thumb_func
 111              	abc_dq:
 112              	.LFB196:
 113              	 .file 1 "../transform.c"
   1:../transform.c **** #include <stdint.h>
   2:../transform.c **** #include <stdbool.h>
   3:../transform.c **** #include <xmc_common.h>
   4:../transform.c **** #include "driver_pwm.h"
   5:../transform.c **** #include "motor_data_update.h"
   6:../transform.c **** #include "transform.h"
   7:../transform.c **** #include "main.h"
   8:../transform.c **** #include <math.h>
   9:../transform.c **** #include "Encoder.h"
  10:../transform.c **** #include "driver_adc.h"
  11:../transform.c **** #include "pi_regulator.h"
  12:../transform.c **** #include "state_machine.h"
  13:../transform.c **** #include <math.h>
  14:../transform.c **** 
  15:../transform.c **** int32_t mechanical_position_fast = 0;		 // compute the mechanical position of the motor based on sp
  16:../transform.c **** int32_t electrical_position_modulo_fast = 0; // the module of electrical position based on electric
  17:../transform.c **** float_t theta_fast = 0;						 // electric angle
  18:../transform.c **** float_t sin_theta_fast = 0;					 // sin(theta)
  19:../transform.c **** float_t cos_theta_fast = 0;					 // cos(theta)
  20:../transform.c **** uint16_t timer_value_fast = 0;				 // Stored value of CCU40 timer for encoder
  21:../transform.c **** uint16_t timer_value_old_fast = 0;			 //*Last* read of timer value for speed computation
  22:../transform.c **** int16_t speed_value_fast = 0;				 // Speed value based on 2 timer values
  23:../transform.c **** int16_t encoder_resolution = 4000;			 // Resolution of encoder | 4*1000				TODO: Make a function to
  24:../transform.c **** int8_t pp = 25;								 // Number of electric poles : 100[steps]/4		TODO: Make a function to init t
  25:../transform.c **** int16_t electrical_resolution = 0;			 // Electrical resolution based on encoder resolution and numb
  26:../transform.c **** float_t u_a_ref, u_b_ref, u_c_ref;			 // abc voltage | -32768 -- 32,767
  27:../transform.c **** float_t i_d, i_q;							 // dq voltage																   *
  28:../transform.c **** float_t i_alpha, i_beta;					 // currents for dq computation
  29:../transform.c **** float_t u_alpha, u_beta;					 // voltage for abc computation
  30:../transform.c **** 
  31:../transform.c **** /*
  32:../transform.c ****  * Convert three-phase electrical signals from time-domain to dq0-reference frame
  33:../transform.c ****  */
  34:../transform.c **** void abc_dq(void)
  35:../transform.c **** {
 114              	 .loc 1 35 0
 115              	 .cfi_startproc
 116              	 
 117              	 
 118              	 
 119 0000 80B4     	 push {r7}
 120              	.LCFI0:
 121              	 .cfi_def_cfa_offset 4
 122              	 .cfi_offset 7,-4
 123 0002 00AF     	 add r7,sp,#0
 124              	.LCFI1:
 125              	 .cfi_def_cfa_register 7
  36:../transform.c **** 	// Initializa alpha values
  37:../transform.c **** 	i_alpha = ia;
 126              	 .loc 1 37 0
 127 0004 204B     	 ldr r3,.L2
 128 0006 1B88     	 ldrh r3,[r3]
 129 0008 1BB2     	 sxth r3,r3
 130 000a 07EE903A 	 fmsr s15,r3
 131 000e F8EEE77A 	 fsitos s15,s15
 132 0012 1E4B     	 ldr r3,.L2+4
 133 0014 C3ED007A 	 fsts s15,[r3]
  38:../transform.c **** 	i_beta = ic;
 134              	 .loc 1 38 0
 135 0018 1D4B     	 ldr r3,.L2+8
 136 001a 1B88     	 ldrh r3,[r3]
 137 001c 1BB2     	 sxth r3,r3
 138 001e 07EE903A 	 fmsr s15,r3
 139 0022 F8EEE77A 	 fsitos s15,s15
 140 0026 1B4B     	 ldr r3,.L2+12
 141 0028 C3ED007A 	 fsts s15,[r3]
  39:../transform.c **** 
  40:../transform.c **** 	// Park Transformation
  41:../transform.c **** 	i_d = i_alpha * cos_theta_fast + i_beta * sin_theta_fast;
 142              	 .loc 1 41 0
 143 002c 174B     	 ldr r3,.L2+4
 144 002e 93ED007A 	 flds s14,[r3]
 145 0032 194B     	 ldr r3,.L2+16
 146 0034 D3ED007A 	 flds s15,[r3]
 147 0038 27EE277A 	 fmuls s14,s14,s15
 148 003c 154B     	 ldr r3,.L2+12
 149 003e D3ED006A 	 flds s13,[r3]
 150 0042 164B     	 ldr r3,.L2+20
 151 0044 D3ED007A 	 flds s15,[r3]
 152 0048 66EEA77A 	 fmuls s15,s13,s15
 153 004c 77EE277A 	 fadds s15,s14,s15
 154 0050 134B     	 ldr r3,.L2+24
 155 0052 C3ED007A 	 fsts s15,[r3]
  42:../transform.c **** 	i_q = i_beta * cos_theta_fast - i_alpha * sin_theta_fast;
 156              	 .loc 1 42 0
 157 0056 0F4B     	 ldr r3,.L2+12
 158 0058 93ED007A 	 flds s14,[r3]
 159 005c 0E4B     	 ldr r3,.L2+16
 160 005e D3ED007A 	 flds s15,[r3]
 161 0062 27EE277A 	 fmuls s14,s14,s15
 162 0066 094B     	 ldr r3,.L2+4
 163 0068 D3ED006A 	 flds s13,[r3]
 164 006c 0B4B     	 ldr r3,.L2+20
 165 006e D3ED007A 	 flds s15,[r3]
 166 0072 66EEA77A 	 fmuls s15,s13,s15
 167 0076 77EE677A 	 fsubs s15,s14,s15
 168 007a 0A4B     	 ldr r3,.L2+28
 169 007c C3ED007A 	 fsts s15,[r3]
  43:../transform.c **** }
 170              	 .loc 1 43 0
 171 0080 BD46     	 mov sp,r7
 172              	.LCFI2:
 173              	 .cfi_def_cfa_register 13
 174              	 
 175 0082 5DF8047B 	 ldr r7,[sp],#4
 176              	.LCFI3:
 177              	 .cfi_restore 7
 178              	 .cfi_def_cfa_offset 0
 179 0086 7047     	 bx lr
 180              	.L3:
 181              	 .align 2
 182              	.L2:
 183 0088 00000000 	 .word ia
 184 008c 00000000 	 .word i_alpha
 185 0090 00000000 	 .word ic
 186 0094 00000000 	 .word i_beta
 187 0098 00000000 	 .word cos_theta_fast
 188 009c 00000000 	 .word sin_theta_fast
 189 00a0 00000000 	 .word i_d
 190 00a4 00000000 	 .word i_q
 191              	 .cfi_endproc
 192              	.LFE196:
 194              	 .section .text.dq_abc,"ax",%progbits
 195              	 .align 2
 196              	 .global dq_abc
 197              	 .thumb
 198              	 .thumb_func
 200              	dq_abc:
 201              	.LFB197:
  44:../transform.c **** 
  45:../transform.c **** /*
  46:../transform.c ****  * Convert two-phase balanced sinusoidal signals to three-phase electrical signals
  47:../transform.c ****  */
  48:../transform.c **** void dq_abc(void)
  49:../transform.c **** {
 202              	 .loc 1 49 0
 203              	 .cfi_startproc
 204              	 
 205              	 
 206              	 
 207 0000 80B4     	 push {r7}
 208              	.LCFI4:
 209              	 .cfi_def_cfa_offset 4
 210              	 .cfi_offset 7,-4
 211 0002 00AF     	 add r7,sp,#0
 212              	.LCFI5:
 213              	 .cfi_def_cfa_register 7
  50:../transform.c **** 
  51:../transform.c **** 	// The Inverse Park Transformation
  52:../transform.c **** 	u_alpha = u_d_ref * cos_theta_fast - u_q_ref * sin_theta_fast;
 214              	 .loc 1 52 0
 215 0004 364B     	 ldr r3,.L19
 216 0006 93ED007A 	 flds s14,[r3]
 217 000a 364B     	 ldr r3,.L19+4
 218 000c D3ED007A 	 flds s15,[r3]
 219 0010 27EE277A 	 fmuls s14,s14,s15
 220 0014 344B     	 ldr r3,.L19+8
 221 0016 D3ED006A 	 flds s13,[r3]
 222 001a 344B     	 ldr r3,.L19+12
 223 001c D3ED007A 	 flds s15,[r3]
 224 0020 66EEA77A 	 fmuls s15,s13,s15
 225 0024 77EE677A 	 fsubs s15,s14,s15
 226 0028 314B     	 ldr r3,.L19+16
 227 002a C3ED007A 	 fsts s15,[r3]
  53:../transform.c **** 	u_beta = u_q_ref * cos_theta_fast + u_d_ref * sin_theta_fast;
 228              	 .loc 1 53 0
 229 002e 2E4B     	 ldr r3,.L19+8
 230 0030 93ED007A 	 flds s14,[r3]
 231 0034 2B4B     	 ldr r3,.L19+4
 232 0036 D3ED007A 	 flds s15,[r3]
 233 003a 27EE277A 	 fmuls s14,s14,s15
 234 003e 284B     	 ldr r3,.L19
 235 0040 D3ED006A 	 flds s13,[r3]
 236 0044 294B     	 ldr r3,.L19+12
 237 0046 D3ED007A 	 flds s15,[r3]
 238 004a 66EEA77A 	 fmuls s15,s13,s15
 239 004e 77EE277A 	 fadds s15,s14,s15
 240 0052 284B     	 ldr r3,.L19+20
 241 0054 C3ED007A 	 fsts s15,[r3]
  54:../transform.c **** 
  55:../transform.c **** 	// The Inverse Clarke Transformation
  56:../transform.c **** 	u_a_ref = u_alpha;
 242              	 .loc 1 56 0
 243 0058 254B     	 ldr r3,.L19+16
 244 005a 1B68     	 ldr r3,[r3]
 245 005c 264A     	 ldr r2,.L19+24
 246 005e 1360     	 str r3,[r2]
  57:../transform.c **** 	u_b_ref = u_beta;
 247              	 .loc 1 57 0
 248 0060 244B     	 ldr r3,.L19+20
 249 0062 1B68     	 ldr r3,[r3]
 250 0064 254A     	 ldr r2,.L19+28
 251 0066 1360     	 str r3,[r2]
  58:../transform.c **** 
  59:../transform.c **** 	/*
  60:../transform.c **** 	 * Keeps the values in range of int16_t
  61:../transform.c **** 	 * Later on the Float values will be casted into Int
  62:../transform.c **** 	 */
  63:../transform.c **** 	if (u_a_ref > MAX_INT_16)
 252              	 .loc 1 63 0
 253 0068 234B     	 ldr r3,.L19+24
 254 006a D3ED007A 	 flds s15,[r3]
 255 006e 9FED247A 	 flds s14,.L19+32
 256 0072 F4EEC77A 	 fcmpes s15,s14
 257 0076 F1EE10FA 	 fmstat
 258 007a 03DD     	 ble .L17
  64:../transform.c **** 	{
  65:../transform.c **** 		u_a_ref = MAX_INT_16;
 259              	 .loc 1 65 0
 260 007c 1E4B     	 ldr r3,.L19+24
 261 007e 214A     	 ldr r2,.L19+36
 262 0080 1A60     	 str r2,[r3]
 263 0082 0DE0     	 b .L7
 264              	.L17:
  66:../transform.c **** 	}
  67:../transform.c **** 	else if (u_a_ref < MIN_UINT_16)
 265              	 .loc 1 67 0
 266 0084 1C4B     	 ldr r3,.L19+24
 267 0086 D3ED007A 	 flds s15,[r3]
 268 008a 9FED1F7A 	 flds s14,.L19+40
 269 008e F4EEC77A 	 fcmpes s15,s14
 270 0092 F1EE10FA 	 fmstat
 271 0096 03D5     	 bpl .L7
  68:../transform.c **** 	{
  69:../transform.c **** 		u_a_ref = MIN_UINT_16;
 272              	 .loc 1 69 0
 273 0098 174B     	 ldr r3,.L19+24
 274 009a 4FF04742 	 mov r2,#-956301312
 275 009e 1A60     	 str r2,[r3]
 276              	.L7:
  70:../transform.c **** 	}
  71:../transform.c **** 
  72:../transform.c **** 	if (u_b_ref > MAX_INT_16)
 277              	 .loc 1 72 0
 278 00a0 164B     	 ldr r3,.L19+28
 279 00a2 D3ED007A 	 flds s15,[r3]
 280 00a6 9FED167A 	 flds s14,.L19+32
 281 00aa F4EEC77A 	 fcmpes s15,s14
 282 00ae F1EE10FA 	 fmstat
 283 00b2 03DD     	 ble .L18
  73:../transform.c **** 	{
  74:../transform.c **** 		u_b_ref = MAX_INT_16;
 284              	 .loc 1 74 0
 285 00b4 114B     	 ldr r3,.L19+28
 286 00b6 134A     	 ldr r2,.L19+36
 287 00b8 1A60     	 str r2,[r3]
 288 00ba 0DE0     	 b .L4
 289              	.L18:
  75:../transform.c **** 	}
  76:../transform.c **** 	else if (u_b_ref < MIN_UINT_16)
 290              	 .loc 1 76 0
 291 00bc 0F4B     	 ldr r3,.L19+28
 292 00be D3ED007A 	 flds s15,[r3]
 293 00c2 9FED117A 	 flds s14,.L19+40
 294 00c6 F4EEC77A 	 fcmpes s15,s14
 295 00ca F1EE10FA 	 fmstat
 296 00ce 03D5     	 bpl .L4
  77:../transform.c **** 	{
  78:../transform.c **** 		u_a_ref = MIN_UINT_16;
 297              	 .loc 1 78 0
 298 00d0 094B     	 ldr r3,.L19+24
 299 00d2 4FF04742 	 mov r2,#-956301312
 300 00d6 1A60     	 str r2,[r3]
 301              	.L4:
  79:../transform.c **** 	}
  80:../transform.c **** 
  81:../transform.c **** }
 302              	 .loc 1 81 0
 303 00d8 BD46     	 mov sp,r7
 304              	.LCFI6:
 305              	 .cfi_def_cfa_register 13
 306              	 
 307 00da 5DF8047B 	 ldr r7,[sp],#4
 308              	.LCFI7:
 309              	 .cfi_restore 7
 310              	 .cfi_def_cfa_offset 0
 311 00de 7047     	 bx lr
 312              	.L20:
 313              	 .align 2
 314              	.L19:
 315 00e0 00000000 	 .word u_d_ref
 316 00e4 00000000 	 .word cos_theta_fast
 317 00e8 00000000 	 .word u_q_ref
 318 00ec 00000000 	 .word sin_theta_fast
 319 00f0 00000000 	 .word u_alpha
 320 00f4 00000000 	 .word u_beta
 321 00f8 00000000 	 .word u_a_ref
 322 00fc 00000000 	 .word u_b_ref
 323 0100 00FEFF46 	 .word 1191181824
 324 0104 00FEFF46 	 .word 1191181824
 325 0108 000000C7 	 .word -956301312
 326              	 .cfi_endproc
 327              	.LFE197:
 329              	 .section .text.compute_fast_speed,"ax",%progbits
 330              	 .align 2
 331              	 .global compute_fast_speed
 332              	 .thumb
 333              	 .thumb_func
 335              	compute_fast_speed:
 336              	.LFB198:
  82:../transform.c **** 
  83:../transform.c **** /*
  84:../transform.c ****  * Compute the speed based on the encoder increments, read from CCU40 Timer
  85:../transform.c ****  */
  86:../transform.c **** void compute_fast_speed(void)			//SPEED = 1 for testing
  87:../transform.c **** {
 337              	 .loc 1 87 0
 338              	 .cfi_startproc
 339              	 
 340              	 
 341              	 
 342 0000 80B4     	 push {r7}
 343              	.LCFI8:
 344              	 .cfi_def_cfa_offset 4
 345              	 .cfi_offset 7,-4
 346 0002 00AF     	 add r7,sp,#0
 347              	.LCFI9:
 348              	 .cfi_def_cfa_register 7
  88:../transform.c **** 	timer_value_fast = CCU40_CC40->TIMER;
 349              	 .loc 1 88 0
 350 0004 0A4B     	 ldr r3,.L22
 351 0006 1B6F     	 ldr r3,[r3,#112]
 352 0008 9AB2     	 uxth r2,r3
 353 000a 0A4B     	 ldr r3,.L22+4
 354 000c 1A80     	 strh r2,[r3]
  89:../transform.c **** 	speed_value_fast = timer_value_fast - timer_value_old_fast;
 355              	 .loc 1 89 0
 356 000e 094B     	 ldr r3,.L22+4
 357 0010 1A88     	 ldrh r2,[r3]
 358 0012 094B     	 ldr r3,.L22+8
 359 0014 1B88     	 ldrh r3,[r3]
 360 0016 D31A     	 subs r3,r2,r3
 361 0018 9BB2     	 uxth r3,r3
 362 001a 9AB2     	 uxth r2,r3
 363 001c 074B     	 ldr r3,.L22+12
 364 001e 1A80     	 strh r2,[r3]
  90:../transform.c **** //	speed_value_fast = 1;
  91:../transform.c **** 	timer_value_old_fast = timer_value_fast;
 365              	 .loc 1 91 0
 366 0020 044B     	 ldr r3,.L22+4
 367 0022 1A88     	 ldrh r2,[r3]
 368 0024 044B     	 ldr r3,.L22+8
 369 0026 1A80     	 strh r2,[r3]
  92:../transform.c **** }
 370              	 .loc 1 92 0
 371 0028 BD46     	 mov sp,r7
 372              	.LCFI10:
 373              	 .cfi_def_cfa_register 13
 374              	 
 375 002a 5DF8047B 	 ldr r7,[sp],#4
 376              	.LCFI11:
 377              	 .cfi_restore 7
 378              	 .cfi_def_cfa_offset 0
 379 002e 7047     	 bx lr
 380              	.L23:
 381              	 .align 2
 382              	.L22:
 383 0030 00C10040 	 .word 1073791232
 384 0034 00000000 	 .word timer_value_fast
 385 0038 00000000 	 .word timer_value_old_fast
 386 003c 00000000 	 .word speed_value_fast
 387              	 .cfi_endproc
 388              	.LFE198:
 390              	 .section .text.compute_fast_mechanical_position,"ax",%progbits
 391              	 .align 2
 392              	 .global compute_fast_mechanical_position
 393              	 .thumb
 394              	 .thumb_func
 396              	compute_fast_mechanical_position:
 397              	.LFB199:
  93:../transform.c **** /*
  94:../transform.c ****  * Compute the mechanical position based on the speed value
  95:../transform.c ****  */
  96:../transform.c **** void compute_fast_mechanical_position(void)
  97:../transform.c **** {
 398              	 .loc 1 97 0
 399              	 .cfi_startproc
 400              	 
 401              	 
 402              	 
 403 0000 80B4     	 push {r7}
 404              	.LCFI12:
 405              	 .cfi_def_cfa_offset 4
 406              	 .cfi_offset 7,-4
 407 0002 00AF     	 add r7,sp,#0
 408              	.LCFI13:
 409              	 .cfi_def_cfa_register 7
  98:../transform.c **** 	mechanical_position_fast += speed_value_fast;
 410              	 .loc 1 98 0
 411 0004 054B     	 ldr r3,.L25
 412 0006 1B88     	 ldrh r3,[r3]
 413 0008 1AB2     	 sxth r2,r3
 414 000a 054B     	 ldr r3,.L25+4
 415 000c 1B68     	 ldr r3,[r3]
 416 000e 1344     	 add r3,r3,r2
 417 0010 034A     	 ldr r2,.L25+4
 418 0012 1360     	 str r3,[r2]
  99:../transform.c **** }
 419              	 .loc 1 99 0
 420 0014 BD46     	 mov sp,r7
 421              	.LCFI14:
 422              	 .cfi_def_cfa_register 13
 423              	 
 424 0016 5DF8047B 	 ldr r7,[sp],#4
 425              	.LCFI15:
 426              	 .cfi_restore 7
 427              	 .cfi_def_cfa_offset 0
 428 001a 7047     	 bx lr
 429              	.L26:
 430              	 .align 2
 431              	.L25:
 432 001c 00000000 	 .word speed_value_fast
 433 0020 00000000 	 .word mechanical_position_fast
 434              	 .cfi_endproc
 435              	.LFE199:
 437              	 .section .text.compute_fast_electrical_position,"ax",%progbits
 438              	 .align 2
 439              	 .global compute_fast_electrical_position
 440              	 .thumb
 441              	 .thumb_func
 443              	compute_fast_electrical_position:
 444              	.LFB200:
 100:../transform.c **** 
 101:../transform.c **** /*
 102:../transform.c ****  * Compute the module of the electrical position based on the mechanical position
 103:../transform.c ****  */
 104:../transform.c **** void compute_fast_electrical_position(void)
 105:../transform.c **** {
 445              	 .loc 1 105 0
 446              	 .cfi_startproc
 447              	 
 448              	 
 449              	 
 450 0000 80B4     	 push {r7}
 451              	.LCFI16:
 452              	 .cfi_def_cfa_offset 4
 453              	 .cfi_offset 7,-4
 454 0002 00AF     	 add r7,sp,#0
 455              	.LCFI17:
 456              	 .cfi_def_cfa_register 7
 106:../transform.c **** 	electrical_resolution = encoder_resolution / pp;
 457              	 .loc 1 106 0
 458 0004 0D4B     	 ldr r3,.L28
 459 0006 1B88     	 ldrh r3,[r3]
 460 0008 1AB2     	 sxth r2,r3
 461 000a 0D4B     	 ldr r3,.L28+4
 462 000c 1B78     	 ldrb r3,[r3]
 463 000e 5BB2     	 sxtb r3,r3
 464 0010 92FBF3F3 	 sdiv r3,r2,r3
 465 0014 9AB2     	 uxth r2,r3
 466 0016 0B4B     	 ldr r3,.L28+8
 467 0018 1A80     	 strh r2,[r3]
 107:../transform.c **** 	electrical_position_modulo_fast = mechanical_position_fast % electrical_resolution;
 468              	 .loc 1 107 0
 469 001a 0B4B     	 ldr r3,.L28+12
 470 001c 1B68     	 ldr r3,[r3]
 471 001e 094A     	 ldr r2,.L28+8
 472 0020 1288     	 ldrh r2,[r2]
 473 0022 12B2     	 sxth r2,r2
 474 0024 93FBF2F1 	 sdiv r1,r3,r2
 475 0028 02FB01F2 	 mul r2,r2,r1
 476 002c 9B1A     	 subs r3,r3,r2
 477 002e 074A     	 ldr r2,.L28+16
 478 0030 1360     	 str r3,[r2]
 108:../transform.c **** }
 479              	 .loc 1 108 0
 480 0032 BD46     	 mov sp,r7
 481              	.LCFI18:
 482              	 .cfi_def_cfa_register 13
 483              	 
 484 0034 5DF8047B 	 ldr r7,[sp],#4
 485              	.LCFI19:
 486              	 .cfi_restore 7
 487              	 .cfi_def_cfa_offset 0
 488 0038 7047     	 bx lr
 489              	.L29:
 490 003a 00BF     	 .align 2
 491              	.L28:
 492 003c 00000000 	 .word encoder_resolution
 493 0040 00000000 	 .word pp
 494 0044 00000000 	 .word electrical_resolution
 495 0048 00000000 	 .word mechanical_position_fast
 496 004c 00000000 	 .word electrical_position_modulo_fast
 497              	 .cfi_endproc
 498              	.LFE200:
 500              	 .section .text.compute_fast_field,"ax",%progbits
 501              	 .align 2
 502              	 .global compute_fast_field
 503              	 .thumb
 504              	 .thumb_func
 506              	compute_fast_field:
 507              	.LFB201:
 109:../transform.c **** 
 110:../transform.c **** /*
 111:../transform.c ****  * Compute the electrical angle based on the electrical position
 112:../transform.c ****  * Compute the sin&cos of theta
 113:../transform.c ****  */
 114:../transform.c **** void compute_fast_field(void)
 115:../transform.c **** {
 508              	 .loc 1 115 0
 509              	 .cfi_startproc
 510              	 
 511              	 
 512 0000 80B5     	 push {r7,lr}
 513              	.LCFI20:
 514              	 .cfi_def_cfa_offset 8
 515              	 .cfi_offset 7,-8
 516              	 .cfi_offset 14,-4
 517 0002 00AF     	 add r7,sp,#0
 518              	.LCFI21:
 519              	 .cfi_def_cfa_register 7
 116:../transform.c **** 	theta_fast = electrical_position_modulo_fast * (2 * Pi) / electrical_resolution;
 520              	 .loc 1 116 0
 521 0004 134B     	 ldr r3,.L32
 522 0006 1B68     	 ldr r3,[r3]
 523 0008 07EE903A 	 fmsr s15,r3
 524 000c F8EEE77A 	 fsitos s15,s15
 525 0010 9FED117A 	 flds s14,.L32+4
 526 0014 27EE877A 	 fmuls s14,s15,s14
 527 0018 104B     	 ldr r3,.L32+8
 528 001a 1B88     	 ldrh r3,[r3]
 529 001c 1BB2     	 sxth r3,r3
 530 001e 07EE903A 	 fmsr s15,r3
 531 0022 F8EEE77A 	 fsitos s15,s15
 532 0026 C7EE277A 	 fdivs s15,s14,s15
 533 002a 0D4B     	 ldr r3,.L32+12
 534 002c C3ED007A 	 fsts s15,[r3]
 117:../transform.c **** 	if (loop_control & TUNE_REF_LOOP_MSK)
 535              	 .loc 1 117 0
 536 0030 0C4B     	 ldr r3,.L32+16
 537 0032 1B78     	 ldrb r3,[r3]
 538 0034 DBB2     	 uxtb r3,r3
 539 0036 5BB2     	 sxtb r3,r3
 540 0038 002B     	 cmp r3,#0
 541 003a 03DA     	 bge .L31
 118:../transform.c **** 	{
 119:../transform.c **** 		theta_fast = 0;
 542              	 .loc 1 119 0
 543 003c 084B     	 ldr r3,.L32+12
 544 003e 4FF00002 	 mov r2,#0
 545 0042 1A60     	 str r2,[r3]
 546              	.L31:
 120:../transform.c **** 	}
 121:../transform.c **** 	sincosf(theta_fast, &sin_theta_fast, &cos_theta_fast);
 547              	 .loc 1 121 0
 548 0044 064B     	 ldr r3,.L32+12
 549 0046 1B68     	 ldr r3,[r3]
 550 0048 1846     	 mov r0,r3
 551 004a 0749     	 ldr r1,.L32+20
 552 004c 074A     	 ldr r2,.L32+24
 553 004e FFF7FEFF 	 bl sincosf
 122:../transform.c **** }
 554              	 .loc 1 122 0
 555 0052 80BD     	 pop {r7,pc}
 556              	.L33:
 557              	 .align 2
 558              	.L32:
 559 0054 00000000 	 .word electrical_position_modulo_fast
 560 0058 D00FC940 	 .word 1086918608
 561 005c 00000000 	 .word electrical_resolution
 562 0060 00000000 	 .word theta_fast
 563 0064 00000000 	 .word loop_control
 564 0068 00000000 	 .word sin_theta_fast
 565 006c 00000000 	 .word cos_theta_fast
 566              	 .cfi_endproc
 567              	.LFE201:
 569              	 .text
 570              	.Letext0:
 571              	 .file 2 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 572              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 573              	 .file 4 "C:/GitHub/Stepper_drive/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 574              	 .file 5 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\math.h"
 575              	 .file 6 "C:/GitHub/Stepper_drive/Libraries/CMSIS/Include/core_cm4.h"
 576              	 .file 7 "../main.h"
 577              	 .file 8 "../driver_adc.h"
 578              	 .file 9 "../pi_regulator.h"
 579              	 .file 10 "../state_machine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 transform.c
                            *COM*:00000004 CCU8_CC8_CR1_CR1_Value
    {standard input}:25     .bss.mechanical_position_fast:00000000 mechanical_position_fast
    {standard input}:22     .bss.mechanical_position_fast:00000000 $d
    {standard input}:32     .bss.electrical_position_modulo_fast:00000000 electrical_position_modulo_fast
    {standard input}:29     .bss.electrical_position_modulo_fast:00000000 $d
    {standard input}:39     .bss.theta_fast:00000000 theta_fast
    {standard input}:36     .bss.theta_fast:00000000 $d
    {standard input}:46     .bss.sin_theta_fast:00000000 sin_theta_fast
    {standard input}:43     .bss.sin_theta_fast:00000000 $d
    {standard input}:53     .bss.cos_theta_fast:00000000 cos_theta_fast
    {standard input}:50     .bss.cos_theta_fast:00000000 $d
    {standard input}:60     .bss.timer_value_fast:00000000 timer_value_fast
    {standard input}:57     .bss.timer_value_fast:00000000 $d
    {standard input}:67     .bss.timer_value_old_fast:00000000 timer_value_old_fast
    {standard input}:64     .bss.timer_value_old_fast:00000000 $d
    {standard input}:74     .bss.speed_value_fast:00000000 speed_value_fast
    {standard input}:71     .bss.speed_value_fast:00000000 $d
    {standard input}:81     .data.encoder_resolution:00000000 encoder_resolution
    {standard input}:78     .data.encoder_resolution:00000000 $d
    {standard input}:87     .data.pp:00000000 pp
    {standard input}:94     .bss.electrical_resolution:00000000 electrical_resolution
    {standard input}:91     .bss.electrical_resolution:00000000 $d
                            *COM*:00000004 u_a_ref
                            *COM*:00000004 u_b_ref
                            *COM*:00000004 u_c_ref
                            *COM*:00000004 i_d
                            *COM*:00000004 i_q
                            *COM*:00000004 i_alpha
                            *COM*:00000004 i_beta
                            *COM*:00000004 u_alpha
                            *COM*:00000004 u_beta
    {standard input}:106    .text.abc_dq:00000000 $t
    {standard input}:111    .text.abc_dq:00000000 abc_dq
    {standard input}:183    .text.abc_dq:00000088 $d
    {standard input}:195    .text.dq_abc:00000000 $t
    {standard input}:200    .text.dq_abc:00000000 dq_abc
    {standard input}:315    .text.dq_abc:000000e0 $d
    {standard input}:330    .text.compute_fast_speed:00000000 $t
    {standard input}:335    .text.compute_fast_speed:00000000 compute_fast_speed
    {standard input}:383    .text.compute_fast_speed:00000030 $d
    {standard input}:391    .text.compute_fast_mechanical_position:00000000 $t
    {standard input}:396    .text.compute_fast_mechanical_position:00000000 compute_fast_mechanical_position
    {standard input}:432    .text.compute_fast_mechanical_position:0000001c $d
    {standard input}:438    .text.compute_fast_electrical_position:00000000 $t
    {standard input}:443    .text.compute_fast_electrical_position:00000000 compute_fast_electrical_position
    {standard input}:492    .text.compute_fast_electrical_position:0000003c $d
    {standard input}:501    .text.compute_fast_field:00000000 $t
    {standard input}:506    .text.compute_fast_field:00000000 compute_fast_field
    {standard input}:559    .text.compute_fast_field:00000054 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ia
ic
u_d_ref
u_q_ref
sincosf
loop_control
