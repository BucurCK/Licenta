   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "transform.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm CCU8_CC8_CR1_CR1_Value,4,4
  20              	 .global mechanical_position_fast
  21              	 .section .bss.mechanical_position_fast,"aw",%nobits
  22              	 .align 2
  25              	mechanical_position_fast:
  26 0000 00000000 	 .space 4
  27              	 .global electrical_position_modulo_fast
  28              	 .section .bss.electrical_position_modulo_fast,"aw",%nobits
  29              	 .align 2
  32              	electrical_position_modulo_fast:
  33 0000 00000000 	 .space 4
  34              	 .global theta_fast
  35              	 .section .bss.theta_fast,"aw",%nobits
  36              	 .align 2
  39              	theta_fast:
  40 0000 00000000 	 .space 4
  41              	 .global sin_theta_fast
  42              	 .section .bss.sin_theta_fast,"aw",%nobits
  43              	 .align 2
  46              	sin_theta_fast:
  47 0000 00000000 	 .space 4
  48              	 .global cos_theta_fast
  49              	 .section .bss.cos_theta_fast,"aw",%nobits
  50              	 .align 2
  53              	cos_theta_fast:
  54 0000 00000000 	 .space 4
  55              	 .global timer_value_fast
  56              	 .section .bss.timer_value_fast,"aw",%nobits
  57              	 .align 1
  60              	timer_value_fast:
  61 0000 0000     	 .space 2
  62              	 .global timer_value_old_fast
  63              	 .section .bss.timer_value_old_fast,"aw",%nobits
  64              	 .align 1
  67              	timer_value_old_fast:
  68 0000 0000     	 .space 2
  69              	 .global speed_value_fast
  70              	 .section .bss.speed_value_fast,"aw",%nobits
  71              	 .align 1
  74              	speed_value_fast:
  75 0000 0000     	 .space 2
  76              	 .global encoder_resolution
  77              	 .section .data.encoder_resolution,"aw",%progbits
  78              	 .align 1
  81              	encoder_resolution:
  82 0000 D007     	 .short 2000
  83              	 .global pp
  84              	 .section .data.pp,"aw",%progbits
  87              	pp:
  88 0000 04       	 .byte 4
  89              	 .global electrical_resolution
  90              	 .section .bss.electrical_resolution,"aw",%nobits
  91              	 .align 1
  94              	electrical_resolution:
  95 0000 0000     	 .space 2
  96              	 .comm u_a_ref,4,4
  97              	 .comm u_b_ref,4,4
  98              	 .comm u_c_ref,4,4
  99              	 .comm u_d,4,4
 100              	 .comm u_q,4,4
 101              	 .comm i_d,4,4
 102              	 .comm i_q,4,4
 103              	 .comm i_alpha,4,4
 104              	 .comm i_beta,4,4
 105              	 .comm u_alpha,4,4
 106              	 .comm u_beta,4,4
 107              	 .global rpm
 108              	 .section .bss.rpm,"aw",%nobits
 109              	 .align 2
 112              	rpm:
 113 0000 00000000 	 .space 4
 114              	 .section .text.abc_dq,"ax",%progbits
 115              	 .align 2
 116              	 .global abc_dq
 117              	 .thumb
 118              	 .thumb_func
 120              	abc_dq:
 121              	.LFB196:
 122              	 .file 1 "../transform.c"
   1:../transform.c **** #include <stdint.h>
   2:../transform.c **** #include <stdbool.h>
   3:../transform.c **** #include <xmc_common.h>
   4:../transform.c **** #include "driver_pwm.h"
   5:../transform.c **** #include "motor_data_update.h"
   6:../transform.c **** #include "transform.h"
   7:../transform.c **** #include "main.h"
   8:../transform.c **** #include <math.h>
   9:../transform.c **** #include "Encoder.h"
  10:../transform.c **** #include "driver_adc.h"
  11:../transform.c **** 
  12:../transform.c **** /*
  13:../transform.c ****  * Variables
  14:../transform.c ****  */
  15:../transform.c **** int32_t mechanical_position_fast = 0;			//compute the mechanical position of the motor based on spe
  16:../transform.c **** int32_t electrical_position_modulo_fast = 0;	//the module of electrical position based on electrica
  17:../transform.c **** float theta_fast = 0;							//electric angle
  18:../transform.c **** float sin_theta_fast = 0;						//sin(theta)
  19:../transform.c **** float cos_theta_fast = 0;						//cos(theta)
  20:../transform.c **** int16_t timer_value_fast = 0;					//Stored value of CCU40 timer for encoder
  21:../transform.c **** int16_t timer_value_old_fast = 0;				//*Last* read of timer value for speed computation
  22:../transform.c **** int16_t speed_value_fast = 0;					//Speed value based on 2 timer values
  23:../transform.c **** int16_t encoder_resolution = 2000;				//Resolution of encoder | 4*500
  24:../transform.c **** int8_t pp = 4;									//Number of electric poles
  25:../transform.c **** int16_t electrical_resolution = 0;				//Electrical resolution based on encoder resolution and numbe
  26:../transform.c **** 
  27:../transform.c **** float u_a_ref,u_b_ref,u_c_ref;					//abc voltage | -32768 -- 32,767
  28:../transform.c **** //float SinTheta,CosTheta,Theta;
  29:../transform.c **** //TESTING *****************************************************************************************
  30:../transform.c **** float u_d,u_q,i_d,i_q; 					//dq voltage																   *
  31:../transform.c **** //TESTING *****************************************************************************************
  32:../transform.c **** float i_alpha, i_beta;							//currents for dq computation
  33:../transform.c **** float u_alpha, u_beta;							//voltage for abc computation
  34:../transform.c **** int32_t rpm = 0;
  35:../transform.c **** 
  36:../transform.c **** 
  37:../transform.c **** /*
  38:../transform.c ****  * Function to convert three-phase electrical signals from the time-domain to the dq0-reference fra
  39:../transform.c ****  * Only Currents
  40:../transform.c ****  */
  41:../transform.c **** void abc_dq (void)
  42:../transform.c **** {
 123              	 .loc 1 42 0
 124              	 .cfi_startproc
 125              	 
 126              	 
 127              	 
 128 0000 80B4     	 push {r7}
 129              	.LCFI0:
 130              	 .cfi_def_cfa_offset 4
 131              	 .cfi_offset 7,-4
 132 0002 00AF     	 add r7,sp,#0
 133              	.LCFI1:
 134              	 .cfi_def_cfa_register 7
  43:../transform.c **** 	/*
  44:../transform.c **** 	 * The Clarke Transformation
  45:../transform.c **** 	 */
  46:../transform.c **** 	i_alpha = ia;
 135              	 .loc 1 46 0
 136 0004 274B     	 ldr r3,.L2
 137 0006 1B88     	 ldrh r3,[r3]
 138 0008 1BB2     	 sxth r3,r3
 139 000a 07EE903A 	 fmsr s15,r3
 140 000e F8EEE77A 	 fsitos s15,s15
 141 0012 254B     	 ldr r3,.L2+4
 142 0014 C3ED007A 	 fsts s15,[r3]
  47:../transform.c **** 	i_beta = 1/sqrtf(3) * (float)(ia + (float)(2*ib));
 143              	 .loc 1 47 0
 144 0018 224B     	 ldr r3,.L2
 145 001a 1B88     	 ldrh r3,[r3]
 146 001c 1BB2     	 sxth r3,r3
 147 001e 07EE903A 	 fmsr s15,r3
 148 0022 B8EEE77A 	 fsitos s14,s15
 149 0026 214B     	 ldr r3,.L2+8
 150 0028 1B88     	 ldrh r3,[r3]
 151 002a 1BB2     	 sxth r3,r3
 152 002c 5B00     	 lsls r3,r3,#1
 153 002e 07EE903A 	 fmsr s15,r3
 154 0032 F8EEE77A 	 fsitos s15,s15
 155 0036 77EE277A 	 fadds s15,s14,s15
 156 003a 9FED1D7A 	 flds s14,.L2+12
 157 003e 67EE877A 	 fmuls s15,s15,s14
 158 0042 1C4B     	 ldr r3,.L2+16
 159 0044 C3ED007A 	 fsts s15,[r3]
  48:../transform.c **** 	/*
  49:../transform.c **** 	 * The Park Transformation
  50:../transform.c **** 	 */
  51:../transform.c **** 	i_d = i_alpha*cos_theta_fast + i_beta*sin_theta_fast;
 160              	 .loc 1 51 0
 161 0048 174B     	 ldr r3,.L2+4
 162 004a 93ED007A 	 flds s14,[r3]
 163 004e 1A4B     	 ldr r3,.L2+20
 164 0050 D3ED007A 	 flds s15,[r3]
 165 0054 27EE277A 	 fmuls s14,s14,s15
 166 0058 164B     	 ldr r3,.L2+16
 167 005a D3ED006A 	 flds s13,[r3]
 168 005e 174B     	 ldr r3,.L2+24
 169 0060 D3ED007A 	 flds s15,[r3]
 170 0064 66EEA77A 	 fmuls s15,s13,s15
 171 0068 77EE277A 	 fadds s15,s14,s15
 172 006c 144B     	 ldr r3,.L2+28
 173 006e C3ED007A 	 fsts s15,[r3]
  52:../transform.c **** 	i_q = i_beta*cos_theta_fast - i_alpha*sin_theta_fast;
 174              	 .loc 1 52 0
 175 0072 104B     	 ldr r3,.L2+16
 176 0074 93ED007A 	 flds s14,[r3]
 177 0078 0F4B     	 ldr r3,.L2+20
 178 007a D3ED007A 	 flds s15,[r3]
 179 007e 27EE277A 	 fmuls s14,s14,s15
 180 0082 094B     	 ldr r3,.L2+4
 181 0084 D3ED006A 	 flds s13,[r3]
 182 0088 0C4B     	 ldr r3,.L2+24
 183 008a D3ED007A 	 flds s15,[r3]
 184 008e 66EEA77A 	 fmuls s15,s13,s15
 185 0092 77EE677A 	 fsubs s15,s14,s15
 186 0096 0B4B     	 ldr r3,.L2+32
 187 0098 C3ED007A 	 fsts s15,[r3]
  53:../transform.c **** 
  54:../transform.c **** }
 188              	 .loc 1 54 0
 189 009c BD46     	 mov sp,r7
 190              	.LCFI2:
 191              	 .cfi_def_cfa_register 13
 192              	 
 193 009e 5DF8047B 	 ldr r7,[sp],#4
 194              	.LCFI3:
 195              	 .cfi_restore 7
 196              	 .cfi_def_cfa_offset 0
 197 00a2 7047     	 bx lr
 198              	.L3:
 199              	 .align 2
 200              	.L2:
 201 00a4 00000000 	 .word ia
 202 00a8 00000000 	 .word i_alpha
 203 00ac 00000000 	 .word ib
 204 00b0 3ACD133F 	 .word 1058262330
 205 00b4 00000000 	 .word i_beta
 206 00b8 00000000 	 .word cos_theta_fast
 207 00bc 00000000 	 .word sin_theta_fast
 208 00c0 00000000 	 .word i_d
 209 00c4 00000000 	 .word i_q
 210              	 .cfi_endproc
 211              	.LFE196:
 213              	 .global __aeabi_f2d
 214              	 .global __aeabi_dadd
 215              	 .global __aeabi_d2f
 216              	 .section .text.abc_dq_test,"ax",%progbits
 217              	 .align 2
 218              	 .global abc_dq_test
 219              	 .thumb
 220              	 .thumb_func
 222              	abc_dq_test:
 223              	.LFB197:
  55:../transform.c **** 
  56:../transform.c **** void abc_dq_test (void)		//TEST
  57:../transform.c **** {
 224              	 .loc 1 57 0
 225              	 .cfi_startproc
 226              	 
 227              	 
 228 0000 B0B5     	 push {r4,r5,r7,lr}
 229              	.LCFI4:
 230              	 .cfi_def_cfa_offset 16
 231              	 .cfi_offset 4,-16
 232              	 .cfi_offset 5,-12
 233              	 .cfi_offset 7,-8
 234              	 .cfi_offset 14,-4
 235 0002 00AF     	 add r7,sp,#0
 236              	.LCFI5:
 237              	 .cfi_def_cfa_register 7
  58:../transform.c **** 	/*
  59:../transform.c **** 	 * The Clarke Transformation
  60:../transform.c **** 	 */
  61:../transform.c **** 	i_alpha = signal_ia_test;
 238              	 .loc 1 61 0
 239 0004 2A4B     	 ldr r3,.L5
 240 0006 1B68     	 ldr r3,[r3]
 241 0008 2A4A     	 ldr r2,.L5+4
 242 000a 1360     	 str r3,[r2]
  62:../transform.c **** 	i_beta = 1/sqrtf(3) * (float)(signal_ia_test + (2.*(float)signal_ib_test));
 243              	 .loc 1 62 0
 244 000c 284B     	 ldr r3,.L5
 245 000e 1B68     	 ldr r3,[r3]
 246 0010 1846     	 mov r0,r3
 247 0012 FFF7FEFF 	 bl __aeabi_f2d
 248 0016 0446     	 mov r4,r0
 249 0018 0D46     	 mov r5,r1
 250 001a 274B     	 ldr r3,.L5+8
 251 001c 1B68     	 ldr r3,[r3]
 252 001e 1846     	 mov r0,r3
 253 0020 FFF7FEFF 	 bl __aeabi_f2d
 254 0024 0246     	 mov r2,r0
 255 0026 0B46     	 mov r3,r1
 256 0028 1046     	 mov r0,r2
 257 002a 1946     	 mov r1,r3
 258 002c FFF7FEFF 	 bl __aeabi_dadd
 259 0030 0246     	 mov r2,r0
 260 0032 0B46     	 mov r3,r1
 261 0034 2046     	 mov r0,r4
 262 0036 2946     	 mov r1,r5
 263 0038 FFF7FEFF 	 bl __aeabi_dadd
 264 003c 0246     	 mov r2,r0
 265 003e 0B46     	 mov r3,r1
 266 0040 1046     	 mov r0,r2
 267 0042 1946     	 mov r1,r3
 268 0044 FFF7FEFF 	 bl __aeabi_d2f
 269 0048 07EE100A 	 fmsr s14,r0
 270 004c DFED1B7A 	 flds s15,.L5+12
 271 0050 67EE277A 	 fmuls s15,s14,s15
 272 0054 1A4B     	 ldr r3,.L5+16
 273 0056 C3ED007A 	 fsts s15,[r3]
  63:../transform.c **** 	/*
  64:../transform.c **** 	 * The Park Transformation
  65:../transform.c **** 	 */
  66:../transform.c **** 	i_d = i_alpha*cos_increment_2_pi + i_beta*sin_increment_2_pi;
 274              	 .loc 1 66 0
 275 005a 164B     	 ldr r3,.L5+4
 276 005c 93ED007A 	 flds s14,[r3]
 277 0060 184B     	 ldr r3,.L5+20
 278 0062 D3ED007A 	 flds s15,[r3]
 279 0066 27EE277A 	 fmuls s14,s14,s15
 280 006a 154B     	 ldr r3,.L5+16
 281 006c D3ED006A 	 flds s13,[r3]
 282 0070 154B     	 ldr r3,.L5+24
 283 0072 D3ED007A 	 flds s15,[r3]
 284 0076 66EEA77A 	 fmuls s15,s13,s15
 285 007a 77EE277A 	 fadds s15,s14,s15
 286 007e 134B     	 ldr r3,.L5+28
 287 0080 C3ED007A 	 fsts s15,[r3]
  67:../transform.c **** 	i_q = i_beta*cos_increment_2_pi - i_alpha*sin_increment_2_pi;
 288              	 .loc 1 67 0
 289 0084 0E4B     	 ldr r3,.L5+16
 290 0086 93ED007A 	 flds s14,[r3]
 291 008a 0E4B     	 ldr r3,.L5+20
 292 008c D3ED007A 	 flds s15,[r3]
 293 0090 27EE277A 	 fmuls s14,s14,s15
 294 0094 074B     	 ldr r3,.L5+4
 295 0096 D3ED006A 	 flds s13,[r3]
 296 009a 0B4B     	 ldr r3,.L5+24
 297 009c D3ED007A 	 flds s15,[r3]
 298 00a0 66EEA77A 	 fmuls s15,s13,s15
 299 00a4 77EE677A 	 fsubs s15,s14,s15
 300 00a8 094B     	 ldr r3,.L5+32
 301 00aa C3ED007A 	 fsts s15,[r3]
  68:../transform.c **** 
  69:../transform.c **** }
 302              	 .loc 1 69 0
 303 00ae B0BD     	 pop {r4,r5,r7,pc}
 304              	.L6:
 305              	 .align 2
 306              	.L5:
 307 00b0 00000000 	 .word signal_ia_test
 308 00b4 00000000 	 .word i_alpha
 309 00b8 00000000 	 .word signal_ib_test
 310 00bc 3ACD133F 	 .word 1058262330
 311 00c0 00000000 	 .word i_beta
 312 00c4 00000000 	 .word cos_increment_2_pi
 313 00c8 00000000 	 .word sin_increment_2_pi
 314 00cc 00000000 	 .word i_d
 315 00d0 00000000 	 .word i_q
 316              	 .cfi_endproc
 317              	.LFE197:
 319              	 .section .text.dq_abc,"ax",%progbits
 320              	 .align 2
 321              	 .global dq_abc
 322              	 .thumb
 323              	 .thumb_func
 325              	dq_abc:
 326              	.LFB198:
  70:../transform.c **** 
  71:../transform.c **** /*
  72:../transform.c ****  * Function to convert two-phase balanced sinusoidal signals to three-phase electrical signals
  73:../transform.c ****  * Only Voltage
  74:../transform.c ****  */
  75:../transform.c **** void dq_abc(void)
  76:../transform.c **** {
 327              	 .loc 1 76 0
 328              	 .cfi_startproc
 329              	 
 330              	 
 331              	 
 332 0000 80B4     	 push {r7}
 333              	.LCFI6:
 334              	 .cfi_def_cfa_offset 4
 335              	 .cfi_offset 7,-4
 336 0002 00AF     	 add r7,sp,#0
 337              	.LCFI7:
 338              	 .cfi_def_cfa_register 7
  77:../transform.c **** 	/*
  78:../transform.c **** 	 * The Inverse Park Transformation
  79:../transform.c **** 	 */
  80:../transform.c **** 	u_alpha = u_d*cos_theta_fast - u_q*sin_theta_fast;
 339              	 .loc 1 80 0
 340 0004 564B     	 ldr r3,.L29
 341 0006 93ED007A 	 flds s14,[r3]
 342 000a 564B     	 ldr r3,.L29+4
 343 000c D3ED007A 	 flds s15,[r3]
 344 0010 27EE277A 	 fmuls s14,s14,s15
 345 0014 544B     	 ldr r3,.L29+8
 346 0016 D3ED006A 	 flds s13,[r3]
 347 001a 544B     	 ldr r3,.L29+12
 348 001c D3ED007A 	 flds s15,[r3]
 349 0020 66EEA77A 	 fmuls s15,s13,s15
 350 0024 77EE677A 	 fsubs s15,s14,s15
 351 0028 514B     	 ldr r3,.L29+16
 352 002a C3ED007A 	 fsts s15,[r3]
  81:../transform.c **** 	u_beta = u_q*cos_theta_fast + u_d*sin_theta_fast;
 353              	 .loc 1 81 0
 354 002e 4E4B     	 ldr r3,.L29+8
 355 0030 93ED007A 	 flds s14,[r3]
 356 0034 4B4B     	 ldr r3,.L29+4
 357 0036 D3ED007A 	 flds s15,[r3]
 358 003a 27EE277A 	 fmuls s14,s14,s15
 359 003e 484B     	 ldr r3,.L29
 360 0040 D3ED006A 	 flds s13,[r3]
 361 0044 494B     	 ldr r3,.L29+12
 362 0046 D3ED007A 	 flds s15,[r3]
 363 004a 66EEA77A 	 fmuls s15,s13,s15
 364 004e 77EE277A 	 fadds s15,s14,s15
 365 0052 484B     	 ldr r3,.L29+20
 366 0054 C3ED007A 	 fsts s15,[r3]
  82:../transform.c **** 	/*
  83:../transform.c **** 	 * The Inverse Clarke Transformation
  84:../transform.c **** 	 */
  85:../transform.c **** 	u_a_ref = u_alpha;
 367              	 .loc 1 85 0
 368 0058 454B     	 ldr r3,.L29+16
 369 005a 1B68     	 ldr r3,[r3]
 370 005c 464A     	 ldr r2,.L29+24
 371 005e 1360     	 str r3,[r2]
  86:../transform.c **** 	u_b_ref = (-u_alpha+sqrtf(3)*u_beta)/2;
 372              	 .loc 1 86 0
 373 0060 444B     	 ldr r3,.L29+20
 374 0062 D3ED007A 	 flds s15,[r3]
 375 0066 9FED457A 	 flds s14,.L29+28
 376 006a 27EE877A 	 fmuls s14,s15,s14
 377 006e 404B     	 ldr r3,.L29+16
 378 0070 D3ED007A 	 flds s15,[r3]
 379 0074 77EE677A 	 fsubs s15,s14,s15
 380 0078 B0EE007A 	 fconsts s14,#0
 381 007c C7EE877A 	 fdivs s15,s15,s14
 382 0080 3F4B     	 ldr r3,.L29+32
 383 0082 C3ED007A 	 fsts s15,[r3]
  87:../transform.c **** 	u_c_ref = (-u_alpha-sqrtf(3)*u_beta)/2;
 384              	 .loc 1 87 0
 385 0086 3A4B     	 ldr r3,.L29+16
 386 0088 D3ED007A 	 flds s15,[r3]
 387 008c B1EE677A 	 fnegs s14,s15
 388 0090 384B     	 ldr r3,.L29+20
 389 0092 D3ED007A 	 flds s15,[r3]
 390 0096 DFED396A 	 flds s13,.L29+28
 391 009a 67EEA67A 	 fmuls s15,s15,s13
 392 009e 77EE677A 	 fsubs s15,s14,s15
 393 00a2 B0EE007A 	 fconsts s14,#0
 394 00a6 C7EE877A 	 fdivs s15,s15,s14
 395 00aa 364B     	 ldr r3,.L29+36
 396 00ac C3ED007A 	 fsts s15,[r3]
  88:../transform.c **** 
  89:../transform.c **** 	/*
  90:../transform.c **** 	 * Keeps the values in range of int16_t
  91:../transform.c **** 	 * Later on the Float values will be casted into Int
  92:../transform.c **** 	 */
  93:../transform.c **** 	if (u_a_ref > MAX_UINT_16)
 397              	 .loc 1 93 0
 398 00b0 314B     	 ldr r3,.L29+24
 399 00b2 D3ED007A 	 flds s15,[r3]
 400 00b6 9FED347A 	 flds s14,.L29+40
 401 00ba F4EEC77A 	 fcmpes s15,s14
 402 00be F1EE10FA 	 fmstat
 403 00c2 03DD     	 ble .L26
  94:../transform.c **** 	{
  95:../transform.c **** 		u_a_ref = MAX_UINT_16;
 404              	 .loc 1 95 0
 405 00c4 2C4B     	 ldr r3,.L29+24
 406 00c6 314A     	 ldr r2,.L29+44
 407 00c8 1A60     	 str r2,[r3]
 408 00ca 0DE0     	 b .L10
 409              	.L26:
  96:../transform.c **** 	}
  97:../transform.c **** 	else if (u_a_ref < MIN_UINT_16)
 410              	 .loc 1 97 0
 411 00cc 2A4B     	 ldr r3,.L29+24
 412 00ce D3ED007A 	 flds s15,[r3]
 413 00d2 9FED2F7A 	 flds s14,.L29+48
 414 00d6 F4EEC77A 	 fcmpes s15,s14
 415 00da F1EE10FA 	 fmstat
 416 00de 03D5     	 bpl .L10
  98:../transform.c **** 	{
  99:../transform.c **** 		u_a_ref = MIN_UINT_16;
 417              	 .loc 1 99 0
 418 00e0 254B     	 ldr r3,.L29+24
 419 00e2 4FF04742 	 mov r2,#-956301312
 420 00e6 1A60     	 str r2,[r3]
 421              	.L10:
 100:../transform.c **** 	}
 101:../transform.c **** 
 102:../transform.c **** 	if (u_b_ref > MAX_UINT_16)
 422              	 .loc 1 102 0
 423 00e8 254B     	 ldr r3,.L29+32
 424 00ea D3ED007A 	 flds s15,[r3]
 425 00ee 9FED267A 	 flds s14,.L29+40
 426 00f2 F4EEC77A 	 fcmpes s15,s14
 427 00f6 F1EE10FA 	 fmstat
 428 00fa 03DD     	 ble .L27
 103:../transform.c **** 	{
 104:../transform.c **** 		u_b_ref = MAX_UINT_16;
 429              	 .loc 1 104 0
 430 00fc 204B     	 ldr r3,.L29+32
 431 00fe 234A     	 ldr r2,.L29+44
 432 0100 1A60     	 str r2,[r3]
 433 0102 0DE0     	 b .L14
 434              	.L27:
 105:../transform.c **** 	}
 106:../transform.c **** 	else if (u_b_ref < MIN_UINT_16)
 435              	 .loc 1 106 0
 436 0104 1E4B     	 ldr r3,.L29+32
 437 0106 D3ED007A 	 flds s15,[r3]
 438 010a 9FED217A 	 flds s14,.L29+48
 439 010e F4EEC77A 	 fcmpes s15,s14
 440 0112 F1EE10FA 	 fmstat
 441 0116 03D5     	 bpl .L14
 107:../transform.c **** 	{
 108:../transform.c **** 		u_a_ref = MIN_UINT_16;
 442              	 .loc 1 108 0
 443 0118 174B     	 ldr r3,.L29+24
 444 011a 4FF04742 	 mov r2,#-956301312
 445 011e 1A60     	 str r2,[r3]
 446              	.L14:
 109:../transform.c **** 	}
 110:../transform.c **** 
 111:../transform.c **** 	if (u_c_ref > MAX_UINT_16)
 447              	 .loc 1 111 0
 448 0120 184B     	 ldr r3,.L29+36
 449 0122 D3ED007A 	 flds s15,[r3]
 450 0126 9FED187A 	 flds s14,.L29+40
 451 012a F4EEC77A 	 fcmpes s15,s14
 452 012e F1EE10FA 	 fmstat
 453 0132 03DD     	 ble .L28
 112:../transform.c **** 	{
 113:../transform.c **** 		u_a_ref = MAX_UINT_16;
 454              	 .loc 1 113 0
 455 0134 104B     	 ldr r3,.L29+24
 456 0136 154A     	 ldr r2,.L29+44
 457 0138 1A60     	 str r2,[r3]
 458 013a 0DE0     	 b .L7
 459              	.L28:
 114:../transform.c **** 	}
 115:../transform.c **** 	else if (u_c_ref < MIN_UINT_16)
 460              	 .loc 1 115 0
 461 013c 114B     	 ldr r3,.L29+36
 462 013e D3ED007A 	 flds s15,[r3]
 463 0142 9FED137A 	 flds s14,.L29+48
 464 0146 F4EEC77A 	 fcmpes s15,s14
 465 014a F1EE10FA 	 fmstat
 466 014e 03D5     	 bpl .L7
 116:../transform.c **** 	{
 117:../transform.c **** 		u_c_ref = MIN_UINT_16;
 467              	 .loc 1 117 0
 468 0150 0C4B     	 ldr r3,.L29+36
 469 0152 4FF04742 	 mov r2,#-956301312
 470 0156 1A60     	 str r2,[r3]
 471              	.L7:
 118:../transform.c **** 	}
 119:../transform.c **** 
 120:../transform.c **** }
 472              	 .loc 1 120 0
 473 0158 BD46     	 mov sp,r7
 474              	.LCFI8:
 475              	 .cfi_def_cfa_register 13
 476              	 
 477 015a 5DF8047B 	 ldr r7,[sp],#4
 478              	.LCFI9:
 479              	 .cfi_restore 7
 480              	 .cfi_def_cfa_offset 0
 481 015e 7047     	 bx lr
 482              	.L30:
 483              	 .align 2
 484              	.L29:
 485 0160 00000000 	 .word u_d
 486 0164 00000000 	 .word cos_theta_fast
 487 0168 00000000 	 .word u_q
 488 016c 00000000 	 .word sin_theta_fast
 489 0170 00000000 	 .word u_alpha
 490 0174 00000000 	 .word u_beta
 491 0178 00000000 	 .word u_a_ref
 492 017c D7B3DD3F 	 .word 1071494103
 493 0180 00000000 	 .word u_b_ref
 494 0184 00000000 	 .word u_c_ref
 495 0188 00FEFF46 	 .word 1191181824
 496 018c 00FEFF46 	 .word 1191181824
 497 0190 000000C7 	 .word -956301312
 498              	 .cfi_endproc
 499              	.LFE198:
 501              	 .section .text.compute_fast_speed,"ax",%progbits
 502              	 .align 2
 503              	 .global compute_fast_speed
 504              	 .thumb
 505              	 .thumb_func
 507              	compute_fast_speed:
 508              	.LFB199:
 121:../transform.c **** 
 122:../transform.c **** /*
 123:../transform.c ****  * Compute the speed based on the encoder increments, read from CCU40 Timer
 124:../transform.c ****  */
 125:../transform.c **** void compute_fast_speed (void)
 126:../transform.c **** {
 509              	 .loc 1 126 0
 510              	 .cfi_startproc
 511              	 
 512              	 
 513              	 
 514 0000 80B4     	 push {r7}
 515              	.LCFI10:
 516              	 .cfi_def_cfa_offset 4
 517              	 .cfi_offset 7,-4
 518 0002 00AF     	 add r7,sp,#0
 519              	.LCFI11:
 520              	 .cfi_def_cfa_register 7
 127:../transform.c **** 	timer_value_fast = CCU40_CC40->TIMER;
 521              	 .loc 1 127 0
 522 0004 0B4B     	 ldr r3,.L32
 523 0006 1B6F     	 ldr r3,[r3,#112]
 524 0008 9AB2     	 uxth r2,r3
 525 000a 0B4B     	 ldr r3,.L32+4
 526 000c 1A80     	 strh r2,[r3]
 128:../transform.c **** 	speed_value_fast = timer_value_fast - timer_value_old_fast;
 527              	 .loc 1 128 0
 528 000e 0A4B     	 ldr r3,.L32+4
 529 0010 1B88     	 ldrh r3,[r3]
 530 0012 9AB2     	 uxth r2,r3
 531 0014 094B     	 ldr r3,.L32+8
 532 0016 1B88     	 ldrh r3,[r3]
 533 0018 9BB2     	 uxth r3,r3
 534 001a D31A     	 subs r3,r2,r3
 535 001c 9BB2     	 uxth r3,r3
 536 001e 9AB2     	 uxth r2,r3
 537 0020 074B     	 ldr r3,.L32+12
 538 0022 1A80     	 strh r2,[r3]
 129:../transform.c **** 	//FOR TESTING I SET A CONSTANT SPEED VALUE
 130:../transform.c **** 	//speed_value_fast = 1;
 131:../transform.c **** 	timer_value_old_fast = timer_value_fast;
 539              	 .loc 1 131 0
 540 0024 044B     	 ldr r3,.L32+4
 541 0026 1A88     	 ldrh r2,[r3]
 542 0028 044B     	 ldr r3,.L32+8
 543 002a 1A80     	 strh r2,[r3]
 132:../transform.c **** 
 133:../transform.c **** }
 544              	 .loc 1 133 0
 545 002c BD46     	 mov sp,r7
 546              	.LCFI12:
 547              	 .cfi_def_cfa_register 13
 548              	 
 549 002e 5DF8047B 	 ldr r7,[sp],#4
 550              	.LCFI13:
 551              	 .cfi_restore 7
 552              	 .cfi_def_cfa_offset 0
 553 0032 7047     	 bx lr
 554              	.L33:
 555              	 .align 2
 556              	.L32:
 557 0034 00C10040 	 .word 1073791232
 558 0038 00000000 	 .word timer_value_fast
 559 003c 00000000 	 .word timer_value_old_fast
 560 0040 00000000 	 .word speed_value_fast
 561              	 .cfi_endproc
 562              	.LFE199:
 564              	 .section .text.compute_fast_mechanical_position,"ax",%progbits
 565              	 .align 2
 566              	 .global compute_fast_mechanical_position
 567              	 .thumb
 568              	 .thumb_func
 570              	compute_fast_mechanical_position:
 571              	.LFB200:
 134:../transform.c **** /*
 135:../transform.c ****  * Compute the mechanical position based on the speed value
 136:../transform.c ****  */
 137:../transform.c **** void compute_fast_mechanical_position (void)
 138:../transform.c **** {
 572              	 .loc 1 138 0
 573              	 .cfi_startproc
 574              	 
 575              	 
 576              	 
 577 0000 80B4     	 push {r7}
 578              	.LCFI14:
 579              	 .cfi_def_cfa_offset 4
 580              	 .cfi_offset 7,-4
 581 0002 00AF     	 add r7,sp,#0
 582              	.LCFI15:
 583              	 .cfi_def_cfa_register 7
 139:../transform.c **** 	mechanical_position_fast += speed_value_fast;
 584              	 .loc 1 139 0
 585 0004 054B     	 ldr r3,.L35
 586 0006 1B88     	 ldrh r3,[r3]
 587 0008 1AB2     	 sxth r2,r3
 588 000a 054B     	 ldr r3,.L35+4
 589 000c 1B68     	 ldr r3,[r3]
 590 000e 1344     	 add r3,r3,r2
 591 0010 034A     	 ldr r2,.L35+4
 592 0012 1360     	 str r3,[r2]
 140:../transform.c **** }
 593              	 .loc 1 140 0
 594 0014 BD46     	 mov sp,r7
 595              	.LCFI16:
 596              	 .cfi_def_cfa_register 13
 597              	 
 598 0016 5DF8047B 	 ldr r7,[sp],#4
 599              	.LCFI17:
 600              	 .cfi_restore 7
 601              	 .cfi_def_cfa_offset 0
 602 001a 7047     	 bx lr
 603              	.L36:
 604              	 .align 2
 605              	.L35:
 606 001c 00000000 	 .word speed_value_fast
 607 0020 00000000 	 .word mechanical_position_fast
 608              	 .cfi_endproc
 609              	.LFE200:
 611              	 .section .text.compute_fast_electrical_position,"ax",%progbits
 612              	 .align 2
 613              	 .global compute_fast_electrical_position
 614              	 .thumb
 615              	 .thumb_func
 617              	compute_fast_electrical_position:
 618              	.LFB201:
 141:../transform.c **** 
 142:../transform.c **** /*
 143:../transform.c ****  * Compute the module of the electrical position based on the mechanical position
 144:../transform.c ****  */
 145:../transform.c **** void compute_fast_electrical_position (void)
 146:../transform.c **** {
 619              	 .loc 1 146 0
 620              	 .cfi_startproc
 621              	 
 622              	 
 623              	 
 624 0000 80B4     	 push {r7}
 625              	.LCFI18:
 626              	 .cfi_def_cfa_offset 4
 627              	 .cfi_offset 7,-4
 628 0002 00AF     	 add r7,sp,#0
 629              	.LCFI19:
 630              	 .cfi_def_cfa_register 7
 147:../transform.c **** 	electrical_resolution = encoder_resolution/pp;
 631              	 .loc 1 147 0
 632 0004 0D4B     	 ldr r3,.L38
 633 0006 1B88     	 ldrh r3,[r3]
 634 0008 1AB2     	 sxth r2,r3
 635 000a 0D4B     	 ldr r3,.L38+4
 636 000c 1B78     	 ldrb r3,[r3]
 637 000e 5BB2     	 sxtb r3,r3
 638 0010 92FBF3F3 	 sdiv r3,r2,r3
 639 0014 9AB2     	 uxth r2,r3
 640 0016 0B4B     	 ldr r3,.L38+8
 641 0018 1A80     	 strh r2,[r3]
 148:../transform.c **** 	electrical_position_modulo_fast = mechanical_position_fast % electrical_resolution;
 642              	 .loc 1 148 0
 643 001a 0B4B     	 ldr r3,.L38+12
 644 001c 1B68     	 ldr r3,[r3]
 645 001e 094A     	 ldr r2,.L38+8
 646 0020 1288     	 ldrh r2,[r2]
 647 0022 12B2     	 sxth r2,r2
 648 0024 93FBF2F1 	 sdiv r1,r3,r2
 649 0028 02FB01F2 	 mul r2,r2,r1
 650 002c 9B1A     	 subs r3,r3,r2
 651 002e 074A     	 ldr r2,.L38+16
 652 0030 1360     	 str r3,[r2]
 149:../transform.c **** }
 653              	 .loc 1 149 0
 654 0032 BD46     	 mov sp,r7
 655              	.LCFI20:
 656              	 .cfi_def_cfa_register 13
 657              	 
 658 0034 5DF8047B 	 ldr r7,[sp],#4
 659              	.LCFI21:
 660              	 .cfi_restore 7
 661              	 .cfi_def_cfa_offset 0
 662 0038 7047     	 bx lr
 663              	.L39:
 664 003a 00BF     	 .align 2
 665              	.L38:
 666 003c 00000000 	 .word encoder_resolution
 667 0040 00000000 	 .word pp
 668 0044 00000000 	 .word electrical_resolution
 669 0048 00000000 	 .word mechanical_position_fast
 670 004c 00000000 	 .word electrical_position_modulo_fast
 671              	 .cfi_endproc
 672              	.LFE201:
 674              	 .section .text.compute_fast_field,"ax",%progbits
 675              	 .align 2
 676              	 .global compute_fast_field
 677              	 .thumb
 678              	 .thumb_func
 680              	compute_fast_field:
 681              	.LFB202:
 150:../transform.c **** 
 151:../transform.c **** /*
 152:../transform.c ****  * Compute the electrical angle based on the electrical position
 153:../transform.c ****  * Compute the sin&cos of theta
 154:../transform.c ****  */
 155:../transform.c **** void compute_fast_field (void)
 156:../transform.c **** {
 682              	 .loc 1 156 0
 683              	 .cfi_startproc
 684              	 
 685              	 
 686 0000 80B5     	 push {r7,lr}
 687              	.LCFI22:
 688              	 .cfi_def_cfa_offset 8
 689              	 .cfi_offset 7,-8
 690              	 .cfi_offset 14,-4
 691 0002 00AF     	 add r7,sp,#0
 692              	.LCFI23:
 693              	 .cfi_def_cfa_register 7
 157:../transform.c **** 	theta_fast = electrical_position_modulo_fast*(2*Pi)/electrical_resolution;
 694              	 .loc 1 157 0
 695 0004 0E4B     	 ldr r3,.L41
 696 0006 1B68     	 ldr r3,[r3]
 697 0008 07EE903A 	 fmsr s15,r3
 698 000c F8EEE77A 	 fsitos s15,s15
 699 0010 9FED0C7A 	 flds s14,.L41+4
 700 0014 27EE877A 	 fmuls s14,s15,s14
 701 0018 0B4B     	 ldr r3,.L41+8
 702 001a 1B88     	 ldrh r3,[r3]
 703 001c 1BB2     	 sxth r3,r3
 704 001e 07EE903A 	 fmsr s15,r3
 705 0022 F8EEE77A 	 fsitos s15,s15
 706 0026 C7EE277A 	 fdivs s15,s14,s15
 707 002a 084B     	 ldr r3,.L41+12
 708 002c C3ED007A 	 fsts s15,[r3]
 158:../transform.c **** 	sincosf(theta_fast, &sin_theta_fast, &cos_theta_fast);
 709              	 .loc 1 158 0
 710 0030 064B     	 ldr r3,.L41+12
 711 0032 1B68     	 ldr r3,[r3]
 712 0034 1846     	 mov r0,r3
 713 0036 0649     	 ldr r1,.L41+16
 714 0038 064A     	 ldr r2,.L41+20
 715 003a FFF7FEFF 	 bl sincosf
 159:../transform.c **** }
 716              	 .loc 1 159 0
 717 003e 80BD     	 pop {r7,pc}
 718              	.L42:
 719              	 .align 2
 720              	.L41:
 721 0040 00000000 	 .word electrical_position_modulo_fast
 722 0044 D00FC940 	 .word 1086918608
 723 0048 00000000 	 .word electrical_resolution
 724 004c 00000000 	 .word theta_fast
 725 0050 00000000 	 .word sin_theta_fast
 726 0054 00000000 	 .word cos_theta_fast
 727              	 .cfi_endproc
 728              	.LFE202:
 730              	 .section .text.compute_rpm,"ax",%progbits
 731              	 .align 2
 732              	 .global compute_rpm
 733              	 .thumb
 734              	 .thumb_func
 736              	compute_rpm:
 737              	.LFB203:
 160:../transform.c **** 
 161:../transform.c **** void compute_rpm (void)
 162:../transform.c **** {
 738              	 .loc 1 162 0
 739              	 .cfi_startproc
 740              	 
 741              	 
 742              	 
 743 0000 80B4     	 push {r7}
 744              	.LCFI24:
 745              	 .cfi_def_cfa_offset 4
 746              	 .cfi_offset 7,-4
 747 0002 00AF     	 add r7,sp,#0
 748              	.LCFI25:
 749              	 .cfi_def_cfa_register 7
 163:../transform.c **** 	rpm = motor_spd;					//RPM - number of increments per 1ms
 750              	 .loc 1 163 0
 751 0004 034B     	 ldr r3,.L44
 752 0006 1B68     	 ldr r3,[r3]
 753 0008 034A     	 ldr r2,.L44+4
 754 000a 1360     	 str r3,[r2]
 164:../transform.c **** }
 755              	 .loc 1 164 0
 756 000c BD46     	 mov sp,r7
 757              	.LCFI26:
 758              	 .cfi_def_cfa_register 13
 759              	 
 760 000e 5DF8047B 	 ldr r7,[sp],#4
 761              	.LCFI27:
 762              	 .cfi_restore 7
 763              	 .cfi_def_cfa_offset 0
 764 0012 7047     	 bx lr
 765              	.L45:
 766              	 .align 2
 767              	.L44:
 768 0014 00000000 	 .word motor_spd
 769 0018 00000000 	 .word rpm
 770              	 .cfi_endproc
 771              	.LFE203:
 773              	 .text
 774              	.Letext0:
 775              	 .file 2 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 776              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 777              	 .file 4 "C:/CODE/Licenta/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 778              	 .file 5 "C:/CODE/Licenta/Libraries/CMSIS/Include/core_cm4.h"
 779              	 .file 6 "../main.h"
 780              	 .file 7 "../driver_adc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 transform.c
                            *COM*:00000004 CCU8_CC8_CR1_CR1_Value
    {standard input}:25     .bss.mechanical_position_fast:00000000 mechanical_position_fast
    {standard input}:22     .bss.mechanical_position_fast:00000000 $d
    {standard input}:32     .bss.electrical_position_modulo_fast:00000000 electrical_position_modulo_fast
    {standard input}:29     .bss.electrical_position_modulo_fast:00000000 $d
    {standard input}:39     .bss.theta_fast:00000000 theta_fast
    {standard input}:36     .bss.theta_fast:00000000 $d
    {standard input}:46     .bss.sin_theta_fast:00000000 sin_theta_fast
    {standard input}:43     .bss.sin_theta_fast:00000000 $d
    {standard input}:53     .bss.cos_theta_fast:00000000 cos_theta_fast
    {standard input}:50     .bss.cos_theta_fast:00000000 $d
    {standard input}:60     .bss.timer_value_fast:00000000 timer_value_fast
    {standard input}:57     .bss.timer_value_fast:00000000 $d
    {standard input}:67     .bss.timer_value_old_fast:00000000 timer_value_old_fast
    {standard input}:64     .bss.timer_value_old_fast:00000000 $d
    {standard input}:74     .bss.speed_value_fast:00000000 speed_value_fast
    {standard input}:71     .bss.speed_value_fast:00000000 $d
    {standard input}:81     .data.encoder_resolution:00000000 encoder_resolution
    {standard input}:78     .data.encoder_resolution:00000000 $d
    {standard input}:87     .data.pp:00000000 pp
    {standard input}:94     .bss.electrical_resolution:00000000 electrical_resolution
    {standard input}:91     .bss.electrical_resolution:00000000 $d
                            *COM*:00000004 u_a_ref
                            *COM*:00000004 u_b_ref
                            *COM*:00000004 u_c_ref
                            *COM*:00000004 u_d
                            *COM*:00000004 u_q
                            *COM*:00000004 i_d
                            *COM*:00000004 i_q
                            *COM*:00000004 i_alpha
                            *COM*:00000004 i_beta
                            *COM*:00000004 u_alpha
                            *COM*:00000004 u_beta
    {standard input}:112    .bss.rpm:00000000 rpm
    {standard input}:109    .bss.rpm:00000000 $d
    {standard input}:115    .text.abc_dq:00000000 $t
    {standard input}:120    .text.abc_dq:00000000 abc_dq
    {standard input}:201    .text.abc_dq:000000a4 $d
    {standard input}:217    .text.abc_dq_test:00000000 $t
    {standard input}:222    .text.abc_dq_test:00000000 abc_dq_test
    {standard input}:307    .text.abc_dq_test:000000b0 $d
    {standard input}:320    .text.dq_abc:00000000 $t
    {standard input}:325    .text.dq_abc:00000000 dq_abc
    {standard input}:485    .text.dq_abc:00000160 $d
    {standard input}:502    .text.compute_fast_speed:00000000 $t
    {standard input}:507    .text.compute_fast_speed:00000000 compute_fast_speed
    {standard input}:557    .text.compute_fast_speed:00000034 $d
    {standard input}:565    .text.compute_fast_mechanical_position:00000000 $t
    {standard input}:570    .text.compute_fast_mechanical_position:00000000 compute_fast_mechanical_position
    {standard input}:606    .text.compute_fast_mechanical_position:0000001c $d
    {standard input}:612    .text.compute_fast_electrical_position:00000000 $t
    {standard input}:617    .text.compute_fast_electrical_position:00000000 compute_fast_electrical_position
    {standard input}:666    .text.compute_fast_electrical_position:0000003c $d
    {standard input}:675    .text.compute_fast_field:00000000 $t
    {standard input}:680    .text.compute_fast_field:00000000 compute_fast_field
    {standard input}:721    .text.compute_fast_field:00000040 $d
    {standard input}:731    .text.compute_rpm:00000000 $t
    {standard input}:736    .text.compute_rpm:00000000 compute_rpm
    {standard input}:768    .text.compute_rpm:00000014 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ia
ib
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
signal_ia_test
signal_ib_test
cos_increment_2_pi
sin_increment_2_pi
sincosf
motor_spd
