   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "kernel_interrupt.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm CCU8_CC8_CR1_CR1_Value,4,4
  20              	 .global interrupt_counter_slow_loop
  21              	 .section .bss.interrupt_counter_slow_loop,"aw",%nobits
  22              	 .align 1
  25              	interrupt_counter_slow_loop:
  26 0000 0000     	 .space 2
  27              	 .global interrupt_counter_fast_loop
  28              	 .section .bss.interrupt_counter_fast_loop,"aw",%nobits
  29              	 .align 1
  32              	interrupt_counter_fast_loop:
  33 0000 0000     	 .space 2
  34              	 .global interrupt_counter_timer
  35              	 .section .bss.interrupt_counter_timer,"aw",%nobits
  36              	 .align 2
  39              	interrupt_counter_timer:
  40 0000 00000000 	 .space 4
  41              	 .section .text.VADC0_G0_2_IRQHandler,"ax",%progbits
  42              	 .align 2
  43              	 .global VADC0_G0_2_IRQHandler
  44              	 .thumb
  45              	 .thumb_func
  47              	VADC0_G0_2_IRQHandler:
  48              	.LFB196:
  49              	 .file 1 "../kernel_interrupt.c"
   1:../kernel_interrupt.c **** #include <stdint.h>
   2:../kernel_interrupt.c **** #include <stdbool.h>
   3:../kernel_interrupt.c **** #include <xmc_common.h> // includes stdint stdbool stdef stdstring
   4:../kernel_interrupt.c **** #include "driver_pwm.h"
   5:../kernel_interrupt.c **** #include "main.h"
   6:../kernel_interrupt.c **** #include "motor_data_update.h"
   7:../kernel_interrupt.c **** #include "driver_adc.h"
   8:../kernel_interrupt.c **** #include "transform.h"
   9:../kernel_interrupt.c **** #include "io.h"
  10:../kernel_interrupt.c **** #include <probe_scope.h>
  11:../kernel_interrupt.c **** #include "Encoder.h"
  12:../kernel_interrupt.c **** #include "timer.h"
  13:../kernel_interrupt.c **** #include "motor_data_update.h"
  14:../kernel_interrupt.c **** #include "state_machine.h"
  15:../kernel_interrupt.c **** #include "pi_regulator.h"
  16:../kernel_interrupt.c **** #include "reference_generator.h"
  17:../kernel_interrupt.c **** #include "current_protection.h"
  18:../kernel_interrupt.c **** #include "kernel_interrupt.h"
  19:../kernel_interrupt.c **** 
  20:../kernel_interrupt.c **** uint16_t interrupt_counter_slow_loop = 0; // Slow Loop counter
  21:../kernel_interrupt.c **** uint16_t interrupt_counter_fast_loop = 0; // Fast Loop couner
  22:../kernel_interrupt.c **** uint32_t interrupt_counter_timer = 0;	  // Timer Counter
  23:../kernel_interrupt.c **** 
  24:../kernel_interrupt.c **** void VADC0_G0_2_IRQHandler(void)
  25:../kernel_interrupt.c **** {
  50              	 .loc 1 25 0
  51              	 .cfi_startproc
  52              	 
  53              	 
  54 0000 80B5     	 push {r7,lr}
  55              	.LCFI0:
  56              	 .cfi_def_cfa_offset 8
  57              	 .cfi_offset 7,-8
  58              	 .cfi_offset 14,-4
  59 0002 82B0     	 sub sp,sp,#8
  60              	.LCFI1:
  61              	 .cfi_def_cfa_offset 16
  62 0004 00AF     	 add r7,sp,#0
  63              	.LCFI2:
  64              	 .cfi_def_cfa_register 7
  26:../kernel_interrupt.c **** 	interrupt_counter_slow_loop++;
  65              	 .loc 1 26 0
  66 0006 424B     	 ldr r3,.L10
  67 0008 1B88     	 ldrh r3,[r3]
  68 000a 0133     	 adds r3,r3,#1
  69 000c 9AB2     	 uxth r2,r3
  70 000e 404B     	 ldr r3,.L10
  71 0010 1A80     	 strh r2,[r3]
  27:../kernel_interrupt.c **** 	interrupt_counter_fast_loop++;
  72              	 .loc 1 27 0
  73 0012 404B     	 ldr r3,.L10+4
  74 0014 1B88     	 ldrh r3,[r3]
  75 0016 0133     	 adds r3,r3,#1
  76 0018 9AB2     	 uxth r2,r3
  77 001a 3E4B     	 ldr r3,.L10+4
  78 001c 1A80     	 strh r2,[r3]
  28:../kernel_interrupt.c **** 	interrupt_counter_timer++;
  79              	 .loc 1 28 0
  80 001e 3E4B     	 ldr r3,.L10+8
  81 0020 1B68     	 ldr r3,[r3]
  82 0022 0133     	 adds r3,r3,#1
  83 0024 3C4A     	 ldr r2,.L10+8
  84 0026 1360     	 str r3,[r2]
  29:../kernel_interrupt.c **** 	/*
  30:../kernel_interrupt.c **** 	 * Fast compute "loop"
  31:../kernel_interrupt.c **** 	 * Every 100us compute speed,mechanical/electrical position, field, dq_abc transformation
  32:../kernel_interrupt.c **** 	 */
  33:../kernel_interrupt.c **** 	if (TIME_100_us == interrupt_counter_fast_loop)
  85              	 .loc 1 33 0
  86 0028 3A4B     	 ldr r3,.L10+4
  87 002a 1B88     	 ldrh r3,[r3]
  88 002c 022B     	 cmp r3,#2
  89 002e 44D1     	 bne .L2
  34:../kernel_interrupt.c **** 	{
  35:../kernel_interrupt.c **** 
  36:../kernel_interrupt.c **** 		// Read and compute into [SI] all currents
  37:../kernel_interrupt.c **** 		read_currents();
  90              	 .loc 1 37 0
  91 0030 FFF7FEFF 	 bl read_currents
  38:../kernel_interrupt.c **** 		compute_currents();
  92              	 .loc 1 38 0
  93 0034 FFF7FEFF 	 bl compute_currents
  39:../kernel_interrupt.c **** 		compute_u_mot();
  94              	 .loc 1 39 0
  95 0038 FFF7FEFF 	 bl compute_u_mot
  40:../kernel_interrupt.c **** 		compute_u_log();
  96              	 .loc 1 40 0
  97 003c FFF7FEFF 	 bl compute_u_log
  41:../kernel_interrupt.c **** 
  42:../kernel_interrupt.c **** 		// Compute all data for motor movement in Operation Enable
  43:../kernel_interrupt.c **** 		if (motion_config)
  98              	 .loc 1 43 0
  99 0040 364B     	 ldr r3,.L10+12
 100 0042 1B78     	 ldrb r3,[r3]
 101 0044 002B     	 cmp r3,#0
 102 0046 35D0     	 beq .L3
  44:../kernel_interrupt.c **** 		{
  45:../kernel_interrupt.c **** 			compute_fast_speed();
 103              	 .loc 1 45 0
 104 0048 FFF7FEFF 	 bl compute_fast_speed
  46:../kernel_interrupt.c **** 			compute_fast_mechanical_position();
 105              	 .loc 1 46 0
 106 004c FFF7FEFF 	 bl compute_fast_mechanical_position
  47:../kernel_interrupt.c **** 			compute_fast_electrical_position();
 107              	 .loc 1 47 0
 108 0050 FFF7FEFF 	 bl compute_fast_electrical_position
  48:../kernel_interrupt.c **** 			compute_fast_field();
 109              	 .loc 1 48 0
 110 0054 FFF7FEFF 	 bl compute_fast_field
  49:../kernel_interrupt.c **** 			abc_dq();
 111              	 .loc 1 49 0
 112 0058 FFF7FEFF 	 bl abc_dq
  50:../kernel_interrupt.c **** 
  51:../kernel_interrupt.c **** 			if (prot_status)
 113              	 .loc 1 51 0
 114 005c 304B     	 ldr r3,.L10+16
 115 005e 1B78     	 ldrb r3,[r3]
 116 0060 002B     	 cmp r3,#0
 117 0062 01D0     	 beq .L4
  52:../kernel_interrupt.c **** 			{
  53:../kernel_interrupt.c **** 				current_protection();
 118              	 .loc 1 53 0
 119 0064 FFF7FEFF 	 bl current_protection
 120              	.L4:
  54:../kernel_interrupt.c **** 			}
  55:../kernel_interrupt.c **** 
  56:../kernel_interrupt.c **** 			// Add Fast Loop regulators
  57:../kernel_interrupt.c **** 			if (loop_control & I_REF_LOOP_MSK)
 121              	 .loc 1 57 0
 122 0068 2E4B     	 ldr r3,.L10+20
 123 006a 1B78     	 ldrb r3,[r3]
 124 006c 03F00103 	 and r3,r3,#1
 125 0070 002B     	 cmp r3,#0
 126 0072 03D0     	 beq .L5
  58:../kernel_interrupt.c **** 			{
  59:../kernel_interrupt.c **** 				pi_regulator_i_d();
 127              	 .loc 1 59 0
 128 0074 FFF7FEFF 	 bl pi_regulator_i_d
  60:../kernel_interrupt.c **** 				pi_regulator_i_q();
 129              	 .loc 1 60 0
 130 0078 FFF7FEFF 	 bl pi_regulator_i_q
 131              	.L5:
  61:../kernel_interrupt.c **** 			}
  62:../kernel_interrupt.c **** 
  63:../kernel_interrupt.c **** 			dq_abc();
 132              	 .loc 1 63 0
 133 007c FFF7FEFF 	 bl dq_abc
  64:../kernel_interrupt.c **** 			pwm_update(u_a_ref, u_b_ref);
 134              	 .loc 1 64 0
 135 0080 294B     	 ldr r3,.L10+24
 136 0082 D3ED007A 	 flds s15,[r3]
 137 0086 FDEEE77A 	 ftosizs s15,s15
 138 008a C7ED017A 	 fsts s15,[r7,#4]
 139 008e BB88     	 ldrh r3,[r7,#4]
 140 0090 9AB2     	 uxth r2,r3
 141 0092 264B     	 ldr r3,.L10+28
 142 0094 D3ED007A 	 flds s15,[r3]
 143 0098 FDEEE77A 	 ftosizs s15,s15
 144 009c C7ED017A 	 fsts s15,[r7,#4]
 145 00a0 BB88     	 ldrh r3,[r7,#4]
 146 00a2 9BB2     	 uxth r3,r3
 147 00a4 12B2     	 sxth r2,r2
 148 00a6 1BB2     	 sxth r3,r3
 149 00a8 1046     	 mov r0,r2
 150 00aa 1946     	 mov r1,r3
 151 00ac FFF7FEFF 	 bl pwm_update
  65:../kernel_interrupt.c **** 
  66:../kernel_interrupt.c **** 			ProbeScope_Sampling(); // For Micrium Osciloscope
 152              	 .loc 1 66 0
 153 00b0 FFF7FEFF 	 bl ProbeScope_Sampling
 154              	.L3:
  67:../kernel_interrupt.c **** 		}
  68:../kernel_interrupt.c **** 
  69:../kernel_interrupt.c **** //		if (prot_status)
  70:../kernel_interrupt.c **** //		{
  71:../kernel_interrupt.c **** //			current_protection();
  72:../kernel_interrupt.c **** //		}
  73:../kernel_interrupt.c **** 
  74:../kernel_interrupt.c **** 		interrupt_counter_fast_loop = 0;
 155              	 .loc 1 74 0
 156 00b4 174B     	 ldr r3,.L10+4
 157 00b6 0022     	 movs r2,#0
 158 00b8 1A80     	 strh r2,[r3]
 159              	.L2:
  75:../kernel_interrupt.c **** 	}
  76:../kernel_interrupt.c **** 	/*
  77:../kernel_interrupt.c **** 	 * Slow compute loop
  78:../kernel_interrupt.c **** 	 * Every 1ms compute speed
  79:../kernel_interrupt.c **** 	 */
  80:../kernel_interrupt.c **** 	if (TIME_1_ms == interrupt_counter_slow_loop)
 160              	 .loc 1 80 0
 161 00ba 154B     	 ldr r3,.L10
 162 00bc 1B88     	 ldrh r3,[r3]
 163 00be 142B     	 cmp r3,#20
 164 00c0 23D1     	 bne .L1
  81:../kernel_interrupt.c **** 	{
  82:../kernel_interrupt.c **** 		if (motion_config)
 165              	 .loc 1 82 0
 166 00c2 164B     	 ldr r3,.L10+12
 167 00c4 1B78     	 ldrb r3,[r3]
 168 00c6 002B     	 cmp r3,#0
 169 00c8 1CD0     	 beq .L7
  83:../kernel_interrupt.c **** 		{
  84:../kernel_interrupt.c **** 			compute_speed(); // Compute motor speed and position
 170              	 .loc 1 84 0
 171 00ca FFF7FEFF 	 bl compute_speed
  85:../kernel_interrupt.c **** 
  86:../kernel_interrupt.c **** 			// Reference Generator function and timer
  87:../kernel_interrupt.c **** 			if (STATUS_0_DISABLED != ref_gen_status)
 172              	 .loc 1 87 0
 173 00ce 184B     	 ldr r3,.L10+32
 174 00d0 1B78     	 ldrb r3,[r3]
 175 00d2 002B     	 cmp r3,#0
 176 00d4 06D0     	 beq .L8
  88:../kernel_interrupt.c **** 			{
  89:../kernel_interrupt.c **** 				interrupt_counter_ref_gen++;
 177              	 .loc 1 89 0
 178 00d6 174B     	 ldr r3,.L10+36
 179 00d8 1B68     	 ldr r3,[r3]
 180 00da 0133     	 adds r3,r3,#1
 181 00dc 154A     	 ldr r2,.L10+36
 182 00de 1360     	 str r3,[r2]
  90:../kernel_interrupt.c **** 				reference_generator();
 183              	 .loc 1 90 0
 184 00e0 FFF7FEFF 	 bl reference_generator
 185              	.L8:
  91:../kernel_interrupt.c **** 			}
  92:../kernel_interrupt.c **** 
  93:../kernel_interrupt.c **** 			// Slow loop regulators
  94:../kernel_interrupt.c **** 			if (loop_control & POS_REF_LOOP_MSK)
 186              	 .loc 1 94 0
 187 00e4 0F4B     	 ldr r3,.L10+20
 188 00e6 1B78     	 ldrb r3,[r3]
 189 00e8 03F00403 	 and r3,r3,#4
 190 00ec 002B     	 cmp r3,#0
 191 00ee 01D0     	 beq .L9
  95:../kernel_interrupt.c **** 			{
  96:../kernel_interrupt.c **** 				pid_regulator_pos();
 192              	 .loc 1 96 0
 193 00f0 FFF7FEFF 	 bl pid_regulator_pos
 194              	.L9:
  97:../kernel_interrupt.c **** 			}
  98:../kernel_interrupt.c **** 			if (loop_control & SPD_REF_LOOP_MSK)
 195              	 .loc 1 98 0
 196 00f4 0B4B     	 ldr r3,.L10+20
 197 00f6 1B78     	 ldrb r3,[r3]
 198 00f8 03F00203 	 and r3,r3,#2
 199 00fc 002B     	 cmp r3,#0
 200 00fe 01D0     	 beq .L7
  99:../kernel_interrupt.c **** 			{
 100:../kernel_interrupt.c **** 				pi_regulator_speed();
 201              	 .loc 1 100 0
 202 0100 FFF7FEFF 	 bl pi_regulator_speed
 203              	.L7:
 101:../kernel_interrupt.c **** 			}
 102:../kernel_interrupt.c **** 		}
 103:../kernel_interrupt.c **** 
 104:../kernel_interrupt.c **** 		interrupt_counter_slow_loop = 0;
 204              	 .loc 1 104 0
 205 0104 024B     	 ldr r3,.L10
 206 0106 0022     	 movs r2,#0
 207 0108 1A80     	 strh r2,[r3]
 208              	.L1:
 105:../kernel_interrupt.c **** 	}
 106:../kernel_interrupt.c **** }
 209              	 .loc 1 106 0
 210 010a 0837     	 adds r7,r7,#8
 211              	.LCFI3:
 212              	 .cfi_def_cfa_offset 8
 213 010c BD46     	 mov sp,r7
 214              	.LCFI4:
 215              	 .cfi_def_cfa_register 13
 216              	 
 217 010e 80BD     	 pop {r7,pc}
 218              	.L11:
 219              	 .align 2
 220              	.L10:
 221 0110 00000000 	 .word interrupt_counter_slow_loop
 222 0114 00000000 	 .word interrupt_counter_fast_loop
 223 0118 00000000 	 .word interrupt_counter_timer
 224 011c 00000000 	 .word motion_config
 225 0120 00000000 	 .word prot_status
 226 0124 00000000 	 .word loop_control
 227 0128 00000000 	 .word u_a_ref
 228 012c 00000000 	 .word u_b_ref
 229 0130 00000000 	 .word ref_gen_status
 230 0134 00000000 	 .word interrupt_counter_ref_gen
 231              	 .cfi_endproc
 232              	.LFE196:
 234              	 .section .text.CCU81_0_IRQHandler,"ax",%progbits
 235              	 .align 2
 236              	 .global CCU81_0_IRQHandler
 237              	 .thumb
 238              	 .thumb_func
 240              	CCU81_0_IRQHandler:
 241              	.LFB197:
 107:../kernel_interrupt.c **** 
 108:../kernel_interrupt.c **** /*
 109:../kernel_interrupt.c ****  * Interrupt with low priority every 0.2ms
 110:../kernel_interrupt.c ****  */
 111:../kernel_interrupt.c **** void CCU81_0_IRQHandler(void)
 112:../kernel_interrupt.c **** {
 242              	 .loc 1 112 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	 
 247 0000 80B4     	 push {r7}
 248              	.LCFI5:
 249              	 .cfi_def_cfa_offset 4
 250              	 .cfi_offset 7,-4
 251 0002 00AF     	 add r7,sp,#0
 252              	.LCFI6:
 253              	 .cfi_def_cfa_register 7
 113:../kernel_interrupt.c **** 	// interrupt_counter_timer++;
 114:../kernel_interrupt.c **** }
 254              	 .loc 1 114 0
 255 0004 BD46     	 mov sp,r7
 256              	.LCFI7:
 257              	 .cfi_def_cfa_register 13
 258              	 
 259 0006 5DF8047B 	 ldr r7,[sp],#4
 260              	.LCFI8:
 261              	 .cfi_restore 7
 262              	 .cfi_def_cfa_offset 0
 263 000a 7047     	 bx lr
 264              	 .cfi_endproc
 265              	.LFE197:
 267              	 .text
 268              	.Letext0:
 269              	 .file 2 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 270              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 271              	 .file 4 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\math.h"
 272              	 .file 5 "../reference_generator.h"
 273              	 .file 6 "C:/GitHub/Stepper_drive/Libraries/CMSIS/Include/core_cm4.h"
 274              	 .file 7 "../main.h"
 275              	 .file 8 "../driver_adc.h"
 276              	 .file 9 "../transform.h"
 277              	 .file 10 "../state_machine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 kernel_interrupt.c
                            *COM*:00000004 CCU8_CC8_CR1_CR1_Value
    {standard input}:25     .bss.interrupt_counter_slow_loop:00000000 interrupt_counter_slow_loop
    {standard input}:22     .bss.interrupt_counter_slow_loop:00000000 $d
    {standard input}:32     .bss.interrupt_counter_fast_loop:00000000 interrupt_counter_fast_loop
    {standard input}:29     .bss.interrupt_counter_fast_loop:00000000 $d
    {standard input}:39     .bss.interrupt_counter_timer:00000000 interrupt_counter_timer
    {standard input}:36     .bss.interrupt_counter_timer:00000000 $d
    {standard input}:42     .text.VADC0_G0_2_IRQHandler:00000000 $t
    {standard input}:47     .text.VADC0_G0_2_IRQHandler:00000000 VADC0_G0_2_IRQHandler
    {standard input}:221    .text.VADC0_G0_2_IRQHandler:00000110 $d
    {standard input}:235    .text.CCU81_0_IRQHandler:00000000 $t
    {standard input}:240    .text.CCU81_0_IRQHandler:00000000 CCU81_0_IRQHandler
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
read_currents
compute_currents
compute_u_mot
compute_u_log
compute_fast_speed
compute_fast_mechanical_position
compute_fast_electrical_position
compute_fast_field
abc_dq
current_protection
pi_regulator_i_d
pi_regulator_i_q
dq_abc
pwm_update
ProbeScope_Sampling
compute_speed
reference_generator
pid_regulator_pos
pi_regulator_speed
motion_config
prot_status
loop_control
u_a_ref
u_b_ref
ref_gen_status
interrupt_counter_ref_gen
