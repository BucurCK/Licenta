   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "kernel_interrupt.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm CCU8_CC8_CR1_CR1_Value,4,4
  20              	 .global interrupt_counter_slow_loop
  21              	 .section .bss.interrupt_counter_slow_loop,"aw",%nobits
  22              	 .align 1
  25              	interrupt_counter_slow_loop:
  26 0000 0000     	 .space 2
  27              	 .global interrupt_counter_fast_loop
  28              	 .section .bss.interrupt_counter_fast_loop,"aw",%nobits
  29              	 .align 1
  32              	interrupt_counter_fast_loop:
  33 0000 0000     	 .space 2
  34              	 .global interrupt_counter_timer
  35              	 .section .bss.interrupt_counter_timer,"aw",%nobits
  36              	 .align 1
  39              	interrupt_counter_timer:
  40 0000 0000     	 .space 2
  41              	 .section .text.VADC0_G0_2_IRQHandler,"ax",%progbits
  42              	 .align 2
  43              	 .global VADC0_G0_2_IRQHandler
  44              	 .thumb
  45              	 .thumb_func
  47              	VADC0_G0_2_IRQHandler:
  48              	.LFB196:
  49              	 .file 1 "../kernel_interrupt.c"
   1:../kernel_interrupt.c **** #include <stdint.h>
   2:../kernel_interrupt.c **** #include <stdbool.h>
   3:../kernel_interrupt.c **** #include <xmc_common.h> // includes stdint stdbool stdef stdstring
   4:../kernel_interrupt.c **** #include "driver_pwm.h"
   5:../kernel_interrupt.c **** #include "main.h"
   6:../kernel_interrupt.c **** #include "motor_data_update.h"
   7:../kernel_interrupt.c **** #include "driver_adc.h"
   8:../kernel_interrupt.c **** #include "transform.h"
   9:../kernel_interrupt.c **** #include "io.h"
  10:../kernel_interrupt.c **** #include <probe_scope.h>
  11:../kernel_interrupt.c **** #include "Encoder.h"
  12:../kernel_interrupt.c **** #include "timer.h"
  13:../kernel_interrupt.c **** #include "motor_data_update.h"
  14:../kernel_interrupt.c **** #include "state_machine.h"
  15:../kernel_interrupt.c **** #include "pi_regulator.h"
  16:../kernel_interrupt.c **** #include "reference_generator.h"
  17:../kernel_interrupt.c **** #include "current_protection.h"
  18:../kernel_interrupt.c **** 
  19:../kernel_interrupt.c **** #include "kernel_interrupt.h"
  20:../kernel_interrupt.c **** 
  21:../kernel_interrupt.c **** uint16_t interrupt_counter_slow_loop = 0; // Slow Loop counter
  22:../kernel_interrupt.c **** uint16_t interrupt_counter_fast_loop = 0; // Fast Loop couner
  23:../kernel_interrupt.c **** uint16_t interrupt_counter_timer = 0;	  // Timer Counter
  24:../kernel_interrupt.c **** 
  25:../kernel_interrupt.c **** /********************************************************************/
  26:../kernel_interrupt.c **** // TESTING
  27:../kernel_interrupt.c **** //  float_t signal_ia_test = 0, signal_ib_test = 0, signal_ic_test = 0;
  28:../kernel_interrupt.c **** //  float_t increment_2_pi = 0;
  29:../kernel_interrupt.c **** //  float_t sin_increment_2_pi, cos_increment_2_pi;
  30:../kernel_interrupt.c **** //  float_t sin_plus_cos;
  31:../kernel_interrupt.c **** /********************************************************************/
  32:../kernel_interrupt.c **** 
  33:../kernel_interrupt.c **** void VADC0_G0_2_IRQHandler(void)
  34:../kernel_interrupt.c **** {
  50              	 .loc 1 34 0
  51              	 .cfi_startproc
  52              	 
  53              	 
  54 0000 80B5     	 push {r7,lr}
  55              	.LCFI0:
  56              	 .cfi_def_cfa_offset 8
  57              	 .cfi_offset 7,-8
  58              	 .cfi_offset 14,-4
  59 0002 82B0     	 sub sp,sp,#8
  60              	.LCFI1:
  61              	 .cfi_def_cfa_offset 16
  62 0004 00AF     	 add r7,sp,#0
  63              	.LCFI2:
  64              	 .cfi_def_cfa_register 7
  35:../kernel_interrupt.c **** 	interrupt_counter_slow_loop++;
  65              	 .loc 1 35 0
  66 0006 4A4B     	 ldr r3,.L9
  67 0008 1B88     	 ldrh r3,[r3]
  68 000a 0133     	 adds r3,r3,#1
  69 000c 9AB2     	 uxth r2,r3
  70 000e 484B     	 ldr r3,.L9
  71 0010 1A80     	 strh r2,[r3]
  36:../kernel_interrupt.c **** 	interrupt_counter_fast_loop++;
  72              	 .loc 1 36 0
  73 0012 484B     	 ldr r3,.L9+4
  74 0014 1B88     	 ldrh r3,[r3]
  75 0016 0133     	 adds r3,r3,#1
  76 0018 9AB2     	 uxth r2,r3
  77 001a 464B     	 ldr r3,.L9+4
  78 001c 1A80     	 strh r2,[r3]
  37:../kernel_interrupt.c **** 	interrupt_counter_timer++;
  79              	 .loc 1 37 0
  80 001e 464B     	 ldr r3,.L9+8
  81 0020 1B88     	 ldrh r3,[r3]
  82 0022 0133     	 adds r3,r3,#1
  83 0024 9AB2     	 uxth r2,r3
  84 0026 444B     	 ldr r3,.L9+8
  85 0028 1A80     	 strh r2,[r3]
  38:../kernel_interrupt.c **** 	/*
  39:../kernel_interrupt.c **** 	 * Fast compute "loop"
  40:../kernel_interrupt.c **** 	 * Every 100us compute speed,mechanical/electrical position, field, dq_abc transformation
  41:../kernel_interrupt.c **** 	 */
  42:../kernel_interrupt.c **** 	if (TIME_100_us == interrupt_counter_fast_loop)
  86              	 .loc 1 42 0
  87 002a 424B     	 ldr r3,.L9+4
  88 002c 1B88     	 ldrh r3,[r3]
  89 002e 022B     	 cmp r3,#2
  90 0030 4FD1     	 bne .L2
  43:../kernel_interrupt.c **** 	{
  44:../kernel_interrupt.c **** 
  45:../kernel_interrupt.c **** 		// Read and compute into [SI] all currents
  46:../kernel_interrupt.c **** 		read_currents();
  91              	 .loc 1 46 0
  92 0032 FFF7FEFF 	 bl read_currents
  47:../kernel_interrupt.c **** 		compute_currents();
  93              	 .loc 1 47 0
  94 0036 FFF7FEFF 	 bl compute_currents
  48:../kernel_interrupt.c **** 		compute_u_mot();
  95              	 .loc 1 48 0
  96 003a FFF7FEFF 	 bl compute_u_mot
  49:../kernel_interrupt.c **** 		compute_u_log();
  97              	 .loc 1 49 0
  98 003e FFF7FEFF 	 bl compute_u_log
  50:../kernel_interrupt.c **** 
  51:../kernel_interrupt.c **** 		// Compute all data for motor movement in Operation Enable
  52:../kernel_interrupt.c **** 		if (motion_config)
  99              	 .loc 1 52 0
 100 0042 3E4B     	 ldr r3,.L9+12
 101 0044 1B78     	 ldrb r3,[r3]
 102 0046 002B     	 cmp r3,#0
 103 0048 40D0     	 beq .L3
  53:../kernel_interrupt.c **** 		{
  54:../kernel_interrupt.c **** 			compute_fast_speed();
 104              	 .loc 1 54 0
 105 004a FFF7FEFF 	 bl compute_fast_speed
  55:../kernel_interrupt.c **** 			compute_fast_mechanical_position();
 106              	 .loc 1 55 0
 107 004e FFF7FEFF 	 bl compute_fast_mechanical_position
  56:../kernel_interrupt.c **** 			compute_fast_electrical_position();
 108              	 .loc 1 56 0
 109 0052 FFF7FEFF 	 bl compute_fast_electrical_position
  57:../kernel_interrupt.c **** 			compute_fast_field();
 110              	 .loc 1 57 0
 111 0056 FFF7FEFF 	 bl compute_fast_field
  58:../kernel_interrupt.c **** 			abc_dq();
 112              	 .loc 1 58 0
 113 005a FFF7FEFF 	 bl abc_dq
  59:../kernel_interrupt.c **** 			current_protection();
 114              	 .loc 1 59 0
 115 005e FFF7FEFF 	 bl current_protection
  60:../kernel_interrupt.c **** 
  61:../kernel_interrupt.c **** 			// Add Fast Loop regulators
  62:../kernel_interrupt.c **** 			if (LOOP_CONTROL_ON == loop_control)
 116              	 .loc 1 62 0
 117 0062 374B     	 ldr r3,.L9+16
 118 0064 1B78     	 ldrb r3,[r3]
 119 0066 012B     	 cmp r3,#1
 120 0068 09D1     	 bne .L4
  63:../kernel_interrupt.c **** 			{
  64:../kernel_interrupt.c **** 				if (LOOP_I_ENABLE)
 121              	 .loc 1 64 0
 122 006a 364B     	 ldr r3,.L9+20
 123 006c 1B88     	 ldrh r3,[r3]
 124 006e 03F48073 	 and r3,r3,#256
 125 0072 002B     	 cmp r3,#0
 126 0074 03D0     	 beq .L4
  65:../kernel_interrupt.c **** 				{
  66:../kernel_interrupt.c **** 					pi_regulator_i_d();
 127              	 .loc 1 66 0
 128 0076 FFF7FEFF 	 bl pi_regulator_i_d
  67:../kernel_interrupt.c **** 					pi_regulator_i_q();
 129              	 .loc 1 67 0
 130 007a FFF7FEFF 	 bl pi_regulator_i_q
 131              	.L4:
  68:../kernel_interrupt.c **** 				}
  69:../kernel_interrupt.c **** 			}
  70:../kernel_interrupt.c **** 
  71:../kernel_interrupt.c **** 			dq_abc();
 132              	 .loc 1 71 0
 133 007e FFF7FEFF 	 bl dq_abc
  72:../kernel_interrupt.c **** 			pwm_update(u_a_ref, u_b_ref, u_c_ref);
 134              	 .loc 1 72 0
 135 0082 314B     	 ldr r3,.L9+24
 136 0084 D3ED007A 	 flds s15,[r3]
 137 0088 FDEEE77A 	 ftosizs s15,s15
 138 008c C7ED017A 	 fsts s15,[r7,#4]
 139 0090 BB88     	 ldrh r3,[r7,#4]
 140 0092 99B2     	 uxth r1,r3
 141 0094 2D4B     	 ldr r3,.L9+28
 142 0096 D3ED007A 	 flds s15,[r3]
 143 009a FDEEE77A 	 ftosizs s15,s15
 144 009e C7ED017A 	 fsts s15,[r7,#4]
 145 00a2 BB88     	 ldrh r3,[r7,#4]
 146 00a4 9AB2     	 uxth r2,r3
 147 00a6 2A4B     	 ldr r3,.L9+32
 148 00a8 D3ED007A 	 flds s15,[r3]
 149 00ac FDEEE77A 	 ftosizs s15,s15
 150 00b0 C7ED017A 	 fsts s15,[r7,#4]
 151 00b4 BB88     	 ldrh r3,[r7,#4]
 152 00b6 9BB2     	 uxth r3,r3
 153 00b8 09B2     	 sxth r1,r1
 154 00ba 12B2     	 sxth r2,r2
 155 00bc 1BB2     	 sxth r3,r3
 156 00be 0846     	 mov r0,r1
 157 00c0 1146     	 mov r1,r2
 158 00c2 1A46     	 mov r2,r3
 159 00c4 FFF7FEFF 	 bl pwm_update
  73:../kernel_interrupt.c **** 
  74:../kernel_interrupt.c **** 			ProbeScope_Sampling(); // For Micrium Osciloscope
 160              	 .loc 1 74 0
 161 00c8 FFF7FEFF 	 bl ProbeScope_Sampling
 162              	.L3:
  75:../kernel_interrupt.c **** 		}
  76:../kernel_interrupt.c **** 
  77:../kernel_interrupt.c **** 		interrupt_counter_fast_loop = 0;
 163              	 .loc 1 77 0
 164 00cc 194B     	 ldr r3,.L9+4
 165 00ce 0022     	 movs r2,#0
 166 00d0 1A80     	 strh r2,[r3]
 167              	.L2:
  78:../kernel_interrupt.c **** 	}
  79:../kernel_interrupt.c **** 	/*
  80:../kernel_interrupt.c **** 	 * Slow compute loop
  81:../kernel_interrupt.c **** 	 * Every 1ms compute speed
  82:../kernel_interrupt.c **** 	 */
  83:../kernel_interrupt.c **** 	if (TIME_1_ms == interrupt_counter_slow_loop)
 168              	 .loc 1 83 0
 169 00d2 174B     	 ldr r3,.L9
 170 00d4 1B88     	 ldrh r3,[r3]
 171 00d6 142B     	 cmp r3,#20
 172 00d8 27D1     	 bne .L1
  84:../kernel_interrupt.c **** 	{
  85:../kernel_interrupt.c **** 		// Reference Generator function and timer
  86:../kernel_interrupt.c **** 		if (STATUS_0_DISABLED != ref_gen_status)
 173              	 .loc 1 86 0
 174 00da 1E4B     	 ldr r3,.L9+36
 175 00dc 1B78     	 ldrb r3,[r3]
 176 00de 002B     	 cmp r3,#0
 177 00e0 06D0     	 beq .L6
  87:../kernel_interrupt.c **** 		{
  88:../kernel_interrupt.c **** 			interrupt_counter_ref_gen++;
 178              	 .loc 1 88 0
 179 00e2 1D4B     	 ldr r3,.L9+40
 180 00e4 1B68     	 ldr r3,[r3]
 181 00e6 0133     	 adds r3,r3,#1
 182 00e8 1B4A     	 ldr r2,.L9+40
 183 00ea 1360     	 str r3,[r2]
  89:../kernel_interrupt.c **** 			reference_generator();
 184              	 .loc 1 89 0
 185 00ec FFF7FEFF 	 bl reference_generator
 186              	.L6:
  90:../kernel_interrupt.c **** 		}
  91:../kernel_interrupt.c **** 
  92:../kernel_interrupt.c **** 		if (motion_config)
 187              	 .loc 1 92 0
 188 00f0 124B     	 ldr r3,.L9+12
 189 00f2 1B78     	 ldrb r3,[r3]
 190 00f4 002B     	 cmp r3,#0
 191 00f6 15D0     	 beq .L7
  93:../kernel_interrupt.c **** 		{
  94:../kernel_interrupt.c **** 			compute_speed(); // Compute motor speed
 192              	 .loc 1 94 0
 193 00f8 FFF7FEFF 	 bl compute_speed
  95:../kernel_interrupt.c **** 
  96:../kernel_interrupt.c **** 			if (LOOP_CONTROL_ON == loop_control)
 194              	 .loc 1 96 0
 195 00fc 104B     	 ldr r3,.L9+16
 196 00fe 1B78     	 ldrb r3,[r3]
 197 0100 012B     	 cmp r3,#1
 198 0102 0FD1     	 bne .L7
  97:../kernel_interrupt.c **** 			{
  98:../kernel_interrupt.c **** 				// Slow loop regulators
  99:../kernel_interrupt.c **** 				if (LOOP_POS_ENABLE)
 199              	 .loc 1 99 0
 200 0104 0F4B     	 ldr r3,.L9+20
 201 0106 1B88     	 ldrh r3,[r3]
 202 0108 03F48063 	 and r3,r3,#1024
 203 010c 002B     	 cmp r3,#0
 204 010e 01D0     	 beq .L8
 100:../kernel_interrupt.c **** 				{
 101:../kernel_interrupt.c **** 					pid_regulator_pos();
 205              	 .loc 1 101 0
 206 0110 FFF7FEFF 	 bl pid_regulator_pos
 207              	.L8:
 102:../kernel_interrupt.c **** 				}
 103:../kernel_interrupt.c **** 				if (LOOP_SPD_ENABLE)
 208              	 .loc 1 103 0
 209 0114 0B4B     	 ldr r3,.L9+20
 210 0116 1B88     	 ldrh r3,[r3]
 211 0118 03F40073 	 and r3,r3,#512
 212 011c 002B     	 cmp r3,#0
 213 011e 01D0     	 beq .L7
 104:../kernel_interrupt.c **** 				{
 105:../kernel_interrupt.c **** 					pi_regulator_speed();
 214              	 .loc 1 105 0
 215 0120 FFF7FEFF 	 bl pi_regulator_speed
 216              	.L7:
 106:../kernel_interrupt.c **** 				}
 107:../kernel_interrupt.c **** 			}
 108:../kernel_interrupt.c **** 		}
 109:../kernel_interrupt.c **** 
 110:../kernel_interrupt.c **** 		interrupt_counter_slow_loop = 0;
 217              	 .loc 1 110 0
 218 0124 024B     	 ldr r3,.L9
 219 0126 0022     	 movs r2,#0
 220 0128 1A80     	 strh r2,[r3]
 221              	.L1:
 111:../kernel_interrupt.c **** 	}
 112:../kernel_interrupt.c **** }
 222              	 .loc 1 112 0
 223 012a 0837     	 adds r7,r7,#8
 224              	.LCFI3:
 225              	 .cfi_def_cfa_offset 8
 226 012c BD46     	 mov sp,r7
 227              	.LCFI4:
 228              	 .cfi_def_cfa_register 13
 229              	 
 230 012e 80BD     	 pop {r7,pc}
 231              	.L10:
 232              	 .align 2
 233              	.L9:
 234 0130 00000000 	 .word interrupt_counter_slow_loop
 235 0134 00000000 	 .word interrupt_counter_fast_loop
 236 0138 00000000 	 .word interrupt_counter_timer
 237 013c 00000000 	 .word motion_config
 238 0140 00000000 	 .word loop_control
 239 0144 00000000 	 .word drive_command_old
 240 0148 00000000 	 .word u_a_ref
 241 014c 00000000 	 .word u_b_ref
 242 0150 00000000 	 .word u_c_ref
 243 0154 00000000 	 .word ref_gen_status
 244 0158 00000000 	 .word interrupt_counter_ref_gen
 245              	 .cfi_endproc
 246              	.LFE196:
 248              	 .text
 249              	.Letext0:
 250              	 .file 2 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 251              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 252              	 .file 4 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\math.h"
 253              	 .file 5 "../reference_generator.h"
 254              	 .file 6 "C:/CODE/Licenta/Libraries/CMSIS/Include/core_cm4.h"
 255              	 .file 7 "../main.h"
 256              	 .file 8 "../transform.h"
 257              	 .file 9 "../state_machine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 kernel_interrupt.c
                            *COM*:00000004 CCU8_CC8_CR1_CR1_Value
    {standard input}:25     .bss.interrupt_counter_slow_loop:00000000 interrupt_counter_slow_loop
    {standard input}:22     .bss.interrupt_counter_slow_loop:00000000 $d
    {standard input}:32     .bss.interrupt_counter_fast_loop:00000000 interrupt_counter_fast_loop
    {standard input}:29     .bss.interrupt_counter_fast_loop:00000000 $d
    {standard input}:39     .bss.interrupt_counter_timer:00000000 interrupt_counter_timer
    {standard input}:36     .bss.interrupt_counter_timer:00000000 $d
    {standard input}:42     .text.VADC0_G0_2_IRQHandler:00000000 $t
    {standard input}:47     .text.VADC0_G0_2_IRQHandler:00000000 VADC0_G0_2_IRQHandler
    {standard input}:234    .text.VADC0_G0_2_IRQHandler:00000130 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
read_currents
compute_currents
compute_u_mot
compute_u_log
compute_fast_speed
compute_fast_mechanical_position
compute_fast_electrical_position
compute_fast_field
abc_dq
current_protection
pi_regulator_i_d
pi_regulator_i_q
dq_abc
pwm_update
ProbeScope_Sampling
reference_generator
compute_speed
pid_regulator_pos
pi_regulator_speed
motion_config
loop_control
drive_command_old
u_a_ref
u_b_ref
u_c_ref
ref_gen_status
interrupt_counter_ref_gen
