   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "kernel_interrupt.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm CCU8_CC8_CR1_CR1_Value,4,4
  20              	 .global interrupt_counter_slow_loop
  21              	 .section .bss.interrupt_counter_slow_loop,"aw",%nobits
  22              	 .align 1
  25              	interrupt_counter_slow_loop:
  26 0000 0000     	 .space 2
  27              	 .global interrupt_counter_fast_loop
  28              	 .section .bss.interrupt_counter_fast_loop,"aw",%nobits
  29              	 .align 1
  32              	interrupt_counter_fast_loop:
  33 0000 0000     	 .space 2
  34              	 .global interrupt_counter_timer
  35              	 .section .bss.interrupt_counter_timer,"aw",%nobits
  36              	 .align 2
  39              	interrupt_counter_timer:
  40 0000 00000000 	 .space 4
  41              	 .section .text.VADC0_G0_2_IRQHandler,"ax",%progbits
  42              	 .align 2
  43              	 .global VADC0_G0_2_IRQHandler
  44              	 .thumb
  45              	 .thumb_func
  47              	VADC0_G0_2_IRQHandler:
  48              	.LFB196:
  49              	 .file 1 "../kernel_interrupt.c"
   1:../kernel_interrupt.c **** #include <stdint.h>
   2:../kernel_interrupt.c **** #include <stdbool.h>
   3:../kernel_interrupt.c **** #include <xmc_common.h> // includes stdint stdbool stdef stdstring
   4:../kernel_interrupt.c **** #include "driver_pwm.h"
   5:../kernel_interrupt.c **** #include "main.h"
   6:../kernel_interrupt.c **** #include "motor_data_update.h"
   7:../kernel_interrupt.c **** #include "driver_adc.h"
   8:../kernel_interrupt.c **** #include "transform.h"
   9:../kernel_interrupt.c **** #include "io.h"
  10:../kernel_interrupt.c **** #include <probe_scope.h>
  11:../kernel_interrupt.c **** #include "Encoder.h"
  12:../kernel_interrupt.c **** #include "timer.h"
  13:../kernel_interrupt.c **** #include "motor_data_update.h"
  14:../kernel_interrupt.c **** #include "state_machine.h"
  15:../kernel_interrupt.c **** #include "pi_regulator.h"
  16:../kernel_interrupt.c **** #include "reference_generator.h"
  17:../kernel_interrupt.c **** #include "current_protection.h"
  18:../kernel_interrupt.c **** #include "kernel_interrupt.h"
  19:../kernel_interrupt.c **** 
  20:../kernel_interrupt.c **** uint16_t interrupt_counter_slow_loop = 0; // Slow Loop counter
  21:../kernel_interrupt.c **** uint16_t interrupt_counter_fast_loop = 0; // Fast Loop couner
  22:../kernel_interrupt.c **** uint32_t interrupt_counter_timer = 0;	  // Timer Counter
  23:../kernel_interrupt.c **** 
  24:../kernel_interrupt.c **** /********************************************************************/
  25:../kernel_interrupt.c **** //// FOR TESTING
  26:../kernel_interrupt.c **** //  float_t signal_ia_test = 0, signal_ib_test = 0, signal_ic_test = 0;
  27:../kernel_interrupt.c **** //  float_t increment_2_pi = 0;
  28:../kernel_interrupt.c **** //  float_t sin_increment_2_pi, cos_increment_2_pi;
  29:../kernel_interrupt.c **** //  float_t sin_plus_cos;
  30:../kernel_interrupt.c **** /********************************************************************/
  31:../kernel_interrupt.c **** 
  32:../kernel_interrupt.c **** void VADC0_G0_2_IRQHandler(void)
  33:../kernel_interrupt.c **** {
  50              	 .loc 1 33 0
  51              	 .cfi_startproc
  52              	 
  53              	 
  54 0000 80B5     	 push {r7,lr}
  55              	.LCFI0:
  56              	 .cfi_def_cfa_offset 8
  57              	 .cfi_offset 7,-8
  58              	 .cfi_offset 14,-4
  59 0002 82B0     	 sub sp,sp,#8
  60              	.LCFI1:
  61              	 .cfi_def_cfa_offset 16
  62 0004 00AF     	 add r7,sp,#0
  63              	.LCFI2:
  64              	 .cfi_def_cfa_register 7
  34:../kernel_interrupt.c **** 	interrupt_counter_slow_loop++;
  65              	 .loc 1 34 0
  66 0006 484B     	 ldr r3,.L10
  67 0008 1B88     	 ldrh r3,[r3]
  68 000a 0133     	 adds r3,r3,#1
  69 000c 9AB2     	 uxth r2,r3
  70 000e 464B     	 ldr r3,.L10
  71 0010 1A80     	 strh r2,[r3]
  35:../kernel_interrupt.c **** 	interrupt_counter_fast_loop++;
  72              	 .loc 1 35 0
  73 0012 464B     	 ldr r3,.L10+4
  74 0014 1B88     	 ldrh r3,[r3]
  75 0016 0133     	 adds r3,r3,#1
  76 0018 9AB2     	 uxth r2,r3
  77 001a 444B     	 ldr r3,.L10+4
  78 001c 1A80     	 strh r2,[r3]
  36:../kernel_interrupt.c **** 	interrupt_counter_timer++;
  79              	 .loc 1 36 0
  80 001e 444B     	 ldr r3,.L10+8
  81 0020 1B68     	 ldr r3,[r3]
  82 0022 0133     	 adds r3,r3,#1
  83 0024 424A     	 ldr r2,.L10+8
  84 0026 1360     	 str r3,[r2]
  37:../kernel_interrupt.c **** 	/*
  38:../kernel_interrupt.c **** 	 * Fast compute "loop"
  39:../kernel_interrupt.c **** 	 * Every 100us compute speed,mechanical/electrical position, field, dq_abc transformation
  40:../kernel_interrupt.c **** 	 */
  41:../kernel_interrupt.c **** 	if (TIME_100_us == interrupt_counter_fast_loop)
  85              	 .loc 1 41 0
  86 0028 404B     	 ldr r3,.L10+4
  87 002a 1B88     	 ldrh r3,[r3]
  88 002c 022B     	 cmp r3,#2
  89 002e 4FD1     	 bne .L2
  42:../kernel_interrupt.c **** 	{
  43:../kernel_interrupt.c **** 
  44:../kernel_interrupt.c **** 		// Read and compute into [SI] all currents
  45:../kernel_interrupt.c **** 		read_currents();
  90              	 .loc 1 45 0
  91 0030 FFF7FEFF 	 bl read_currents
  46:../kernel_interrupt.c **** 		compute_currents();
  92              	 .loc 1 46 0
  93 0034 FFF7FEFF 	 bl compute_currents
  47:../kernel_interrupt.c **** 		compute_u_mot();
  94              	 .loc 1 47 0
  95 0038 FFF7FEFF 	 bl compute_u_mot
  48:../kernel_interrupt.c **** 		compute_u_log();
  96              	 .loc 1 48 0
  97 003c FFF7FEFF 	 bl compute_u_log
  49:../kernel_interrupt.c **** 
  50:../kernel_interrupt.c **** 		// Compute all data for motor movement in Operation Enable
  51:../kernel_interrupt.c **** 		if (motion_config)
  98              	 .loc 1 51 0
  99 0040 3C4B     	 ldr r3,.L10+12
 100 0042 1B78     	 ldrb r3,[r3]
 101 0044 002B     	 cmp r3,#0
 102 0046 3AD0     	 beq .L3
  52:../kernel_interrupt.c **** 		{
  53:../kernel_interrupt.c **** 			compute_fast_speed();
 103              	 .loc 1 53 0
 104 0048 FFF7FEFF 	 bl compute_fast_speed
  54:../kernel_interrupt.c **** 			compute_fast_mechanical_position();
 105              	 .loc 1 54 0
 106 004c FFF7FEFF 	 bl compute_fast_mechanical_position
  55:../kernel_interrupt.c **** 			compute_fast_electrical_position();
 107              	 .loc 1 55 0
 108 0050 FFF7FEFF 	 bl compute_fast_electrical_position
  56:../kernel_interrupt.c **** 			compute_fast_field();
 109              	 .loc 1 56 0
 110 0054 FFF7FEFF 	 bl compute_fast_field
  57:../kernel_interrupt.c **** 			abc_dq();
 111              	 .loc 1 57 0
 112 0058 FFF7FEFF 	 bl abc_dq
  58:../kernel_interrupt.c **** 
  59:../kernel_interrupt.c **** 			// Add Fast Loop regulators
  60:../kernel_interrupt.c **** 			if (loop_control & I_REF_LOOP_MSK)
 113              	 .loc 1 60 0
 114 005c 364B     	 ldr r3,.L10+16
 115 005e 1B78     	 ldrb r3,[r3]
 116 0060 03F00103 	 and r3,r3,#1
 117 0064 002B     	 cmp r3,#0
 118 0066 03D0     	 beq .L4
  61:../kernel_interrupt.c **** 			{
  62:../kernel_interrupt.c **** 				pi_regulator_i_d();
 119              	 .loc 1 62 0
 120 0068 FFF7FEFF 	 bl pi_regulator_i_d
  63:../kernel_interrupt.c **** 				pi_regulator_i_q();
 121              	 .loc 1 63 0
 122 006c FFF7FEFF 	 bl pi_regulator_i_q
 123              	.L4:
  64:../kernel_interrupt.c **** 			}
  65:../kernel_interrupt.c **** 
  66:../kernel_interrupt.c **** 			dq_abc();
 124              	 .loc 1 66 0
 125 0070 FFF7FEFF 	 bl dq_abc
  67:../kernel_interrupt.c **** 			pwm_update(u_a_ref, u_b_ref, u_c_ref);
 126              	 .loc 1 67 0
 127 0074 314B     	 ldr r3,.L10+20
 128 0076 D3ED007A 	 flds s15,[r3]
 129 007a FDEEE77A 	 ftosizs s15,s15
 130 007e C7ED017A 	 fsts s15,[r7,#4]
 131 0082 BB88     	 ldrh r3,[r7,#4]
 132 0084 99B2     	 uxth r1,r3
 133 0086 2E4B     	 ldr r3,.L10+24
 134 0088 D3ED007A 	 flds s15,[r3]
 135 008c FDEEE77A 	 ftosizs s15,s15
 136 0090 C7ED017A 	 fsts s15,[r7,#4]
 137 0094 BB88     	 ldrh r3,[r7,#4]
 138 0096 9AB2     	 uxth r2,r3
 139 0098 2A4B     	 ldr r3,.L10+28
 140 009a D3ED007A 	 flds s15,[r3]
 141 009e FDEEE77A 	 ftosizs s15,s15
 142 00a2 C7ED017A 	 fsts s15,[r7,#4]
 143 00a6 BB88     	 ldrh r3,[r7,#4]
 144 00a8 9BB2     	 uxth r3,r3
 145 00aa 09B2     	 sxth r1,r1
 146 00ac 12B2     	 sxth r2,r2
 147 00ae 1BB2     	 sxth r3,r3
 148 00b0 0846     	 mov r0,r1
 149 00b2 1146     	 mov r1,r2
 150 00b4 1A46     	 mov r2,r3
 151 00b6 FFF7FEFF 	 bl pwm_update
  68:../kernel_interrupt.c **** 
  69:../kernel_interrupt.c **** 			ProbeScope_Sampling(); // For Micrium Osciloscope
 152              	 .loc 1 69 0
 153 00ba FFF7FEFF 	 bl ProbeScope_Sampling
 154              	.L3:
  70:../kernel_interrupt.c **** 		}
  71:../kernel_interrupt.c **** 
  72:../kernel_interrupt.c **** 		if (prot_status)
 155              	 .loc 1 72 0
 156 00be 224B     	 ldr r3,.L10+32
 157 00c0 1B78     	 ldrb r3,[r3]
 158 00c2 002B     	 cmp r3,#0
 159 00c4 01D0     	 beq .L5
  73:../kernel_interrupt.c **** 		{
  74:../kernel_interrupt.c **** 			current_protection();
 160              	 .loc 1 74 0
 161 00c6 FFF7FEFF 	 bl current_protection
 162              	.L5:
  75:../kernel_interrupt.c **** 		}
  76:../kernel_interrupt.c **** 
  77:../kernel_interrupt.c **** 		interrupt_counter_fast_loop = 0;
 163              	 .loc 1 77 0
 164 00ca 184B     	 ldr r3,.L10+4
 165 00cc 0022     	 movs r2,#0
 166 00ce 1A80     	 strh r2,[r3]
 167              	.L2:
  78:../kernel_interrupt.c **** 	}
  79:../kernel_interrupt.c **** 	/*
  80:../kernel_interrupt.c **** 	 * Slow compute loop
  81:../kernel_interrupt.c **** 	 * Every 1ms compute speed
  82:../kernel_interrupt.c **** 	 */
  83:../kernel_interrupt.c **** 	if (TIME_1_ms == interrupt_counter_slow_loop)
 168              	 .loc 1 83 0
 169 00d0 154B     	 ldr r3,.L10
 170 00d2 1B88     	 ldrh r3,[r3]
 171 00d4 142B     	 cmp r3,#20
 172 00d6 23D1     	 bne .L1
  84:../kernel_interrupt.c **** 	{
  85:../kernel_interrupt.c **** 		if (motion_config)
 173              	 .loc 1 85 0
 174 00d8 164B     	 ldr r3,.L10+12
 175 00da 1B78     	 ldrb r3,[r3]
 176 00dc 002B     	 cmp r3,#0
 177 00de 1CD0     	 beq .L7
  86:../kernel_interrupt.c **** 		{
  87:../kernel_interrupt.c **** 			compute_speed(); // Compute motor speed and position
 178              	 .loc 1 87 0
 179 00e0 FFF7FEFF 	 bl compute_speed
  88:../kernel_interrupt.c **** 
  89:../kernel_interrupt.c **** 			// Reference Generator function and timer  TO DO - CHECK IF STILL WORKS
  90:../kernel_interrupt.c **** 			if (STATUS_0_DISABLED != ref_gen_status)
 180              	 .loc 1 90 0
 181 00e4 194B     	 ldr r3,.L10+36
 182 00e6 1B78     	 ldrb r3,[r3]
 183 00e8 002B     	 cmp r3,#0
 184 00ea 06D0     	 beq .L8
  91:../kernel_interrupt.c **** 			{
  92:../kernel_interrupt.c **** 				interrupt_counter_ref_gen++;
 185              	 .loc 1 92 0
 186 00ec 184B     	 ldr r3,.L10+40
 187 00ee 1B68     	 ldr r3,[r3]
 188 00f0 0133     	 adds r3,r3,#1
 189 00f2 174A     	 ldr r2,.L10+40
 190 00f4 1360     	 str r3,[r2]
  93:../kernel_interrupt.c **** 				reference_generator();
 191              	 .loc 1 93 0
 192 00f6 FFF7FEFF 	 bl reference_generator
 193              	.L8:
  94:../kernel_interrupt.c **** 			}
  95:../kernel_interrupt.c **** 
  96:../kernel_interrupt.c **** 			// Slow loop regulators
  97:../kernel_interrupt.c **** 			if (loop_control & POS_REF_LOOP_MSK)
 194              	 .loc 1 97 0
 195 00fa 0F4B     	 ldr r3,.L10+16
 196 00fc 1B78     	 ldrb r3,[r3]
 197 00fe 03F00403 	 and r3,r3,#4
 198 0102 002B     	 cmp r3,#0
 199 0104 01D0     	 beq .L9
  98:../kernel_interrupt.c **** 			{
  99:../kernel_interrupt.c **** 				pid_regulator_pos();
 200              	 .loc 1 99 0
 201 0106 FFF7FEFF 	 bl pid_regulator_pos
 202              	.L9:
 100:../kernel_interrupt.c **** 			}
 101:../kernel_interrupt.c **** 			if (loop_control & SPD_REF_LOOP_MSK)
 203              	 .loc 1 101 0
 204 010a 0B4B     	 ldr r3,.L10+16
 205 010c 1B78     	 ldrb r3,[r3]
 206 010e 03F00203 	 and r3,r3,#2
 207 0112 002B     	 cmp r3,#0
 208 0114 01D0     	 beq .L7
 102:../kernel_interrupt.c **** 			{
 103:../kernel_interrupt.c **** 				pi_regulator_speed();
 209              	 .loc 1 103 0
 210 0116 FFF7FEFF 	 bl pi_regulator_speed
 211              	.L7:
 104:../kernel_interrupt.c **** 			}
 105:../kernel_interrupt.c **** 		}
 106:../kernel_interrupt.c **** 
 107:../kernel_interrupt.c **** 		interrupt_counter_slow_loop = 0;
 212              	 .loc 1 107 0
 213 011a 034B     	 ldr r3,.L10
 214 011c 0022     	 movs r2,#0
 215 011e 1A80     	 strh r2,[r3]
 216              	.L1:
 108:../kernel_interrupt.c **** 	}
 109:../kernel_interrupt.c **** }
 217              	 .loc 1 109 0
 218 0120 0837     	 adds r7,r7,#8
 219              	.LCFI3:
 220              	 .cfi_def_cfa_offset 8
 221 0122 BD46     	 mov sp,r7
 222              	.LCFI4:
 223              	 .cfi_def_cfa_register 13
 224              	 
 225 0124 80BD     	 pop {r7,pc}
 226              	.L11:
 227 0126 00BF     	 .align 2
 228              	.L10:
 229 0128 00000000 	 .word interrupt_counter_slow_loop
 230 012c 00000000 	 .word interrupt_counter_fast_loop
 231 0130 00000000 	 .word interrupt_counter_timer
 232 0134 00000000 	 .word motion_config
 233 0138 00000000 	 .word loop_control
 234 013c 00000000 	 .word u_a_ref
 235 0140 00000000 	 .word u_b_ref
 236 0144 00000000 	 .word u_c_ref
 237 0148 00000000 	 .word prot_status
 238 014c 00000000 	 .word ref_gen_status
 239 0150 00000000 	 .word interrupt_counter_ref_gen
 240              	 .cfi_endproc
 241              	.LFE196:
 243              	 .section .text.CCU81_0_IRQHandler,"ax",%progbits
 244              	 .align 2
 245              	 .global CCU81_0_IRQHandler
 246              	 .thumb
 247              	 .thumb_func
 249              	CCU81_0_IRQHandler:
 250              	.LFB197:
 110:../kernel_interrupt.c **** 
 111:../kernel_interrupt.c **** /*
 112:../kernel_interrupt.c ****  * Interrupt with low priority every 0.2ms
 113:../kernel_interrupt.c ****  */
 114:../kernel_interrupt.c **** void CCU81_0_IRQHandler(void)
 115:../kernel_interrupt.c **** {
 251              	 .loc 1 115 0
 252              	 .cfi_startproc
 253              	 
 254              	 
 255              	 
 256 0000 80B4     	 push {r7}
 257              	.LCFI5:
 258              	 .cfi_def_cfa_offset 4
 259              	 .cfi_offset 7,-4
 260 0002 00AF     	 add r7,sp,#0
 261              	.LCFI6:
 262              	 .cfi_def_cfa_register 7
 116:../kernel_interrupt.c **** 	// interrupt_counter_timer++;
 117:../kernel_interrupt.c **** }
 263              	 .loc 1 117 0
 264 0004 BD46     	 mov sp,r7
 265              	.LCFI7:
 266              	 .cfi_def_cfa_register 13
 267              	 
 268 0006 5DF8047B 	 ldr r7,[sp],#4
 269              	.LCFI8:
 270              	 .cfi_restore 7
 271              	 .cfi_def_cfa_offset 0
 272 000a 7047     	 bx lr
 273              	 .cfi_endproc
 274              	.LFE197:
 276              	 .text
 277              	.Letext0:
 278              	 .file 2 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 279              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 280              	 .file 4 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\math.h"
 281              	 .file 5 "../reference_generator.h"
 282              	 .file 6 "C:/CODE/Licenta/Libraries/CMSIS/Include/core_cm4.h"
 283              	 .file 7 "../main.h"
 284              	 .file 8 "../driver_adc.h"
 285              	 .file 9 "../transform.h"
 286              	 .file 10 "../state_machine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 kernel_interrupt.c
                            *COM*:00000004 CCU8_CC8_CR1_CR1_Value
    {standard input}:25     .bss.interrupt_counter_slow_loop:00000000 interrupt_counter_slow_loop
    {standard input}:22     .bss.interrupt_counter_slow_loop:00000000 $d
    {standard input}:32     .bss.interrupt_counter_fast_loop:00000000 interrupt_counter_fast_loop
    {standard input}:29     .bss.interrupt_counter_fast_loop:00000000 $d
    {standard input}:39     .bss.interrupt_counter_timer:00000000 interrupt_counter_timer
    {standard input}:36     .bss.interrupt_counter_timer:00000000 $d
    {standard input}:42     .text.VADC0_G0_2_IRQHandler:00000000 $t
    {standard input}:47     .text.VADC0_G0_2_IRQHandler:00000000 VADC0_G0_2_IRQHandler
    {standard input}:229    .text.VADC0_G0_2_IRQHandler:00000128 $d
    {standard input}:244    .text.CCU81_0_IRQHandler:00000000 $t
    {standard input}:249    .text.CCU81_0_IRQHandler:00000000 CCU81_0_IRQHandler
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
read_currents
compute_currents
compute_u_mot
compute_u_log
compute_fast_speed
compute_fast_mechanical_position
compute_fast_electrical_position
compute_fast_field
abc_dq
pi_regulator_i_d
pi_regulator_i_q
dq_abc
pwm_update
ProbeScope_Sampling
current_protection
compute_speed
reference_generator
pid_regulator_pos
pi_regulator_speed
motion_config
loop_control
u_a_ref
u_b_ref
u_c_ref
prot_status
ref_gen_status
interrupt_counter_ref_gen
